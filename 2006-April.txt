From Lada at berlios.de  Sun Apr  2 09:21:19 2006
From: Lada at berlios.de (Lada at berlios.de)
Date: Sun, 2 Apr 2006 09:21:19 +0200
Subject: [Plantlore-dev] r90 - in trunk/src/net/sf/plantlore: common/record config/hibernate
Message-ID: <200604020721.k327LJsK022003@sheep.berlios.de>

Author: Lada
Date: 2006-04-02 09:21:10 +0200 (Sun, 02 Apr 2006)
New Revision: 90

Modified:
   trunk/src/net/sf/plantlore/common/record/HistoryChange.java
   trunk/src/net/sf/plantlore/common/record/Occurrence.java
   trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml
Log:
Occurrence - changed datEsource --> datAsource (by appointment with Jakub). Add attribute tHistoryChange.cOldRecord - necessary for History. -- You can find new database with data in urtax.

Modified: trunk/src/net/sf/plantlore/common/record/HistoryChange.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/HistoryChange.java	2006-03-31 21:38:44 UTC (rev 89)
+++ trunk/src/net/sf/plantlore/common/record/HistoryChange.java	2006-04-02 07:21:10 UTC (rev 90)
@@ -23,12 +23,13 @@
     public static final int HISTORYCHANGE_INSERT = 1;
     public static final int HISTORYCHANGE_EDIT = 2;
     public static final int HISTORYCHANGE_DELETE = 3;
-    public static final int HISTORYCHANGE_INSERTEDIT = 4;    
+    //public static final int HISTORYCHANGE_INSERTEDIT = 4;    
     
     /** Parameters of the HistoryChange. For detailed explanation see data model documentation. */
     private int id;
     private Occurrence occurrence;
-    private int recordId;    
+    private int recordId;
+    private int oldRecordId;
     private int operation;   
     private java.util.Date when;
     private User who;
@@ -37,6 +38,7 @@
     public static final String ID = "id";
     public static final String OCCURRENCE = "occurrence";    
     public static final String RECORDID = "recordId";
+    public static final String OLDRECORDID = "oldRecordId";
     public static final String OPERATION = "operation";
     public static final String WHEN = "when";
     public static final String WHO = "who";    
@@ -103,6 +105,26 @@
     }
 
     /**
+     *   Get old identifier of the record before his changed. 
+     *   This is defined only in case if the identifier was changed.
+     *   @return identifier of the record before his changed. 
+     *   @see setOldRecordId
+     */
+    public int getOldRecordId() {
+        return this.oldRecordId;
+    }
+    
+    /**
+     *  Set old identifier of the record before his changed. 
+     *  This is defined only in case if the identifier was changed.
+     *  @param oldRecordId string containing identifier of the record before his changed.
+     *  @see getOldRecordId
+     */
+    public void setOldRecordId(int oldRecordId) {
+        this.oldRecordId = oldRecordId;
+    }    
+    
+    /**
      *   Get operation which was used. See constants defined for different operations.
      *
      *   @return operation which was used

Modified: trunk/src/net/sf/plantlore/common/record/Occurrence.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-03-31 21:38:44 UTC (rev 89)
+++ trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-04-02 07:21:10 UTC (rev 90)
@@ -33,7 +33,7 @@
     private Integer dayCollected;
     private java.util.Date timeCollected;
     private java.util.Date isoDateTimeBegin;
-    private String dateSource;
+    private String dataSource;
     private Publication publication;
     private String herbarium;
     private java.util.Date createdWhen;
@@ -55,7 +55,7 @@
     public static final String DAYCOLLECTED = "dayCollected";    
     public static final String TIMECOLLECTED = "timeCollected";
     public static final String ISODATETIMEBEGIN = "isoDateTimeBegin";    
-    public static final String DATESOURCE = "dateSource";    
+    public static final String DATESOURCE = "dataSource";    
     public static final String PUBLICATION = "publication";    
     public static final String HERBARIUM = "herbarium";    
     public static final String CREATEDWHEN = "createdWhen";    
@@ -252,21 +252,21 @@
     }
     
     /**
-     *   Get dateSource
-     *   @return dateSource
-     *   @see setDateSource
+     *   Get dataSource
+     *   @return dataSource
+     *   @see setDataSource
      */
-    public String getDateSource() {
-        return this.dateSource;
+    public String getDataSource() {
+        return this.dataSource;
     }
     
     /**
-     *   Set dateSource
-     *   @param dateSource
-     *   @see getNote
+     *   Set dataSource
+     *   @param dataSource
+     *   @see getDataSource
      */
-    public void setDateSource(String dateSource) {
-        this.dateSource = dateSource;
+    public void setDataSource(String dataSource) {
+        this.dataSource = dataSource;
     }        
     
     /**

Modified: trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml	2006-03-31 21:38:44 UTC (rev 89)
+++ trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml	2006-04-02 07:21:10 UTC (rev 90)
@@ -16,6 +16,10 @@
                 name="recordId"
                 not-null="true"
                 type="java.lang.Integer"/>
+      <property column="COLDRECORDID"                
+                name="oldRecordId"
+                not-null="false"
+                type="java.lang.Integer"/>                
       <property column="COPERATION"               
                 name="operation"
                 not-null="true"

Modified: trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml	2006-03-31 21:38:44 UTC (rev 89)
+++ trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml	2006-04-02 07:21:10 UTC (rev 90)
@@ -45,9 +45,9 @@
                 name="isoDateTimeBegin"
                 not-null="false"                
                 type="java.util.Date"/>                
-      <property column="CDATESOURCE"
+      <property column="CDATASOURCE"
 	        length="50"
-                name="dateSource"
+                name="dataSource"
                 not-null="false"                
                 type="java.lang.String"/> 
       <many-to-one name="publication" 



From Lada at berlios.de  Sun Apr  2 09:25:56 2006
From: Lada at berlios.de (Lada at berlios.de)
Date: Sun, 2 Apr 2006 09:25:56 +0200
Subject: [Plantlore-dev] r91 - trunk/analysis/database
Message-ID: <200604020725.k327PuJu023384@sheep.berlios.de>

Author: Lada
Date: 2006-04-02 09:25:41 +0200 (Sun, 02 Apr 2006)
New Revision: 91

Modified:
   trunk/analysis/database/DBmodel.jpg
   trunk/analysis/database/DBmodel.sql
Log:
Update sql code and diagram of database model.

Modified: trunk/analysis/database/DBmodel.jpg
===================================================================
(Binary files differ)

Modified: trunk/analysis/database/DBmodel.sql
===================================================================
--- trunk/analysis/database/DBmodel.sql	2006-04-02 07:21:10 UTC (rev 90)
+++ trunk/analysis/database/DBmodel.sql	2006-04-02 07:25:41 UTC (rev 91)
@@ -39,7 +39,7 @@
     COCCURRENCEID      INTEGER NOT NULL,
     CID                INTEGER NOT NULL,
     CROLE              VARCHAR(20),
-    CRESULTREVISITION  VARCHAR(30),
+    CRESULTREVISION  VARCHAR(30),
 PRIMARY KEY (CID));
 
 /* Table: THABITATS, Owner: SYSDBA */
@@ -70,9 +70,10 @@
 /* Table: THISTORYCHANGE, Owner: SYSDBA */
 CREATE TABLE THISTORYCHANGE (
     CID            INTEGER NOT NULL,
-    COCCURRENCEID  INTEGER NOT NULL,
-    CRECORDID      INTEGER NOT NULL,
-    COPERATION     SMALLINT NOT NULL,
+    COCCURRENCEID  INTEGER  DEFAULT 0 NOT NULL,
+    CRECORDID      INTEGER  DEFAULT 0 NOT NULL,
+    COLDRECORDID   INTEGER,
+    COPERATION     SMALLINT  DEFAULT 0 NOT NULL,
     CWHEN          TIMESTAMP NOT NULL,
     CWHO           INTEGER NOT NULL,
 PRIMARY KEY (CID));
@@ -102,7 +103,7 @@
     CDATEMODIFIED             TIMESTAMP NOT NULL,
     CRECORDBASIS              VARCHAR(15),
     CBIOTOPETEXT              VARCHAR(50),
-    CVERSIONPLANTSFILE        SMALLINT,
+    CVERSIONPLANTSFILE        SMALLINT DEFAULT 0,
 PRIMARY KEY (CID));
 
 /* Table: TOCCURRENCES, Owner: SYSDBA */
@@ -112,12 +113,12 @@
     CUNITVALUE         VARCHAR(30) NOT NULL,
     CHABITATID         INTEGER NOT NULL,
     CPLANTID           INTEGER NOT NULL,
-    CYEARCOLLECTED     SMALLINT NOT NULL,
-    CMONTHCOLLECTED    SMALLINT,
-    CDAYCOLLECTED      SMALLINT,
+    CYEARCOLLECTED     SMALLINT DEFAULT 0 NOT NULL,
+    CMONTHCOLLECTED    SMALLINT DEFAULT 0,
+    CDAYCOLLECTED      SMALLINT DEFAULT 0,
     CTIMECOLLECTED     TIME,
     CISODATETIMEBEGIN  TIMESTAMP,
-    CDATESOURCE        VARCHAR(50),
+    CDATASOURCE        VARCHAR(50),
     CPUBLICATIONSID    INTEGER,
     CHERBARIUM         VARCHAR(20),
     CCREATEWHEN        TIMESTAMP NOT NULL,
@@ -160,6 +161,7 @@
     CREFERENCECITATION          VARCHAR(255) NOT NULL,
     CREFERENCEDETAIL            VARCHAR(20),
     CURL                        VARCHAR(100),
+    CNOTE                       VARCHAR(4096),
     CDELETE                     SMALLINT,
 PRIMARY KEY (CID));
 



From Lada at berlios.de  Sun Apr  2 09:33:04 2006
From: Lada at berlios.de (Lada at berlios.de)
Date: Sun, 2 Apr 2006 09:33:04 +0200
Subject: [Plantlore-dev] r92 - trunk/src/net/sf/plantlore/client/history
Message-ID: <200604020733.k327X4o8025524@sheep.berlios.de>

Author: Lada
Date: 2006-04-02 09:33:00 +0200 (Sun, 02 Apr 2006)
New Revision: 92

Modified:
   trunk/src/net/sf/plantlore/client/history/History.java
   trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
   trunk/src/net/sf/plantlore/client/history/HistoryView.java
Log:
Update history (for record). Repair next, previous add function for Undo selected.

Modified: trunk/src/net/sf/plantlore/client/history/History.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/History.java	2006-04-02 07:25:41 UTC (rev 91)
+++ trunk/src/net/sf/plantlore/client/history/History.java	2006-04-02 07:33:00 UTC (rev 92)
@@ -5,6 +5,8 @@
 
 import java.rmi.RemoteException;
 import java.util.ArrayList;
+import java.util.Date;
+import java.util.Hashtable;
 import java.util.Observable;
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.server.DBLayerException;
@@ -13,11 +15,18 @@
 import net.sf.plantlore.middleware.SelectQuery;
 import net.sf.plantlore.client.dblayer.result.Result;
 import net.sf.plantlore.common.PlantloreConstants;
+import net.sf.plantlore.common.record.Author;
+import net.sf.plantlore.common.record.Habitat;
 import net.sf.plantlore.common.record.Occurrence;
+import net.sf.plantlore.common.record.Phytochorion;
+import net.sf.plantlore.common.record.Plant;
+import net.sf.plantlore.common.record.Publication;
+import net.sf.plantlore.common.record.Territory;
 import net.sf.plantlore.common.record.User;
 import net.sf.plantlore.common.record.HistoryRecord;
 import net.sf.plantlore.common.record.HistoryChange;
 import net.sf.plantlore.common.record.HistoryColumn;
+import net.sf.plantlore.common.record.Village;
 
 
 import org.apache.log4j.Logger;
@@ -36,11 +45,13 @@
     /** Instance of a database management object */
     private DBLayer database;   
     /** Constant with default number of rows to display */
-    private static final int DEFAULT_DISPLAY_ROWS = 5;    
+    private static final int DEFAULT_DISPLAY_ROWS = 2;    
     /** Actual number of rows to display */
     private int displayRows = DEFAULT_DISPLAY_ROWS;   
     /** Index of the first record shown in the table */
     private int currentFirstRow;
+    /** Information about current display rows*/
+    private String displayRow;
     
     //*******Informations about searching Result from database*****//
     /** Result of the search query */
@@ -50,9 +61,15 @@
     /** List of data (results of a search query) displayed in the table */
     private ArrayList editHistoryDataList;
    
-    //**************Informations about HistoryRecord*************//
-    /** */
-    private Occurrence tmpOccurrence;
+    //********************* ***************************************//
+    private Occurrence occurrence;
+    private Habitat habitat;
+	private Publication publication;
+	private Village village;
+	private Phytochorion phytochorion;
+	private Territory territory;
+	
+    //	**************Informations about HistoryRecord*************//
     /** Name of the table where value was changed*/
 	private String tableName;  
 	/** Name of the column where value was changed*/
@@ -62,10 +79,12 @@
 	private Integer occurrenceId;
 	/**Unique value identified record in table where value was changed */
 	private int recordId;
+	/**Unique value identified record before changed */
+	private int oldRecordId;
 	/** Operation whitch was used*/   
 	private String operation;
 	/** Date and time when the reccord was changed*/
-	private java.util.Date when;	
+	private java.util.Date when = new Date();	
 	/** Old value of attribute*/    
 	private String oldValue;
 	/** New value of attribute*/
@@ -81,12 +100,11 @@
 	/** Informaciton about location for specified occurrenc*/
 	private String location;
 	
-	//***********************************************************//
-	 private static final Integer INSERT = 1;
-	 private static final Integer EDIT = 2;
-	 private static final Integer EDITINSERT = 3;
-	 private static final Integer DELETE = 4;
-	
+	 //********************************************************//
+	 /** Mapping of entities */
+     private Hashtable publicationHash;
+     private Hashtable habitatHash;
+     private Hashtable occurrenceHash;  
     
     /**  
      *  Creates a new instance of History 
@@ -100,11 +118,9 @@
        logger = Logger.getLogger(this.getClass().getPackage().getName());	 
        this.database = database;	
        
-       tmpOccurrence = new Occurrence();
-       tmpOccurrence.setId(idOcc);
+       occurrence = new Occurrence();
+       occurrence.setId(idOcc);
        
-       //setOccurrenceId(0);
-       //setOccurrenceId(idOcc);
        setNamePlant(namePlant);
        setNameAuthor(nameAuthor);
        setLocation(location);
@@ -130,10 +146,11 @@
        } catch(RemoteException e) {
        	    System.err.println("RemoteException- searchInsertInfo(), createQuery");       	  
        }
+       // Create aliases for table tHistoryChange.      
+       //query.createAlias("user", "us");
+       query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryChange.OCCURRENCE, null, occurrence, null);
+       query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryChange.OPERATION, null, HistoryChange.HISTORYCHANGE_INSERT, null);
        
-    	query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryChange.OCCURRENCE, null, tmpOccurrence, null);
-    	query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryChange.OPERATION, null, this.EDIT, null);
-       
        int resultIdInsert = 0;
        try {
            // Execute query                    
@@ -164,16 +181,20 @@
     {  
     	    	
         //Create new Select query
-        SelectQuery query = null;
+        SelectQuery query = null;       
+
+    	//  Select data from tHistory table
         try {
-        	    query = database.createQuery(HistoryChange.class);
-        } catch(RemoteException e) {
-        	    System.err.println("RemoteException- searchEditHistory(), createQuery");       	  
-        }
-       
-    	query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryChange.OCCURRENCE, null, tmpOccurrence, null);
-        query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryChange.OPERATION, null, this.EDIT, null);
-        //query.addOrder(PlantloreConstants.DIRECT_DESC, HistoryChange.WHEN);        
+			query = database.createQuery(HistoryRecord.class);
+		} catch (RemoteException e) {
+			System.err.println("RemoteException- searchEditHistory(), createQuery");
+		}
+        // Create aliases for table tHistoryChange.      
+        query.createAlias("historyChange", "hc");        
+        // Add restriction to CUNITVALUE column of tOccurence table
+        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.operation", null, 2, null);
+        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.occurrence", null, occurrence, null);    	
+        query.addOrder(PlantloreConstants.DIRECT_DESC, "hc.when");        
     	
         int resultIdEdit = 0;
         try {
@@ -218,9 +239,13 @@
              	System.err.println("RemoteException- setInsertResult, more");
              	logger.debug("RemoteException- setInsertResult, more");
              	return;
-             }           	
-            //this.when = ((HistoryChange)objectHistory[0]).getWhen();
-            //this.nameUser = ((HistoryChange)objectHistory[0]).WHO;
+             }   
+         	Object[] objHis = (Object[])objectHistory[0]; 
+         	//setWhen(((HistoryChange)objHis[0]).getWhen());
+         	//setNameUser(((HistoryChange)objHis[0]).getWho().getWholeName());
+         	
+            this.when = ((HistoryChange)objHis[0]).getWhen();
+            this.nameUser = ((HistoryChange)objHis[0]).getWho().getWholeName();
            
         } catch (DBLayerException e) {
             // Log and set error in case of an exception
@@ -232,26 +257,28 @@
     
     /**
      * Process results of a search query. Retrieves results using the database management object (DBLayer) and stores them in the data field of the class. 
-     * @param from number of the first row to retrieve
-     * @param to number of rows to retrieve 
+     * @param fromTable number of the first row to show in table. Number of the first row to retraieve is 1.
+     * @param count number of rows to retrieve 
      */
-    public void processEditResult(int from, int count) {
+    public void processEditResult(int fromTable, int count) {
     	
     	if (this.resultId != 0) {
-            logger.debug("Rows in the result: "+getResultRows());
-            logger.debug("Max available rows: "+(from+count-1));
+    		int currentRow = getResultRows();
+            logger.debug("Rows in the result: "+currentRow);
+            logger.debug("Max available rows: "+(fromTable+count-1));
            
             // Find out how many rows we can retrieve - it cannot be more than number of rows in the result
-            int to = Math.min(getResultRows(), from+count-1);           
+            int to = Math.min(currentRow, fromTable+count-1);           
             if (to == 0) {
                 this.editHistoryDataList = new ArrayList();                
             } else {
-                logger.debug("Retrieving query results: "+from+" - "+to);
+                logger.debug("Retrieving query results: 1 - "+to);
+                setCurrentDisplayRow(fromTable+ "-" + to);
                 try {                	 
                      // Retrieve selected row interval 
                 	Object[] objectHistory;
                  	try {
-                 		objectHistory = database.more(resultId, from, to);  
+                 		objectHistory = database.more(this.resultId, 1, to);  
                  	} catch(RemoteException e) {
                      	System.err.println("RemoteException- processEditResult, more");
                      	logger.debug("RemoteException- processEditResult, more");
@@ -262,41 +289,42 @@
                     // Create storage for the results
                     this.editHistoryDataList = new ArrayList();
                     // Cast the results to the HistoryRecord objects
-                    for (int i=0; i<countResult; i++ ) {
-                    	editHistoryDataList.add((HistoryChange)objectHistory[i]);
-                    }                    
+                    for (int i=0; i<countResult; i++ ) {                    							
+						Object[] objHis = (Object[])objectHistory[i];
+                        this.editHistoryDataList.add((HistoryRecord)objHis[0]);
+                    }                     
                 } catch (DBLayerException e) {
                     // Log an error in case of an exception
                     logger.error("Processing search results failed: "+e.toString());            
                 } finally { 
                 	logger.debug("Sets 'edit' data ends successfully");
                 	//Update current first displayed row (only if data retrieval was successful)
-                    setCurrentFirstRow(from);                    
+                    setCurrentFirstRow(fromTable);                    
                 }               
             }
         }         
     }
     
     /**
-     *      
+     * z db vzdy ziskame vysledek od 1 do "to" - tato funkce nacte data pro zobrazeni 
+     * ve view (data, ktere v dane chvili uvidi uzivatel).  
      * @return Object[][] with data values for displaying in the table
      */
     public Object[][] getData() {
-    	
-    	//int count = editHistoryDataList.size();
-    	
-    	int count = 2;
-        editHistoryData = new Object[count][6];
-    	for (int i=0; i < count; i++) {
-    		editHistoryData[i][0] = new Boolean(false);
-    	    editHistoryData[i][1] = ((HistoryChange)editHistoryDataList.get(i)).getWhen();
-    	    editHistoryData[i][2] = ((HistoryChange)editHistoryDataList.get(i)).getWho().getFirstName();
-    	    //editHistoryData[i][3] = ((HistoryChange)editHistoryDataList.get(i)).getHistoryColumn().getColumnName();
-    	    //editHistoryData[i][4] = ((HistoryChange)editHistoryDataList.get(i)).getOldValue();
-    	    //editHistoryData[i][5] = ((HistoryChange)editHistoryDataList.get(i)).getNewValue();
-    	    editHistoryData[i][3] = "xx";
-    	    editHistoryData[i][4] = "xx";
-    	    editHistoryData[i][5] = "xx";
+    	    	
+    	int countResult = editHistoryDataList.size();
+    	int firstRow = getCurrentFirstRow();
+    	int countRow = countResult - firstRow + 1;
+    	int ii = 0;
+        editHistoryData = new Object[countRow][6];
+    	for (int i=firstRow-1; i < countResult; i++) {
+    		editHistoryData[ii][0] = new Boolean(false);
+    	    editHistoryData[ii][1] = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getWhen();
+    	    editHistoryData[ii][2] = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getWho().getWholeName();
+    	    editHistoryData[ii][3] = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getColumnName();
+    	    editHistoryData[ii][4] = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+    	    editHistoryData[ii][5] = ((HistoryRecord)editHistoryDataList.get(i)).getNewValue();
+    	    ii++;
     	}  
     	return this.editHistoryData;
     	
@@ -312,32 +340,467 @@
      * 
      * jde o update database :-)
      */
-    public void updateOlderChanges(int idResult)
-    {
+    public void updateOlderChanges(ArrayList markResult)
+    {    	
+    	//Occurrence occurrence = new Occurrence(); ... uz jsme si tento objek vytvorili v konsturktoru 
+    	habitat = new Habitat();
+    	publication = new Publication();
+    	village = new Village();
+    	phytochorion = new Phytochorion();
+    	territory = new Territory(); 
     	
+    	//Inicalization of hashTable
+    	initOccurrenceHash();
+    	initHabitatHash();
+    	initPublicationHash();
+    	
+    
+        	
+    	//number of selected rows
+    	int countMark = markResult.size();
+    	//take from older record to younger record
+    	for( int i=countMark-1; i >= 0; i--) {
+    		logger.debug("Number of selected row: "+markResult.get(i));
+    		tableName = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getTableName();
+    		columnName = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getColumnName();
+    		
+    		if (tableName.equals("Occurrence")){
+    			
+    			//Get a specified number from occurrence mapping.
+    			int value;
+    			if (occurrenceHash.containsKey(columnName)) {
+    				 value = (Integer)occurrenceHash.get(columnName); 
+    	        } else {
+    	             value = 0;
+    	        }
+        	    
+    			//Init oldRecordId
+    			oldRecordId = 0;
+    			
+    			//Save new value for the column
+    			switch (value) {
+	                case 1: //Taxon  
+	                	//test, zda starsi hodnota byla pro occurrence nastavena 
+	                	//(info o mladsi zmene bude uz jen vymazano s tabulky historie} 
+	                	if ( occurrence.getPlant() == null ){
+	                		oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+		                	//recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+		                	//oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+		                	//newValue = ((HistoryRecord)editHistoryDataList.get(i)).getNewValue();
+		                	/* 
+		                	 * oldValue a newValue nepotrebujeme ...pro Taxon nam staci znat jak se zmenilo jeho ID
+		                	 * pro occurrence nepotrebujem ani recordID, protoze to je stejne s occurrenceID - jen 
+		                	 * bychom mohli otestovat, zda to je opravdu stejne, kdyz ne tak vznikla nekde pri ukladani
+		                	 * dat do historie chyba
+		                	 * 
+		                	 * if (occurrence.getId() != recordId) {
+		                	 *     loggerr.error("Incorrect identifier for OCCURRENCE");
+		                	 *  }
+		                	 *  
+		                	 * ?? kdyz se nasledovne priradi a nasledne ulozi plant, bude to spravne????	       
+		                	 */
+		                	Plant plant = new Plant();
+		                	plant.setId(oldRecordId);
+		                	occurrence.setPlant(plant);	
+		                	/*
+		                	 * po zmene plant je potreba projit jeste vysledky od 1 do currentFirstRow nebo SELECT s posminkou
+		                	 * pokud v te dobe doslo jeste ke zmnene Plant, tak je potreba tuto zmenu vymazat z historie
+		                	 * a upozornit na to uzivatele, ze kdyz pozaduje vratit zmnenu k datu xxx, tak budou zruseny
+		                	 * i zmeny z datumu yyy, atd..
+		                	 */
+	                	} else {
+	                		//zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                	}
+	                    break;
+	                case 2: //Year	
+	                	if (occurrence.getYearCollected() == 0) {
+	                		oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+		                	occurrence.setYearCollected(Integer.parseInt(oldValue));
+	                	}else {
+	                		//zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                	}	                	
+	                	break;
+	                case 3: //Month 
+	                	if (occurrence.getMonthCollected() == 0) {
+	                		oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                		occurrence.setMonthCollected(Integer.parseInt(oldValue));
+	                	} else {
+	                		// zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                	}
+	                    break;
+	                case 4: //Day	                	
+	                	if (occurrence.getDayCollected() == 0) {
+	                		oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+		                	occurrence.setDayCollected(Integer.parseInt(oldValue));
+	                	} else {
+	                		// zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                	}
+	                	break;
+	                case 5: //Time 	                	
+	                	if (occurrence.getTimeCollected() == null) {
+	                		oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();	                	
+		                	//occurrence.setTimeCollected(Integer.parseInt(oldValue));
+	                	} else {
+	                		// zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                	}
+	                    break;
+	                case 6: //Source	                	
+	                	if (occurrence.getDataSource() == null) {
+		                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+		                	occurrence.setDataSource(oldValue);
+	                	} else {
+	                		//zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                	}
+	                	break;
+	                case 7: //Herbarium
+	                	if (occurrence.getHerbarium() == null){
+	                		oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                		occurrence.setHerbarium(oldValue);
+	                	} else {
+	                		//zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                	}
+	                    break;
+	                case 8: //Note occurrence	
+	                	if (occurrence.getNote() == null) {	                			            
+	                		oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                		occurrence.setNote(oldValue);
+	                	} else {
+	                		//zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                	}
+	                	break;
+	                default:            
+	                    logger.error("No column defined for name "+ columnName);	                   
+    			}  	
+    		} else if (tableName.equals("Habitat") || tableName.equals("Village")
+    				   || tableName.equals("Territory") || tableName.equals("Phytochorion")){
+    			
+    			// Get a specified number from habitat mapping.
+    			int value;
+    			if (habitatHash.containsKey(columnName)) {
+    				value = (Integer)habitatHash.get(columnName); 
+    	        } else {
+    	             value = 0;
+    	        }    
+    			
+    			// Init oldRecordId
+    			oldRecordId = 0;
+    			
+    			// Save new value for the column        		
+     			switch (value) {
+ 	                case 1:  //Quadrant    
+ 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		habitat.setId(recordId);
+		                	habitat.setQuadrant(oldValue);
+	                	}
+	                	
+	                	/*
+	                	 * Pro konkretni OCCURRENCE je stejne recordId ... pokud by doslo k jeho zmene, tak by byla 
+	                	 * zaznamenana v polozce oldRecordId - ve chvili kdy dojde k teto zmene, tak se to musi osetrit
+	                	 * 1. v tOccurrence zmenit polozku cHabitat (s odmazanim daneho zaznamu v tHabitats to bude asi 
+	                	 *    slozitejsi,protoze se na nej muzou jiz odkazovat dalsi zaznamy --> neodmazavat nebo otestovat
+	                	 *    a pak teprve odmazat (maze se nastavenim priznaku CDELETE)) 
+	                	 * 2. v tOccurrence nemenit polozku cHabitat -- tak to nepujde
+	                	 * 
+	                	 * 
+	                	 *  
+	                	 */
+ 	                    break;
+ 	                case 2: //Place description
+ 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		habitat.setId(recordId);
+		                	habitat.setDescription(oldValue);
+	                	}	                	
+ 	                	break;
+ 	                case 3:  //Country
+ 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		habitat.setId(recordId);
+		                	habitat.setCountry(oldValue);
+	                	}	
+	                	
+ 	                    break;
+ 	                case 4: //Altitude
+ 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		habitat.setId(recordId);
+		                	//habitat.setAltitude(Integer.parseInt(oldValue));
+	                	}	
+	                	
+ 	                	break;
+ 	                case 5:  //Latitude  
+ 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		habitat.setId(recordId);
+		                	//habitat.setLatitude(Integer.parseInt(oldValue));
+	                	}	
+	                	
+ 	                    break;
+ 	                case 6: //Longitude
+ 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		habitat.setId(recordId);
+		                	//habitat.setLongitude(Integer.parseInt(oldValue));
+	                	}	
+ 	                	break;
+ 	                case 7: //Nearest bigger seat  	
+ 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		habitat.setId(recordId);	                		       		
+	                		village.setName(oldValue);
+		                	habitat.setNearestVillage(village);
+	                	}	
+ 	                    break;
+ 	                case 8: //Phytochorion
+ 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		habitat.setId(recordId);	                		              		
+	                		phytochorion.setName(oldValue);
+		                	habitat.setPhytochorion(phytochorion);
+	                	}	
+ 	                	break;
+ 	               case 9: //Phytochorion code
+ 	            	    recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		habitat.setId(recordId);	                		              		
+	                		phytochorion.setCode(oldValue);
+		                	habitat.setPhytochorion(phytochorion);
+	                	}
+	                	break;
+	                case 10:  //Territory        
+	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		habitat.setId(recordId);	                		              		
+	                		territory.setName(oldValue);
+		                	habitat.setTerritory(territory);
+	                	}
+	                    break;
+	                case 11: //Note habitat
+	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		habitat.setId(recordId);
+		                	habitat.setNote(oldValue);
+	                	}	
+	                	break;
+ 	                default:            
+ 	                    logger.error("No column defined for name "+ columnName);	                   
+     			}  	
+    		} else if (tableName.equals("Publication")){
+    			
+    			// Get a specified number from publication mapping.
+    			int value;
+    			if (publicationHash.containsKey(columnName)) {
+    				value = (Integer)publicationHash.get(columnName); 
+    	        } else {
+    	             value = 0;
+    	        }
+    			
+    			// Init oldRecordId
+    			oldRecordId = 0;    			
+    			
+    			// Save new value for the column    			         		
+    			switch (value) {
+	                case 1: //Collection     
+	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		publication.setId(recordId);
+		                	publication.setCollectionName(oldValue);
+	                	}	
+	                    break;
+	                case 2: //Year of publication
+	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		publication.setId(recordId);
+		                	publication.setCollectionYearPublication(Integer.parseInt(oldValue));
+	                	}	
+	                	break;
+	                case 3: //Journal  
+	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		publication.setId(recordId);
+		                	publication.setJournalName(oldValue);
+	                	}	
+	                    break;
+	                case 4: //Author of journal
+	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		publication.setId(recordId);
+		                	publication.setJournalAuthorName(oldValue);
+	                	}	
+	                	break;
+	                case 5: //Reference citation = collectionName + collectionYearPublication + journalName + journalAuthorName
+	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		publication.setId(recordId);
+		                	publication.setReferenceCitation(oldValue);
+	                	}	
+	                    break;
+	                case 6: //Reference detail
+	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		publication.setId(recordId);
+		                	publication.setReferenceDetail(oldValue);
+	                	}	
+	                	break;
+	                case 7: //URL    
+	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
+ 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
+	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (oldRecordId != 0 ){
+	                		//musime zavolat funkci, ktera to osetri
+	                	}else {
+	                		publication.setId(recordId);
+		                	publication.setUrl(oldValue);
+	                	}	
+	                    break;	                
+	                default:            
+	                    logger.error("No column defined for name "+ columnName);	                   
+    			}  	
+    		} else {
+    			logger.equals("No table defined");
+    		}    			
+    		
+    	}
+    	//number of rows in result
+    	int countResult = editHistoryDataList.size();
+    	for( int i=0; i<countResult; i++) {
+    		
+    	}
     }
+
     
-    /**
-     * Tato funkce bude overovat prava, zda dany uzivatel ma
-     * pravo provest UNDO - spravne by se uzivateli nevela
-     * historie zobrazit pokud nema prava, takze overeni prav
-     * musi byt volano jiz v konstruktoru nebo na miste, kde 
-     * se vola undo pro dany zaznam, coz by bylo asi nejlogictejsi
-     * !!! OVERIT TUTO MYSLENKU 
-     * pokud to tak bude, tak po zavolani historie vime, ze je autor nebo ma prava
-     * jeste je tu otazka, zda editace od admina zakaze zruseni teto editace neadminem 
-     */
-    public void checkRight()
-    {
-    	
+     //***************************//
+    //****Init Hashtable*********//
+    //**************************//
+    
+    private void initOccurrenceHash() {
+        occurrenceHash = new Hashtable(9); 
+        occurrenceHash.put("Taxon",1);
+        occurrenceHash.put("Year",2);
+        occurrenceHash.put("Month",3);
+        occurrenceHash.put("Day",4);
+        occurrenceHash.put("Time",5);           
+        occurrenceHash.put("Source",6);
+        occurrenceHash.put("Herbarium",7);        
+        occurrenceHash.put("Note occurrence",8);
+        //isoDataTimeBegin je slozena s Year + Month + Day + Time ... mela by se zmenit vzdy, kdyz
+        // dojde ke zmene nektere z techto polozek ... jak to nejlepe zaridit???
+        occurrenceHash.put("isoDataTimeBegin",9);
+        /*
+         * Jak se bude chovat cUpdateWhen, cUpdateWho v historii - asi se nastavi 
+         * cas vyvolani undo v historii a uzivatel, ktery to vyvolal
+         */
+        //occurrenceHash.put("cUpdateWhen",10);
+        //occurrenceHash.put("cUpdateWho",11);
+    }    
+    
+    private void initHabitatHash() {
+        habitatHash = new Hashtable(11);        
+        habitatHash.put("Quadrant",1);
+        habitatHash.put("Place description",2);
+        habitatHash.put("Country",3);
+        habitatHash.put("Altitude",4);
+        habitatHash.put("Latitude",5);
+        habitatHash.put("Longitude",6);      
+        habitatHash.put("Nearest bigger seat",7);      
+        habitatHash.put("Phytochorion",8);
+        habitatHash.put("Phytochorion code",9);
+        habitatHash.put("Territory",10);
+        habitatHash.put("Note habitat",11);
     }
-
-          
-
+    
+    private void initPublicationHash() {
+        publicationHash = new Hashtable(7);                       
+        publicationHash.put("Collection",1);
+        publicationHash.put("Year of publication",2);
+        publicationHash.put("Journal",3);
+        publicationHash.put("Author of journal",4);
+        publicationHash.put("Reference citation",5);
+        publicationHash.put("Reference detail",6);
+        publicationHash.put("URL",7);
+    }
+    
     //****************************//
     //****Get and set metods*****//
     //**************************//
     
+     public String getCurrentDisplayRows() {
+		  return this.displayRow;		  
+	   }
+
+	 public void setCurrentDisplayRow(String displayRow) {
+		  this.displayRow = displayRow;		  
+	 } 
+     
     
     /**
      *  Set result of a database operation. This is used only for search operations.
@@ -541,8 +1004,8 @@
 	*   Set date and time when the reccord was changed
 	*   @param when date and time when the reccord was changed
 	*/            
-    public void setWhen(java.util.Date when) {
-	  this.when = when;
+    public void setWhen(java.util.Date when) {    	
+    	this.when = when;    	 
     }     	  
  
 	/**

Modified: trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-02 07:25:41 UTC (rev 91)
+++ trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-02 07:33:00 UTC (rev 92)
@@ -9,6 +9,7 @@
 import java.awt.event.WindowListener;
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
+import java.util.ArrayList;
 
 import net.sf.plantlore.client.Settings;
 import net.sf.plantlore.client.SettingsView;
@@ -87,16 +88,19 @@
        public void actionPerformed(ActionEvent actionEvent)
        {
     	   //   Call processResults only if we don't see the first page (should not happen, button should be disabled)
+    	   logger.debug("FIRST");
     	   logger.debug("current first row: "+model.getCurrentFirstRow());
            logger.debug("num rows in the result: "+ model.getResultRows());            
-           logger.debug("display rows: "+ view.getTable().getRowCount());
+           logger.debug("display rows: "+ view.getTable().getRowCount());      
            if (model.getCurrentFirstRow() > 1) {
                int firstRow = Math.max(model.getCurrentFirstRow()- model.getDisplayRows(), 1);
                model.processEditResult(firstRow, model.getDisplayRows()); 
                if (model.getCurrentFirstRow() > 1){
                }
                view.getTable().setModel(new HistoryTableModel(model.getData()));
-               //view.repaint();
+               int from = model.getCurrentFirstRow();
+               int to = from + view.getTable().getRowCount() - 1;
+               view.setCurrentRowsInfo(from + "-" + to);
            }                           
        }
    }
@@ -108,14 +112,18 @@
    class nextButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent)
        {
-    	   //Call processResults only if we don't see the last page (should not happen, button should be disabled)
+    	   //Call processResults only if we don't see the last page
+    	   logger.debug("NEXT");
            logger.debug("current first row: "+model.getCurrentFirstRow());
            logger.debug("num rows in the result: "+ model.getResultRows());            
            logger.debug("display rows: "+ model.getDisplayRows());
+           logger.debug("num rows in table (view) "+ view.getTable().getRowCount());          
            if (model.getCurrentFirstRow()+ view.getTable().getRowCount()<=model.getResultRows()) {
                model.processEditResult(model.getCurrentFirstRow()+ model.getDisplayRows(), view.getTable().getRowCount());
-               view.getTable().setModel(new HistoryTableModel(model.getData()));
-               //view.repaint();
+               view.getTable().setModel(new HistoryTableModel(model.getData()));  
+               int from = model.getCurrentFirstRow();
+               int to = from + view.getTable().getRowCount() - 1;
+               view.setCurrentRowsInfo(from + "-" + to);
            }                       
        }
    }
@@ -132,9 +140,7 @@
            for (int row=0; row < countRow; row++)
            {         	     	
          	  view.getTable().setValueAt(true, row, 0);            	  
-           } 
-           //view.repaint(); ... neni potreba zaridi to funkce modelu 
-           //setValueAt volanim funkce fireTableCellUpdated(row, column) 
+           }       
        }
    }
    
@@ -150,8 +156,7 @@
            for (int row=0; row < countRow; row++)
            {        	        	  
          	  view.getTable().setValueAt(false, row, 0);          	  
-           }
-           //view.repaint();
+           }           
        }
    }
    
@@ -162,19 +167,17 @@
    class undoSelectedButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent)
        {
-    	   int countRow = view.getTable().getRowCount();     	   
-           for (int row=countRow-1; row > 0; row--)
+    	   int countRow = view.getTable().getRowCount(); 
+    	   //list with number of selected rows
+    	   ArrayList markRows = new ArrayList();
+           for (int row=0; row < countRow; row++)
            {           	  
          	  if (view.getTable().getValueAt(row, 0).equals(true)) {
-         		 System.out.println("undo");    
-         		 // provedeni zmeny pro danou polozku 
-         		 //- pokud neni joz ITEM v listu!!! - OSETRIT
-         		 model.updateOlderChanges(model.getCurrentFirstRow() + row);  
-         		 //model.setUpdateListItem(row, 3); ... list zmenenych ITEM
-         	  }
-         	  // projit resultID pro firstRow to 0 a overit pokud je tu ITEM z menenych polozek, 
-         	  // tak ji tez smazat z historie
+         		 System.out.println("undo "+ row); 
+         		 markRows.add(row);         		          		          		
+         	  }     
            }
+           model.updateOlderChanges(markRows);    	   
        }
    }
     
@@ -184,10 +187,24 @@
     */
    class rowSetDisplayChangeListener implements PropertyChangeListener {
 	   public void propertyChange(PropertyChangeEvent e) {
-		   if (view.getDisplayRows() > 0) {
-			   System.out.println(view.getDisplayRows());			  
-			   //zatim nefunguje jak by melo !!!
-		   }
-	   }
+           // Save old value
+           int oldValue = model.getDisplayRows();
+           // Check whether new value > 0
+           if (view.getDisplayRows() < 1) {
+               view.setDisplayRows(oldValue);
+               return;
+           }
+           // Set new value in the model
+           model.setDisplayRows(view.getDisplayRows());
+           logger.debug("New display rows: "+view.getDisplayRows());
+           // If neccessary reload search results
+           if ((oldValue != view.getDisplayRows()) && (model.getDisplayRows() <= model.getResultRows())) {
+               model.processEditResult(model.getCurrentFirstRow(), view.getDisplayRows());
+               view.getTable().setModel(new HistoryTableModel(model.getData()));
+               int from = model.getCurrentFirstRow();
+               int to = from + view.getTable().getRowCount() - 1;
+               view.setCurrentRowsInfo(from + "-" + to);               
+           }
+       }        	   
    }
 }

Modified: trunk/src/net/sf/plantlore/client/history/HistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-02 07:25:41 UTC (rev 91)
+++ trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-02 07:33:00 UTC (rev 92)
@@ -62,6 +62,9 @@
     private JLabel displayRowsText;    
     private JLabel countResultText;
     private JLabel countResutl;
+    private JLabel currentRowsInfoText;
+    private JLabel currentRowsInfo;
+    
     //JFormattedTextField
     private JFormattedTextField displayRows;
     //JTable
@@ -236,9 +239,8 @@
         gbConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
         infoInsertPanel.add(dateLabel, gbConstraints);    
         
-        dateValueLabel = new JLabel();
-        //dateValueLabel.setText(model.getWhen().toString());        
-        dateValueLabel.setText("model.getWhen().toString()");
+        dateValueLabel = new JLabel();        
+        dateValueLabel.setText(model.getWhen().toString());
         gbConstraints = new GridBagConstraints();
         gbConstraints.gridx = 1;
         gbConstraints.gridy = 0;       
@@ -288,8 +290,8 @@
         gbConstraints.anchor = java.awt.GridBagConstraints.CENTER;
         gbConstraints.fill = java.awt.GridBagConstraints.BOTH;
         gbConstraints.weightx = 1;        
-        gbConstraints.weighty = 0.7;  
-        gbConstraints.gridheight = 7;
+        gbConstraints.weighty = 0.65;  
+        gbConstraints.gridheight = 8;
         gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
         jsp.setMinimumSize(new java.awt.Dimension(500, 100));        
         jsp.setPreferredSize(new java.awt.Dimension(500, 100));        
@@ -340,7 +342,7 @@
         gbConstraints.gridy = 3;   
         gbConstraints.weighty = 0.1;         
         gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
-        gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
+        gbConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
         infoEditPanel.add(countResultText, gbConstraints);
                 
         Integer countRes = model.getResultRows();
@@ -353,11 +355,29 @@
         gbConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
         infoEditPanel.add(countResutl, gbConstraints);
         
+        currentRowsInfoText = new JLabel();
+        currentRowsInfoText.setText("Displayed:"); 
+        gbConstraints = new GridBagConstraints();
+        gbConstraints.gridx = 1;
+        gbConstraints.gridy = 4;                  
+        gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
+        gbConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
+        infoEditPanel.add(currentRowsInfoText, gbConstraints);
+                        
+        currentRowsInfo = new JLabel();
+        currentRowsInfo.setText(model.getCurrentDisplayRows()); 
+        gbConstraints = new GridBagConstraints();
+        gbConstraints.gridx = 2;
+        gbConstraints.gridy = 4;       
+        gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
+        gbConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
+        infoEditPanel.add(currentRowsInfo, gbConstraints);
+        
         displayRowsText = new JLabel();
         displayRowsText.setText("Rows to display:"); 
         gbConstraints = new GridBagConstraints();
         gbConstraints.gridx = 1;
-        gbConstraints.gridy = 4;       
+        gbConstraints.gridy = 5;       
         gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
         gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
         infoEditPanel.add(displayRowsText, gbConstraints);
@@ -366,7 +386,7 @@
         displayRows.setValue(model.getDisplayRows());
         gbConstraints = new GridBagConstraints();
         gbConstraints.gridx = 2;
-        gbConstraints.gridy = 4;           
+        gbConstraints.gridy = 5;           
         gbConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
         gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
         gbConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
@@ -375,7 +395,7 @@
         previousButton = new JButton("Previous");
         gbConstraints = new GridBagConstraints();
         gbConstraints.gridx = 1;
-        gbConstraints.gridy = 5;            
+        gbConstraints.gridy = 6;            
         gbConstraints.gridwidth = 2;
         gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
         gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
@@ -386,7 +406,7 @@
         nextButton = new JButton("Next");
         gbConstraints = new GridBagConstraints();
         gbConstraints.gridx = 1;
-        gbConstraints.gridy = 6;  
+        gbConstraints.gridy = 7;  
         gbConstraints.gridwidth = 2;
         gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
         gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
@@ -412,6 +432,12 @@
     	return this.tableEditList;
     }
     
+    /** */
+    public void setCurrentRowsInfo(String displayedRows)
+    {
+    	this.currentRowsInfo.setText(displayedRows);
+    }
+    
     public Integer getDisplayRows() {
         return (Integer)displayRows.getValue();
     }



From fraktalek at berlios.de  Sun Apr  2 11:18:49 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Sun, 2 Apr 2006 11:18:49 +0200
Subject: [Plantlore-dev] r93 - trunk/src/net/sf/plantlore/config/hibernate
Message-ID: <200604020918.k329InSv019752@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-02 11:18:49 +0200 (Sun, 02 Apr 2006)
New Revision: 93

Modified:
   trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml
Log:
Added missing AuthorsOccurrences to hibernate.cfg.xml
Fixed AuthorsOccurrences mapping (double mappings, ...)


Modified: trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml	2006-04-02 07:33:00 UTC (rev 92)
+++ trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml	2006-04-02 09:18:49 UTC (rev 93)
@@ -14,23 +14,15 @@
       <many-to-one name="occurrence" 
                    class="net.sf.plantlore.common.record.Occurrence" 
                    column="COCCURRENCEID"/>      
-      <property column="CAUTHORID"                
-                name="authorId"
-                not-null="true"
-                type="java.lang.Integer"/>
-      <property column="COCCURRENCEID"                
-                name="occurrenceId"
-                not-null="true"
-                type="java.lang.Integer"/>                                              
       <property column="CROLE"
                 length="20"
                 name="role"
                 not-null="false"
                 type="java.lang.String"/>
-      <property column="CRESULTREVISION"
+      <property column="CRESULTREVISITION"
                 length="30"
                 name="resultRevision"
-                not-null="flase"
+                not-null="false"
                 type="java.lang.String"/>                
    </class>
 </hibernate-mapping>

Modified: trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml	2006-04-02 07:33:00 UTC (rev 92)
+++ trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml	2006-04-02 09:18:49 UTC (rev 93)
@@ -15,6 +15,7 @@
       </property>
       <!-- Mapping files -->
       <mapping file="Authors.hbm.xml"/>
+      <mapping file="AuthorsOccurrences.hbm.xml"/>
       <mapping file="Habitats.hbm.xml"/>
       <mapping file="History.hbm.xml"/>
       <mapping file="HistoryChange.hbm.xml"/>



From fraktalek at berlios.de  Sun Apr  2 11:31:09 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Sun, 2 Apr 2006 11:31:09 +0200
Subject: [Plantlore-dev] r94 - trunk/src/net/sf/plantlore/config/hibernate
Message-ID: <200604020931.k329V92w020869@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-02 11:31:08 +0200 (Sun, 02 Apr 2006)
New Revision: 94

Modified:
   trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml
Log:
Fixed back column mapping to reflect fixed database.


Modified: trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml	2006-04-02 09:18:49 UTC (rev 93)
+++ trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml	2006-04-02 09:31:08 UTC (rev 94)
@@ -19,7 +19,7 @@
                 name="role"
                 not-null="false"
                 type="java.lang.String"/>
-      <property column="CRESULTREVISITION"
+      <property column="CRESULTREVISION"
                 length="30"
                 name="resultRevision"
                 not-null="false"



From kovo at berlios.de  Sun Apr  2 12:58:40 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Sun, 2 Apr 2006 12:58:40 +0200
Subject: [Plantlore-dev] r95 - trunk/analysis/database
Message-ID: <200604021058.k32Awe0O016667@sheep.berlios.de>

Author: kovo
Date: 2006-04-02 12:58:36 +0200 (Sun, 02 Apr 2006)
New Revision: 95

Added:
   trunk/analysis/database/Poznamky k DB modelu.doc
Removed:
   trunk/analysis/database/Pozn?\195?\161mky k DB modelu.doc
Log:
Renamed to avoid problems with repository checkout (special characters in the filename)

Deleted: trunk/analysis/database/Pozn?\195?\161mky k DB modelu.doc
===================================================================
(Binary files differ)

Added: trunk/analysis/database/Poznamky k DB modelu.doc
===================================================================
(Binary files differ)


Property changes on: trunk/analysis/database/Poznamky k DB modelu.doc
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From kovo at berlios.de  Sun Apr  2 13:07:16 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Sun, 2 Apr 2006 13:07:16 +0200
Subject: [Plantlore-dev] r96 - trunk/analysis/biocase
Message-ID: <200604021107.k32B7Gpo017716@sheep.berlios.de>

Author: kovo
Date: 2006-04-02 13:07:09 +0200 (Sun, 02 Apr 2006)
New Revision: 96

Added:
   trunk/analysis/biocase/Poznamky k BioCASE.doc
Removed:
   trunk/analysis/biocase/Pozn?\195?\161mky k BioCASE.doc
Log:
Renamed to avoid problems with repository checkout (special characters in the filename)

Deleted: trunk/analysis/biocase/Pozn?\195?\161mky k BioCASE.doc
===================================================================
(Binary files differ)

Copied: trunk/analysis/biocase/Poznamky k BioCASE.doc (from rev 88, trunk/analysis/biocase/Pozn?\195?\161mky k BioCASE.doc)



From fraktalek at berlios.de  Sun Apr  2 17:28:04 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Sun, 2 Apr 2006 17:28:04 +0200
Subject: [Plantlore-dev] r99 - trunk/documentation
Message-ID: <200604021528.k32FS4Uv030672@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-02 17:28:02 +0200 (Sun, 02 Apr 2006)
New Revision: 99

Added:
   trunk/documentation/Log4j Introduction.odt
Log:
A short introduction to log4j. Kovo should add when to use which logging level.
He wrote it once, I didn't find it anywhere.


Added: trunk/documentation/Log4j Introduction.odt
===================================================================
(Binary files differ)


Property changes on: trunk/documentation/Log4j Introduction.odt
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From fraktalek at berlios.de  Sun Apr  2 17:03:33 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Sun, 2 Apr 2006 17:03:33 +0200
Subject: [Plantlore-dev] r98 - trunk/src/net/sf/plantlore/config
Message-ID: <200604021503.k32F3XRY028798@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-02 17:03:33 +0200 (Sun, 02 Apr 2006)
New Revision: 98

Modified:
   trunk/src/net/sf/plantlore/config/log4j.properties
Log:
Suppress the iritating Hibernate debug output - set to INFO level. Root logger
logging level set to DEBUG.



Modified: trunk/src/net/sf/plantlore/config/log4j.properties
===================================================================
--- trunk/src/net/sf/plantlore/config/log4j.properties	2006-04-02 15:02:28 UTC (rev 97)
+++ trunk/src/net/sf/plantlore/config/log4j.properties	2006-04-02 15:03:33 UTC (rev 98)
@@ -1,3 +1,6 @@
+### set log levels - for more verbose logging change 'info' to 'debug' ###
+log4j.rootLogger=debug, stdout
+
 ### direct log messages to stdout ###
 log4j.appender.stdout=org.apache.log4j.ConsoleAppender
 log4j.appender.stdout.Target=System.out
@@ -10,10 +13,7 @@
 #log4j.appender.file.layout=org.apache.log4j.PatternLayout
 #log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n
 
-### set log levels - for more verbose logging change 'info' to 'debug' ###
 
-log4j.rootLogger=warn, stdout
-
 #log4j.logger.org.hibernate=info
 log4j.logger.org.hibernate=info
 
@@ -21,14 +21,14 @@
 #log4j.logger.org.hibernate.hql.ast.AST=debug
 
 ### log just the SQL
-#log4j.logger.org.hibernate.SQL=debug
+log4j.logger.org.hibernate.SQL=info
 
 ### log JDBC bind parameters ###
 log4j.logger.org.hibernate.type=info
 #log4j.logger.org.hibernate.type=debug
 
 ### log schema export/update ###
-log4j.logger.org.hibernate.tool.hbm2ddl=debug
+#log4j.logger.org.hibernate.tool.hbm2ddl=debug
 
 ### log HQL parse trees
 #log4j.logger.org.hibernate.hql=debug



From fraktalek at berlios.de  Sun Apr  2 17:02:30 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Sun, 2 Apr 2006 17:02:30 +0200
Subject: [Plantlore-dev] r97 - trunk/src/net/sf/plantlore/client
Message-ID: <200604021502.k32F2UJi028686@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-02 17:02:28 +0200 (Sun, 02 Apr 2006)
New Revision: 97

Modified:
   trunk/src/net/sf/plantlore/client/Plantlore.java
Log:
Improved log4j configuration. Now it is being configured by
net/sf/plantlore/config/log4j.properties



Modified: trunk/src/net/sf/plantlore/client/Plantlore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/Plantlore.java	2006-04-02 11:07:09 UTC (rev 96)
+++ trunk/src/net/sf/plantlore/client/Plantlore.java	2006-04-02 15:02:28 UTC (rev 97)
@@ -9,6 +9,10 @@
 
 import java.awt.EventQueue;
 import java.io.IOException;
+import java.io.InputStream;
+import java.util.Iterator;
+import java.util.Properties;
+import java.util.Set;
 
 import javax.swing.JFrame;
 import javax.swing.UIManager;
@@ -16,6 +20,7 @@
 import net.sf.plantlore.l10n.L10n;
 import org.apache.log4j.BasicConfigurator;
 import org.apache.log4j.Logger;
+import org.apache.log4j.PropertyConfigurator;
 
 /** The main class of Plantlore. This is where all begins.
  *
@@ -26,13 +31,28 @@
     AppCoreView view;
     AppCoreCtrl ctrl;
     Logger logger;
-    private static SplashScreen splashScreen;    
+    private static SplashScreen splashScreen;   
+    private static final String LOGGER_PROPS = "net/sf/plantlore/config/log4j.properties";
     
     /**
      * Creates a new instance of Plantlore
      */
     public Plantlore() {
+        //Load log4j settings
+        ClassLoader cl = this.getClass().getClassLoader();
+        InputStream is = cl.getResourceAsStream(LOGGER_PROPS);
+        Properties props = new Properties();
+        //FIXME:
+        try {
+            props.load(is);
+        } catch (IOException ex) {
+            ex.printStackTrace();
+        }
+        //maybe CHANGE to configureAndWatch()
+        PropertyConfigurator.configure(props);
+
         logger = Logger.getLogger(this.getClass().getPackage().getName());
+        logger.info("Plantlore client is starting up...");
     }
     
     /** The main() method for Plantlore client
@@ -45,8 +65,7 @@
         try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } catch (Exception e) { JFrame.setDefaultLookAndFeelDecorated(true); }
         
         
-        BasicConfigurator.configure();
-        Logger.getRootLogger().info("Plantlore client started");
+        //BasicConfigurator.configure();
         Plantlore plantlore = new Plantlore();
         try {
             L10n.load();



From fraktalek at berlios.de  Sun Apr  2 19:44:47 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Sun, 2 Apr 2006 19:44:47 +0200
Subject: [Plantlore-dev] r100 - in trunk/src/net/sf/plantlore: client l10n server
Message-ID: <200604021744.k32HiloH011520@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-02 19:44:26 +0200 (Sun, 02 Apr 2006)
New Revision: 100

Modified:
   trunk/src/net/sf/plantlore/client/AppCore.java
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/AppCoreView.java
   trunk/src/net/sf/plantlore/client/OverviewTableModel.java
   trunk/src/net/sf/plantlore/l10n/Plantlore.properties
   trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
Log:
Improved overview - records loaded from the database, switching between pages
(a fix of HibernateDBLayer is needed - throws exceptions when trying to fetch
the last record in a result), columns now have hand defined preferred width.



Modified: trunk/src/net/sf/plantlore/client/AppCore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-02 15:28:02 UTC (rev 99)
+++ trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-02 17:44:26 UTC (rev 100)
@@ -16,6 +16,7 @@
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.server.DBLayerException;
 import net.sf.plantlore.server.HibernateDBLayer;
+import org.apache.log4j.Logger;
 
 /** Application core model
  *
@@ -24,13 +25,16 @@
 public class AppCore extends Observable
 {
     private Preferences prefs;
-    private int recordsPerPage;
+    private int recordsPerPage = 30;
+    private int currentPage = 1;
     private DBLayer database;  
     private OverviewTableModel tableModel;
+    private Logger logger;
 
     /** Creates a new instance of AppCore */
     public AppCore()
     {
+        logger = Logger.getLogger(this.getClass().getPackage().getName());        
         prefs = Preferences.userNodeForPackage(this.getClass());
         
 //        database = new FirebirdDBLayer("localhost", "3050", "/mnt/data/temp/plantloreHIB.fdb", "sysdba", "masterkey");
@@ -43,7 +47,21 @@
         	System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
         }
         
-        tableModel = new OverviewTableModel(database);
+        
+        
+        //FIXME:
+        try {
+            
+            tableModel = new OverviewTableModel(database, prefs.getInt("recordsPerPage", 30));
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }
+        logger.debug("tableModel created");
+        setChanged();
+        notifyObservers();
+        logger.debug("AppCore observers notified");
     }
     
     /*********************************************************
@@ -65,29 +83,80 @@
     public OverviewTableModel getTableModel() {
         return this.tableModel;
     }
-    
-    /** 
-     * TODO: make methods of OverviewTableModel call setChanged() of this observable.
-     * and then remove from appCore methods duplicating those from OverviewTableModel
-     */
-    public void setModelChanged() {
-        setChanged();
-    }
-    
+        
     public void selectAll() {
         tableModel.selectAll();
-        setChanged();
-        notifyObservers();
+        //setChanged();
+        //notifyObservers();
     }
 
     public void selectNone() {
         tableModel.selectNone();
-        setChanged();
-        notifyObservers();
+        //setChanged();
+        //notifyObservers();
     }
     public void invertSelected() {
         tableModel.invertSelected();
+        //setChanged();
+        //notifyObservers();
+    }
+
+    public int getRecordsPerPage() {
+        return tableModel.getPageSize();
+    }
+
+    public void setRecordsPerPage(int recordsPerPage) {
+        tableModel.setPageSize(recordsPerPage);
         setChanged();
+        notifyObservers();        
+    }
+
+    public void nextPage() {
+        //FIXME:
+        try {
+            tableModel.nextPage();
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }
+        setChanged();
+        notifyObservers();        
+    }
+    
+    public void prevPage() {
+        //FIXME:
+        try {
+            tableModel.prevPage();
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }
+        setChanged();
         notifyObservers();
     }
+
+    public int getCurrentPage() {
+        return tableModel.getCurrentPage();
+    }
+
+    public void setCurrentPage(int currentPage) {
+        tableModel.setCurrentPage(currentPage);
+        setChanged();
+        notifyObservers();
+    }
+    
+    public int getResultsCount() {
+        return tableModel.getResultsCount();
+    }
+    
+    public int getPagesCount() {
+        return tableModel.getPagesCount();
+    }
+    
+    public void savePreferences() {
+        logger.info("Saving main window preferences.");
+        prefs.putInt("recordsPerPage", recordsPerPage);
+    }
 }

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-02 15:28:02 UTC (rev 99)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-02 17:44:26 UTC (rev 100)
@@ -12,9 +12,13 @@
 import java.awt.event.KeyEvent;
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
+import java.lang.Integer;
 import java.rmi.RemoteException;
 import java.util.prefs.Preferences;
 import javax.swing.AbstractAction;
+import javax.swing.JFormattedTextField;
 import net.sf.plantlore.server.DBLayerException;
 import net.sf.plantlore.client.dblayer.FirebirdDBLayer;
 import net.sf.plantlore.common.record.Plant;
@@ -68,16 +72,24 @@
         view.setHelpAboutAction(new HelpAboutAction());
         view.setExportAction(new ExportAction());
         view.setImportAction(new ImportAction());
-        view.setSearchAction(new SearchAction());
+        
         view.addDataAuthorsListener(new DataAuthorsListener());
         view.addDataPublicationsListener(new DataPublicationsListener());
         view.addDataHistoryListener(new DataHistoryListener());
+        
+        view.setSearchAction(new SearchAction());
         view.setAddAction(new AddAction());
         view.setEditAction(new EditAction());
         view.setDeleteAction(new DeleteAction());
+
         view.setSelectAllAction(new SelectAllAction());
         view.setSelectNoneAction(new SelectNoneAction());
         view.setInvertSelectedAction(new InvertSelectedAction());
+        view.setNextPageAction(new NextPageAction());
+        view.setPrevPageAction(new PreviousPageAction());
+
+        view.addWindowListener(new AppWindowListener());
+        view.setRecordsPerPageListener(new RecordsPerPagePropertyChangeListener());
     }
     
     /** Handles click to menu item Settings.
@@ -158,6 +170,7 @@
     class ExitListener implements ActionListener {
         public void actionPerformed(ActionEvent actionEvent)
         {
+            model.savePreferences();
             System.exit(0);
         }
     }
@@ -293,19 +306,41 @@
         }
     }
     
+    class PreviousPageAction extends AbstractAction {
+        public PreviousPageAction() {
+            putValue(NAME, L10n.getString("prevButton"));
+            putValue(SHORT_DESCRIPTION, L10n.getString("prevButtonTT"));
+            putValue(MNEMONIC_KEY, L10n.getMnemonic("prevButton"));            
+        } 
+
+        public void actionPerformed(ActionEvent actionEvent) {
+            model.prevPage();
+        }
+    }
     
+    class NextPageAction extends AbstractAction {
+        public NextPageAction() {
+            putValue(NAME, L10n.getString("nextButton"));
+            putValue(SHORT_DESCRIPTION, L10n.getString("nextButtonTT"));
+            putValue(MNEMONIC_KEY, L10n.getMnemonic("nextButton"));            
+        } 
+
+        public void actionPerformed(ActionEvent actionEvent) {
+            model.nextPage();
+        }
+    }
+
     class AppWindowListener extends WindowAdapter {
         public void windowClosing(WindowEvent e)
         {
-            logger.info("Saving main window preferences.");
-            
+            model.savePreferences();
         }
     }
 
     class DataAuthorsListener implements ActionListener {
         public void actionPerformed(ActionEvent actionEvent) {
             AuthorManager authModel = new AuthorManager(model.getDatabase());
-            AuthorManagerView authView = new AuthorManagerView(authModel, view.getFrame());
+            AuthorManagerView authView = new AuthorManagerView(authModel, view);
             AuthorManagerCtrl authCtrl = new AuthorManagerCtrl(authModel, authView);
             authView.show();
         }
@@ -325,9 +360,25 @@
             //o vybranem zaznamu predame informace, ktere chceme o nem v historii zobrazit
             //jmeno rosliny, jmeno autora a lokaci a idOccurrences
             historyModel = new History(model.getDatabase(),"Adis Abeba", "Lada", "Praha v?chod", 1);
-            historyView = new HistoryView(historyModel, view.getFrame());
+            historyView = new HistoryView(historyModel, view);
             historyCtrl = new HistoryCtrl(historyModel, historyView);
             historyView.show();  
         }
     }    
+    
+    class RecordsPerPagePropertyChangeListener implements PropertyChangeListener {
+        public void propertyChange(PropertyChangeEvent e) {
+            JFormattedTextField tf = (JFormattedTextField)e.getSource();
+            if (e != null && e.getPropertyName().equals("value")) 
+            {
+                int i = ((Number)tf.getValue()).intValue(); 
+                if (i < 1)
+                {
+                    tf.setValue(e.getOldValue());
+                } else {
+                    model.setRecordsPerPage(i);                    
+                }
+            }
+        }  
+    }
 }

Modified: trunk/src/net/sf/plantlore/client/AppCoreView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-02 15:28:02 UTC (rev 99)
+++ trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-02 17:44:26 UTC (rev 100)
@@ -15,6 +15,8 @@
 import java.awt.event.ActionListener;
 import java.awt.event.KeyEvent;
 import java.awt.event.WindowAdapter;
+import java.beans.PropertyChangeListener;
+import java.text.NumberFormat;
 import java.util.Observable;
 import java.util.Observer;
 import java.util.prefs.Preferences;
@@ -49,11 +51,11 @@
  *
  * @author Jakub
  */
-public class AppCoreView implements Observer
+public class AppCoreView extends JFrame implements Observer 
 {
     private Preferences prefs;
     private AppCore model;
-    private JFrame frame;
+    //private JFrame frame;
     private Container container;
     private JPanel mainPane;
     private JMenuBar menuBar = new JMenuBar();
@@ -82,14 +84,18 @@
             deleteButton = new JButton(),
             selectAll = new JButton(),
             selectNone = new JButton(),
-            invertSelected  = new JButton();
+            invertSelected  = new JButton(),
+            prevPage = new JButton(),
+            nextPage = new JButton();
     
     private JLabel statusLabel;
     
     private JTable overview;
     private JToolBar mainToolBar;
     private JToolBar pageToolBar;
-    private JFormattedTextField recordsPerPage;
+    private JFormattedTextField recordsPerPage = new JFormattedTextField(NumberFormat.getIntegerInstance());
+    private JLabel pageStatus = new JLabel("-/-");
+    private JLabel recordsCount = new JLabel("-");
     private StatusBarManager sbm;
     
     /** Creates a new instance of AppCoreView */
@@ -102,8 +108,8 @@
 
     public void update(Observable observable, Object object)
     {
-        frame.repaint();
-        overview.repaint();
+        recordsCount.setText(""+model.getResultsCount());
+        pageStatus.setText(""+model.getCurrentPage()+"/"+model.getPagesCount());
     }
     
     /** Calls all the constructing init methods.
@@ -116,7 +122,7 @@
         initMenu();
         initOverview();
         initMainToolBar();
-        frame.pack();
+        this.pack();
     }
 
     /** Constructs the main Plantlore JFrame.
@@ -124,12 +130,12 @@
      */
     public void initFrame() 
     {
-        frame = new JFrame(L10n.getString("plantlore"));
-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-        frame.setExtendedState(JFrame.MAXIMIZED_BOTH); 
-        frame.setVisible(false);
-        frame.setJMenuBar(menuBar);
-        container = frame.getContentPane();
+//        frame = new JFrame(L10n.getString("plantlore"));
+        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+        this.setExtendedState(JFrame.MAXIMIZED_BOTH); 
+        this.setVisible(false);
+        this.setJMenuBar(menuBar);
+        container = this.getContentPane();
         container.setLayout(new BorderLayout());
         mainPane = new JPanel();
         mainPane.setLayout(new BorderLayout());
@@ -204,9 +210,9 @@
         OverviewTableModel otm = model.getTableModel();
         overview = new JTable(otm);
         TableColumn tc;
-        for (int i = 0; i < 23; i++) {
+        for (int i = 0; i < otm.getColumnCount(); i++) {
             tc = overview.getColumnModel().getColumn(i);
-            tc.setPreferredWidth(otm.getColumnName(i).length()*10);
+            tc.setPreferredWidth(otm.getColumnSize(i));
         }
         JPanel tablePanel = new JPanel();
         tablePanel.setLayout(new BorderLayout());
@@ -217,11 +223,8 @@
         mainPane.add(sp, BorderLayout.CENTER);
         
         pageToolBar = new JToolBar();
-        JButton prev = new JButton(L10n.getString("prevButton"));
-        recordsPerPage = new JFormattedTextField();
-        recordsPerPage.setValue(new Integer(prefs.getInt("recordsPerPage", 10)));
-        JButton next = new JButton(L10n.getString("nextButton"));
-        recordsPerPage.setPreferredSize(new Dimension(50, recordsPerPage.getPreferredSize().height));
+        recordsPerPage.setValue(new Integer(model.getRecordsPerPage()));
+        recordsPerPage.setPreferredSize(new Dimension(40, 10));
         recordsPerPage.setHorizontalAlignment(JTextField.CENTER);
         pageToolBar.setFloatable(false);
         pageToolBar.setRollover(true);
@@ -234,17 +237,27 @@
         pageToolBar.addSeparator();        
         pageToolBar.add(invertSelected);
         pageToolBar.addSeparator();        
-        pageToolBar.add(prev);
+        pageToolBar.add(prevPage);
         pageToolBar.add(recordsPerPage);
-        pageToolBar.add(next);
+        pageToolBar.add(nextPage);
         
+        recordsCount.setToolTipText(L10n.getString("overviewRecordsCountTT"));
+        pageStatus.setToolTipText(L10n.getString("overviewPageStatusTT"));
+        JPanel controlPane = new JPanel(new BorderLayout());
+        JPanel topControlPane = new JPanel(new FlowLayout());
         JPanel toolBarPane = new JPanel(new FlowLayout());
 //        toolBarPane.add(selectToolBar);
         toolBarPane.add(pageToolBar);
-        mainPane.add(toolBarPane, BorderLayout.SOUTH);
+        topControlPane.add(new JLabel(L10n.getString("overviewRecordsCount")));
+        topControlPane.add(recordsCount);
+        topControlPane.add(new JLabel(L10n.getString("overviewPageStatus")));
+        topControlPane.add(pageStatus);
+        controlPane.add(topControlPane, BorderLayout.NORTH);
+        controlPane.add(toolBarPane, BorderLayout.SOUTH);
+        mainPane.add(controlPane, BorderLayout.SOUTH);
         ComponentAdjust ca = new ComponentAdjust();
-        ca.add(prev);
-        ca.add(next);
+        ca.add(prevPage);
+        ca.add(nextPage);
         ca.setMaxWidth();
         ca.clear();
         ca.add(selectAll);
@@ -252,8 +265,8 @@
         ca.add(invertSelected);
         ca.setMaxWidth();
         
-        sbm.add(prev, "Previous page");
-        sbm.add(next, "Next page");
+        sbm.add(prevPage, "Previous page");
+        sbm.add(nextPage, "Next page");
         sbm.add(recordsPerPage, "Number of records per page");
     }
     
@@ -265,13 +278,6 @@
         return sbm;
     }
     
-    /** Hides and shows the main Plantlore window.
-     *
-     */
-    public void setVisible(boolean visible) {
-        frame.setVisible(visible);
-    }
-
     /** Sets an action to the settings menu item.
      *
      */
@@ -370,13 +376,27 @@
         exportButton.setAction(a);
     }
 
-    /** Adds a listener to the main window frame.
+    /** Sets an action to the previous page button.
      *
      */
-    public void addWindowListener(WindowAdapter wa) {
-        frame.addWindowListener(wa);
+    public void setPrevPageAction(AbstractAction a) {
+        prevPage.setAction(a);
     }
 
+    /** Sets an action to the next page button.
+     *
+     */
+    public void setNextPageAction(AbstractAction a) {
+        nextPage.setAction(a);
+    }
+
+    /** Adds a listener to the main window frame.
+     *
+     */
+    /*public void addWindowListener(WindowAdapter wa) {
+        this.addWindowListener(wa);
+    }*/
+
     /** Adds a listener to the Author manager menu item.
      *
      */
@@ -398,10 +418,15 @@
         dataHistory.addActionListener(al);
     }
     
+    public void setRecordsPerPageListener(PropertyChangeListener p)
+    {
+        recordsPerPage.addPropertyChangeListener(p);
+    }
+    
     /** Returns the frame of the main window.
      *
      */
-    protected JFrame getFrame() {
+/*    protected JFrame getFrame() {
         return this.frame;
-    }     
+    }     */
 }

Modified: trunk/src/net/sf/plantlore/client/OverviewTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-02 15:28:02 UTC (rev 99)
+++ trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-02 17:44:26 UTC (rev 100)
@@ -7,27 +7,37 @@
 
 package net.sf.plantlore.client;
 
+import java.rmi.RemoteException;
 import javax.swing.table.AbstractTableModel;
+import net.sf.plantlore.common.PlantloreConstants;
+import net.sf.plantlore.common.record.AuthorOccurrence;
 import net.sf.plantlore.common.record.Occurrence;
+import net.sf.plantlore.common.record.Plant;
+import net.sf.plantlore.l10n.L10n;
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.server.DBLayerException;
 import net.sf.plantlore.middleware.SelectQuery;
+import org.apache.log4j.Logger;
 
 /** Implements a table model for the main data overview.
  *
  * @author Jakub
  */
-public class OverviewTableModel extends AbstractTableModel
-{
+public class OverviewTableModel extends AbstractTableModel {
+    private Logger logger;
+    private static final int COLUMN_COUNT = 23;
     private DBLayer db;
-    private String[] columnNames = { "X","Name", "Author", "Nearest bigger seat", "Place description", "Year", 
-    "Territory", "Territory code","Phytochorion","Phytochorion code","Country","Quadrant",
-    "Ocurrence note", "Location note", "Altitude", "Longitude", "Latitude", "Source", "Publication",
-    "Herbarium", "Metadata", "Month", "Day", "Time"};
+    private String[] columnNames;
+    private int[] columnSizes;
     
+    private int resultid = 0;
+    private int resultsCount = 0;
+    private int pageSize = 30;
+    private int currentPage = 1;
+    
     private Object[][] data = {
-        {true, "Pampeliska", "neznamy", "Praha", new Integer(1995), "none", "phy", "cechy", new Boolean(false), new Integer(10), new Integer(12), new Integer(-5), "","","","","","","","","","","",""},
-        {false,"Hermanek", "Jakub", "Zelezny Brod", new Integer(1990), "none", "phy", "cechy", new Boolean(true), new Integer(10), new Integer(12), new Integer(-5), "","","","","","","","","","","",""}        
+        {true, "Pampeliska", "neznamy", "Praha", new Integer(1995), "phy", "cechy", new Boolean(false), new Integer(10), new Integer(12), new Integer(-5), "","","","","","","","","","","",""},
+        {false,"Hermanek", "Jakub", "Zelezny Brod", new Integer(1990), "phy", "cechy", new Boolean(true), new Integer(10), new Integer(12), new Integer(-5), "","","","","","","","","","","",""}
     };
     
     /** Simple mode if true - only first three columns are displayed
@@ -36,32 +46,136 @@
      */
     private boolean simple = true;
     
+    private int from = 1;
+    private int to = 1;
+    
     /** Creates a new instance of OverviewTableModel */
-    public OverviewTableModel(DBLayer db) {
-       /* int resultid = 0;
+    public OverviewTableModel(DBLayer db, int pageSize) throws RemoteException, DBLayerException {
+        logger = Logger.getLogger(this.getClass().getPackage().getName());
+        init();
+        
+        this.pageSize = pageSize;
+        resultsCount = 0;
         this.db = db;
-        SelectQuery sq = db.createQuery(Occurrence.class);
+        SelectQuery sq = db.createQuery(AuthorOccurrence.class);
+        //FIXME:
         try {
-            resultid = db.executeQuery(sq);
+            setResultid(db.executeQuery(sq));
         } catch (DBLayerException ex) {
             ex.printStackTrace();
         }
-        System.out.println("OverviewTableModel: "+db.getNumRows(resultid)+" retrieved.");
-        */
+        loadData();
     }
+    
+    private void init() {
+        columnNames = new String[COLUMN_COUNT];
+        columnSizes = new int[COLUMN_COUNT];
+        columnNames[0] = L10n.getString("overviewColX");
+        columnSizes[0] = 30;
+        columnNames[1] = L10n.getString("overviewColName");
+        columnSizes[1] = 100;
+        columnNames[2] = L10n.getString("overviewColAuthor");
+        columnSizes[2] = 100;
+        columnNames[3] = L10n.getString("overviewColVillage");
+        columnSizes[3] = 100;
+        columnNames[4] = L10n.getString("overviewColPlace");
+        columnSizes[4] = 150;
+        columnNames[5] = L10n.getString("overviewColYear");
+        columnSizes[5] = 50;
+        columnNames[6] = L10n.getString("overviewColTerritory");
+        columnSizes[6] = 100;
+        columnNames[7] = L10n.getString("overviewColPhyt");
+        columnSizes[7] = 100;
+        columnNames[8] = L10n.getString("overviewColPhytCode");
+        columnSizes[8] = 50;
+        columnNames[9] = L10n.getString("overviewColCountry");
+        columnSizes[9] = 100;
+        columnNames[10] = L10n.getString("overviewColQuadrant");
+        columnSizes[10] = 50;
+        columnNames[11] = L10n.getString("overviewColOccNote");
+        columnSizes[11] = 150;
+        columnNames[12] = L10n.getString("overviewColLocNote");
+        columnSizes[12] = 150;
+        columnNames[13] = L10n.getString("overviewColAltitude");
+        columnSizes[13] = 50;
+        columnNames[14] = L10n.getString("overviewColLongitude");
+        columnSizes[14] = 50;
+        columnNames[15] = L10n.getString("overviewColLatitude");
+        columnSizes[15] = 50;
+        columnNames[16] = L10n.getString("overviewColSource");
+        columnSizes[16] = 100;
+        columnNames[17] = L10n.getString("overviewColPublication");
+        columnSizes[17] = 100;
+        columnNames[18] = L10n.getString("overviewColHerbarium");
+        columnSizes[18] = 80;
+        columnNames[19] = L10n.getString("overviewColMetadata");
+        columnSizes[19] = 100;
+        columnNames[20] = L10n.getString("overviewColMonth");
+        columnSizes[20] = 50;
+        columnNames[21] = L10n.getString("overviewColDay");
+        columnSizes[21] = 50;
+        columnNames[22] = L10n.getString("overviewColTime");
+        columnSizes[22] = 100;
+    }
+    
+    /**
+     * Expects from, pageSize, currentPage and resultid variables to be set appropriately.
+     */
+    private void loadData() throws DBLayerException, RemoteException
+    {
+        Object[] row;
+        AuthorOccurrence result;
+        Plant plant;
+        Object[] resultObj, records;
+        resultsCount = db.getNumRows(getResultid());
+        logger.debug("resultsCount = "+resultsCount);
+        to = Math.min(resultsCount, from + pageSize - 1);
+        logger.debug("to = "+to+" from="+from+" currentPage="+currentPage);
+        data = new Object[to - from + 1][];
+        logger.debug("data.length = "+data.length);
+        records = db.more(getResultid(), from, to);
+        logger.debug("records.length = " + records.length);
 
-    public int getRowCount()
-    {
+        for (int i = 1; i <= to - from + 1 ; i++) {
+            resultObj = (Object[])records[i-1];
+            result = (AuthorOccurrence)resultObj[0];
+            row = new Object[COLUMN_COUNT];
+            row[0] = false;
+            row[1] = result.getOccurrence().getPlant().getTaxon();
+            row[2] = result.getAuthor().getWholeName();
+            row[3] = result.getOccurrence().getHabitat().getNearestVillage().getName();
+            row[4] = result.getOccurrence().getHabitat().getDescription();
+            row[5] = result.getOccurrence().getYearCollected();
+            row[6] = result.getOccurrence().getHabitat().getTerritory().getName();
+            row[7] = result.getOccurrence().getHabitat().getPhytochorion().getName();
+            row[8] = result.getOccurrence().getHabitat().getPhytochorion().getCode();
+            row[9] = result.getOccurrence().getHabitat().getCountry();
+            row[10] = result.getOccurrence().getHabitat().getQuadrant();
+            row[11] = result.getOccurrence().getNote();
+            row[12] = result.getOccurrence().getHabitat().getNote();
+            row[13] = result.getOccurrence().getHabitat().getAltitude();
+            row[14] = result.getOccurrence().getHabitat().getLongitude();
+            row[15] = result.getOccurrence().getHabitat().getLatitude();
+            row[16] = result.getOccurrence().getDataSource();
+            row[17] = result.getOccurrence().getPublication().getCollectionName();
+            row[18] = result.getOccurrence().getHerbarium();
+            row[19] = result.getOccurrence().getMetadata().getDataSetTitle();
+            row[20] = result.getOccurrence().getMonthCollected();
+            row[21] = result.getOccurrence().getDayCollected();
+            row[22] = result.getOccurrence().getTimeCollected();
+            data[i-1] = row;
+        }//i        
+    }
+    
+    public int getRowCount() {
         return data.length;
     }
-
-    public int getColumnCount()
-    {
+    
+    public int getColumnCount() {
         return columnNames.length;
     }
-
-    public Object getValueAt(int i, int i0)
-    {
+    
+    public Object getValueAt(int i, int i0) {
         return data[i][i0];
     }
     
@@ -72,52 +186,130 @@
     public String getColumnName(int c){
         return columnNames[c];
     }
-
-    public void setValueAt(Object value, int row, int column)
-    {
+    
+    public void setValueAt(Object value, int row, int column) {
         data[row][column] = value;
+        //repaint view - with new value
+        this.fireTableCellUpdated(row, column);
     }
     
-    public boolean isCellEditable(int row, int column) 
-    {
-    	if (column == 0 )
-    	{
-    		return true;
-    	}
-    	return false;
+    public boolean isCellEditable(int row, int column) {
+        if (column == 0 ) {
+            return true;
+        }
+        return false;
     }
     
-    public boolean isSimple()
-    {
+    public int getColumnSize(int col) {
+        return columnSizes[col];
+    }
+    
+    public boolean isSimple() {
         return simple;
     }
     
-    public void setSimple(boolean simple)
-    {
+    public void setSimple(boolean simple) {
         this.simple = simple;
     }
     
-    public void selectAll() 
-    {
+    public void selectAll() {
         for (int i = 0; i < data.length; i++) {
-            data[i][0] = true;
+            setValueAt(true,i,0);
         }
     }
     
-    public void selectNone() 
-    {
+    public void selectNone() {
         for (int i = 0; i < data.length; i++) {
-            data[i][0] = false;
+            setValueAt(false, i, 0);
         }
     }
     
-    public void invertSelected()
-    {
+    public void invertSelected() {
         for (int i = 0; i < data.length; i++) {
             if ((Boolean)data[i][0] == true)
-                data[i][0] = false;
+                setValueAt(false, i, 0);
             else
-                data[i][0] = true;
-        }        
+                setValueAt(true, i, 0);
+        }
     }
+    
+    public int getPageSize() {
+        return pageSize;
+    }
+    
+    public void setPageSize(int pageSize) {
+        this.pageSize = pageSize;
+        if (from + pageSize > resultsCount)
+            from = resultsCount - pageSize + 1;
+        //FIXME: - taky musi umet prepocitat from a to
+        try {
+            loadData();
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }
+        fireTableDataChanged();
+    }
+    
+    public int getCurrentPage() {
+        return currentPage;
+    }
+    
+    public void setCurrentPage(int currentPage) {
+        this.currentPage = currentPage;
+    }
+
+    public boolean nextPage() throws DBLayerException, RemoteException 
+    {
+        int lastPage = getPagesCount();
+        logger.debug("lastPage = " + lastPage);
+        if (currentPage < lastPage)
+        {
+            currentPage++;  
+            from = from + pageSize;
+            loadData(); //load data with new parameter currentPage
+            fireTableDataChanged(); //let the table compoment know it should redraw itself
+            logger.debug("currentPage = "+ currentPage);
+            return true;
+        } else {
+            return false;
+        }
+    }
+    
+    public boolean prevPage() throws DBLayerException, RemoteException
+    {
+        if (currentPage > 1)
+        {
+            currentPage--;
+            from = from - pageSize;
+            loadData(); //load data with new parameter currentPage
+            fireTableDataChanged(); //let the table compoment know it should redraw itself
+            logger.debug("currentPage = "+ currentPage);
+            return true;
+        } else {
+            return false;
+        }
+    }
+    
+    public int getResultid() {
+        return resultid;
+    }
+
+    public void setResultid(int resultid) {
+        this.resultid = resultid;
+    }
+
+    public int getResultsCount() {
+        return resultsCount;
+    }
+    
+    public void setResultsCount(int resultsCount) {
+        this.resultsCount = resultsCount;
+    }
+    
+    public int getPagesCount() 
+    {
+        return ((Number)Math.ceil(resultsCount / (pageSize*1.0))).intValue();
+    }
 }

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-02 15:28:02 UTC (rev 99)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-02 17:44:26 UTC (rev 100)
@@ -22,7 +22,9 @@
 statusLangSettings = Switches to language settings
 statusOtherSettings = Switches to other settings
 prevButton = Prev
+prevButtonTT = Shows previous page
 nextButton = Next
+nextButtonTT = Shows next page
 Data=Data
 dataImport=&Import
 dataImportTooltip=Imports occurence records into the database
@@ -45,7 +47,34 @@
 invertSelected=Invert
 invertSelectedTT=Inverts the selection
 
+overviewColX = X
+overviewColName = Name
+overviewColAuthor = Author
+overviewColVillage = Nearest village
+overviewColPlace = Place description
+overviewColYear = Year
+overviewColTerritory = Territory
+overviewColPhyt = Phytochorion
+overviewColPhytCode = Phyt. code
+overviewColCountry = Country
+overviewColQuadrant = Quadrant
+overviewColOccNote = Note (occurrence)
+overviewColLocNote = Note (location)
+overviewColAltitude = Altitude
+overviewColLongitude = Longitude
+overviewColLatitude = Latitude
+overviewColSource = Source
+overviewColPublication = Publication
+overviewColHerbarium = Herbarium
+overviewColMetadata = Metadata
+overviewColMonth = Month
+overviewColDay = Day
+overviewColTime = Time
 
+overviewRecordsCount=Results:
+overviewRecordsCountTT=Number of results found
+overviewPageStatus=Page:
+overviewPageStatusTT=Current page / Total number of pages
 
 authorMgr=Author manager
 

Modified: trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-02 15:28:02 UTC (rev 99)
+++ trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-02 17:44:26 UTC (rev 100)
@@ -88,9 +88,9 @@
             throw new DBLayerException("Cannot load Hibernate configuration. Details: "+e.getMessage());            
         }
 
-        cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Temp/plantloreHIBdata.fdb");
+        //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Temp/plantloreHIBdata.fdb");
         //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Kovo/DatabaseTest/database/plantlore.fdb");
-        //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:/mnt/data/temp/plantloreDBdata.fdb");
+        cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:/mnt/data/temp/plantloreHIBdata.fdb");
         cfg.setProperty("hibernate.connection.username", "sysdba");
         cfg.setProperty("hibernate.connection.password", "masterkey");        
         try {
@@ -215,9 +215,11 @@
         // Read all the selected rows
         try {
             for (int i=0; i<=(to-from); i++) {
+                logger.debug("About to get result number "+i);
                 if (res.next()) {
                     data[i] = res.get();
                 } else {
+                    logger.debug("res.get() would return: "+res.get());
                     logger.error("Result doesn't have enough rows");
                     throw new DBLayerException("Result doesn't have enough rows");                
                 }                



From krater at berlios.de  Sun Apr  2 22:31:12 2006
From: krater at berlios.de (krater at berlios.de)
Date: Sun, 2 Apr 2006 22:31:12 +0200
Subject: [Plantlore-dev] r101 - in trunk/src/net/sf/plantlore: client client/login middleware server
Message-ID: <200604022031.k32KVC34002359@sheep.berlios.de>

Author: krater
Date: 2006-04-02 22:31:11 +0200 (Sun, 02 Apr 2006)
New Revision: 101

Added:
   trunk/src/net/sf/plantlore/client/login/
   trunk/src/net/sf/plantlore/client/login/DBInfo.java
   trunk/src/net/sf/plantlore/client/login/Login.java
Modified:
   trunk/src/net/sf/plantlore/middleware/DBLayerFactory.java
   trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java
   trunk/src/net/sf/plantlore/server/ConnectionInfo.java
   trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java
   trunk/src/net/sf/plantlore/server/RMIServer.java
   trunk/src/net/sf/plantlore/server/Server.java
   trunk/src/net/sf/plantlore/server/Undertaker.java
Log:
Login Model Added. Only a partial implementation - left for Jakub to finish.
DBLayerFactory(String, short) changed to more rational DBLayerFactory(String, int).
The logger is used more often to report problems (instead of System.err.println).
New comments created.

Added: trunk/src/net/sf/plantlore/client/login/DBInfo.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/DBInfo.java	2006-04-02 17:44:26 UTC (rev 100)
+++ trunk/src/net/sf/plantlore/client/login/DBInfo.java	2006-04-02 20:31:11 UTC (rev 101)
@@ -0,0 +1,59 @@
+package net.sf.plantlore.client.login;
+
+/**
+ * Store information about one DB.
+ * <ul>
+ * <li><b>alias</b> ~ the name that will be presented to the user (such as <i>"Home Database"</i>)</li>
+ * <li><b>host</b> ~ the host name of the server where the database is located</li>
+ * <li><b>port</b> ~ the port number where the server listens</li>
+ * <li><b>db</b> ~ the database identificator</li>
+ * <li><b>user</b> ~ last five user names that have been used for authentication</li>
+ * </ul>
+ * 
+ * @author Erik Kratochv?l
+ * @version 1.0 final
+ */
+public class DBInfo {
+	protected String alias;
+	protected String host;
+	protected String db;
+	protected String[] user;	
+	protected int port;
+	
+	/**
+	 * Create a new record.
+	 * 
+	 * @param alias The name the user will be presented with.
+	 * @param host The hostname where the server runs.
+	 * @param port The port number where the server listens, 0 means default.
+	 * @param db The database identificator.
+	 * @param users The list of user names used lately.
+	 */
+	public DBInfo(String alias, String host, int port, String db, String[] users) {
+		this.alias = alias; this.host = host; this.port = (port <= 0) ? 1099 : port; this.db = db; this.user = users;
+	}
+	
+	/**
+	 * Add a new user name into the list of users. The least used username will be lost.
+	 * The list of users will start with the newly added username. 
+	 * 
+	 * @param name The name to be added.
+	 */
+	public void addUser(String name) {
+		for(int i = 1; i < user.length; i++) user[i] = user[i - 1];
+		user[0] = name;
+	}
+	
+	/**
+	 * Pick a user. The selected name will be moved to the start of the list.
+	 * The selected user will be at the top of the list next time.
+	 * 
+	 * @param id	The chosen user.
+	 */
+	public void selectUser(int id) {
+		String name = user[id];
+		for(int i = id; i > 0; i--) user[i] = user[i - 1];
+		user[0] = name;
+	}
+		
+}

Added: trunk/src/net/sf/plantlore/client/login/Login.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-02 17:44:26 UTC (rev 100)
+++ trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-02 20:31:11 UTC (rev 101)
@@ -0,0 +1,96 @@
+package net.sf.plantlore.client.login;
+
+import java.rmi.NotBoundException;
+import java.rmi.RemoteException;
+import java.util.Observable;
+import java.util.Vector;
+
+import net.sf.plantlore.middleware.DBLayer;
+import net.sf.plantlore.middleware.DBLayerFactory;
+import net.sf.plantlore.server.DBLayerException;
+
+/**
+ * 
+ * Preliminary usage: <br/>
+ * <ul>
+ * <li>Login login = new Login(new RMIDBLayerFactory());</li>
+ * <li>login.connectToSelected(...)</li>
+ * </ul>
+ * 
+ * 
+ * @author Erik Kratochv?l, Jakub Kotowski
+ * @version 0.5
+ */
+public class Login extends Observable {
+	
+	public static final int MAX_NAMES = 5;
+
+	private Vector<DBInfo> dbinfo = new Vector<DBInfo>(10);
+	private DBInfo selected = null;
+	
+	private String  file = System.getProperty("user.home") + "/.plantlore/db.info.xml";
+	
+	private DBLayerFactory factory = null;
+	private DBLayer dblayer = null;
+	
+	
+	public Login(DBLayerFactory factory) {
+		this.factory = factory;
+	}
+	
+	
+	
+	protected void load() {
+		// TODO: JAKUB: nacist z XML souboru se jmenem `file` informace o databazich (triplety) do kolekce dbinfo.
+		
+		this.hasChanged(); this.notifyObservers();
+	}
+	
+	protected void save() {
+		// TODO: JAKUB: ulozit kolekci dbinfo zpatky do XML souboru se jmenem `file`.
+	}
+	
+	
+	public void createRecord(String alias, String host, int port, String db) {
+		DBInfo r = new DBInfo(alias, host, port, db, new String[5]);
+		dbinfo.add(r);
+		save();
+		this.hasChanged(); this.notifyObservers();
+	}
+	
+	public void deleteRecord(DBInfo info) {
+		dbinfo.remove(info);
+		save();
+		this.hasChanged(); this.notifyObservers();
+	}
+	
+	public void updateSelectedRecord(DBInfo info) {
+		int index = dbinfo.indexOf(selected);
+		dbinfo.setElementAt(info, index); // info.clone()?
+		selected = info; 
+		this.hasChanged(); this.notifyObservers();
+	}
+	
+	/** Subject to change.. */
+	public DBInfo[] getRecords() {
+		// Well, this sucks! The ugliest way to do things... is to have a Cloneable interface and don't use it.
+		// Seeing is believing: http://java.sun.com/j2se/1.5.0/docs/api/java/util/Collection.html#toArray(T[])
+		return dbinfo.toArray(new DBInfo[0]);
+	}
+	
+	public void setSelected(int index) {
+		selected = dbinfo.elementAt(index);		
+	}
+	
+	public DBLayer connectToSelected(String name, String password) throws NotBoundException, RemoteException, DBLayerException {
+		DBLayer dblayer = factory.create(selected.host, selected.port);
+		dblayer.initialize(name, password, selected.db);
+		return dblayer;
+	}
+	
+	public DBLayer getDBLayer() {
+		return dblayer;
+	}
+	
+	
+}

Modified: trunk/src/net/sf/plantlore/middleware/DBLayerFactory.java
===================================================================
--- trunk/src/net/sf/plantlore/middleware/DBLayerFactory.java	2006-04-02 17:44:26 UTC (rev 100)
+++ trunk/src/net/sf/plantlore/middleware/DBLayerFactory.java	2006-04-02 20:31:11 UTC (rev 101)
@@ -27,7 +27,7 @@
 	 * @throws RemoteException		If the RMI encounters a problem.
 	 * @throws NotBoundException	If the server is not running on the specified port.
 	 */
-	DBLayer create(String host, short port) throws RemoteException, NotBoundException;
+	DBLayer create(String host, int port) throws RemoteException, NotBoundException;
 	
 	/** 
 	 * Destroy the DBLayer. This is a special measure, 

Modified: trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java
===================================================================
--- trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java	2006-04-02 17:44:26 UTC (rev 100)
+++ trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java	2006-04-02 20:31:11 UTC (rev 101)
@@ -83,7 +83,7 @@
 	 * @return A stub of the remote object that lives on the server and mediates the connection
 	 * with the remote database.
 	 */
-	public synchronized DBLayer create(String host, short port) throws RemoteException, NotBoundException {
+	public synchronized DBLayer create(String host, int port) throws RemoteException, NotBoundException {
 		// Connect to the remote server and obtain the RemoteDBLayerFactory
 		Registry registry = LocateRegistry.getRegistry(host, port);
 		RemoteDBLayerFactory remoteFactory = (RemoteDBLayerFactory) registry.lookup(RemoteDBLayerFactory.ID);

Modified: trunk/src/net/sf/plantlore/server/ConnectionInfo.java
===================================================================
--- trunk/src/net/sf/plantlore/server/ConnectionInfo.java	2006-04-02 17:44:26 UTC (rev 100)
+++ trunk/src/net/sf/plantlore/server/ConnectionInfo.java	2006-04-02 20:31:11 UTC (rev 101)
@@ -1,21 +1,24 @@
 package net.sf.plantlore.server;
 
+import java.io.Serializable;
+
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.middleware.RemoteDBLayerFactory;
 
 /**
- *  Information about the client connected to a server:
+ *  Information the particular connection:
  *  <ul>
- *  <li><code>database</code> = the DBLayer object/stub that mediates the connection to the database</li> 
+ *  <li><code>database</code> = the DBLayer object that mediates the connection to the database</li>
+ *   <li><code>stub</code> = the stub of the DBLayer object that mediates the connection to the database</li>
  *  <li><code>remote factory</code> = null if the object is created locally or reference of the factory that created the <code>database</code></li>
  *  <li><code>client host</code> = identification of the computer for which the <code>database</code> was created</li>
  *  </ul>
  * 
  * @author Erik Kratochv?l
  * @since 2006-03-13
- * @version 1.0
+ * @version 1.0 final
  */
-public class ConnectionInfo {
+public class ConnectionInfo implements Serializable {
 	
 	private RemoteDBLayerFactory remoteFactory = null;
 	private DBLayer database = null;

Modified: trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java
===================================================================
--- trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java	2006-04-02 17:44:26 UTC (rev 100)
+++ trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java	2006-04-02 20:31:11 UTC (rev 101)
@@ -32,7 +32,7 @@
  * 
  * @author Erik Kratochv?l
  * @since 2006-03-13
- * @version 1.0  
+ * @version 1.0  final
  */
 public class RMIRemoteDBLayerFactory extends UnicastRemoteObject
 	implements RemoteDBLayerFactory, Undertaker {
@@ -54,7 +54,7 @@
 	
 	/** Keep information about all connected clients. */
 	private Hashtable<DBLayer, ConnectionInfo> client = 
-		new Hashtable<DBLayer, ConnectionInfo>(maxConnectionsTotal);
+		new Hashtable<DBLayer, ConnectionInfo>(2*maxConnectionsTotal);
 	
 	/** 
 	 * Create a new RMIDBLayerFactory.
@@ -140,7 +140,7 @@
 		// Unexport the object even if there is an action in progress.
 		UnicastRemoteObject.unexportObject(db, true);
 		
-		logger.info("The database layer " + db + " has been disconnected and destroyed.");
+		logger.info("The database layer " + db + " was disconnected and destroyed.");
 	}
 
 	/**
@@ -151,6 +151,7 @@
 	 * @throws RemoteException If the RMI encounters an error.
 	 */	
 	public synchronized void destroy(DBLayer stub) throws RemoteException {
+		if(stub == null) return;
 		ConnectionInfo info = client.remove(stub);
 		if(info != null) disconnect(info.getDatabase());
 		else try {

Modified: trunk/src/net/sf/plantlore/server/RMIServer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/RMIServer.java	2006-04-02 17:44:26 UTC (rev 100)
+++ trunk/src/net/sf/plantlore/server/RMIServer.java	2006-04-02 20:31:11 UTC (rev 101)
@@ -7,6 +7,8 @@
 import java.rmi.server.UnicastRemoteObject;
 import java.util.Collection;
 
+import org.apache.log4j.Logger;
+
 import net.sf.plantlore.middleware.RemoteDBLayerFactory;
 import net.sf.plantlore.server.tools.*;
 
@@ -30,6 +32,8 @@
 	private RMIRemoteDBLayerFactory remoteFactory = null;
 	private int port = DEFAULT_PORT;
 	private Guard guard = null;
+	
+	private Logger logger;
 
 	/** Create a new instance of RMIServer running on the default port. */
 	public RMIServer() throws RemoteException, AlreadyBoundException {
@@ -39,6 +43,9 @@
 	/** Create a new instance of RMIServer running on the specified port. */
 	public RMIServer(int port) throws RemoteException, AlreadyBoundException { 
 		this.port = port;
+		
+		logger = Logger.getLogger(this.getClass().getPackage().getName());
+		
 		// Control object that will return the server after the client passed a valid certif. information
 		guard = new RMIServerControl(this);
 		RMI.bind(port, guard, Guard.ID);
@@ -53,14 +60,14 @@
 	 * @param client The client to be kicked.
 	 */
 	public synchronized void disconnect(ConnectionInfo client) {
-		try { remoteFactory.destroy(client.getStub()); } catch(RemoteException e) {}
+		try { remoteFactory.destroy(client.getStub()); } 
+		catch(RemoteException e) { logger.warn(e); }
 	}
 	
 	/** 
 	 * Bind a new RemoteDBLayerFactory to the rmiregistry on the specified <code>port</code>. 
 	 * If the rmiregistry is not currently running on that port, it will be created. 
 	 * 
-	 * @return The RemoteDBLayerFactory.
 	 * @throws AlreadyBoundException If another RemoteDBLayerFactory is already bound to the rmiregistry. 
 	 */
 	public synchronized void start() throws AlreadyBoundException {
@@ -73,17 +80,18 @@
 			if(remoteFactory == null) remoteFactory = new RMIRemoteDBLayerFactory();
 			// Bind the factory to the rmiregistry. 
 			registry.bind(RemoteDBLayerFactory.ID, remoteFactory);
+			
+			logger.info("The RemoteDBLayerFactory has been bound to the rmiregistry.");
 		}
-		catch(RemoteException e) { System.err.println(e); } // FIXME: use logger
+		catch(RemoteException e) { logger.error(e); }
 	}
 	
 	/** 
 	 * Unbind the RemoteDBLayerFactory from the rmiregistry on the specified <code>port</code>. 
 	 * The rmiregistry on the specified port is <b>not</b> stopped, because some other programs may be still
-	 * using it!
+	 * using it!<br/>
+	 * This will terminate the server completely.
 	 * 
-	 * FIXME: Krom toho stejn? neum?m rmiregistry ukon?it pomoc? javy.
-	 * 
 	 * @param harsh		Be harsh and disconnect every client connected to the server.
 	 */
 	public synchronized void stop(boolean harsh) {
@@ -92,21 +100,30 @@
 			// 1. Unbind the RemoteDBLayerFactory from the rmiregistry 
 			// -> noone can obtain the stub of the remote factory anymore
 			RMI.unbind(port, RemoteDBLayerFactory.ID);
+			logger.debug("The RemoteDBLayerFactory was unbound from the rmiregistry.");
 			
 			// 2. Unexport the remote factory -> noone can make a remote call anymore
 			RMI.unexport(remoteFactory);
+			logger.debug("The RemoteDBLayerFactory was unexported. It cannot accept remote calls now.");
 			
 			// 3. Disconnect all users from the server.
-			if(harsh) remoteFactory.disconnectAll();
+			if(harsh) {
+				remoteFactory.disconnectAll();
+				logger.info("All clients were disconnected.");
+			}
 
 			// 4. Disconnect this object from the RMI ->
 			UnicastRemoteObject.unexportObject(this, true);
+			logger.info("The RMIServer now stops accepting remote calls.");
 			
 			// 5. Disconnect the control guard and unexport it
 			RMI.unbind(port, Guard.ID);
 			RMI.unexport(guard);
+			logger.debug("The ServerProxy is now unavailable.");
+			
+			logger.info("The Server terminates. Bye.");
 		}
-		catch(Exception e) { System.err.println(e); } // FIXME: use logger
+		catch(Exception e) { logger.error(e); }
 	}
 	
 	

Modified: trunk/src/net/sf/plantlore/server/Server.java
===================================================================
--- trunk/src/net/sf/plantlore/server/Server.java	2006-04-02 17:44:26 UTC (rev 100)
+++ trunk/src/net/sf/plantlore/server/Server.java	2006-04-02 20:31:11 UTC (rev 101)
@@ -6,11 +6,48 @@
 import java.rmi.RemoteException;
 import java.util.Collection;
 
+/**
+ * Server management.
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 29.3.2006
+ * @version 1.0 final
+ *
+ * @param <E>	The class storing information about currently connected clients.
+ */
 public interface Server<E> extends Remote, Serializable {
 	
+	/**
+	 * Return a collection of currently connected clients.
+	 * 
+	 * @return Currently connected clients.
+	 * @throws RemoteException	if the RMI encounters an error (network/server).
+	 */
 	Collection<? extends E>	getClients() throws RemoteException;
+	
+	/**
+	 * "Kick" the specified client. The client is disconnected immediately.
+	 * 
+	 * @param client The client to be kicked from the server.
+	 * @throws RemoteException if the RMI encounters an error (network/server).
+	 */
 	void disconnect(E client) throws RemoteException;
+	
+	/**
+	 * Run the server on the specified port.
+	 * 
+	 * @throws RemoteException if the RMI encounters an error (network/server).
+	 * @throws AlreadyBoundException if another server is already running on the specified port.
+	 */
 	void start() throws RemoteException, AlreadyBoundException;
+	
+	/**
+	 * Terminate the server. If <code>harsh</code> is true, the server terminates immediately,
+	 * if not, it waits, until the last client disconnects. 
+	 * 
+	 * @param harsh Should all currently connected clients be disconnected?
+	 * @throws RemoteException if the RMI encounters an error (network/server).
+	 */
 	void stop(boolean harsh) throws RemoteException;
 	
 }

Modified: trunk/src/net/sf/plantlore/server/Undertaker.java
===================================================================
--- trunk/src/net/sf/plantlore/server/Undertaker.java	2006-04-02 17:44:26 UTC (rev 100)
+++ trunk/src/net/sf/plantlore/server/Undertaker.java	2006-04-02 20:31:11 UTC (rev 101)
@@ -3,13 +3,19 @@
 import net.sf.plantlore.middleware.DBLayer;
 
 /**
- * 
+ * The Undertaker can properly bury DBLayers, that were not properly destroyed. 
  *   
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-03-26
+ * @version 1.0 final
   */
 public interface Undertaker {
 	
+	/**
+	 * Take care of the DBLayer that was not closed properly.
+	 * 
+	 * @param db		The DBLayer.
+	 */
 	void bury(DBLayer db);
 
 }



From tkovarik at gmail.com  Mon Apr  3 22:02:18 2006
From: tkovarik at gmail.com (Tomas Kovarik)
Date: Mon, 3 Apr 2006 22:02:18 +0200
Subject: [Plantlore-dev] Zapis zo schodzky Plantlore
Message-ID: <ea88f1620604031302o76ad4cbew3423f0845d698cf5@mail.gmail.com>

Zapis zo Skype schodzky 2.4. 2006. Priotmni vsetci, 22:00 - 23:00.
Zapis je dostupny aj na webe plantlore.berlios.de

* Design pattern "builder" pre export - Potreba vyriesit, bude sa
riesit v utorok
* Vycistit repository od starych Query objektov (Kovo)
* Unikatne identifikatory databaze - riesime v utorok
* Kovo testuje autor managera v linuxe
* Mail vyvojarom (Kovo & Lada)
* SVN - vsetko davat do repository, aby to bolo k dispozicii a na
jednom mieste. Repository je dostupne aj prostrednictvom webu, takze
ak potrebujete len jeden nejaky subor tak to nemusite vzdy
checkoutovat.
* Erik doraba Login a select DB, ostatni na neho naviazu ked to commitne
* Lada doraba historiu
- Potreba zobrazovat len nezmazane zaznamy - uklada sa v atribute CDELETE
* Ako zobrazovat vsetky napojene informacie o naleze (publications) - Utorok
- Zobrazovanie podrobnych informacii v novom dialogovom okne
- Rozsiahlejsi tooltip
* Ako robit oznacovanie zaznamov na viacerych stranok? Hiberanate to
cachuje, je potreba zistit ako to Hibernate cachuje (Kovo)
* Ako riesit progress bary - teraz neriesime, je to sucast zjednocovania vzhladu
* Jakub bude do utorka pracovat hlavne na Add/Edit/Delete,
zobrazovanie detailov nechame na neskor
* Metadata manager sa zatial odklada (Lada)
* Kovo dokonci DBLayer a opravi chyby, dorobi ukladanie historie.
Dokonci dokumentaciu
* Prava v DBLayer len ak sa podari stihnut
* Publication manager sa asi zatial odlozi (ide len o refactorovanie)
* Logovacie levely - Najst a umiestnit do dokumentacie - Kovo
* V pondelok: Doriesit finalnu verziu, ktoru budeme predvadzat,
pripravit sposob ako to budeme spustat a predvadzat
* BioCASE - skusit rozchodit aby sa dal predviest (Jakub), mohol by sa
na neho pozriet aj Erik
* Osetrit to ci funguje pripojenie k databazi, kontrola DB modelu -
riesime v utorok
* Navrh na stretnutie sa niekde a programovat "na tvrdaka v kuse"


From kovo at berlios.de  Mon Apr  3 22:44:26 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Mon, 3 Apr 2006 22:44:26 +0200
Subject: [Plantlore-dev] r102 - trunk/documentation
Message-ID: <200604032044.k33KiQAY008770@sheep.berlios.de>

Author: kovo
Date: 2006-04-03 22:44:21 +0200 (Mon, 03 Apr 2006)
New Revision: 102

Modified:
   trunk/documentation/CodingStyle.odt
   trunk/documentation/CodingStyle.pdf
Log:
Added definitions of logger levels to coding style guidelines

Modified: trunk/documentation/CodingStyle.odt
===================================================================
(Binary files differ)

Modified: trunk/documentation/CodingStyle.pdf
===================================================================
(Binary files differ)



From krater at berlios.de  Mon Apr  3 23:39:21 2006
From: krater at berlios.de (krater at berlios.de)
Date: Mon, 3 Apr 2006 23:39:21 +0200
Subject: [Plantlore-dev] r103 - in trunk/src/net/sf/plantlore: client client/login l10n
Message-ID: <200604032139.k33LdLe5014251@sheep.berlios.de>

Author: krater
Date: 2006-04-03 23:39:20 +0200 (Mon, 03 Apr 2006)
New Revision: 103

Added:
   trunk/src/net/sf/plantlore/client/login/AuthView.java
   trunk/src/net/sf/plantlore/client/login/ItemCtrl.java
   trunk/src/net/sf/plantlore/client/login/ItemView.java
   trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
   trunk/src/net/sf/plantlore/client/login/LoginView.java
Modified:
   trunk/src/net/sf/plantlore/client/AppCore.java
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/AppCoreView.java
   trunk/src/net/sf/plantlore/client/login/DBInfo.java
   trunk/src/net/sf/plantlore/client/login/Login.java
   trunk/src/net/sf/plantlore/l10n/Plantlore.properties
Log:
Login added -> Appcore View and Control updated.

Modified: trunk/src/net/sf/plantlore/client/AppCore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-03 20:44:21 UTC (rev 102)
+++ trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-03 21:39:20 UTC (rev 103)
@@ -39,6 +39,7 @@
         
 //        database = new FirebirdDBLayer("localhost", "3050", "/mnt/data/temp/plantloreHIB.fdb", "sysdba", "masterkey");
         database = new HibernateDBLayer();
+      
         try {
             database.initialize(null, null, null); // FIXME sem prijdou samosebou rozumne hodnoty
         } catch (DBLayerException e) {

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-03 20:44:21 UTC (rev 102)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-03 21:39:20 UTC (rev 103)
@@ -32,9 +32,13 @@
 import net.sf.plantlore.client.history.History;
 import net.sf.plantlore.client.history.HistoryCtrl;
 import net.sf.plantlore.client.history.HistoryView;
+import net.sf.plantlore.client.login.Login;
+import net.sf.plantlore.client.login.LoginCtrl;
+import net.sf.plantlore.client.login.LoginView;
 import net.sf.plantlore.l10n.L10n;
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.server.HibernateDBLayer;
+import net.sf.plantlore.middleware.RMIDBLayerFactory;
 
 import org.apache.log4j.Logger;
 
@@ -58,6 +62,10 @@
     HistoryView historyView;
     HistoryCtrl historyCtrl;
     
+    Login loginModel;
+    LoginView loginView;
+    LoginCtrl loginCtrl;
+    
     /** Creates a new instance of AppCoreCtrl */
     public AppCoreCtrl(AppCore model, AppCoreView view)
     {
@@ -90,6 +98,17 @@
 
         view.addWindowListener(new AppWindowListener());
         view.setRecordsPerPageListener(new RecordsPerPagePropertyChangeListener());
+        
+        // TODO: Comb the code here KR at TER
+        view.setLoginAction(new AbstractAction() {
+			public void actionPerformed(ActionEvent arg0) {
+				// Reuse the existing dialogs, hide'em when they're no longer needed.
+				if(loginModel == null) loginModel = new Login(new RMIDBLayerFactory());
+				if(loginView == null) loginView = new LoginView(loginModel);
+				if(loginCtrl == null) loginCtrl = new LoginCtrl(loginModel, loginView);
+				loginView.setVisible(true);				
+			}
+        });
     }
     
     /** Handles click to menu item Settings.

Modified: trunk/src/net/sf/plantlore/client/AppCoreView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-03 20:44:21 UTC (rev 102)
+++ trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-03 21:39:20 UTC (rev 103)
@@ -21,6 +21,7 @@
 import java.util.Observer;
 import java.util.prefs.Preferences;
 import javax.swing.AbstractAction;
+import javax.swing.Action;
 import javax.swing.BorderFactory;
 import javax.swing.JButton;
 import javax.swing.JFormattedTextField;
@@ -74,6 +75,7 @@
     private JMenuItem dataImport = new JMenuItem(L10n.getString("dataImport"));
     private JMenuItem dataExport = new JMenuItem(L10n.getString("dataExport"));
     private JMenuItem dataSearch = new JMenuItem(L10n.getString("dataSearch"));
+    private JMenuItem login = new JMenuItem(L10n.getString("Login"));
     
     private JButton 
             importButton = new JButton(),
@@ -148,6 +150,7 @@
     private void initMenu()
     {
         fileMenu.setMnemonic(L10n.getMnemonic("File"));
+        fileMenu.add(login);
         fileMenu.add(settings);
         fileMenu.add(print);
         fileMenu.addSeparator();
@@ -278,6 +281,16 @@
         return sbm;
     }
     
+    
+    /**
+     * Set an action to the login menu item.
+     * 
+     * @param a The action that should be called when clicked on this menuitem.
+     */
+    public void setLoginAction(Action a) {
+    	login.setAction(a);
+    }
+    
     /** Sets an action to the settings menu item.
      *
      */

Added: trunk/src/net/sf/plantlore/client/login/AuthView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-03 20:44:21 UTC (rev 102)
+++ trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-03 21:39:20 UTC (rev 103)
@@ -0,0 +1,96 @@
+package net.sf.plantlore.client.login;
+
+import java.awt.*;
+import java.awt.event.ActionListener;
+
+import javax.swing.*;
+
+
+public class AuthView extends JDialog {
+	
+	private Login model;
+	
+	public AuthView(Login model) {
+		this.model = model;
+		setTitle("Authorization");
+		setSize(300, 200);
+		setModal(true);
+		setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+		initComponents();
+		setLocationRelativeTo(null); // center of the screen
+	}
+	
+	
+	protected void initComponents() {
+		setTitle("Authentification");
+		setModal(true);
+
+		next = new JButton("next");
+		user = new JComboBox(); user.setEditable(true); 
+		user.setPreferredSize(new Dimension(50, 23));
+		password = new JPasswordField(32); password.setPreferredSize(new Dimension(50, 23));
+
+		
+		JPanel p1 = new JPanel(new FlowLayout(FlowLayout.RIGHT));
+		p1.add(next);
+		add(p1, BorderLayout.SOUTH);
+		
+		JLabel l1 = new JLabel("Username"), l2 = new JLabel("Password");
+		l1.setLabelFor(user); l2.setLabelFor(password);
+		JPanel p2 = new JPanel(new GridBagLayout());
+		GridBagConstraints c = new GridBagConstraints();
+		
+		// CHANGE HERE
+		c.gridx = 0; c.gridy = 0; c.fill =  GridBagConstraints.NONE; 
+		c.insets = new Insets(2, 4, 0, 0);
+		p2.add(l1, c);
+		
+		c.gridy = 1; c.insets = new Insets(1, 4, 0, 0);
+		p2.add(l2, c); 
+		
+		c.gridx = 1 ; c.gridy = 0; c.fill = GridBagConstraints.HORIZONTAL;
+		c.insets = new Insets(2, 3, 0, 4);
+		p2.add(user, c); 
+	
+		c.gridy = 1; c.insets = new Insets(2, 3, 0, 4);
+		p2.add(password, c);
+		
+		
+		add(p2, BorderLayout.CENTER);
+		
+		pack();
+		
+		setResizable(false);
+	}
+	
+	@Override
+	public void setVisible(boolean visible) {
+		if(visible) {
+			user.removeAllItems();
+			String[] u = model.getSelected().users;
+			int i = 0;
+			for(; i < u.length && u[i] != null; i++) user.addItem(u[i]);
+			if(i > 0) user.setSelectedIndex(0);
+		}
+		super.setVisible(visible);
+	}
+	
+	protected String getUserName() {
+		return (String) user.getSelectedItem();
+	}
+	
+	protected String getPassword() {
+		return new String( password.getPassword() );
+	}
+	
+	public void nextAddActionListener(ActionListener a) {
+		next.addActionListener(a);
+	}
+	
+	
+	protected JButton next;
+	protected JComboBox user;
+	protected JPasswordField password;
+
+	
+}

Modified: trunk/src/net/sf/plantlore/client/login/DBInfo.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/DBInfo.java	2006-04-03 20:44:21 UTC (rev 102)
+++ trunk/src/net/sf/plantlore/client/login/DBInfo.java	2006-04-03 21:39:20 UTC (rev 103)
@@ -17,7 +17,7 @@
 	protected String alias;
 	protected String host;
 	protected String db;
-	protected String[] user;	
+	protected String[] users;	
 	protected int port;
 	
 	/**
@@ -30,30 +30,30 @@
 	 * @param users The list of user names used lately.
 	 */
 	public DBInfo(String alias, String host, int port, String db, String[] users) {
-		this.alias = alias; this.host = host; this.port = (port <= 0) ? 1099 : port; this.db = db; this.user = users;
+		this.alias = alias; this.host = host; this.port = (port <= 0) ? 1099 : port; this.db = db; this.users = users;
 	}
 	
+
 	/**
-	 * Add a new user name into the list of users. The least used username will be lost.
-	 * The list of users will start with the newly added username. 
+	 * Pick a user. The selected name will be moved to the start of the list.
+	 * The selected user will be at the top of the list next time.
 	 * 
-	 * @param name The name to be added.
+	 * @param name	The chosen user.
 	 */
-	public void addUser(String name) {
-		for(int i = 1; i < user.length; i++) user[i] = user[i - 1];
-		user[0] = name;
+	public void promoteUser(String name) {
+		int id = users.length - 1;
+		for(int i = 0; i < users.length && users[i] != null; i++) 
+			if(users[i].equals(name)) id = i; 
+		for(int i = id; i > 0; i--) users[i] = users[i - 1];
+		users[0] = name;
 	}
 	
 	/**
-	 * Pick a user. The selected name will be moved to the start of the list.
-	 * The selected user will be at the top of the list next time.
-	 * 
-	 * @param id	The chosen user.
+	 * How the DBInfo should appear to the User in the list of databases.
 	 */
-	public void selectUser(int id) {
-		String name = user[id];
-		for(int i = id; i > 0; i--) user[i] = user[i - 1];
-		user[0] = name;
+	@Override
+	public String toString() {
+		return alias;
 	}
 		
 }

Added: trunk/src/net/sf/plantlore/client/login/ItemCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/ItemCtrl.java	2006-04-03 20:44:21 UTC (rev 102)
+++ trunk/src/net/sf/plantlore/client/login/ItemCtrl.java	2006-04-03 21:39:20 UTC (rev 103)
@@ -0,0 +1,38 @@
+package net.sf.plantlore.client.login;
+
+import java.awt.event.ActionEvent;
+
+import javax.swing.AbstractAction;
+
+public class ItemCtrl {
+	
+	private Login model;
+	private ItemView view;
+	
+	public enum Mode { ADD, EDIT };
+	
+	private Mode mode = Mode.ADD;
+	
+	
+	public void setMode(Mode m) { this.mode = m; }
+	
+	
+	public ItemCtrl(Login login, ItemView itemview) {
+		this.model = login; this.view = itemview;
+		
+		view.nextAddActionListener(new AbstractAction() {
+			public void actionPerformed(ActionEvent arg0) {
+				int t = view.getHost().indexOf(':');
+				if(mode == Mode.ADD)
+					if(t < 0) model.createRecord(view.getAlias(), view.getHost(), 1099, view.getDB());
+					else model.createRecord(view.getAlias(), view.getHost().substring(0, t - 1), Integer.parseInt(view.getHost().substring(t)), view.getDB());
+				else if(mode == Mode.EDIT)
+					if(t < 0) model.updateSelectedRecord(view.getAlias(), view.getHost(), 1099, view.getDB());
+					else model.updateSelectedRecord(view.getAlias(), view.getHost().substring(0, t - 1), Integer.parseInt(view.getHost().substring(t)), view.getDB());
+				view.setVisible(false);
+			}
+		});
+		
+	}
+
+}

Added: trunk/src/net/sf/plantlore/client/login/ItemView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/ItemView.java	2006-04-03 20:44:21 UTC (rev 102)
+++ trunk/src/net/sf/plantlore/client/login/ItemView.java	2006-04-03 21:39:20 UTC (rev 103)
@@ -0,0 +1,98 @@
+package net.sf.plantlore.client.login;
+
+import java.awt.BorderLayout;
+import java.awt.FlowLayout;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.Insets;
+import java.awt.event.ActionListener;
+
+import javax.swing.JButton;
+import javax.swing.JDialog;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+
+import javax.swing.JTextField;
+
+public class ItemView extends JDialog {
+		
+	private Login model;
+	
+
+	public ItemView(Login model) {
+		this.model = model;
+		setTitle("ItemEditor");
+		setModal(true);
+		setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+		initComponents();
+		setResizable(false);
+		setLocationRelativeTo(null);
+	}
+	
+	
+	public void fillWithSelected() {
+		DBInfo info = model.getSelected();
+		if(info == null) return;
+		alias.setText(info.alias); host.setText(info.host + ((info.port != 1099) ? " : " + info.port : ""));
+		db.setText(info.db);
+	}
+	
+	
+	protected void initComponents() {
+		next = new JButton("change/add");
+		alias = new JTextField(20); 
+		host = new JTextField(20);
+		db = new JTextField(20);
+		 
+		
+		JPanel p1 = new JPanel(new FlowLayout(FlowLayout.RIGHT));
+		p1.add(next);
+		add(p1, BorderLayout.SOUTH);
+		
+		JLabel l1 = new JLabel("Alias"), l2 = new JLabel("Hostname"), l3 = new JLabel("DB ID");
+		l1.setLabelFor(alias); l2.setLabelFor(host); l3.setLabelFor(db);
+		JPanel p2 = new JPanel(new GridBagLayout());
+		GridBagConstraints c = new GridBagConstraints();
+		
+		// CHANGE HERE
+		c.gridx = 0; c.gridy = 0; c.fill =  GridBagConstraints.NONE; 
+		c.insets = new Insets(2, 4, 0, 0);
+		p2.add(l1, c);
+		
+		c.gridy = 1; c.insets = new Insets(1, 4, 0, 0);
+		p2.add(l2, c); 
+		
+		c.gridy = 2; c.insets = new Insets(1, 4, 0, 0);
+		p2.add(l3, c);
+		
+		c.gridx = 1 ; c.gridy = 0; c.fill = GridBagConstraints.HORIZONTAL;
+		c.insets = new Insets(2, 3, 0, 4);
+		p2.add(alias, c); 
+	
+		c.gridy = 1; c.insets = new Insets(2, 3, 0, 4);
+		p2.add(host, c);
+		
+		c.gridy = 2; c.insets = new Insets(2, 3, 0, 4);
+		p2.add(db, c);
+		
+		
+		add(p2, BorderLayout.CENTER);
+		
+		pack();
+	}
+	
+	
+	public void nextAddActionListener(ActionListener a) {
+		next.addActionListener(a);
+	}
+	
+	
+	public String getAlias() { return alias.getText(); }
+	public String getHost() { return host.getText(); }
+	public String getDB() { return db.getText(); }
+	
+	
+	protected JButton next;
+	protected JTextField alias, host, db;
+
+}

Modified: trunk/src/net/sf/plantlore/client/login/Login.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-03 20:44:21 UTC (rev 102)
+++ trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-03 21:39:20 UTC (rev 103)
@@ -28,12 +28,11 @@
 	private Vector<DBInfo> dbinfo = new Vector<DBInfo>(10);
 	private DBInfo selected = null;
 	
-	private String  file = System.getProperty("user.home") + "/.plantlore/db.info.xml";
+	//private String  file = System.getProperty("user.home") + "/.plantlore/db.info.xml";
 	
 	private DBLayerFactory factory = null;
-	private DBLayer dblayer = null;
+	private DBLayer dblayer;
 	
-	
 	public Login(DBLayerFactory factory) {
 		this.factory = factory;
 	}
@@ -43,7 +42,7 @@
 	protected void load() {
 		// TODO: JAKUB: nacist z XML souboru se jmenem `file` informace o databazich (triplety) do kolekce dbinfo.
 		
-		this.hasChanged(); this.notifyObservers();
+		this.setChanged(); this.notifyObservers();
 	}
 	
 	protected void save() {
@@ -52,26 +51,27 @@
 	
 	
 	public void createRecord(String alias, String host, int port, String db) {
+		System.out.println("Creating record " + alias);
 		DBInfo r = new DBInfo(alias, host, port, db, new String[5]);
 		dbinfo.add(r);
 		save();
-		this.hasChanged(); this.notifyObservers();
+		setChanged(); notifyObservers();
 	}
 	
-	public void deleteRecord(DBInfo info) {
-		dbinfo.remove(info);
+	public void deleteSelected() {
+		dbinfo.remove(selected);
 		save();
-		this.hasChanged(); this.notifyObservers();
+		this.setChanged(); this.notifyObservers();
 	}
 	
-	public void updateSelectedRecord(DBInfo info) {
-		int index = dbinfo.indexOf(selected);
-		dbinfo.setElementAt(info, index); // info.clone()?
-		selected = info; 
-		this.hasChanged(); this.notifyObservers();
+	public void updateSelectedRecord(String alias, String host, int port, String db) {
+		selected.alias = alias;
+		selected.host = host;
+		selected.port = port;
+		selected.db = db;
+		this.setChanged(); this.notifyObservers();
 	}
 	
-	/** Subject to change.. */
 	public DBInfo[] getRecords() {
 		// Well, this sucks! The ugliest way to do things... is to have a Cloneable interface and don't use it.
 		// Seeing is believing: http://java.sun.com/j2se/1.5.0/docs/api/java/util/Collection.html#toArray(T[])
@@ -79,18 +79,26 @@
 	}
 	
 	public void setSelected(int index) {
-		selected = dbinfo.elementAt(index);		
+		if(index >= 0) selected = dbinfo.elementAt(index); else selected = null;		
 	}
 	
+	public DBInfo getSelected() {
+		return selected;
+	}
+	
 	public DBLayer connectToSelected(String name, String password) throws NotBoundException, RemoteException, DBLayerException {
-		DBLayer dblayer = factory.create(selected.host, selected.port);
+		if(selected == null) return null;
+		dblayer = factory.create(selected.host, selected.port);
 		dblayer.initialize(name, password, selected.db);
+		selected.promoteUser(name);
 		return dblayer;
 	}
 	
-	public DBLayer getDBLayer() {
-		return dblayer;
-	}
+	public DBLayer getDBLayer() { return dblayer; }
 	
 	
+	
+	
+
+
 }

Added: trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-03 20:44:21 UTC (rev 102)
+++ trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-03 21:39:20 UTC (rev 103)
@@ -0,0 +1,65 @@
+package net.sf.plantlore.client.login;
+
+import java.awt.event.ActionEvent;
+
+import javax.swing.AbstractAction;
+import javax.swing.event.ListSelectionEvent;
+import javax.swing.event.ListSelectionListener;
+
+
+public class LoginCtrl {
+	
+	private Login model;
+	private LoginView view;
+	
+	
+	public LoginCtrl(Login login, LoginView loginview) {
+		this.view = loginview; this.model = login;
+		
+		view.listAddListSelectionListener(new ListSelectionListener() {
+			public void valueChanged(ListSelectionEvent e) {
+				model.setSelected(e.getFirstIndex());
+			}
+		});
+		
+		view.addAddActionListener(new AbstractAction() {
+			public void actionPerformed(ActionEvent arg0) {
+				ItemView i = new ItemView(model);
+				i.setTitle("Add");
+				ItemCtrl c = new ItemCtrl(model, i);
+				c.setMode(ItemCtrl.Mode.ADD);
+				i.setVisible(true);
+				System.out.println("Adding dialog opened.");
+			}
+		});
+		
+		view.editAddActionListener(new AbstractAction() {
+			public void actionPerformed(ActionEvent arg0) {
+				if(model.getSelected() == null) return;
+				ItemView i = new ItemView(model);
+				i.setTitle("Edit");
+				i.fillWithSelected();
+				ItemCtrl c = new ItemCtrl(model, i);
+				c.setMode(ItemCtrl.Mode.EDIT);
+				i.setVisible(true);
+			}
+		});
+				
+		view.removeAddActionListener(new AbstractAction() {
+			public void actionPerformed(ActionEvent arg0) {
+				model.deleteSelected();				
+			}
+		});
+		
+		view.nextAddActionListener(new AbstractAction() {
+			public void actionPerformed(ActionEvent arg0) {
+				if(model.getSelected() == null) return; // Must select somethin'								
+				AuthView a = new AuthView(model);
+				/*AuthCtrl c = */new AuthCtrl(model, a);
+				a.setVisible(true);
+			}
+		});
+		
+	}
+
+}

Added: trunk/src/net/sf/plantlore/client/login/LoginView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-03 20:44:21 UTC (rev 102)
+++ trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-03 21:39:20 UTC (rev 103)
@@ -0,0 +1,99 @@
+package net.sf.plantlore.client.login;
+
+import java.awt.*;
+import java.awt.event.ActionListener;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+import java.util.Observable;
+import java.util.Observer;
+
+import javax.swing.*;
+import javax.swing.event.ListSelectionListener;
+
+public class LoginView extends JDialog implements Observer {
+	
+	private Login model;
+	
+	
+	public LoginView(Login model) {
+		this.model = model;
+		model.addObserver(this);
+		setTitle("Login");
+		setSize(300,200);
+		setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+		initComponents();
+		setLocationRelativeTo(null); // center of the screen
+	}
+	
+	
+	
+	protected void initComponents() {
+		
+		choice = new JList();
+		choice.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
+		
+		next = new JButton("next");
+		
+		JPanel panel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
+        panel.add(next);
+        
+		add(choice, BorderLayout.CENTER);
+		add(panel, BorderLayout.SOUTH);
+		
+		popup = new JPopupMenu();
+		add = new JMenuItem("Add a new item.");
+		edit = new JMenuItem("Edit this item.");
+		remove = new JMenuItem("Remove this item.");
+		popup.add(add);
+		popup.add(edit);
+		popup.add(remove);
+		
+		choice.addMouseListener(
+				new MouseAdapter() {
+					@Override
+					public void mouseReleased(MouseEvent e) {
+						if(e.isPopupTrigger()) popup.show(e.getComponent(), e.getX(), e.getY());						
+					}
+				});
+	}
+	
+	
+	
+	
+
+
+
+
+	public void update(Observable arg0, Object arg1) {
+		System.out.println("Updating");
+		choice.setListData(model.getRecords());		
+	}
+	
+	
+	public void nextAddActionListener(ActionListener a) {
+		next.addActionListener(a);
+	}
+	
+	public void addAddActionListener(ActionListener a) {
+		add.addActionListener(a);
+	}
+	
+	public void editAddActionListener(ActionListener a) {
+		edit.addActionListener(a);
+	}
+	
+	public void removeAddActionListener(ActionListener a) {
+		remove.addActionListener(a);
+	}
+	
+	public void listAddListSelectionListener(ListSelectionListener a) {
+		choice.addListSelectionListener(a);
+	}
+	
+	
+	protected JList choice;
+	protected JButton next;
+	protected JMenuItem add, edit, remove;
+	protected JPopupMenu popup;
+
+}

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-03 20:44:21 UTC (rev 102)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-03 21:39:20 UTC (rev 103)
@@ -6,6 +6,7 @@
 Print = &Print
 PrintTooltip = Prints selected records
 Exit = &Exit
+Login = Logi&n
 helpContents = &Help contents
 helpAbout = &About
 Languages = &Languages



From krater at berlios.de  Mon Apr  3 23:51:25 2006
From: krater at berlios.de (krater at berlios.de)
Date: Mon, 3 Apr 2006 23:51:25 +0200
Subject: [Plantlore-dev] r104 - trunk/src/net/sf/plantlore/client/login
Message-ID: <200604032151.k33LpP3P016191@sheep.berlios.de>

Author: krater
Date: 2006-04-03 23:51:25 +0200 (Mon, 03 Apr 2006)
New Revision: 104

Added:
   trunk/src/net/sf/plantlore/client/login/AuthCtrl.java
Log:
Missing AuthCtrl added.

Added: trunk/src/net/sf/plantlore/client/login/AuthCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthCtrl.java	2006-04-03 21:39:20 UTC (rev 103)
+++ trunk/src/net/sf/plantlore/client/login/AuthCtrl.java	2006-04-03 21:51:25 UTC (rev 104)
@@ -0,0 +1,29 @@
+package net.sf.plantlore.client.login;
+
+import java.awt.event.ActionEvent;
+
+import javax.swing.AbstractAction;
+
+public class AuthCtrl {
+	
+	private AuthView view;
+	private Login model;
+	
+	public AuthCtrl(Login login, AuthView authview) {
+		this.model = login; this.view = authview;
+		
+		view.nextAddActionListener(new AbstractAction() {
+			public void actionPerformed(ActionEvent arg0) {
+				System.out.println("hiding");
+				try {
+					model.connectToSelected(view.getUserName(), view.getPassword());
+				} catch(Exception e) {
+					System.err.println("The connection to the database couldn't be established!\n" + e);
+				}
+				
+				view.setVisible(false);
+			}
+		});
+	}
+
+}



From fraktalek at berlios.de  Tue Apr  4 00:09:22 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Tue, 4 Apr 2006 00:09:22 +0200
Subject: [Plantlore-dev] r105 - in trunk/src/net/sf/plantlore/client: . login
Message-ID: <200604032209.k33M9MKd019848@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-04 00:09:21 +0200 (Tue, 04 Apr 2006)
New Revision: 105

Modified:
   trunk/src/net/sf/plantlore/client/AppCore.java
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/AppCoreView.java
   trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
Log:
Fixed problem with badly displayed Login menu item in File menu - when using
Action the item label needs to be set in the action as the action sets item's
properties.
Added selection listener to overview and changed it to SINGLE_SELECTION mode.


Modified: trunk/src/net/sf/plantlore/client/AppCore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-03 21:51:25 UTC (rev 104)
+++ trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-03 22:09:21 UTC (rev 105)
@@ -31,6 +31,8 @@
     private OverviewTableModel tableModel;
     private Logger logger;
 
+    private int selectedRow;
+
     /** Creates a new instance of AppCore */
     public AppCore()
     {
@@ -156,6 +158,12 @@
         return tableModel.getPagesCount();
     }
     
+    public void setSelectedRow(int i) 
+    {
+        selectedRow = i;
+        logger.debug("Selected row #"+i);
+    }
+    
     public void savePreferences() {
         logger.info("Saving main window preferences.");
         prefs.putInt("recordsPerPage", recordsPerPage);

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-03 21:51:25 UTC (rev 104)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-03 22:09:21 UTC (rev 105)
@@ -19,6 +19,9 @@
 import java.util.prefs.Preferences;
 import javax.swing.AbstractAction;
 import javax.swing.JFormattedTextField;
+import javax.swing.ListSelectionModel;
+import javax.swing.event.ListSelectionEvent;
+import javax.swing.event.ListSelectionListener;
 import net.sf.plantlore.server.DBLayerException;
 import net.sf.plantlore.client.dblayer.FirebirdDBLayer;
 import net.sf.plantlore.common.record.Plant;
@@ -95,20 +98,13 @@
         view.setInvertSelectedAction(new InvertSelectedAction());
         view.setNextPageAction(new NextPageAction());
         view.setPrevPageAction(new PreviousPageAction());
+        view.setSelectedRowListener(new OverviewSelectionListener());
 
         view.addWindowListener(new AppWindowListener());
         view.setRecordsPerPageListener(new RecordsPerPagePropertyChangeListener());
         
         // TODO: Comb the code here KR at TER
-        view.setLoginAction(new AbstractAction() {
-			public void actionPerformed(ActionEvent arg0) {
-				// Reuse the existing dialogs, hide'em when they're no longer needed.
-				if(loginModel == null) loginModel = new Login(new RMIDBLayerFactory());
-				if(loginView == null) loginView = new LoginView(loginModel);
-				if(loginCtrl == null) loginCtrl = new LoginCtrl(loginModel, loginView);
-				loginView.setVisible(true);				
-			}
-        });
+        view.setLoginAction(new LoginAction());
     }
     
     /** Handles click to menu item Settings.
@@ -400,4 +396,36 @@
             }
         }  
     }
+    
+    class OverviewSelectionListener implements ListSelectionListener {
+        public void valueChanged(ListSelectionEvent e) {
+            //Ignore extra messages.
+            if (e.getValueIsAdjusting()) return;
+            
+            ListSelectionModel lsm =
+                    (ListSelectionModel)e.getSource();
+            if (lsm.isSelectionEmpty()) {
+                //no rows are selected
+            } else {
+                int selectedRow = lsm.getMinSelectionIndex();
+                model.setSelectedRow(selectedRow);
+                //selectedRow is selected
+            }
+        }
+    }
+    
+    class LoginAction extends AbstractAction {
+        public LoginAction() {
+            putValue(NAME, L10n.getString("Login"));
+            //putValue(SHORT_DESCRIPTION, L10n.getString("nextButtonTT"));
+            putValue(MNEMONIC_KEY, L10n.getMnemonic("Login"));                        
+        }
+        public void actionPerformed(ActionEvent arg0) {
+                // Reuse the existing dialogs, hide'em when they're no longer needed.
+                if(loginModel == null) loginModel = new Login(new RMIDBLayerFactory());
+                if(loginView == null) loginView = new LoginView(loginModel);
+                if(loginCtrl == null) loginCtrl = new LoginCtrl(loginModel, loginView);
+                loginView.setVisible(true);				
+        }
+    }
 }

Modified: trunk/src/net/sf/plantlore/client/AppCoreView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-03 21:51:25 UTC (rev 104)
+++ trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-03 22:09:21 UTC (rev 105)
@@ -36,7 +36,9 @@
 import javax.swing.JTextField;
 import javax.swing.JToggleButton;
 import javax.swing.JToolBar;
+import javax.swing.ListSelectionModel;
 import javax.swing.border.BevelBorder;
+import javax.swing.event.ListSelectionListener;
 import javax.swing.table.TableColumn;
 import net.sf.plantlore.common.ComponentAdjust;
 import net.sf.plantlore.common.StatusBarManager;
@@ -92,7 +94,7 @@
     
     private JLabel statusLabel;
     
-    private JTable overview;
+    private JTable overview = new JTable();
     private JToolBar mainToolBar;
     private JToolBar pageToolBar;
     private JFormattedTextField recordsPerPage = new JFormattedTextField(NumberFormat.getIntegerInstance());
@@ -211,7 +213,8 @@
     private void initOverview()
     {
         OverviewTableModel otm = model.getTableModel();
-        overview = new JTable(otm);
+        overview.setModel(otm);
+        overview.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         TableColumn tc;
         for (int i = 0; i < otm.getColumnCount(); i++) {
             tc = overview.getColumnModel().getColumn(i);
@@ -436,6 +439,11 @@
         recordsPerPage.addPropertyChangeListener(p);
     }
     
+    public void setSelectedRowListener(ListSelectionListener l)
+    {
+        overview.getSelectionModel().addListSelectionListener(l);
+    }
+    
     /** Returns the frame of the main window.
      *
      */

Modified: trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-03 21:51:25 UTC (rev 104)
+++ trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-03 22:09:21 UTC (rev 105)
@@ -55,7 +55,7 @@
 			public void actionPerformed(ActionEvent arg0) {
 				if(model.getSelected() == null) return; // Must select somethin'								
 				AuthView a = new AuthView(model);
-				/*AuthCtrl c = */new AuthCtrl(model, a);
+				AuthCtrl c = new AuthCtrl(model, a);
 				a.setVisible(true);
 			}
 		});



From Lada at berlios.de  Tue Apr  4 00:20:01 2006
From: Lada at berlios.de (Lada at berlios.de)
Date: Tue, 4 Apr 2006 00:20:01 +0200
Subject: [Plantlore-dev] r106 - in trunk/src/net/sf/plantlore: client/history l10n
Message-ID: <200604032220.k33MK1pJ020780@sheep.berlios.de>

Author: Lada
Date: 2006-04-04 00:20:00 +0200 (Tue, 04 Apr 2006)
New Revision: 106

Modified:
   trunk/src/net/sf/plantlore/client/history/History.java
   trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
   trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java
   trunk/src/net/sf/plantlore/client/history/HistoryView.java
   trunk/src/net/sf/plantlore/l10n/Plantlore.properties
Log:
HistoryRecord - L10N, correct error with Displayed rows, undo function...

Modified: trunk/src/net/sf/plantlore/client/history/History.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/History.java	2006-04-03 22:09:21 UTC (rev 105)
+++ trunk/src/net/sf/plantlore/client/history/History.java	2006-04-03 22:20:00 UTC (rev 106)
@@ -8,14 +8,12 @@
 import java.util.Date;
 import java.util.Hashtable;
 import java.util.Observable;
+
+import net.sf.plantlore.l10n.L10n;
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.server.DBLayerException;
-import net.sf.plantlore.client.dblayer.query.Query;
-//import net.sf.plantlore.client.dblayer.query.SelectQuery;
 import net.sf.plantlore.middleware.SelectQuery;
-import net.sf.plantlore.client.dblayer.result.Result;
 import net.sf.plantlore.common.PlantloreConstants;
-import net.sf.plantlore.common.record.Author;
 import net.sf.plantlore.common.record.Habitat;
 import net.sf.plantlore.common.record.Occurrence;
 import net.sf.plantlore.common.record.Phytochorion;
@@ -33,7 +31,7 @@
 
 
 /**
- * @author Lada
+ * @author Lada Oberreiterova
  *
  */
 public class History extends Observable {
@@ -61,21 +59,17 @@
     /** List of data (results of a search query) displayed in the table */
     private ArrayList editHistoryDataList;
    
-    //********************* ***************************************//
+    //********************* ***************************************//    
     private Occurrence occurrence;
-    private Habitat habitat;
-	private Publication publication;
-	private Village village;
-	private Phytochorion phytochorion;
-	private Territory territory;
+	private HistoryRecord historyRecord;
+	private HistoryChange historyChange;
 	
-    //	**************Informations about HistoryRecord*************//
-    /** Name of the table where value was changed*/
+    //	**************Informations about HistoryRecord*************//	
+	/** Name of the table where value was changed*/
 	private String tableName;  
 	/** Name of the column where value was changed*/
 	private String columnName;
-	/** Unique value identified record. 
-	 * Foring key referenced to table TOCCURRENCES */	
+	/** Unique value identified occurrence */	
 	private Integer occurrenceId;
 	/**Unique value identified record in table where value was changed */
 	private int recordId;
@@ -118,13 +112,68 @@
        logger = Logger.getLogger(this.getClass().getPackage().getName());	 
        this.database = database;	
        
-       occurrence = new Occurrence();
-       occurrence.setId(idOcc);
+ /*
+  *  v konstruktoru se bude predavat reference na OCCURRENCE pro ktery je vyvolana
+  *  histori, takze nasledujici cast kodu nebude potreba. 
+  */             
+       // Create new Select query
+       SelectQuery query = null;
+       try {
+       	    query = database.createQuery(Occurrence.class);
+       } catch(RemoteException e) {
+       	    System.err.println("RemoteException - History(), crateQuery");       	  
+       }      
+       query.addRestriction(PlantloreConstants.RESTR_EQ, Occurrence.ID, null, idOcc, null);      
        
+       int resultId = 0;
+       try {
+           // Execute query                    
+           resultId = database.executeQuery(query);        
+       } catch (DBLayerException e) {
+           // Log and set an error                   
+           logger.error("Searching occurence failed.");          
+       } catch (RemoteException e) {
+    	   System.err.println("RemoteException- History(), executeQuery");
+	   } finally {
+	    	   logger.debug("Searching occurrence ends successfully");                           
+	       }   
+	   
+	   Object[] objectOccurrence = null;
+	   Object[] objHis = null;
+       try {
+       	 // Retrieve selected row interval         	
+        	try {
+        		objectOccurrence = database.more(resultId, 1, 1);  
+        	} catch(RemoteException e) {            	  
+            	return;
+            }   
+        	objHis = (Object[])objectOccurrence[0];                            
+       } catch (DBLayerException e) {
+           // Log and set error in case of an exception
+           logger.error("Processing search occurrence results failed: "+e.toString());            
+       } finally { 
+       	   logger.debug("Sets occurrence data ends successfully.");        	
+       } 
+              
+       occurrence = ((Occurrence)objHis[0]);
+       
        setNamePlant(namePlant);
        setNameAuthor(nameAuthor);
        setLocation(location);
-	   
+/*
+ * konec casti kodu, ktera bude dobudoucna nahrazena.
+ * 
+ * Konstruktor History(DBLayer database,Occurrence occurrenceRec, String[] nameAuthors)
+ * 
+ *     this.ocurrence = occurrenceRec;
+ *     setNamePlant(occurrence.getPlant().getTaxon());       
+ *     setLocation(occurrence.getHabitat().getNearestVillage().getName()); 
+ *
+ * 	   setNameAuthor(nameAuthors);	  
+ *     ...musit to byt retezec autoru - muze jich byt vice
+ *     ...v historii se editace autoru zaznamenavat nebude 
+ */       
+              	   
        //Searching for information about data entries concerned with specified occurrence
        searchInsertInfo();
 	   //Searching for information about data editing concerned with specified occurrence
@@ -145,9 +194,7 @@
        	    query = database.createQuery(HistoryChange.class);
        } catch(RemoteException e) {
        	    System.err.println("RemoteException- searchInsertInfo(), createQuery");       	  
-       }
-       // Create aliases for table tHistoryChange.      
-       //query.createAlias("user", "us");
+       }            
        query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryChange.OCCURRENCE, null, occurrence, null);
        query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryChange.OPERATION, null, HistoryChange.HISTORYCHANGE_INSERT, null);
        
@@ -160,9 +207,7 @@
            logger.error("Searching history (inserting) failed. Unable to execute search query.");
            //setError(e);
            // setError("Searching history failed. Please contact your administrator.");
-       } catch (RemoteException e) {
-		   // TODO 
-		   //e.printStackTrace();
+       } catch (RemoteException e) {		 
     	   System.err.println("RemoteException- searchInsertInfo(), executeQuery");
 	} finally {
     	   logger.debug("Searching history (inserting) ends successfully");
@@ -192,7 +237,7 @@
         // Create aliases for table tHistoryChange.      
         query.createAlias("historyChange", "hc");        
         // Add restriction to CUNITVALUE column of tOccurence table
-        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.operation", null, 2, null);
+        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.operation", null, HistoryChange.HISTORYCHANGE_EDIT, null);
         query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.occurrence", null, occurrence, null);    	
         query.addOrder(PlantloreConstants.DIRECT_DESC, "hc.when");        
     	
@@ -205,9 +250,7 @@
             logger.error("Searching history (editing) failed. Unable to execute search query.");
             //setError(e);
             // setError("Searching history failed. Please contact your administrator.");
-        } catch (RemoteException e) {
- 		   // TODO 
- 		   //e.printStackTrace();
+        } catch (RemoteException e) { 		   
      	   System.err.println("RemoteException- searchInsertInfo(), executeQuery");
 	 	} finally {
 	 		logger.debug("Searching history (editing) ends successfully");
@@ -315,23 +358,173 @@
     	int countResult = editHistoryDataList.size();
     	int firstRow = getCurrentFirstRow();
     	int countRow = countResult - firstRow + 1;
-    	int ii = 0;
+    	int ii = 0;    	
         editHistoryData = new Object[countRow][6];
-    	for (int i=firstRow-1; i < countResult; i++) {
-    		editHistoryData[ii][0] = new Boolean(false);
+    	for (int i=firstRow-1; i < countResult; i++) {    		
+    		editHistoryData[ii][0] = new Boolean(false);    		
     	    editHistoryData[ii][1] = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getWhen();
-    	    editHistoryData[ii][2] = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getWho().getWholeName();
-    	    editHistoryData[ii][3] = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getColumnName();
+    	    editHistoryData[ii][2] = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getWho().getWholeName();    	   
+    	    editHistoryData[ii][3] = L10n.getString((((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getColumnName()));
     	    editHistoryData[ii][4] = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
     	    editHistoryData[ii][5] = ((HistoryRecord)editHistoryDataList.get(i)).getNewValue();
     	    ii++;
     	}  
     	return this.editHistoryData;
     	
+    }    
+    
+  
+    /**
+     * 
+     * @param id
+     * @return
+     */
+    public int searchHistoryChangeId(int id){
+    	SelectQuery query = null;
+        try {
+        	    query = database.createQuery(HistoryRecord.class);
+        } catch(RemoteException e) {
+        	    System.err.println("RemoteException- searchHistoryChangeId(), createQuery");       	  
+        }                    
+        // Create aliases for table tHistoryChange.      
+        query.createAlias("historyChange", "hc");        
+        // Add restriction to CUNITVALUE column of tOccurence table
+        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.id", null, id , null);
+        
+        int resultIdChange = 0;
+        try {                   
+        	resultIdChange = database.executeQuery(query);        
+        } catch (DBLayerException e) {                   
+            logger.error("Searching historyChangeId failed. Unable to execute search query.");
+        } catch (RemoteException e) {		 
+     	   System.err.println("RemoteException- searchHistoryChangeId(), executeQuery");
+ 	    } finally {
+     	   logger.debug("Searching historyChangeId ends successfully.");
+        }         
+ 	    
+ 	    int countResult = 100;
+ 	    try {
+			countResult = database.getNumRows(resultIdChange);
+			logger.debug("SearchHistoryChangeId - Number of result: "+countResult);
+		} catch (RemoteException e) {
+			System.err.println("RemoteException- searchHistoryChangeId(), getNumRows");
+		}		
+		return countResult;
     }
     
+    /**
+     * 
+     * @param id
+     * @return
+     */
+    public Object[] searchObject(String typeObject, int id, String oldRecordValue) { 
+    	
+    	SelectQuery query = null;
+    	if (typeObject.equals("Habitat")){
+    		try {
+            	query = database.createQuery(Habitat.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject() - Habitat, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Habitat.ID, null, id , null);
+    	} else if (typeObject.equals("Plant")){
+    		try {
+            	query = database.createQuery(Plant.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject() - Plant, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Plant.TAXON, null, oldRecordValue , null);
+    	}else if (typeObject.equals("Village")){
+    		try {
+            	query = database.createQuery(Village.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject()- Village, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Village.NAME, null, oldRecordValue, null);
+    	}  else if  (typeObject.equals("Territory")){
+    		try {
+            	query = database.createQuery(Territory.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject()- Territory, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Territory.NAME, null, oldRecordValue , null); 
+    	} else if (typeObject.equals("Phytochorion")){
+    		try {
+            	query = database.createQuery(Phytochorion.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject()- Phytochorion, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Phytochorion.NAME, null, oldRecordValue , null);
+    	} else if (typeObject.equals("PhytochorionCode")){
+    		try {
+            	query = database.createQuery(Phytochorion.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject()- Phytochorion code, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Phytochorion.CODE, null, oldRecordValue , null);
+    	} else {
+    		logger.error("SearchObject() - Incorrect type of object.");
+    	}
+                        
+        int resultIdPlant = 0;
+        try {                   
+            resultIdPlant = database.executeQuery(query);        
+        } catch (DBLayerException e) {                   
+            logger.error("Searching " +typeObject+ " failed. Unable to execute search query.");
+        } catch (RemoteException e) {		 
+     	   System.err.println("RemoteException- executeQuery " +typeObject);
+ 	    } finally {
+     	   logger.debug("Searching " +typeObject+ " ends successfully");
+        }         
 
+ 	   Object[] objects = null;
+ 	   Object[] object = null;
+       try {
+       	    // Retrieve selected row interval         	
+        	try {
+        		objects = database.more(resultIdPlant, 1, 1);  
+        	} catch(RemoteException e) {            	
+            	logger.debug("RemoteException- searchObject, more");            	
+            }   
+        	object = (Object[])objects[0];           
+       } catch (DBLayerException e) {
+           // Log and set error in case of an exception
+           logger.error("Processing search " +typeObject+ " results failed: "+e.toString());            
+       } finally {     	    
+    	   	return object; 	       	          	   
+       }     	        
+    }
+    
     /**
+     * 
+     *
+     */
+    public void deleteHistoryRecords() {
+    	try {
+			database.executeDelete(historyRecord);
+			logger.debug("Deleting historyRecord successfully.");
+		} catch (RemoteException e) {
+			logger.error("Deleting historyRecord - remoteException. "+e.toString());
+		} catch (DBLayerException e) {
+			logger.error("Deleting historyRecord failed. "+e.toString());
+		}
+		int countResult = searchHistoryChangeId(historyRecord.getHistoryChange().getId());
+		if (countResult == 1) {
+			//samzat zaznam z tabulky tHistoryChange - muzeme protoze neexistuji dalsi FK z tHistory.cChngeId
+			try {
+				database.executeDelete(historyChange);
+				logger.debug("Deleting historyChange successfully.");
+			} catch (RemoteException e) {
+				logger.error("Deleting historyChange - remoteException. "+e.toString());
+			} catch (DBLayerException e) {
+				logger.error("Deleting historyChange failed. "+e.toString());
+			}
+		} else {
+			logger.debug("Exist other record in the table tHistory, whitch has the same value of attribute cChangeId.");
+		}
+    }
+    
+    /**
      * Tato funkce bude menit hodnoty v DB (DELETE v historii, zmena v jakekoliv 
      * tabulce pro kterou se zaznamenava historie) - UNDO
      * 
@@ -342,131 +535,151 @@
      */
     public void updateOlderChanges(ArrayList markResult)
     {    	
-    	//Occurrence occurrence = new Occurrence(); ... uz jsme si tento objek vytvorili v konsturktoru 
-    	habitat = new Habitat();
-    	publication = new Publication();
-    	village = new Village();
-    	phytochorion = new Phytochorion();
-    	territory = new Territory(); 
-    	
+    	    	
     	//Inicalization of hashTable
     	initOccurrenceHash();
     	initHabitatHash();
-    	initPublicationHash();
-    	
-    
-        	
+    	initPublicationHash();   
+    	    	
     	//number of selected rows
     	int countMark = markResult.size();
+    	// Index of firt row currently displayed
+    	int indexFirstRow = getCurrentFirstRow();
+    	//List of changed ITEM
+    	ArrayList changedList = new ArrayList();
     	//take from older record to younger record
-    	for( int i=countMark-1; i >= 0; i--) {
+    	for( int i=countMark-1; i >= 0; i--) {    	
     		logger.debug("Number of selected row: "+markResult.get(i));
-    		tableName = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getTableName();
-    		columnName = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getColumnName();
-    		
-    		if (tableName.equals("Occurrence")){
+    		historyRecord = (HistoryRecord)editHistoryDataList.get((Integer)markResult.get(i)+ getCurrentFirstRow()-1);    		
+    		historyChange = historyRecord.getHistoryChange();
+    		tableName = historyRecord.getHistoryColumn().getTableName();
+    		columnName = historyRecord.getHistoryColumn().getColumnName();
+    		// oldRecordId je defautne nastaveno v databazi na hodnotu 0 !!!    			
+			oldRecordId = historyChange.getOldRecordId();
+			recordId = historyChange.getRecordId();
+			occurrenceId = historyChange.getOccurrence().getId();
+			oldValue = historyRecord.getOldValue();
+			
+			this.editHistoryDataList.remove((Integer)markResult.get(i)+ getCurrentFirstRow()-1);
+			
+    		if (tableName.equals("Occurrence")){  
+    			if (occurrenceId != recordId){
+    				logger.error("Inccorect information in history tables --> occurrenceId != recordId ... Incorrect identifier of Occurrence.");
+    			}
     			
-    			//Get a specified number from occurrence mapping.
-    			int value;
+    			//Get a specified number of columnName from occurrence mapping.
+    			int columnConstant;
     			if (occurrenceHash.containsKey(columnName)) {
-    				 value = (Integer)occurrenceHash.get(columnName); 
+    				 columnConstant = (Integer)occurrenceHash.get(columnName); 
     	        } else {
-    	             value = 0;
-    	        }
-        	    
-    			//Init oldRecordId
-    			oldRecordId = 0;
+    	             columnConstant = 0;
+    	        }        	    			
+    			    			
+    			logger.debug("ColumnConstant: "+ columnConstant);
+    			logger.debug("ColumnName: "+ columnName);
+    			logger.debug("OldValue: "+ oldValue);    			     			
     			
-    			//Save new value for the column
-    			switch (value) {
+    			switch (columnConstant) {
 	                case 1: //Taxon  
-	                	//test, zda starsi hodnota byla pro occurrence nastavena 
-	                	//(info o mladsi zmene bude uz jen vymazano s tabulky historie} 
-	                	if ( occurrence.getPlant() == null ){
-	                		oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-		                	//recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
-		                	//oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-		                	//newValue = ((HistoryRecord)editHistoryDataList.get(i)).getNewValue();
-		                	/* 
-		                	 * oldValue a newValue nepotrebujeme ...pro Taxon nam staci znat jak se zmenilo jeho ID
-		                	 * pro occurrence nepotrebujem ani recordID, protoze to je stejne s occurrenceID - jen 
-		                	 * bychom mohli otestovat, zda to je opravdu stejne, kdyz ne tak vznikla nekde pri ukladani
-		                	 * dat do historie chyba
-		                	 * 
-		                	 * if (occurrence.getId() != recordId) {
-		                	 *     loggerr.error("Incorrect identifier for OCCURRENCE");
-		                	 *  }
-		                	 *  
-		                	 * ?? kdyz se nasledovne priradi a nasledne ulozi plant, bude to spravne????	       
-		                	 */
-		                	Plant plant = new Plant();
-		                	plant.setId(oldRecordId);
-		                	occurrence.setPlant(plant);	
-		                	/*
-		                	 * po zmene plant je potreba projit jeste vysledky od 1 do currentFirstRow nebo SELECT s posminkou
-		                	 * pokud v te dobe doslo jeste ke zmnene Plant, tak je potreba tuto zmenu vymazat z historie
-		                	 * a upozornit na to uzivatele, ze kdyz pozaduje vratit zmnenu k datu xxx, tak budou zruseny
-		                	 * i zmeny z datumu yyy, atd..
-		                	 */
+	                	//test, zda byla nastavena hodnota pro update pro Taxon 
+	                	// pokud ano, tak se jedna o mladsi zmenu, ktera bude jen smazana z tabulek historie
+	                	if ( ! changedList.contains("taxon") ){
+	                		changedList.add("taxon");		                		
+                			Object[] object = searchObject("Plant",0,"oldValue");
+		                	Plant plant = (Plant)object[0];
+		                	occurrence.setPlant(plant);
+		                	logger.debug("Set selected value for update of attribute Taxon.");	                		
 	                	} else {
-	                		//zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                		logger.debug("Later edit of Taxon. ");
 	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();	                			                		                			                
 	                    break;
 	                case 2: //Year	
-	                	if (occurrence.getYearCollected() == 0) {
-	                		oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (! changedList.contains("year")) {
+	                		changedList.add("year");	                		
 		                	occurrence.setYearCollected(Integer.parseInt(oldValue));
-	                	}else {
-	                		//zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
-	                	}	                	
+		                	logger.debug("Set selected value for update of attribute Year.");
+		                	//Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
+	                		Date time = occurrence.getTimeCollected();
+	                		Date isoDateTime = new Date();
+	                		isoDateTime.setDate(occurrence.getDayCollected());
+	                		isoDateTime.setMonth(occurrence.getMonthCollected());
+	                		isoDateTime.setYear(Integer.parseInt(oldValue));	                		
+	                		//occurrence.setIsoDateTimeBegin(isoDateTime);
+	                		
+	                	} else {
+	                		logger.debug("Later edit of Year. ");	                		
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();             	
 	                	break;
 	                case 3: //Month 
-	                	if (occurrence.getMonthCollected() == 0) {
-	                		oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (! changedList.contains("month")) {
+	                		changedList.add("month");	                		
 	                		occurrence.setMonthCollected(Integer.parseInt(oldValue));
+	                		logger.debug("Set selected value for update of attribute Month.");
 	                	} else {
-	                		// zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                		logger.debug("Later edit of Month. ");
 	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
 	                    break;
 	                case 4: //Day	                	
-	                	if (occurrence.getDayCollected() == 0) {
-	                		oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (! changedList.contains("day")) {
+	                		changedList.add("day");	                		
 		                	occurrence.setDayCollected(Integer.parseInt(oldValue));
+		                	logger.debug("Set selected value for update of attribute Day.");
 	                	} else {
-	                		// zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                		logger.debug("Later edit of Day. ");
 	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
 	                	break;
 	                case 5: //Time 	                	
-	                	if (occurrence.getTimeCollected() == null) {
-	                		oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();	                	
+	                	if (! changedList.contains("time")) {
+	                		changedList.add("time");
+	                		//hodnota se bude muset rozdelit na hodiny:minuty:sekundy a pak se ulozit pomoci get a set metod pro Date
 		                	//occurrence.setTimeCollected(Integer.parseInt(oldValue));
+	                		logger.debug("Set selected value for update of attribute Time.");
 	                	} else {
-	                		// zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                		logger.debug("Later edit of Time. ");
 	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
 	                    break;
 	                case 6: //Source	                	
-	                	if (occurrence.getDataSource() == null) {
-		                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (! changedList.contains("source")) {
+	                		changedList.add("source");
 		                	occurrence.setDataSource(oldValue);
+		                	logger.debug("Set selected value for update of attribute DataSource.");
 	                	} else {
-	                		//zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                		logger.debug("Later edit of DataSource. ");
 	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
 	                	break;
 	                case 7: //Herbarium
-	                	if (occurrence.getHerbarium() == null){
-	                		oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (! changedList.contains("hebarium")){
+	                		changedList.add("herbarium");
 	                		occurrence.setHerbarium(oldValue);
+	                		logger.debug("Set selected value for update of attribute Herbarium.");
 	                	} else {
-	                		//zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                		logger.debug("Later edit of Herbarium. ");
 	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
 	                    break;
 	                case 8: //Note occurrence	
-	                	if (occurrence.getNote() == null) {	                			            
-	                		oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+	                	if (! changedList.contains("noteOccurrence")) {
+	                		changedList.add("noteOccurrence");
 	                		occurrence.setNote(oldValue);
+	                		logger.debug("Set selected value for update of attribute NoteOccurrence.");
 	                	} else {
-	                		//zavolame smazani zaznamu v historii (tHistory a s otestovanim z tHistoryChange)
+	                		logger.debug("Later edit of NoteOccurrence. ");
 	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
 	                	break;
 	                default:            
 	                    logger.error("No column defined for name "+ columnName);	                   
@@ -474,253 +687,400 @@
     		} else if (tableName.equals("Habitat") || tableName.equals("Village")
     				   || tableName.equals("Territory") || tableName.equals("Phytochorion")){
     			
-    			// Get a specified number from habitat mapping.
-    			int value;
-    			if (habitatHash.containsKey(columnName)) {
-    				value = (Integer)habitatHash.get(columnName); 
+    			// Get a specified number of columnName from habitat mapping.
+    			int columnConstant;
+    			if (occurrenceHash.containsKey(columnName)) {
+    				 columnConstant = (Integer)occurrenceHash.get(columnName); 
     	        } else {
-    	             value = 0;
-    	        }    
+    	             columnConstant = 0;
+    	        }        	    			
+    			    			
+    			logger.debug("ColumnConstant: "+ columnConstant);
+    			logger.debug("ColumnName: "+ columnName);
+    			logger.debug("OldValue: "+ oldValue);  
     			
-    			// Init oldRecordId
-    			oldRecordId = 0;
     			
     			// Save new value for the column        		
-     			switch (value) {
+     			switch (columnConstant) {
  	                case 1:  //Quadrant    
- 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		habitat.setId(recordId);
-		                	habitat.setQuadrant(oldValue);
+ 	                	if (! changedList.contains("quadrant")) {
+	                		changedList.add("quadrant");
+	                		if (oldRecordId != 0 ){
+		                		/*
+		                		 * Zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+		                		 * Do occurrence.cHabitatId ulozit nacteny objekt Habitat
+		                		 * Zjistit, zda na aktulani objkt Habitat existuji jeste nejake FK z tOccurrence.cHabitatID
+		                		 * pokud neexistuji, tak ho smazem ...Pozor na to,ze smazane zaznamy jsou oznaceny jeko cDelete=1 !!!
+		                		 */
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Qudrant.");
+		                	}else {		                	
+			                	occurrence.getHabitat().setQuadrant(oldValue);
+		                	}
+	                		logger.debug("Set selected value for update of attribute Quadrant.");
+	                	} else {
+	                		logger.debug("Later edit of Quadrant. ");
 	                	}
-	                	
-	                	/*
-	                	 * Pro konkretni OCCURRENCE je stejne recordId ... pokud by doslo k jeho zmene, tak by byla 
-	                	 * zaznamenana v polozce oldRecordId - ve chvili kdy dojde k teto zmene, tak se to musi osetrit
-	                	 * 1. v tOccurrence zmenit polozku cHabitat (s odmazanim daneho zaznamu v tHabitats to bude asi 
-	                	 *    slozitejsi,protoze se na nej muzou jiz odkazovat dalsi zaznamy --> neodmazavat nebo otestovat
-	                	 *    a pak teprve odmazat (maze se nastavenim priznaku CDELETE)) 
-	                	 * 2. v tOccurrence nemenit polozku cHabitat -- tak to nepujde
-	                	 * 
-	                	 * 
-	                	 *  
-	                	 */
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();	                	              		               
  	                    break;
  	                case 2: //Place description
- 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		habitat.setId(recordId);
-		                	habitat.setDescription(oldValue);
-	                	}	                	
+ 	                	if (! changedList.contains("description")) {
+	                		changedList.add("description");
+	                		if (oldRecordId != 0 ){
+		                		//Zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Description.");
+		                	}else {		                	
+			                	occurrence.getHabitat().setDescription(oldValue);
+		                	}
+	                		logger.debug("Set selected value for update of attribute Description Habitat.");
+	                	} else {
+	                		logger.debug("Later edit of Description Habitat. ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
  	                	break;
  	                case 3:  //Country
- 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		habitat.setId(recordId);
-		                	habitat.setCountry(oldValue);
-	                	}	
-	                	
+ 	                	if (! changedList.contains("country")) {
+	                		changedList.add("country");
+	                		if (oldRecordId != 0 ){
+		                		//menou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Country.");
+		                	}else {		                	
+			                	occurrence.getHabitat().setCountry(oldValue);
+		                	}
+	                		logger.debug("Set selected value for update of attribute Country.");
+	                	} else {
+	                		logger.debug("Later edit of Country. ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
  	                    break;
  	                case 4: //Altitude
- 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		habitat.setId(recordId);
-		                	//habitat.setAltitude(Integer.parseInt(oldValue));
-	                	}	
-	                	
+ 	                	if (! changedList.contains("altitude")) {
+	                		changedList.add("altitude");
+	                		if (oldRecordId != 0 ){
+		                		//menou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Altitude.");
+		                	}else {		                	
+			                	occurrence.getHabitat().setAltitude(Double.parseDouble(oldValue));
+		                	}
+	                		logger.debug("Set selected value for update of attribute Altitude.");
+	                	} else {
+	                		logger.debug("Later edit of Altitude. ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
  	                	break;
  	                case 5:  //Latitude  
- 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		habitat.setId(recordId);
-		                	//habitat.setLatitude(Integer.parseInt(oldValue));
-	                	}	
-	                	
+ 	                	if (! changedList.contains("latitude")) {
+	                		changedList.add("latitude");
+	                		if (oldRecordId != 0 ){
+		                		//menou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Latitude.");
+		                	}else {		                	
+			                	occurrence.getHabitat().setLatitude(Double.parseDouble(oldValue));
+		                	}
+	                		logger.debug("Set selected value for update of attribute Latitude.");
+	                	} else {
+	                		logger.debug("Later edit of Latitude. ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
  	                    break;
  	                case 6: //Longitude
- 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		habitat.setId(recordId);
-		                	//habitat.setLongitude(Integer.parseInt(oldValue));
-	                	}	
+ 	                	if (! changedList.contains("longitude")) {
+	                		changedList.add("longitude");
+	                		if (oldRecordId != 0 ){
+		                		//menou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Longitude.");
+		                	}else {		                	
+			                	occurrence.getHabitat().setLongitude(Double.parseDouble(oldValue));
+		                	}
+	                		logger.debug("Set selected value for update of attribute Longitude.");
+	                	} else {
+	                		logger.debug("Later edit of Longitude. ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
  	                	break;
  	                case 7: //Nearest bigger seat  	
- 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		habitat.setId(recordId);	                		       		
-	                		village.setName(oldValue);
-		                	habitat.setNearestVillage(village);
-	                	}	
+ 	                	if (! changedList.contains("nameVillage")) {
+	                		changedList.add("nameVillage");
+	                		if (oldRecordId != 0 ){
+		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);	   
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Village.");
+		                	}else {		                	
+		                		// Nacteni Village pro nasledny update tHabitat.cNearestVillageId
+	                			Object[] object = searchObject("Village",0,oldValue);
+	                			Village village = (Village) object[0];
+			                	occurrence.getHabitat().setNearestVillage(village);
+			                	logger.debug("Set selected value for update of attribute NearesVillage.");
+		                	}	                		
+	                	} else {
+	                		logger.debug("Later edit of Village. ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
  	                    break;
- 	                case 8: //Phytochorion
- 	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		habitat.setId(recordId);	                		              		
-	                		phytochorion.setName(oldValue);
-		                	habitat.setPhytochorion(phytochorion);
-	                	}	
- 	                	break;
- 	               case 9: //Phytochorion code
- 	            	    recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
-	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		habitat.setId(recordId);	                		              		
-	                		phytochorion.setCode(oldValue);
-		                	habitat.setPhytochorion(phytochorion);
+ 	                case 8: //Phytochorion or hytochorion code 	                	
+ 	                	if (! changedList.contains("phytochorion")) {
+	                		changedList.add("phytochorion");
+	                		if (oldRecordId != 0 ){
+		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);	 	    
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Phytochorion.");
+		                	}else {		                	
+		                		// Nacteni Phytochorion pro nasledny update tHabitat.cPhytochorionId
+	                			Object[] object = searchObject("Phytochorion",0,oldValue);
+	                			Phytochorion phytochorion = (Phytochorion) object[0];
+			                	occurrence.getHabitat().setPhytochorion(phytochorion);
+			                	logger.debug("Set selected value for update of attribute Phytochorion.");
+		                	}	                		
+	                	} else {
+	                		logger.debug("Later edit of Phytochorion. ");
 	                	}
-	                	break;
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
+ 	                	break; 	
+ 	               case 9: //Phytochorion code	                	
+	                	if (! changedList.contains("phytochorionCode")) {
+	                		changedList.add("phytochorionCode");
+	                		if (oldRecordId != 0 ){
+		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);	 	   
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute PhytochorionCode.");
+		                	}else {		                	
+		                		// Nacteni Phytochorion pro nasledny update tHabitat.cPhytochorionId
+	                			Object[] object = searchObject("PhytochorionCode",0,oldValue);
+	                			Phytochorion phytochorion = (Phytochorion) object[0];
+			                	occurrence.getHabitat().setPhytochorion(phytochorion);
+			                	logger.debug("Set selected value for update of attribute Phytochorion code.");
+		                	}	                		
+	                	} else {
+	                		logger.debug("Later edit of Phytochorion code. ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
+	                	break; 	     
 	                case 10:  //Territory        
-	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		habitat.setId(recordId);	                		              		
-	                		territory.setName(oldValue);
-		                	habitat.setTerritory(territory);
+	                	if (! changedList.contains("nameTerritory")) {
+	                		changedList.add("nameTerritory");
+	                		if (oldRecordId != 0 ){
+		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);	 	
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Territory.");
+		                	}else {		                	
+		                		// Nacteni Territory pro nasledny update tHabitat.cTerritory
+	                			Object[] object = searchObject("Territory",0,oldValue);
+	                			Territory territory = (Territory) object[0];
+			                	occurrence.getHabitat().setTerritory(territory);
+			                	logger.debug("Set selected value for update of attribute Territory.");
+		                	}	                		
+	                	} else {
+	                		logger.debug("Later edit of Territory. ");
 	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
 	                    break;
 	                case 11: //Note habitat
-	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		habitat.setId(recordId);
-		                	habitat.setNote(oldValue);
-	                	}	
+	                	if (! changedList.contains("noteHabitat")) {
+	                		changedList.add("noteHabitat");
+	                		if (oldRecordId != 0 ){
+		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute NoteHabitat");
+		                	}else {		                	
+			                	occurrence.getHabitat().setNote(oldValue);
+		                	}
+	                		logger.debug("Set selected value for update of attribute NoteHabitat.");
+	                	} else {
+	                		logger.debug("Later edit of NoteHabitat. ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
 	                	break;
  	                default:            
  	                    logger.error("No column defined for name "+ columnName);	                   
      			}  	
     		} else if (tableName.equals("Publication")){
     			
-    			// Get a specified number from publication mapping.
-    			int value;
-    			if (publicationHash.containsKey(columnName)) {
-    				value = (Integer)publicationHash.get(columnName); 
+    			// Get a specified number of columnName from publication mapping.
+    			int columnConstant;
+    			if (occurrenceHash.containsKey(columnName)) {
+    				 columnConstant = (Integer)occurrenceHash.get(columnName); 
     	        } else {
-    	             value = 0;
-    	        }
+    	             columnConstant = 0;
+    	        }        	    			
+    			    			
+    			logger.debug("ColumnConstant: "+ columnConstant);
+    			logger.debug("ColumnName: "+ columnName);
+    			logger.debug("OldValue: "+ oldValue);  
+    			 			
     			
-    			// Init oldRecordId
-    			oldRecordId = 0;    			
-    			
     			// Save new value for the column    			         		
-    			switch (value) {
-	                case 1: //Collection     
-	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		publication.setId(recordId);
-		                	publication.setCollectionName(oldValue);
-	                	}	
+    			switch (columnConstant) {
+	                case 1: //Collection Name   
+	                	if (! changedList.contains("collectionName")) {
+	                		changedList.add("collectionName");
+	                		if (oldRecordId != 0 ){
+		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute CollectionName.");
+		                	}else {		                	
+			                	occurrence.getPublication().setCollectionName(oldValue);
+			                	//Update atribute isoDataTimeBegin (CollectionName + CollectionYearPublication + JournalName + JournalAuthor)
+			                	Integer publicationYear = occurrence.getPublication().getCollectionYearPublication();
+			                	String journalName = occurrence.getPublication().getJournalName();
+			                	String journalAuthor = occurrence.getPublication().getJournalAuthorName();
+			                	occurrence.getPublication().setReferenceCitation(oldValue+" "+publicationYear+" "+journalName+" "+journalAuthor);
+		                	}
+	                		logger.debug("Set selected value for update of attribute CollectionName .");
+	                	} else {
+	                		logger.debug("Later edit of CollectionName . ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
 	                    break;
 	                case 2: //Year of publication
-	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		publication.setId(recordId);
-		                	publication.setCollectionYearPublication(Integer.parseInt(oldValue));
-	                	}	
+	                	if (! changedList.contains("colletionYearPublication")) {
+	                		changedList.add("colletionYearPublication");
+	                		if (oldRecordId != 0 ){
+		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute CollectionYearPublication.");
+		                	}else {		                	
+			                	occurrence.getPublication().setCollectionYearPublication(Integer.parseInt(oldValue));
+			                	//Update atribute isoDataTimeBegin (CollectionName + CollectionYearPublication + JournalName + JournalAuthor)
+			                	String collectionName = occurrence.getPublication().getCollectionName();			                	
+			                	String journalName = occurrence.getPublication().getJournalName();
+			                	String journalAuthor = occurrence.getPublication().getJournalAuthorName();
+			                	occurrence.getPublication().setReferenceCitation(collectionName+" "+oldValue+" "+journalName+" "+journalAuthor);
+		                	}
+	                		logger.debug("Set selected value for update of Year of publication .");
+	                	} else {
+	                		logger.debug("Later edit of Year of publication. ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
 	                	break;
 	                case 3: //Journal  
-	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		publication.setId(recordId);
-		                	publication.setJournalName(oldValue);
-	                	}	
+	                	if (! changedList.contains("journalName")) {
+	                		changedList.add("journalName");
+	                		if (oldRecordId != 0 ){
+		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute JournalName.");
+		                	}else {		                	
+			                	occurrence.getPublication().setJournalName(oldValue);
+			                	// Update atribute isoDataTimeBegin (CollectionName + CollectionYearPublication + JournalName + JournalAuthor)			                	
+			                	String collectionName = occurrence.getPublication().getCollectionName();
+			                	Integer publicationYear = occurrence.getPublication().getCollectionYearPublication();			                	
+			                	String journalAuthor = occurrence.getPublication().getJournalAuthorName();
+			                	occurrence.getPublication().setReferenceCitation(collectionName+" "+publicationYear+" "+oldValue+" "+journalAuthor);
+		                	}
+	                		logger.debug("Set selected value for update of attribute JournalName .");
+	                	} else {
+	                		logger.debug("Later edit of JournalName . ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
 	                    break;
 	                case 4: //Author of journal
-	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		publication.setId(recordId);
-		                	publication.setJournalAuthorName(oldValue);
-	                	}	
+	                	if (! changedList.contains("journalAuthor")) {
+	                		changedList.add("journalAuthor");
+	                		if (oldRecordId != 0 ){
+		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute JournalAuthor.");
+		                	}else {		                	
+			                	occurrence.getPublication().setJournalAuthorName(oldValue);
+			                	//Update atribute isoDataTimeBegin (CollectionName + CollectionYearPublication + JournalName + JournalAuthor)			                	
+			                	String collectionName = occurrence.getPublication().getCollectionName();
+			                	Integer publicationYear = occurrence.getPublication().getCollectionYearPublication();
+			                	String journalName = occurrence.getPublication().getJournalName();			                	
+			                	occurrence.getPublication().setReferenceCitation(collectionName+" "+publicationYear+" "+journalName+" "+oldValue);
+		                	}
+	                		logger.debug("Set selected value for update of attribute JournalAuthor .");
+	                	} else {
+	                		logger.debug("Later edit of JournalAuthor. ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
+	                	break;	                
+	                case 5: //Reference detail
+	                	if (! changedList.contains("referenceDetail")) {
+	                		changedList.add("referenceDetail");
+	                		if (oldRecordId != 0 ){
+		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute ReferenceDetail.");
+		                	}else {		                	
+			                	occurrence.getPublication().setReferenceDetail(oldValue);
+		                	}
+	                		logger.debug("Set selected value for update of attribute ReferenceDetail.");
+	                	} else {
+	                		logger.debug("Later edit of ReferenceDetail. ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
 	                	break;
-	                case 5: //Reference citation = collectionName + collectionYearPublication + journalName + journalAuthorName
-	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		publication.setId(recordId);
-		                	publication.setReferenceCitation(oldValue);
-	                	}	
-	                    break;
-	                case 6: //Reference detail
-	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		publication.setId(recordId);
-		                	publication.setReferenceDetail(oldValue);
-	                	}	
-	                	break;
-	                case 7: //URL    
-	                	recordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getRecordId();
- 	                	oldRecordId = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOldRecordId();
-	                	oldValue = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-	                	if (oldRecordId != 0 ){
-	                		//musime zavolat funkci, ktera to osetri
-	                	}else {
-	                		publication.setId(recordId);
-		                	publication.setUrl(oldValue);
-	                	}	
+	                case 6: //URL    
+	                	if (! changedList.contains("url")) {
+	                		changedList.add("url");
+	                		if (oldRecordId != 0 ){
+		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
+	                			Object[] object = searchObject("Habitat",oldRecordId,"");
+	                			Habitat habitatOld = (Habitat) object[0];
+			                	occurrence.setHabitat(habitatOld);
+			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute URLpublication.");
+		                	}else {		                	
+			                	occurrence.getPublication().setUrl(oldValue);
+		                	}
+	                		logger.debug("Set selected value for update of attribute URL (publication).");
+	                	} else {
+	                		logger.debug("Later edit of ReferenceDetail (publication). ");
+	                	}
+	                	//Delete record from tHistory and tHistoryChange
+	                	deleteHistoryRecords();
 	                    break;	                
 	                default:            
 	                    logger.error("No column defined for name "+ columnName);	                   
@@ -730,13 +1090,18 @@
     		}    			
     		
     	}
-    	//number of rows in result
-    	int countResult = editHistoryDataList.size();
-    	for( int i=0; i<countResult; i++) {
-    		
+    	
+    	//projdem vysledky od 0 do zobrazeneho vysledku
+    	//pokud je tu informace o editaci polozky, ktere byla vracena starsi hodnota, tak se tato informace smaze 
+    	for( int i=0; i<indexFirstRow-1; i++) {
+    		String columnName = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getColumnName();
+    		if (changedList.contains(columnName)){
+    			
+    		}
+    			
     	}
+
     }
-
     
      //***************************//
     //****Init Hashtable*********//
@@ -744,49 +1109,53 @@
     
     private void initOccurrenceHash() {
         occurrenceHash = new Hashtable(9); 
-        occurrenceHash.put("Taxon",1);
-        occurrenceHash.put("Year",2);
-        occurrenceHash.put("Month",3);
-        occurrenceHash.put("Day",4);
-        occurrenceHash.put("Time",5);           
-        occurrenceHash.put("Source",6);
-        occurrenceHash.put("Herbarium",7);        
-        occurrenceHash.put("Note occurrence",8);
+        occurrenceHash.put("plantId",1);
+        occurrenceHash.put("yearCollected",2);
+        occurrenceHash.put("monthCollected",3);
+        occurrenceHash.put("dayCollected",4);
+        occurrenceHash.put("timeCollected",5);           
+        occurrenceHash.put("dataSource",6);
+        occurrenceHash.put("herbarium",7);        
+        occurrenceHash.put("noteOccurrence",8);
         //isoDataTimeBegin je slozena s Year + Month + Day + Time ... mela by se zmenit vzdy, kdyz
         // dojde ke zmene nektere z techto polozek ... jak to nejlepe zaridit???
-        occurrenceHash.put("isoDataTimeBegin",9);
+        //occurrenceHash.put("isoDataTimeBegin",9);
         /*
          * Jak se bude chovat cUpdateWhen, cUpdateWho v historii - asi se nastavi 
          * cas vyvolani undo v historii a uzivatel, ktery to vyvolal
          */
         //occurrenceHash.put("cUpdateWhen",10);
         //occurrenceHash.put("cUpdateWho",11);
+        /*
+         * Uvadet nejakou informaci z metadat - pripadne jakou
+         */
+        //occurrenceHash.put("metadataId",12);
     }    
     
     private void initHabitatHash() {
         habitatHash = new Hashtable(11);        
-        habitatHash.put("Quadrant",1);
-        habitatHash.put("Place description",2);
-        habitatHash.put("Country",3);
-        habitatHash.put("Altitude",4);
-        habitatHash.put("Latitude",5);
-        habitatHash.put("Longitude",6);      
-        habitatHash.put("Nearest bigger seat",7);      
-        habitatHash.put("Phytochorion",8);
-        habitatHash.put("Phytochorion code",9);
-        habitatHash.put("Territory",10);
-        habitatHash.put("Note habitat",11);
+        habitatHash.put("quadrant",1);
+        habitatHash.put("description",2);
+        habitatHash.put("country",3);
+        habitatHash.put("altitude",4);
+        habitatHash.put("latitude",5);
+        habitatHash.put("longitude",6);      
+        habitatHash.put("nameVillage",7);      
+        habitatHash.put("namePhytochorion",8);
+        habitatHash.put("code",9);
+        habitatHash.put("nameTerritory",10);
+        habitatHash.put("noteHabitat",11);
     }
     
     private void initPublicationHash() {
         publicationHash = new Hashtable(7);                       
-        publicationHash.put("Collection",1);
-        publicationHash.put("Year of publication",2);
-        publicationHash.put("Journal",3);
-        publicationHash.put("Author of journal",4);
-        publicationHash.put("Reference citation",5);
-        publicationHash.put("Reference detail",6);
-        publicationHash.put("URL",7);
+        publicationHash.put("collectionName",1);
+        publicationHash.put("colletionYearPublication",2);
+        publicationHash.put("journalName",3);
+        publicationHash.put("journalAuthorName",4);
+        //publicationHash.put("referenceCitation",7);
+        publicationHash.put("referenceDetail",5);
+        publicationHash.put("url",6);
     }
     
     //****************************//

Modified: trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-03 22:09:21 UTC (rev 105)
+++ trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-03 22:20:00 UTC (rev 106)
@@ -177,7 +177,11 @@
          		 markRows.add(row);         		          		          		
          	  }     
            }
-           model.updateOlderChanges(markRows);    	   
+           model.updateOlderChanges(markRows);  
+           view.getTable().setModel(new HistoryTableModel(model.getData()));
+           int from = model.getCurrentFirstRow();
+           int to = from + view.getTable().getRowCount() - 1;
+           view.setCurrentRowsInfo(from + "-" + to);
        }
    }
     
@@ -194,6 +198,10 @@
                view.setDisplayRows(oldValue);
                return;
            }
+           if (view.getDisplayRows() > model.getResultRows()){
+        	   view.setDisplayRows(model.getResultRows());
+           } 
+           
            // Set new value in the model
            model.setDisplayRows(view.getDisplayRows());
            logger.debug("New display rows: "+view.getDisplayRows());

Modified: trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java	2006-04-03 22:09:21 UTC (rev 105)
+++ trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java	2006-04-03 22:20:00 UTC (rev 106)
@@ -3,17 +3,20 @@
 import javax.swing.DefaultCellEditor;
 import javax.swing.JCheckBox;
 import javax.swing.table.AbstractTableModel;
+import javax.swing.table.TableColumn;
+import javax.swing.table.TableColumnModel;
 
 import net.sf.plantlore.client.dblayer.result.Result;
+import net.sf.plantlore.l10n.L10n;
 
 /** 
  * Implements a table model for the history data.
- * @author Lada
+ * @author Lada Oberreiterova
  */
 public class HistoryTableModel extends AbstractTableModel
 {
 	/** Names of the columns */
-    private String[] columnNames = {"Mark", "Date", "User", "Item", "Old value", "New value"};
+    private String[] columnNames;
     /** Data values displayed in the table*/
     private Object[][] data;
 
@@ -27,6 +30,7 @@
     /** Creates a new instance of HistoryTableModel */
     public HistoryTableModel()
     {    	
+    	init();
     }
 
     /** 
@@ -36,8 +40,21 @@
     public HistoryTableModel(Object[][] tableData)
     {
     	data = tableData;
+    	init();    	
+
     }    
    
+    private void init() {
+        columnNames = new String[6];        
+        columnNames[0] = L10n.getString("historyColX");        
+        columnNames[1] = L10n.getString("historyColDate");        
+        columnNames[2] = L10n.getString("historyColUser");        
+        columnNames[3] = L10n.getString("historyColItem");        
+        columnNames[4] = L10n.getString("historyColOldValue");       
+        columnNames[5] = L10n.getString("historyColNewValue");        
+    }
+    
+    
     /** 
      *  Allows to edit of the MARK cell.
      *  @param row index of row

Modified: trunk/src/net/sf/plantlore/client/history/HistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-03 22:09:21 UTC (rev 105)
+++ trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-03 22:20:00 UTC (rev 106)
@@ -275,11 +275,17 @@
         
         data = model.getData();
         
-        tableEditList = new JTable(new HistoryTableModel(data));
-        //nejsou potreba :-)
-        //TableColumnModel tcm = tableEditList.getColumnModel();
-        //TableColumn tc = tcm.getColumn(HistoryTableModel.MARK);        
-        //tc.setCellEditor(new MyCheckBoxEditor());
+        tableEditList = new JTable(new HistoryTableModel(data));        
+        TableColumnModel tcm = tableEditList.getColumnModel();        
+        TableColumn tc;
+        for (int i = 0; i < tableEditList.getColumnCount(); i++) {
+            tc = tcm.getColumn(i);
+            if (i == 0) {
+                tc.setPreferredWidth(20); 
+            } else {
+                tc.setPreferredWidth(100);
+            }
+        }
         tableEditList.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 100)); 
         tableEditList.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
         jsp = new JScrollPane(tableEditList);     

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-03 22:09:21 UTC (rev 105)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-03 22:20:00 UTC (rev 106)
@@ -81,4 +81,41 @@
 
 publicationMgr=Publication manager
 
-History= History - undo
\ No newline at end of file
+History= History - undo
+
+historyColX = X
+historyColDate = Date
+historyColUser = User
+historyColItem = Item
+historyColOldValue = Old value
+historyColNewValue = New value
+
+plantId = Taxon
+yearCollected = Year
+monthCollected = Month
+dayCollected = Day
+timeCollected = Time
+isoDateTimeBegin = IsoDate
+dataSource = Data source
+herbarium = Herbarium
+noteOccurrence = Note of occurrence
+metadataId = Metadata
+collectionName = Collection
+colletionYearPublication = Year of publication
+journalName = Journal
+journalAuthorName = Author of journal
+referenceCitation = Reference citation
+referenceDetail = Reference detail
+url = URL of publication
+notePublication = Note of publication
+quadrant = Quadrant
+description = Place description
+country = Country
+altitude = Altitude
+latitude = Latitude
+longitude = Longitude
+noteHabitat = Note of habitat
+nameVillage = Nearest bigger seat
+nameTerritory = Territory
+namePhytochorion = Phytochorion
+code = Phytochorion code 



From kovo at berlios.de  Tue Apr  4 00:56:30 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Tue, 4 Apr 2006 00:56:30 +0200
Subject: [Plantlore-dev] r107 - trunk/src/net/sf/plantlore/client
Message-ID: <200604032256.k33MuUOY008013@sheep.berlios.de>

Author: kovo
Date: 2006-04-04 00:56:21 +0200 (Tue, 04 Apr 2006)
New Revision: 107

Removed:
   trunk/src/net/sf/plantlore/client/dblayer/
Log:
Old version of DBLayer removed



From kovo at berlios.de  Tue Apr  4 03:01:40 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Tue, 4 Apr 2006 03:01:40 +0200
Subject: [Plantlore-dev] r108 - in trunk/src/net/sf/plantlore: client client/history middleware server
Message-ID: <200604040101.k3411ejV006306@sheep.berlios.de>

Author: kovo
Date: 2006-04-04 03:01:24 +0200 (Tue, 04 Apr 2006)
New Revision: 108

Modified:
   trunk/src/net/sf/plantlore/client/AppCore.java
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java
   trunk/src/net/sf/plantlore/middleware/DBLayer.java
   trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
Log:
Remove imports of the previous version of DBLayer

Modified: trunk/src/net/sf/plantlore/client/AppCore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-03 22:56:21 UTC (rev 107)
+++ trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-04 01:01:24 UTC (rev 108)
@@ -12,7 +12,6 @@
 import java.util.prefs.Preferences;
 
 // Imports for temporary db access
-import net.sf.plantlore.client.dblayer.FirebirdDBLayer;
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.server.DBLayerException;
 import net.sf.plantlore.server.HibernateDBLayer;

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-03 22:56:21 UTC (rev 107)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-04 01:01:24 UTC (rev 108)
@@ -23,12 +23,7 @@
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
 import net.sf.plantlore.server.DBLayerException;
-import net.sf.plantlore.client.dblayer.FirebirdDBLayer;
 import net.sf.plantlore.common.record.Plant;
-import net.sf.plantlore.client.dblayer.result.QueryResult;
-import net.sf.plantlore.client.dblayer.result.Result;
-import net.sf.plantlore.client.dblayer.query.SelectQuery;
-import net.sf.plantlore.client.dblayer.query.Query;
 import net.sf.plantlore.client.authors.AuthorManager;
 import net.sf.plantlore.client.authors.AuthorManagerCtrl;
 import net.sf.plantlore.client.authors.AuthorManagerView;
@@ -354,10 +349,15 @@
 
     class DataAuthorsListener implements ActionListener {
         public void actionPerformed(ActionEvent actionEvent) {
-            AuthorManager authModel = new AuthorManager(model.getDatabase());
-            AuthorManagerView authView = new AuthorManagerView(authModel, view);
-            AuthorManagerCtrl authCtrl = new AuthorManagerCtrl(authModel, authView);
-            authView.show();
+            try {
+                AuthorManager authModel = new AuthorManager(model.getDatabase());
+                AuthorManagerView authView = new AuthorManagerView(authModel, view);
+                AuthorManagerCtrl authCtrl = new AuthorManagerCtrl(authModel, authView);
+                authModel.pokus();
+                authView.show();                
+            } catch(RemoteException e) {
+            	System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
+            }                
         }
     }    
 

Modified: trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java	2006-04-03 22:56:21 UTC (rev 107)
+++ trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java	2006-04-04 01:01:24 UTC (rev 108)
@@ -6,7 +6,6 @@
 import javax.swing.table.TableColumn;
 import javax.swing.table.TableColumnModel;
 
-import net.sf.plantlore.client.dblayer.result.Result;
 import net.sf.plantlore.l10n.L10n;
 
 /** 

Modified: trunk/src/net/sf/plantlore/middleware/DBLayer.java
===================================================================
--- trunk/src/net/sf/plantlore/middleware/DBLayer.java	2006-04-03 22:56:21 UTC (rev 107)
+++ trunk/src/net/sf/plantlore/middleware/DBLayer.java	2006-04-04 01:01:24 UTC (rev 108)
@@ -10,7 +10,6 @@
 import java.io.Serializable;
 import java.rmi.Remote;
 import java.rmi.RemoteException;
-import net.sf.plantlore.client.dblayer.result.Result;
 import net.sf.plantlore.server.DBLayerException;
 
 /**
@@ -37,7 +36,7 @@
 
     public int getNumRows(int resultId) throws RemoteException;
         
-    public void close(Result QRes) throws DBLayerException, RemoteException;
+    public void close() throws DBLayerException, RemoteException;
     
     public SelectQuery createQuery(Class classname) throws RemoteException;
 

Modified: trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-03 22:56:21 UTC (rev 107)
+++ trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-04 01:01:24 UTC (rev 108)
@@ -19,7 +19,6 @@
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
 import org.hibernate.cfg.Configuration;
-import net.sf.plantlore.client.dblayer.result.Result;
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.middleware.SelectQuery;
 
@@ -90,7 +89,8 @@
 
         //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Temp/plantloreHIBdata.fdb");
         //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Kovo/DatabaseTest/database/plantlore.fdb");
-        cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:/mnt/data/temp/plantloreHIBdata.fdb");
+        cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:C:/Kovo/PlantloreDevel/plantloreHIBdata.fdb");
+        //cfg.setProperty("hibernate.connection.url", "jdbc:postgresql://localhost:5432/plantlore");
         cfg.setProperty("hibernate.connection.username", "sysdba");
         cfg.setProperty("hibernate.connection.password", "masterkey");        
         try {
@@ -274,7 +274,7 @@
      *
      *  @throws DBLayerException when closing session fails
      */
-    public void close(Result QRes) throws DBLayerException {    
+    public void close() throws DBLayerException {    
         try {
             session.close();
         } catch (HibernateException e) {



From kovo at berlios.de  Tue Apr  4 03:08:33 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Tue, 4 Apr 2006 03:08:33 +0200
Subject: [Plantlore-dev] r109 - in trunk: analysis/database lib src/net/sf/plantlore/config/hibernate
Message-ID: <200604040108.k3418XZg008202@sheep.berlios.de>

Author: kovo
Date: 2006-04-04 03:07:48 +0200 (Tue, 04 Apr 2006)
New Revision: 109

Added:
   trunk/analysis/database/DBModel_postgres.sql
   trunk/lib/postgresql-8.0-311.jdbc2.jar
   trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.postgresql.xml
Log:
Added data model, configuration and driver for PostgreSQL database

Added: trunk/analysis/database/DBModel_postgres.sql
===================================================================
--- trunk/analysis/database/DBModel_postgres.sql	2006-04-04 01:01:24 UTC (rev 108)
+++ trunk/analysis/database/DBModel_postgres.sql	2006-04-04 01:07:48 UTC (rev 109)
@@ -0,0 +1,304 @@
+/*************************************************************/
+/*							     */
+/* SQL script for creating Plantlore database for PostgreSQL */
+/* 		Version: 4.4. 2006			     */
+/*							     */
+/*************************************************************/
+
+SET client_encoding = 'UNICODE';
+
+SET search_path = public, pg_catalog;
+
+SET default_tablespace = '';
+
+SET default_with_oids = true;
+
+/* Table: TAUTHORS, Owner: SYSDBA */
+CREATE TABLE TAUTHORS (
+    CID               SERIAL NOT NULL,    
+    CWHOLENAME        VARCHAR(50),
+    CORGANIZATION     VARCHAR(50),
+    CTELEPHONENUMBER  VARCHAR(20),
+    CROLE             VARCHAR(30),
+    CADDRESS          VARCHAR(255),
+    CEMAIL            VARCHAR(100),
+    CURL              VARCHAR(255),
+    CNOTE             VARCHAR(4096),
+PRIMARY KEY (CID));
+
+/* Table: TAUTHORSOCCURRENCES, Owner: SYSDBA */
+CREATE TABLE TAUTHORSOCCURRENCES (
+    CAUTHORID          SERIAL NOT NULL,
+    COCCURRENCEID      INTEGER NOT NULL,
+    CID                INTEGER NOT NULL,
+    CROLE              VARCHAR(20),
+    CRESULTREVISION  VARCHAR(30),
+PRIMARY KEY (CID));
+
+/* Table: THABITATS, Owner: SYSDBA */
+CREATE TABLE THABITATS (
+    CID                SERIAL NOT NULL,
+    CTERRITORYID       INTEGER NOT NULL,
+    CPHYTOCHORIAID     INTEGER NOT NULL,
+    CQUADRANT          VARCHAR(10),
+    CDESCRIPTION       VARCHAR(255),
+    CNEARESTVILLAGEID  INTEGER NOT NULL,
+    CCOUNTRY           VARCHAR(30),
+    CALTITUDE          DECIMAL(6,2),
+    CLATITUDE          DOUBLE PRECISION,
+    CLONGITUDE         DOUBLE PRECISION,
+    CNOTE              VARCHAR(4096),
+    CDELETE            SMALLINT,
+PRIMARY KEY (CID));
+
+/* Table: THISTORY, Owner: SYSDBA */
+CREATE TABLE THISTORY (
+        CID       SERIAL NOT NULL,
+        CCOLUMNID INTEGER NOT NULL,
+        CCHANGEID INTEGER NOT NULL,
+        COLDVALUE VARCHAR(4096),
+        CNEWVALUE VARCHAR(4096),
+PRIMARY KEY (CID));
+
+/* Table: THISTORYCHANGE, Owner: SYSDBA */
+CREATE TABLE THISTORYCHANGE (
+    CID            SERIAL NOT NULL,
+    COCCURRENCEID  INTEGER  DEFAULT 0 NOT NULL,
+    CRECORDID      INTEGER  DEFAULT 0 NOT NULL,
+    COLDRECORDID   INTEGER,
+    COPERATION     SMALLINT  DEFAULT 0 NOT NULL,
+    CWHEN          TIMESTAMP NOT NULL,
+    CWHO           INTEGER NOT NULL,
+PRIMARY KEY (CID));
+
+/* Table: THISTORYCOLUMN, Owner: SYSDBA */
+CREATE TABLE THISTORYCOLUMN (
+    CID          SERIAL NOT NULL,
+    CTABLENAME   VARCHAR(20) NOT NULL,
+    CCOLUMNNAME  VARCHAR(20),
+PRIMARY KEY (CID));
+
+/* Table: TMETADATA, Owner: SYSDBA */
+CREATE TABLE TMETADATA (
+    CID                       SERIAL NOT NULL,
+    CTECHNICALCONTACTNAME     VARCHAR(50) NOT NULL,
+    CTECHNICALCONTACTEMAIL    VARCHAR(100),
+    CTECHNICALCONTACTADDRESS  VARCHAR(255),
+    CCONTENTCONTACTNAME       VARCHAR(50) NOT NULL,
+    CCONTENTCONTACTEMAIL      VARCHAR(100),
+    CCONTENTCONTACTADDRESS    VARCHAR(255),
+    CDATASETTITLE             VARCHAR(50) NOT NULL,
+    CDATASETDETAILS           VARCHAR(255),
+    CSOURCEINSTITUTIONID      VARCHAR(50) NOT NULL,
+    CSOURCEID                 VARCHAR(50) NOT NULL,
+    COWNERORGANIZATIONABBREV  VARCHAR(50),
+    CDATECREATE               TIMESTAMP NOT NULL,
+    CDATEMODIFIED             TIMESTAMP NOT NULL,
+    CRECORDBASIS              VARCHAR(15),
+    CBIOTOPETEXT              VARCHAR(50),
+    CVERSIONPLANTSFILE        SMALLINT DEFAULT 0,
+PRIMARY KEY (CID));
+
+/* Table: TOCCURRENCES, Owner: SYSDBA */
+CREATE TABLE TOCCURRENCES (
+    CID                SERIAL NOT NULL,
+    CUNITIDDB          VARCHAR(30) NOT NULL,
+    CUNITVALUE         VARCHAR(30) NOT NULL,
+    CHABITATID         INTEGER NOT NULL,
+    CPLANTID           INTEGER NOT NULL,
+    CYEARCOLLECTED     SMALLINT DEFAULT 0 NOT NULL,
+    CMONTHCOLLECTED    SMALLINT DEFAULT 0,
+    CDAYCOLLECTED      SMALLINT DEFAULT 0,
+    CTIMECOLLECTED     TIME,
+    CISODATETIMEBEGIN  TIMESTAMP,
+    CDATASOURCE        VARCHAR(50),
+    CPUBLICATIONSID    INTEGER,
+    CHERBARIUM         VARCHAR(20),
+    CCREATEWHEN        TIMESTAMP NOT NULL,
+    CCREATEWHO         INTEGER NOT NULL,
+    CUPDATEWHEN        TIMESTAMP NOT NULL,
+    CUPDATEWHO         INTEGER NOT NULL,
+    CNOTE              VARCHAR(4096),
+    CMETADATAID        INTEGER NOT NULL,
+    CDELETE            SMALLINT,
+PRIMARY KEY (CID));
+
+/* Table: TPHYTOCHORIA, Owner: SYSDBA */
+CREATE TABLE TPHYTOCHORIA (
+    CID    SERIAL NOT NULL,
+    CCODE  VARCHAR(5) NOT NULL,
+    CNAME  VARCHAR(50) NOT NULL,
+PRIMARY KEY (CID));
+
+/* Table: TPLANTS, Owner: SYSDBA */
+CREATE TABLE TPLANTS (
+    CID                    SERIAL NOT NULL,
+    CSURVEYTAXID           VARCHAR(20) NOT NULL,
+    CTAXON                 VARCHAR(255) NOT NULL,
+    CGENUS                 VARCHAR(30),
+    CSPECIES               VARCHAR(100),
+    CSCIENTIFICNAMEAUTHOR  VARCHAR(150) NOT NULL,
+    CCZECHNAME             VARCHAR(50),
+    CSYNONYMS              VARCHAR(255),
+    CNOTE                  VARCHAR(255),
+PRIMARY KEY (CID));
+
+
+/* Table: TPUBLICATIONS, Owner: SYSDBA */
+CREATE TABLE TPUBLICATIONS (
+    CID                         SERIAL NOT NULL,
+    CCOLLECTIONNAME             VARCHAR(30),
+    CCOLLECTIONYEARPUBLICATION  SMALLINT,
+    CJOURNALNAME                VARCHAR(60),
+    CJOURNALAUTHORNAME          VARCHAR(30),
+    CREFERENCECITATION          VARCHAR(255) NOT NULL,
+    CREFERENCEDETAIL            VARCHAR(20),
+    CURL                        VARCHAR(100),
+    CNOTE                       VARCHAR(4096),
+    CDELETE                     SMALLINT,
+PRIMARY KEY (CID));
+
+/* Table: TRIGHT, Owner: SYSDBA */
+CREATE TABLE TRIGHT (
+    CID             SERIAL NOT NULL,
+    CADMINISTRATOR  SMALLINT,
+    CEDITALL        SMALLINT,
+    CEDITOWN        SMALLINT,
+    CEDITGROUP      VARCHAR(4096),
+    CSEECOLUMNS     VARCHAR(4096),
+    CADD            SMALLINT,
+PRIMARY KEY (CID));
+
+/* Table: TTERRITORIES, Owner: SYSDBA */
+CREATE TABLE TTERRITORIES (
+    CID    SERIAL NOT NULL,
+    CNAME  VARCHAR(100) NOT NULL,
+PRIMARY KEY (CID));
+
+/* Table: TUSER, Owner: SYSDBA */
+CREATE TABLE TUSER (
+    CID          SERIAL NOT NULL,
+    CLOGIN       VARCHAR(20) NOT NULL,
+    CFIRSTNAME   VARCHAR(20),
+    CSURNAME     VARCHAR(30),
+    CWHOLENAME   VARCHAR(50),
+    CEMAIL       VARCHAR(50),
+    CADDRESS     VARCHAR(255),
+    CCREATEWHEN  TIMESTAMP NOT NULL,
+    CDROPWHEN    TIMESTAMP,
+    CRIGHTID     INTEGER NOT NULL,
+    CNOTE        VARCHAR(4096),
+PRIMARY KEY (CID));
+
+
+/* Table: TVILLAGES, Owner: SYSDBA */
+CREATE TABLE TVILLAGES (
+    CID    SERIAL NOT NULL,
+    CNAME  VARCHAR(50) NOT NULL,
+PRIMARY KEY (CID));
+
+ALTER TABLE TAUTHORSOCCURRENCES ADD FOREIGN KEY (CAUTHORID) REFERENCES TAUTHORS (CID);
+
+ALTER TABLE TAUTHORSOCCURRENCES ADD FOREIGN KEY (COCCURRENCEID) REFERENCES TOCCURRENCES (CID);
+
+ALTER TABLE THABITATS ADD FOREIGN KEY (CTERRITORYID) REFERENCES TTERRITORIES (CID);
+
+ALTER TABLE THABITATS ADD FOREIGN KEY (CPHYTOCHORIAID) REFERENCES TPHYTOCHORIA (CID);
+
+ALTER TABLE THABITATS ADD FOREIGN KEY (CNEARESTVILLAGEID) REFERENCES TVILLAGES (CID);
+
+ALTER TABLE THISTORY ADD FOREIGN KEY (CCOLUMNID) REFERENCES THISTORYCOLUMN (CID);
+
+ALTER TABLE THISTORY ADD FOREIGN KEY (CCHANGEID) REFERENCES THISTORYCHANGE (CID);
+
+ALTER TABLE THISTORYCHANGE ADD FOREIGN KEY (CWHO) REFERENCES TUSER (CID);
+
+ALTER TABLE THISTORYCHANGE ADD FOREIGN KEY (COCCURRENCEID) REFERENCES TOCCURRENCES (CID);
+
+ALTER TABLE TOCCURRENCES ADD FOREIGN KEY (CHABITATID) REFERENCES THABITATS (CID);
+
+ALTER TABLE TOCCURRENCES ADD FOREIGN KEY (CPLANTID) REFERENCES TPLANTS (CID);
+
+ALTER TABLE TOCCURRENCES ADD FOREIGN KEY (CCREATEWHO) REFERENCES TUSER (CID);
+
+ALTER TABLE TOCCURRENCES ADD FOREIGN KEY (CUPDATEWHO) REFERENCES TUSER (CID);
+
+ALTER TABLE TOCCURRENCES ADD FOREIGN KEY (CMETADATAID) REFERENCES TMETADATA (CID);
+
+ALTER TABLE TOCCURRENCES ADD FOREIGN KEY (CPUBLICATIONSID) REFERENCES TPUBLICATIONS (CID);
+
+ALTER TABLE TUSER ADD FOREIGN KEY (CRIGHTID) REFERENCES TRIGHT (CID);
+
+/* Grant role for this database */
+
+/* Role: BOTANIK, Owner: SYSDBA 
+CREATE ROLE defaultAdmin;
+CREATE ROLE defaultUser;
+CREATE ROLE WWW;
+
+Grant permissions for this database 
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TAUTHORS TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TAUTHORSOCCURRENCES TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON THABITATS TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON THISTORY TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON THISTORYCHANGE TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON THISTORYCOLUMN TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TMETADATA TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TOCCURRENCES TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TPHYTOCHORIA TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TPLANTS TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TTERRITORIES TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TUSER TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TRIGHT TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TVILLAGES TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TPUBLICATIONS TO ROLE defaultAdmin;
+GRANT defaultAdmin TO LADA;
+GRANT defaultAdmin TO SYSDBA;
+*/
+/* View: TAUTHORREVISION */
+/*
+CREATE VIEW TAUTHORREVISION(
+    CID,
+    COCCURRENCEID,
+    CWHOLENAME,
+    CEMAIL,
+    CADDRESS,
+    CRESULTREVISION,
+    CDAY,
+    CMONTH,
+    CYEAR)
+AS
+select AO.CID, AO.coccurrenceid, A.cwholename, A.CEMAIL, A.CADDRESS, AO.cresultrevisition, O.cdaycollected, O.cmonthcollected, O.cyearcollected
+from TAUTHORS A JOIN TAUTHORSOCCURRENCES AO JOIN toccurrences O  ON (A.CID = AO.cauthorid) ON (AO.coccurrenceid = O.cid)
+WHERE AO.crole = 'revision'
+;
+*/
+/* View: TAUTHORCOLLECT */
+/*
+CREATE VIEW TAUTHORCOLLECT(
+    CID,    
+    COCCURRENCEID,
+    CWHOLENAME,
+    CORGANIZATION,
+    CEMAIL,
+    CADDRESS)
+AS
+select AO.CID, AO.coccurrenceid, A.CWHOLENAME, A.CORGANIZATION, A.CEMAIL, A.CADDRESS
+from TAUTHORS A JOIN TAUTHORSOCCURRENCES AO ON (A.CID = AO.cauthorid)
+WHERE AO.crole = 'collect'
+;
+*/
+/* View: TAUTHORIDENTIFY */
+/*
+CREATE VIEW TAUTHORIDENTIFY(
+    CID,
+    COCCURRENCEID,
+    CWHOLENAME,
+    CEMAIL,
+    CADDRESS)
+AS
+select AO.CID, AO.coccurrenceid, A.CWHOLENAME, A.CEMAIL, A.CADDRESS
+from TAUTHORS A JOIN TAUTHORSOCCURRENCES AO ON (A.CID = AO.cauthorid)
+WHERE AO.crole = 'identify'
+;
+*/
\ No newline at end of file

Added: trunk/lib/postgresql-8.0-311.jdbc2.jar
===================================================================
(Binary files differ)


Property changes on: trunk/lib/postgresql-8.0-311.jdbc2.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.postgresql.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.postgresql.xml	2006-04-04 01:01:24 UTC (rev 108)
+++ trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.postgresql.xml	2006-04-04 01:07:48 UTC (rev 109)
@@ -0,0 +1,34 @@
+<?xml version='1.0' encoding='utf-8'?>
+<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD//EN" 
+                                         "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
+
+<hibernate-configuration>
+   <session-factory>
+
+      <!-- Database connection settings -->
+      <property name="show_sql">true</property>
+      <property name="hibernate.dialect">
+         org.hibernate.dialect.PostgreSQLDialect
+      </property>
+      <property name="hibernate.connection.driver_class">
+         org.postgresql.Driver
+      </property>
+      <!-- Mapping files -->
+      <mapping file="Authors.hbm.xml"/>
+      <mapping file="AuthorsOccurrences.hbm.xml"/>
+      <mapping file="Habitats.hbm.xml"/>
+      <mapping file="History.hbm.xml"/>
+      <mapping file="HistoryChange.hbm.xml"/>
+      <mapping file="HistoryColumn.hbm.xml"/>
+      <mapping file="Metadata.hbm.xml"/>
+      <mapping file="Occurrences.hbm.xml"/>
+      <mapping file="Phytochoria.hbm.xml"/>
+      <mapping file="Plants.hbm.xml"/>      
+      <mapping file="Publications.hbm.xml"/>
+      <mapping file="Right.hbm.xml"/>
+      <mapping file="Territories.hbm.xml"/>
+      <mapping file="User.hbm.xml"/>
+      <mapping file="Villages.hbm.xml"/>  
+      <mapping file="AuthorsOccurrences.hbm.xml"/>        
+   </session-factory>
+</hibernate-configuration>
\ No newline at end of file



From kovo at berlios.de  Tue Apr  4 03:10:25 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Tue, 4 Apr 2006 03:10:25 +0200
Subject: [Plantlore-dev] r110 - trunk/src/net/sf/plantlore/config/hibernate
Message-ID: <200604040110.k341APfK008341@sheep.berlios.de>

Author: kovo
Date: 2006-04-04 03:10:01 +0200 (Tue, 04 Apr 2006)
New Revision: 110

Modified:
   trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml
Log:
Add missing link to mapping of AuthorsOccurrences

Modified: trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml	2006-04-04 01:07:48 UTC (rev 109)
+++ trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml	2006-04-04 01:10:01 UTC (rev 110)
@@ -29,5 +29,6 @@
       <mapping file="Territories.hbm.xml"/>
       <mapping file="User.hbm.xml"/>
       <mapping file="Villages.hbm.xml"/>  
+      <mapping file="AuthorsOccurrences.hbm.xml"/>        
    </session-factory>
 </hibernate-configuration>
\ No newline at end of file



From Lada at berlios.de  Tue Apr  4 08:48:50 2006
From: Lada at berlios.de (Lada at berlios.de)
Date: Tue, 4 Apr 2006 08:48:50 +0200
Subject: [Plantlore-dev] r111 - in trunk/src/net/sf/plantlore: client/authors config/hibernate
Message-ID: <200604040648.k346modg004274@sheep.berlios.de>

Author: Lada
Date: 2006-04-04 08:48:44 +0200 (Tue, 04 Apr 2006)
New Revision: 111

Modified:
   trunk/src/net/sf/plantlore/client/authors/AuthorManager.java
   trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml
Log:
Delete old import. Delete duplicate mapping of AuthorsOccurrences.

Modified: trunk/src/net/sf/plantlore/client/authors/AuthorManager.java
===================================================================
--- trunk/src/net/sf/plantlore/client/authors/AuthorManager.java	2006-04-04 01:10:01 UTC (rev 110)
+++ trunk/src/net/sf/plantlore/client/authors/AuthorManager.java	2006-04-04 06:48:44 UTC (rev 111)
@@ -15,10 +15,10 @@
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.middleware.SelectQuery;
 import net.sf.plantlore.server.DBLayerException;
-import net.sf.plantlore.client.dblayer.query.DeleteQuery;
-import net.sf.plantlore.client.dblayer.query.InsertQuery;
-import net.sf.plantlore.client.dblayer.query.Query;
-import net.sf.plantlore.client.dblayer.result.Result;
+//import net.sf.plantlore.client.dblayer.query.DeleteQuery;
+//import net.sf.plantlore.client.dblayer.query.InsertQuery;
+//import net.sf.plantlore.client.dblayer.query.Query;
+//import net.sf.plantlore.client.dblayer.result.Result;
 import net.sf.plantlore.common.SwingWorker;
 import net.sf.plantlore.common.record.Author;
 import org.apache.log4j.Logger;

Modified: trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml	2006-04-04 01:10:01 UTC (rev 110)
+++ trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml	2006-04-04 06:48:44 UTC (rev 111)
@@ -28,7 +28,6 @@
       <mapping file="Right.hbm.xml"/>
       <mapping file="Territories.hbm.xml"/>
       <mapping file="User.hbm.xml"/>
-      <mapping file="Villages.hbm.xml"/>  
-      <mapping file="AuthorsOccurrences.hbm.xml"/>        
+      <mapping file="Villages.hbm.xml"/>   
    </session-factory>
-</hibernate-configuration>
\ No newline at end of file
+</hibernate-configuration>



From fraktalek at berlios.de  Tue Apr  4 12:02:17 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Tue, 4 Apr 2006 12:02:17 +0200
Subject: [Plantlore-dev] r112 - trunk/src/net/sf/plantlore/l10n
Message-ID: <200604041002.k34A2Hte018432@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-04 12:02:16 +0200 (Tue, 04 Apr 2006)
New Revision: 112

Modified:
   trunk/src/net/sf/plantlore/l10n/Plantlore.properties
Log:
Added missing properties for History manager.



Modified: trunk/src/net/sf/plantlore/l10n/Plantlore.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-04 06:48:44 UTC (rev 111)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-04 10:02:16 UTC (rev 112)
@@ -89,6 +89,9 @@
 historyColItem = Item
 historyColOldValue = Old value
 historyColNewValue = New value
+updatedWho = updatedWho
+metadata = metadata
+note = note
 
 plantId = Taxon
 yearCollected = Year



From fraktalek at berlios.de  Tue Apr  4 13:01:03 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Tue, 4 Apr 2006 13:01:03 +0200
Subject: [Plantlore-dev] r113 - in trunk/src/net/sf/plantlore: client server
Message-ID: <200604041101.k34B132u009021@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-04 13:00:55 +0200 (Tue, 04 Apr 2006)
New Revision: 113

Added:
   trunk/src/net/sf/plantlore/client/AddEditCtrl.java
   trunk/src/net/sf/plantlore/client/AddEditView.form
   trunk/src/net/sf/plantlore/client/AddEditView.java
Modified:
   trunk/src/net/sf/plantlore/client/AppCore.java
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/OverviewTableModel.java
   trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
Log:
Added AddEdit dialog and some basic functionality.



Added: trunk/src/net/sf/plantlore/client/AddEditCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditCtrl.java	2006-04-04 10:02:16 UTC (rev 112)
+++ trunk/src/net/sf/plantlore/client/AddEditCtrl.java	2006-04-04 11:00:55 UTC (rev 113)
@@ -0,0 +1,22 @@
+/*
+ * AddEditCtrl.java
+ *
+ * Created on 4. duben 2006, 10:34
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client;
+
+/**
+ *
+ * @author reimei
+ */
+public class AddEditCtrl {
+    
+    /** Creates a new instance of AddEditCtrl */
+    public AddEditCtrl() {
+    }
+    
+}

Added: trunk/src/net/sf/plantlore/client/AddEditView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditView.form	2006-04-04 10:02:16 UTC (rev 112)
+++ trunk/src/net/sf/plantlore/client/AddEditView.form	2006-04-04 11:00:55 UTC (rev 113)
@@ -0,0 +1,1000 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JDialogFormInfo">
+  <NonVisualComponents>
+    <Component class="javax.swing.ButtonGroup" name="convertCoordinatesGroup">
+    </Component>
+  </NonVisualComponents>
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="2"/>
+    <Property name="resizable" type="boolean" value="false"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,2,-19,0,0,3,75"/>
+  </AuxValues>
+
+  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout"/>
+  <SubComponents>
+    <Container class="javax.swing.JPanel" name="jPanel2">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Basic data">
+              <Font PropertyName="font" name="Dialog" size="12" style="0"/>
+            </TitledBorder>
+          </Border>
+        </Property>
+        <Property name="preferredSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
+          <Dimension value="[700, 200]"/>
+        </Property>
+      </Properties>
+      <Constraints>
+        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
+          <BorderConstraints direction="North"/>
+        </Constraint>
+      </Constraints>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="1" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="1" attributes="0">
+                      <Component id="YearLabel" alignment="1" min="-2" max="-2" attributes="0"/>
+                      <Component id="AuthorLabel" alignment="1" min="-2" max="-2" attributes="0"/>
+                      <Component id="TaxonLabel" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" alignment="1" attributes="0">
+                          <Component id="yearSpinner" min="-2" pref="73" max="-2" attributes="0"/>
+                          <EmptySpace pref="80" max="32767" attributes="0"/>
+                          <Component id="checklistButton" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <Component id="AuthorComboBox" alignment="0" pref="245" max="32767" attributes="1"/>
+                      <Component id="jScrollPane3" alignment="0" pref="245" max="32767" attributes="1"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="1" attributes="0">
+                      <Component id="TownLabel" min="-2" max="-2" attributes="0"/>
+                      <Component id="jLabel2" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Component id="jScrollPane2" alignment="0" pref="358" max="32767" attributes="1"/>
+                      <Component id="TownComboBox" alignment="0" pref="358" max="32767" attributes="1"/>
+                      <Component id="jToggleButton1" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="1" attributes="0">
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="AuthorLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="AuthorComboBox" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="TownLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="TownComboBox" alignment="3" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" attributes="0">
+                          <Group type="103" groupAlignment="0" max="-2" attributes="0">
+                              <Component id="jScrollPane2" max="32767" attributes="1"/>
+                              <Component id="TaxonLabel" min="-2" max="-2" attributes="0"/>
+                              <Component id="jScrollPane3" alignment="0" max="32767" attributes="1"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="jToggleButton1" alignment="3" min="-2" max="-2" attributes="1"/>
+                              <Component id="checklistButton" alignment="3" max="32767" attributes="1"/>
+                              <Component id="YearLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="yearSpinner" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                      </Group>
+                      <Component id="jLabel2" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Component class="javax.swing.JLabel" name="AuthorLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Author:"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JComboBox" name="AuthorComboBox">
+          <Properties>
+            <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+              <StringArray count="0"/>
+            </Property>
+          </Properties>
+          <Events>
+            <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="AuthorComboBoxActionPerformed"/>
+          </Events>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getAuthors());&#xa;"/>
+            <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="Object[] items = {&quot;Ahoj&quot;, &quot;Nazdar&quot;, &quot;Jak se mas&quot;};"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JLabel" name="TownLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Nearest bigger seat:"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JComboBox" name="TownComboBox">
+          <Properties>
+            <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+              <StringArray count="0"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getVillages());"/>
+            <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="items = new Object[] {&quot;Praha&quot;, &quot;Brno&quot;, &quot;Turnov&quot;, &quot;Trebic&quot;};"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JLabel" name="TaxonLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Taxon:"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="YearLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Year:"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="jLabel2">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Place description:"/>
+          </Properties>
+        </Component>
+        <Container class="javax.swing.JScrollPane" name="jScrollPane2">
+          <AuxValues>
+            <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
+          </AuxValues>
+
+          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+          <SubComponents>
+            <Component class="javax.swing.JTextArea" name="descriptionArea">
+              <Properties>
+                <Property name="columns" type="int" value="20"/>
+                <Property name="rows" type="int" value="5"/>
+              </Properties>
+            </Component>
+          </SubComponents>
+        </Container>
+        <Container class="javax.swing.JScrollPane" name="jScrollPane3">
+          <AuxValues>
+            <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
+          </AuxValues>
+
+          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+          <SubComponents>
+            <Component class="javax.swing.JTextArea" name="taxonTextArea">
+              <Properties>
+                <Property name="columns" type="int" value="20"/>
+                <Property name="rows" type="int" value="5"/>
+                <Property name="autoscrolls" type="boolean" value="false"/>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoTextArea(choices, this);"/>
+                <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="Hashtable&lt;String, Integer&gt; plants = model.getPlants();&#xa;String[] choices = new String[plants.size()];&#xa;plants.keySet().toArray(choices);"/>
+              </AuxValues>
+            </Component>
+          </SubComponents>
+        </Container>
+        <Component class="javax.swing.JToggleButton" name="jToggleButton1">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Extended"/>
+          </Properties>
+          <Events>
+            <EventHandler event="mouseClicked" listener="java.awt.event.MouseListener" parameters="java.awt.event.MouseEvent" handler="jToggleButton1MouseClicked"/>
+          </Events>
+        </Component>
+        <Component class="javax.swing.JButton" name="checklistButton">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Checklist"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JSpinner" name="yearSpinner">
+          <Properties>
+            <Property name="value" type="java.lang.Object" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="2006" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+      </SubComponents>
+    </Container>
+    <Container class="javax.swing.JPanel" name="jPanel3">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Extended data">
+              <Font PropertyName="font" name="Dialog" size="12" style="0"/>
+            </TitledBorder>
+          </Border>
+        </Property>
+        <Property name="minimumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
+          <Dimension value="[800, 395]"/>
+        </Property>
+        <Property name="preferredSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
+          <Dimension value="[800, 395]"/>
+        </Property>
+      </Properties>
+      <Constraints>
+        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
+          <BorderConstraints direction="Center"/>
+        </Constraint>
+      </Constraints>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" alignment="1" attributes="0">
+                          <Component id="jPanel4" max="32767" attributes="1"/>
+                          <EmptySpace min="-2" pref="442" max="-2" attributes="0"/>
+                      </Group>
+                      <Group type="102" alignment="0" attributes="0">
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Group type="102" attributes="0">
+                                  <Component id="jPanel1" min="-2" max="-2" attributes="1"/>
+                                  <EmptySpace pref="27" max="32767" attributes="0"/>
+                                  <Component id="jPanel6" min="-2" max="-2" attributes="1"/>
+                              </Group>
+                              <Component id="jPanel5" max="32767" attributes="1"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="1" attributes="0">
+                              <Component id="jPanel7" max="32767" attributes="1"/>
+                              <Component id="jPanel9" alignment="0" max="32767" attributes="1"/>
+                          </Group>
+                      </Group>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="0" attributes="0">
+                  <Group type="103" groupAlignment="1" attributes="0">
+                      <Component id="jPanel7" max="32767" attributes="1"/>
+                      <Component id="jPanel5" alignment="1" max="32767" attributes="1"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" attributes="0">
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="jPanel6" alignment="0" max="32767" attributes="1"/>
+                              <Component id="jPanel1" alignment="0" max="32767" attributes="1"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Component id="jPanel4" min="-2" max="-2" attributes="1"/>
+                          <EmptySpace min="-2" pref="109" max="-2" attributes="0"/>
+                      </Group>
+                      <Group type="102" attributes="0">
+                          <Component id="jPanel9" min="-2" max="-2" attributes="1"/>
+                          <EmptySpace max="-2" attributes="0"/>
+                      </Group>
+                  </Group>
+              </Group>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Container class="javax.swing.JPanel" name="jPanel4">
+          <Properties>
+            <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+              <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+                <TitledBorder title="Time">
+                  <Font PropertyName="font" name="Dialog" size="12" style="0"/>
+                </TitledBorder>
+              </Border>
+            </Property>
+          </Properties>
+
+          <Layout>
+            <DimensionLayout dim="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="jLabel3" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="MonthSpinner" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="jLabel4" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="DaySpinner" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="jLabel5" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="TimeFormattedTextField" min="-2" pref="60" max="-2" attributes="0"/>
+                      <EmptySpace pref="65" max="32767" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+            <DimensionLayout dim="1">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="jLabel3" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="MonthSpinner" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel4" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="DaySpinner" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel5" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="TimeFormattedTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="32767" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+          </Layout>
+          <SubComponents>
+            <Component class="javax.swing.JSpinner" name="MonthSpinner">
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel3">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Month:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel4">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Day:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JSpinner" name="DaySpinner">
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel5">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Time:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JFormattedTextField" name="TimeFormattedTextField">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="jFormattedTextField1"/>
+              </Properties>
+            </Component>
+          </SubComponents>
+        </Container>
+        <Container class="javax.swing.JPanel" name="jPanel5">
+          <Properties>
+            <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+              <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+                <TitledBorder title="Location">
+                  <Font PropertyName="font" name="Dialog" size="12" style="0"/>
+                </TitledBorder>
+              </Border>
+            </Property>
+          </Properties>
+
+          <Layout>
+            <DimensionLayout dim="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="1" max="-2" attributes="0">
+                          <Group type="102" alignment="0" attributes="0">
+                              <EmptySpace min="-2" pref="19" max="-2" attributes="0"/>
+                              <Component id="jLabel11" min="-2" max="-2" attributes="0"/>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Component id="territoryNameCombo" linkSize="7" min="-2" pref="99" max="-2" attributes="0"/>
+                          </Group>
+                          <Group type="102" alignment="0" attributes="0">
+                              <Group type="103" groupAlignment="1" attributes="0">
+                                  <Component id="jLabel10" alignment="1" min="-2" max="-2" attributes="0"/>
+                                  <Component id="jLabel13" alignment="1" min="-2" max="-2" attributes="0"/>
+                              </Group>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Group type="103" groupAlignment="0" attributes="0">
+                                  <Component id="phytCountryCombo" linkSize="7" pref="99" max="32767" attributes="0"/>
+                                  <Component id="phytNameCombo" linkSize="7" alignment="0" pref="99" max="32767" attributes="0"/>
+                              </Group>
+                          </Group>
+                      </Group>
+                      <EmptySpace pref="45" max="32767" attributes="0"/>
+                      <Group type="103" groupAlignment="1" attributes="0">
+                          <Component id="jLabel12" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel14" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel9" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" max="-2" attributes="0">
+                          <Component id="phytCodeCombo" linkSize="8" alignment="0" max="32767" attributes="1"/>
+                          <Component id="quadrantCombo" linkSize="8" alignment="0" max="32767" attributes="1"/>
+                          <Component id="territoryCodeCombo" linkSize="8" alignment="0" min="-2" pref="94" max="-2" attributes="1"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+            <DimensionLayout dim="1">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="jLabel11" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel12" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="territoryNameCombo" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="territoryCodeCombo" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Group type="102" attributes="0">
+                              <Group type="103" groupAlignment="0" attributes="0">
+                                  <Group type="103" groupAlignment="3" attributes="0">
+                                      <Component id="jLabel13" alignment="3" min="-2" max="-2" attributes="0"/>
+                                      <Component id="phytNameCombo" alignment="3" min="-2" max="-2" attributes="0"/>
+                                  </Group>
+                                  <Component id="phytCodeCombo" min="-2" max="-2" attributes="0"/>
+                              </Group>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Group type="103" groupAlignment="3" attributes="0">
+                                  <Component id="jLabel10" alignment="3" min="-2" max="-2" attributes="0"/>
+                                  <Component id="jLabel9" alignment="3" min="-2" max="-2" attributes="0"/>
+                                  <Component id="phytCountryCombo" alignment="3" min="-2" max="-2" attributes="0"/>
+                                  <Component id="quadrantCombo" alignment="3" min="-2" max="-2" attributes="0"/>
+                              </Group>
+                          </Group>
+                          <Component id="jLabel14" alignment="0" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace pref="27" max="32767" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+          </Layout>
+          <SubComponents>
+            <Component class="javax.swing.JLabel" name="jLabel9">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Quadrant:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel10">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Country:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel11">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Territory name:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel12">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Territory code:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel13">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Phytochoria name:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel14">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Phytochoria code:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JComboBox" name="territoryNameCombo">
+              <Properties>
+                <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+                  <StringArray count="0"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getTerritories()); "/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JComboBox" name="territoryCodeCombo">
+              <Properties>
+                <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+                  <StringArray count="0"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(items); "/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JComboBox" name="phytNameCombo">
+              <Properties>
+                <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+                  <StringArray count="0"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(items); "/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JComboBox" name="phytCodeCombo">
+              <Properties>
+                <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+                  <StringArray count="0"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(items); "/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JComboBox" name="quadrantCombo">
+              <Properties>
+                <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+                  <StringArray count="0"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(items); "/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JComboBox" name="phytCountryCombo">
+              <Properties>
+                <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+                  <StringArray count="0"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(items); "/>
+              </AuxValues>
+            </Component>
+          </SubComponents>
+        </Container>
+        <Container class="javax.swing.JPanel" name="jPanel6">
+          <Properties>
+            <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+              <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+                <TitledBorder title="Other">
+                  <Font PropertyName="font" name="Dialog" size="12" style="0"/>
+                </TitledBorder>
+              </Border>
+            </Property>
+          </Properties>
+
+          <Layout>
+            <DimensionLayout dim="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="1" attributes="0">
+                          <Component id="jLabel17" alignment="1" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel16" alignment="1" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel15" alignment="1" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel1" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" max="-2" attributes="0">
+                          <Component id="sourceCombo" max="32767" attributes="1"/>
+                          <Component id="HerbariumTextField" alignment="0" pref="113" max="32767" attributes="1"/>
+                          <Component id="MetadataTextField" alignment="0" pref="113" max="32767" attributes="1"/>
+                          <Component id="PublicationTextField" alignment="0" max="32767" attributes="1"/>
+                      </Group>
+                      <EmptySpace max="32767" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+            <DimensionLayout dim="1">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="1" attributes="0">
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="jLabel1" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="sourceCombo" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="32767" attributes="0"/>
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="jLabel15" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="PublicationTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="jLabel16" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="HerbariumTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="jLabel17" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="MetadataTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+          </Layout>
+          <SubComponents>
+            <Component class="javax.swing.JLabel" name="jLabel15">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Publication:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel16">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Herbarium:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel17">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Metadata:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JTextField" name="PublicationTextField">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="jTextField1"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JTextField" name="HerbariumTextField">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="jTextField2"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JTextField" name="MetadataTextField">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="jTextField3"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel1">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Source:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JComboBox" name="sourceCombo">
+              <Properties>
+                <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+                  <StringArray count="0"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(items); "/>
+              </AuxValues>
+            </Component>
+          </SubComponents>
+        </Container>
+        <Container class="javax.swing.JPanel" name="jPanel7">
+          <Properties>
+            <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+              <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+                <TitledBorder title="Location note">
+                  <Font PropertyName="font" name="Dialog" size="12" style="0"/>
+                </TitledBorder>
+              </Border>
+            </Property>
+          </Properties>
+
+          <Layout>
+            <DimensionLayout dim="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="jScrollPane4" pref="250" max="32767" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+            <DimensionLayout dim="1">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <Component id="jScrollPane4" pref="111" max="32767" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+          </Layout>
+          <SubComponents>
+            <Container class="javax.swing.JScrollPane" name="jScrollPane4">
+              <AuxValues>
+                <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
+              </AuxValues>
+
+              <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+              <SubComponents>
+                <Component class="javax.swing.JTextArea" name="jTextArea2">
+                  <Properties>
+                    <Property name="columns" type="int" value="20"/>
+                    <Property name="rows" type="int" value="5"/>
+                  </Properties>
+                </Component>
+              </SubComponents>
+            </Container>
+          </SubComponents>
+        </Container>
+        <Container class="javax.swing.JPanel" name="jPanel1">
+          <Properties>
+            <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+              <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+                <TitledBorder title="GPS">
+                  <Font PropertyName="font" name="Dialog" size="10" style="0"/>
+                </TitledBorder>
+              </Border>
+            </Property>
+          </Properties>
+
+          <Layout>
+            <DimensionLayout dim="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="1" attributes="0">
+                          <Group type="103" alignment="1" groupAlignment="0" attributes="0">
+                              <Component id="jLabel6" alignment="0" min="-2" max="-2" attributes="0"/>
+                              <Component id="jLabel7" alignment="0" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <Component id="jLabel8" alignment="1" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="1" max="-2" attributes="0">
+                          <Component id="LongitudeFormattedTextField" alignment="1" max="32767" attributes="1"/>
+                          <Component id="LatitudeFormattedTextField" alignment="1" min="0" pref="0" max="32767" attributes="1"/>
+                          <Component id="AltitudeFormattedTextField" alignment="1" min="-2" pref="63" max="-2" attributes="1"/>
+                      </Group>
+                      <EmptySpace min="-2" pref="25" max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Component id="S42Button" alignment="0" min="-2" max="-2" attributes="0"/>
+                          <Component id="WGS84Button" alignment="0" min="-2" max="-2" attributes="0"/>
+                          <Component id="SJTSKButton" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace min="-2" max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+            <DimensionLayout dim="1">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Group type="102" alignment="0" attributes="0">
+                              <Group type="103" groupAlignment="3" attributes="0">
+                                  <Component id="AltitudeFormattedTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                                  <Component id="jLabel6" alignment="3" min="-2" max="-2" attributes="0"/>
+                              </Group>
+                              <EmptySpace min="6" pref="6" max="-2" attributes="0"/>
+                              <Group type="103" groupAlignment="3" attributes="0">
+                                  <Component id="LatitudeFormattedTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                                  <Component id="jLabel7" alignment="3" min="-2" max="-2" attributes="0"/>
+                              </Group>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Group type="103" groupAlignment="3" attributes="0">
+                                  <Component id="LongitudeFormattedTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                                  <Component id="jLabel8" alignment="3" min="-2" max="-2" attributes="0"/>
+                              </Group>
+                          </Group>
+                          <Group type="102" alignment="0" attributes="0">
+                              <Component id="WGS84Button" min="-2" max="-2" attributes="0"/>
+                              <EmptySpace min="6" pref="6" max="-2" attributes="0"/>
+                              <Component id="S42Button" min="-2" max="-2" attributes="0"/>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Component id="SJTSKButton" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                      </Group>
+                      <EmptySpace pref="32" max="32767" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+          </Layout>
+          <SubComponents>
+            <Component class="javax.swing.JLabel" name="jLabel6">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Altitude:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JFormattedTextField" name="AltitudeFormattedTextField">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="jFormattedTextField1"/>
+                <Property name="nextFocusableComponent" type="java.awt.Component" editor="org.netbeans.modules.form.ComponentChooserEditor">
+                  <ComponentRef name="LatitudeFormattedTextField"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JFormattedTextField" name="LatitudeFormattedTextField">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="jFormattedTextField2"/>
+                <Property name="nextFocusableComponent" type="java.awt.Component" editor="org.netbeans.modules.form.ComponentChooserEditor">
+                  <ComponentRef name="LongitudeFormattedTextField"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel7">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Latitude:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel8">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="Longitude:"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JFormattedTextField" name="LongitudeFormattedTextField">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="nem"/>
+                <Property name="nextFocusableComponent" type="java.awt.Component" editor="org.netbeans.modules.form.ComponentChooserEditor">
+                  <ComponentRef name="WGS84Button"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JRadioButton" name="WGS84Button">
+              <Properties>
+                <Property name="buttonGroup" type="javax.swing.ButtonGroup" editor="org.netbeans.modules.form.RADComponent$ButtonGroupPropertyEditor">
+                  <ComponentRef name="convertCoordinatesGroup"/>
+                </Property>
+                <Property name="text" type="java.lang.String" value="WGS84"/>
+                <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+                  <Border info="org.netbeans.modules.form.compat2.border.EmptyBorderInfo">
+                    <EmptyBorder bottom="0" left="0" right="0" top="0"/>
+                  </Border>
+                </Property>
+                <Property name="margin" type="java.awt.Insets" editor="org.netbeans.beaninfo.editors.InsetsEditor">
+                  <Insets value="[0, 0, 0, 0]"/>
+                </Property>
+                <Property name="nextFocusableComponent" type="java.awt.Component" editor="org.netbeans.modules.form.ComponentChooserEditor">
+                  <ComponentRef name="S42Button"/>
+                </Property>
+              </Properties>
+              <Events>
+                <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="WGS84ButtonActionPerformed"/>
+              </Events>
+            </Component>
+            <Component class="javax.swing.JRadioButton" name="S42Button">
+              <Properties>
+                <Property name="buttonGroup" type="javax.swing.ButtonGroup" editor="org.netbeans.modules.form.RADComponent$ButtonGroupPropertyEditor">
+                  <ComponentRef name="convertCoordinatesGroup"/>
+                </Property>
+                <Property name="text" type="java.lang.String" value="S-42"/>
+                <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+                  <Border info="org.netbeans.modules.form.compat2.border.EmptyBorderInfo">
+                    <EmptyBorder bottom="0" left="0" right="0" top="0"/>
+                  </Border>
+                </Property>
+                <Property name="margin" type="java.awt.Insets" editor="org.netbeans.beaninfo.editors.InsetsEditor">
+                  <Insets value="[0, 0, 0, 0]"/>
+                </Property>
+                <Property name="nextFocusableComponent" type="java.awt.Component" editor="org.netbeans.modules.form.ComponentChooserEditor">
+                  <ComponentRef name="SJTSKButton"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JRadioButton" name="SJTSKButton">
+              <Properties>
+                <Property name="buttonGroup" type="javax.swing.ButtonGroup" editor="org.netbeans.modules.form.RADComponent$ButtonGroupPropertyEditor">
+                  <ComponentRef name="convertCoordinatesGroup"/>
+                </Property>
+                <Property name="text" type="java.lang.String" value="S-JTSK"/>
+                <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+                  <Border info="org.netbeans.modules.form.compat2.border.EmptyBorderInfo">
+                    <EmptyBorder bottom="0" left="0" right="0" top="0"/>
+                  </Border>
+                </Property>
+                <Property name="margin" type="java.awt.Insets" editor="org.netbeans.beaninfo.editors.InsetsEditor">
+                  <Insets value="[0, 0, 0, 0]"/>
+                </Property>
+                <Property name="nextFocusableComponent" type="java.awt.Component" editor="org.netbeans.modules.form.ComponentChooserEditor">
+                  <ComponentRef name="sourceCombo"/>
+                </Property>
+              </Properties>
+            </Component>
+          </SubComponents>
+        </Container>
+        <Container class="javax.swing.JPanel" name="jPanel9">
+          <Properties>
+            <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+              <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+                <TitledBorder title="Ocurrence note">
+                  <Font PropertyName="font" name="Dialog" size="12" style="0"/>
+                </TitledBorder>
+              </Border>
+            </Property>
+          </Properties>
+
+          <Layout>
+            <DimensionLayout dim="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="jScrollPane5" pref="250" max="32767" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+            <DimensionLayout dim="1">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <Component id="jScrollPane5" pref="105" max="32767" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+          </Layout>
+          <SubComponents>
+            <Container class="javax.swing.JScrollPane" name="jScrollPane5">
+              <AuxValues>
+                <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
+              </AuxValues>
+
+              <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+              <SubComponents>
+                <Component class="javax.swing.JTextArea" name="jTextArea3">
+                  <Properties>
+                    <Property name="columns" type="int" value="20"/>
+                    <Property name="rows" type="int" value="5"/>
+                  </Properties>
+                </Component>
+              </SubComponents>
+            </Container>
+          </SubComponents>
+        </Container>
+      </SubComponents>
+    </Container>
+    <Container class="javax.swing.JPanel" name="jPanel8">
+      <Properties>
+        <Property name="minimumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
+          <Dimension value="[780, 90]"/>
+        </Property>
+        <Property name="preferredSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
+          <Dimension value="[780, 50]"/>
+        </Property>
+      </Properties>
+      <Constraints>
+        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
+          <BorderConstraints direction="South"/>
+        </Constraint>
+      </Constraints>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="1" attributes="0">
+                  <EmptySpace min="-2" pref="163" max="-2" attributes="0"/>
+                  <Component id="jButton4" linkSize="4" min="-2" max="-2" attributes="0"/>
+                  <EmptySpace pref="308" max="32767" attributes="0"/>
+                  <Component id="jButton2" linkSize="4" min="-2" pref="87" max="-2" attributes="0"/>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Component id="jButton3" linkSize="4" min="-2" max="-2" attributes="0"/>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Component id="jButton3" linkSize="4" min="-2" max="-2" attributes="0"/>
+                  <EmptySpace max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="1" attributes="0">
+                  <EmptySpace pref="13" max="32767" attributes="0"/>
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="jButton3" linkSize="2" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="jButton3" linkSize="2" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="jButton4" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="jButton2" linkSize="2" alignment="3" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Component class="javax.swing.JButton" name="jButton2">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Ok"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JButton" name="jButton3">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Cancel"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JButton" name="jButton4">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Help"/>
+          </Properties>
+        </Component>
+      </SubComponents>
+    </Container>
+  </SubComponents>
+</Form>

Added: trunk/src/net/sf/plantlore/client/AddEditView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditView.java	2006-04-04 10:02:16 UTC (rev 112)
+++ trunk/src/net/sf/plantlore/client/AddEditView.java	2006-04-04 11:00:55 UTC (rev 113)
@@ -0,0 +1,704 @@
+/*
+ * AddEdit2.java
+ *
+ * Created on 23. b?ezen 2006, 23:16
+ */
+
+package net.sf.plantlore.client;
+
+import java.awt.Dimension;
+import java.util.Hashtable;
+import javax.swing.JPanel;
+import net.sf.plantlore.common.AutoComboBox;
+import net.sf.plantlore.common.AutoTextArea;
+import net.sf.plantlore.common.record.AuthorOccurrence;
+
+/**
+ *
+ * @author  reimei
+ */
+public class AddEditView extends javax.swing.JDialog {
+    private boolean visible=false;
+    private AppCore model;
+    /** Creates new form AddEdit2 */
+    public AddEditView(java.awt.Frame parent, boolean modal, AppCore model) {
+        super(parent, modal);
+        this.model = model;
+        initComponents();
+        jPanel3.setVisible(visible);
+        jPanel2.setPreferredSize(new Dimension(720,170));
+        jPanel8.setPreferredSize(new Dimension(720,50));
+        this.pack();        
+    }
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        convertCoordinatesGroup = new javax.swing.ButtonGroup();
+        jPanel2 = new javax.swing.JPanel();
+        AuthorLabel = new javax.swing.JLabel();
+        Object[] items = {"Ahoj", "Nazdar", "Jak se mas"};
+        AuthorComboBox = new AutoComboBox(model.getAuthors());
+
+        TownLabel = new javax.swing.JLabel();
+        items = new Object[] {"Praha", "Brno", "Turnov", "Trebic"};
+        TownComboBox = new AutoComboBox(model.getVillages());
+        TaxonLabel = new javax.swing.JLabel();
+        YearLabel = new javax.swing.JLabel();
+        jLabel2 = new javax.swing.JLabel();
+        jScrollPane2 = new javax.swing.JScrollPane();
+        descriptionArea = new javax.swing.JTextArea();
+        jScrollPane3 = new javax.swing.JScrollPane();
+        Hashtable<String, Integer> plants = model.getPlants();
+        String[] choices = new String[plants.size()];
+        plants.keySet().toArray(choices);
+        taxonTextArea = new AutoTextArea(choices, this);
+        jToggleButton1 = new javax.swing.JToggleButton();
+        checklistButton = new javax.swing.JButton();
+        yearSpinner = new javax.swing.JSpinner();
+        jPanel3 = new javax.swing.JPanel();
+        jPanel4 = new javax.swing.JPanel();
+        MonthSpinner = new javax.swing.JSpinner();
+        jLabel3 = new javax.swing.JLabel();
+        jLabel4 = new javax.swing.JLabel();
+        DaySpinner = new javax.swing.JSpinner();
+        jLabel5 = new javax.swing.JLabel();
+        TimeFormattedTextField = new javax.swing.JFormattedTextField();
+        jPanel5 = new javax.swing.JPanel();
+        jLabel9 = new javax.swing.JLabel();
+        jLabel10 = new javax.swing.JLabel();
+        jLabel11 = new javax.swing.JLabel();
+        jLabel12 = new javax.swing.JLabel();
+        jLabel13 = new javax.swing.JLabel();
+        jLabel14 = new javax.swing.JLabel();
+        territoryNameCombo = new AutoComboBox(model.getTerritories());
+        territoryCodeCombo = new AutoComboBox(items);
+        phytNameCombo = new AutoComboBox(items);
+        phytCodeCombo = new AutoComboBox(items);
+        quadrantCombo = new AutoComboBox(items);
+        phytCountryCombo = new AutoComboBox(items);
+        jPanel6 = new javax.swing.JPanel();
+        jLabel15 = new javax.swing.JLabel();
+        jLabel16 = new javax.swing.JLabel();
+        jLabel17 = new javax.swing.JLabel();
+        PublicationTextField = new javax.swing.JTextField();
+        HerbariumTextField = new javax.swing.JTextField();
+        MetadataTextField = new javax.swing.JTextField();
+        jLabel1 = new javax.swing.JLabel();
+        sourceCombo = new AutoComboBox(items);
+        jPanel7 = new javax.swing.JPanel();
+        jScrollPane4 = new javax.swing.JScrollPane();
+        jTextArea2 = new javax.swing.JTextArea();
+        jPanel1 = new javax.swing.JPanel();
+        jLabel6 = new javax.swing.JLabel();
+        AltitudeFormattedTextField = new javax.swing.JFormattedTextField();
+        LatitudeFormattedTextField = new javax.swing.JFormattedTextField();
+        jLabel7 = new javax.swing.JLabel();
+        jLabel8 = new javax.swing.JLabel();
+        LongitudeFormattedTextField = new javax.swing.JFormattedTextField();
+        WGS84Button = new javax.swing.JRadioButton();
+        S42Button = new javax.swing.JRadioButton();
+        SJTSKButton = new javax.swing.JRadioButton();
+        jPanel9 = new javax.swing.JPanel();
+        jScrollPane5 = new javax.swing.JScrollPane();
+        jTextArea3 = new javax.swing.JTextArea();
+        jPanel8 = new javax.swing.JPanel();
+        jButton2 = new javax.swing.JButton();
+        jButton3 = new javax.swing.JButton();
+        jButton4 = new javax.swing.JButton();
+
+        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
+        setResizable(false);
+        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Basic data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
+        jPanel2.setPreferredSize(new java.awt.Dimension(700, 200));
+        AuthorLabel.setText("Author:");
+
+        AuthorComboBox.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(java.awt.event.ActionEvent evt) {
+                AuthorComboBoxActionPerformed(evt);
+            }
+        });
+
+        TownLabel.setText("Nearest bigger seat:");
+
+        TaxonLabel.setText("Taxon:");
+
+        YearLabel.setText("Year:");
+
+        jLabel2.setText("Place description:");
+
+        descriptionArea.setColumns(20);
+        descriptionArea.setRows(5);
+        jScrollPane2.setViewportView(descriptionArea);
+
+        taxonTextArea.setColumns(20);
+        taxonTextArea.setRows(5);
+        taxonTextArea.setAutoscrolls(false);
+        jScrollPane3.setViewportView(taxonTextArea);
+
+        jToggleButton1.setText("Extended");
+        jToggleButton1.addMouseListener(new java.awt.event.MouseAdapter() {
+            public void mouseClicked(java.awt.event.MouseEvent evt) {
+                jToggleButton1MouseClicked(evt);
+            }
+        });
+
+        checklistButton.setText("Checklist");
+
+        yearSpinner.setValue(2006);
+
+        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
+        jPanel2.setLayout(jPanel2Layout);
+        jPanel2Layout.setHorizontalGroup(
+            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                    .add(YearLabel)
+                    .add(AuthorLabel)
+                    .add(TaxonLabel))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
+                        .add(yearSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 80, Short.MAX_VALUE)
+                        .add(checklistButton))
+                    .add(AuthorComboBox, 0, 245, Short.MAX_VALUE)
+                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                    .add(TownLabel)
+                    .add(jLabel2))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
+                    .add(TownComboBox, 0, 358, Short.MAX_VALUE)
+                    .add(jToggleButton1))
+                .addContainerGap())
+        );
+        jPanel2Layout.setVerticalGroup(
+            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(AuthorLabel)
+                    .add(AuthorComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(TownLabel)
+                    .add(TownComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel2Layout.createSequentialGroup()
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
+                            .add(jScrollPane2)
+                            .add(TaxonLabel)
+                            .add(jScrollPane3))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(jToggleButton1)
+                            .add(checklistButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                            .add(YearLabel)
+                            .add(yearSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
+                    .add(jLabel2))
+                .addContainerGap())
+        );
+        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);
+
+        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Extended data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
+        jPanel3.setMinimumSize(new java.awt.Dimension(800, 395));
+        jPanel3.setPreferredSize(new java.awt.Dimension(800, 395));
+        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Time", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
+
+        jLabel3.setText("Month:");
+
+        jLabel4.setText("Day:");
+
+        jLabel5.setText("Time:");
+
+        TimeFormattedTextField.setText("jFormattedTextField1");
+
+        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
+        jPanel4.setLayout(jPanel4Layout);
+        jPanel4Layout.setHorizontalGroup(
+            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel4Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jLabel3)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(MonthSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jLabel4)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(DaySpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jLabel5)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(TimeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addContainerGap(65, Short.MAX_VALUE))
+        );
+        jPanel4Layout.setVerticalGroup(
+            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel4Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel3)
+                    .add(MonthSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(jLabel4)
+                    .add(DaySpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(jLabel5)
+                    .add(TimeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+        );
+
+        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Location", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
+        jLabel9.setText("Quadrant:");
+
+        jLabel10.setText("Country:");
+
+        jLabel11.setText("Territory name:");
+
+        jLabel12.setText("Territory code:");
+
+        jLabel13.setText("Phytochoria name:");
+
+        jLabel14.setText("Phytochoria code:");
+
+        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
+        jPanel5.setLayout(jPanel5Layout);
+        jPanel5Layout.setHorizontalGroup(
+            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel5Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
+                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5Layout.createSequentialGroup()
+                        .add(19, 19, 19)
+                        .add(jLabel11)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(territoryNameCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5Layout.createSequentialGroup()
+                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                            .add(jLabel10)
+                            .add(jLabel13))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(phytCountryCombo, 0, 99, Short.MAX_VALUE)
+                            .add(phytNameCombo, 0, 99, Short.MAX_VALUE))))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 45, Short.MAX_VALUE)
+                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                    .add(jLabel12)
+                    .add(jLabel14)
+                    .add(jLabel9))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
+                    .add(phytCodeCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                    .add(quadrantCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                    .add(territoryCodeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addContainerGap())
+        );
+
+        jPanel5Layout.linkSize(new java.awt.Component[] {phytCodeCombo, quadrantCombo, territoryCodeCombo}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
+
+        jPanel5Layout.linkSize(new java.awt.Component[] {phytCountryCombo, phytNameCombo, territoryNameCombo}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
+
+        jPanel5Layout.setVerticalGroup(
+            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel5Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel11)
+                    .add(jLabel12)
+                    .add(territoryNameCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(territoryCodeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel5Layout.createSequentialGroup()
+                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                                .add(jLabel13)
+                                .add(phytNameCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                            .add(phytCodeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(jLabel10)
+                            .add(jLabel9)
+                            .add(phytCountryCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(quadrantCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
+                    .add(jLabel14))
+                .addContainerGap(27, Short.MAX_VALUE))
+        );
+
+        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Other", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
+        jLabel15.setText("Publication:");
+
+        jLabel16.setText("Herbarium:");
+
+        jLabel17.setText("Metadata:");
+
+        PublicationTextField.setText("jTextField1");
+
+        HerbariumTextField.setText("jTextField2");
+
+        MetadataTextField.setText("jTextField3");
+
+        jLabel1.setText("Source:");
+
+        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
+        jPanel6.setLayout(jPanel6Layout);
+        jPanel6Layout.setHorizontalGroup(
+            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel6Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                    .add(jLabel17)
+                    .add(jLabel16)
+                    .add(jLabel15)
+                    .add(jLabel1))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
+                    .add(sourceCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                    .add(HerbariumTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
+                    .add(MetadataTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
+                    .add(PublicationTextField))
+                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+        );
+        jPanel6Layout.setVerticalGroup(
+            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
+                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel1)
+                    .add(sourceCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel15)
+                    .add(PublicationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel16)
+                    .add(HerbariumTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel17)
+                    .add(MetadataTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addContainerGap())
+        );
+
+        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Location note", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
+        jTextArea2.setColumns(20);
+        jTextArea2.setRows(5);
+        jScrollPane4.setViewportView(jTextArea2);
+
+        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
+        jPanel7.setLayout(jPanel7Layout);
+        jPanel7Layout.setHorizontalGroup(
+            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel7Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
+                .addContainerGap())
+        );
+        jPanel7Layout.setVerticalGroup(
+            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel7Layout.createSequentialGroup()
+                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
+                .addContainerGap())
+        );
+
+        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "GPS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10)));
+        jLabel6.setText("Altitude:");
+
+        AltitudeFormattedTextField.setText("jFormattedTextField1");
+        AltitudeFormattedTextField.setNextFocusableComponent(LatitudeFormattedTextField);
+
+        LatitudeFormattedTextField.setText("jFormattedTextField2");
+        LatitudeFormattedTextField.setNextFocusableComponent(LongitudeFormattedTextField);
+
+        jLabel7.setText("Latitude:");
+
+        jLabel8.setText("Longitude:");
+
+        LongitudeFormattedTextField.setText("nem");
+        LongitudeFormattedTextField.setNextFocusableComponent(WGS84Button);
+
+        convertCoordinatesGroup.add(WGS84Button);
+        WGS84Button.setText("WGS84");
+        WGS84Button.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
+        WGS84Button.setMargin(new java.awt.Insets(0, 0, 0, 0));
+        WGS84Button.setNextFocusableComponent(S42Button);
+        WGS84Button.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(java.awt.event.ActionEvent evt) {
+                WGS84ButtonActionPerformed(evt);
+            }
+        });
+
+        convertCoordinatesGroup.add(S42Button);
+        S42Button.setText("S-42");
+        S42Button.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
+        S42Button.setMargin(new java.awt.Insets(0, 0, 0, 0));
+        S42Button.setNextFocusableComponent(SJTSKButton);
+
+        convertCoordinatesGroup.add(SJTSKButton);
+        SJTSKButton.setText("S-JTSK");
+        SJTSKButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
+        SJTSKButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
+        SJTSKButton.setNextFocusableComponent(sourceCombo);
+
+        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
+        jPanel1.setLayout(jPanel1Layout);
+        jPanel1Layout.setHorizontalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel1Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                        .add(jLabel6)
+                        .add(jLabel7))
+                    .add(jLabel8))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
+                    .add(LongitudeFormattedTextField)
+                    .add(LatitudeFormattedTextField, 0, 0, Short.MAX_VALUE)
+                    .add(AltitudeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .add(25, 25, 25)
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(S42Button)
+                    .add(WGS84Button)
+                    .add(SJTSKButton))
+                .addContainerGap())
+        );
+        jPanel1Layout.setVerticalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel1Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel1Layout.createSequentialGroup()
+                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(AltitudeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(jLabel6))
+                        .add(6, 6, 6)
+                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(LatitudeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(jLabel7))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(LongitudeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(jLabel8)))
+                    .add(jPanel1Layout.createSequentialGroup()
+                        .add(WGS84Button)
+                        .add(6, 6, 6)
+                        .add(S42Button)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(SJTSKButton)))
+                .addContainerGap(32, Short.MAX_VALUE))
+        );
+
+        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ocurrence note", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
+        jTextArea3.setColumns(20);
+        jTextArea3.setRows(5);
+        jScrollPane5.setViewportView(jTextArea3);
+
+        org.jdesktop.layout.GroupLayout jPanel9Layout = new org.jdesktop.layout.GroupLayout(jPanel9);
+        jPanel9.setLayout(jPanel9Layout);
+        jPanel9Layout.setHorizontalGroup(
+            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel9Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
+                .addContainerGap())
+        );
+        jPanel9Layout.setVerticalGroup(
+            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel9Layout.createSequentialGroup()
+                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
+                .addContainerGap())
+        );
+
+        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
+        jPanel3.setLayout(jPanel3Layout);
+        jPanel3Layout.setHorizontalGroup(
+            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel3Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
+                        .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                        .add(442, 442, 442))
+                    .add(jPanel3Layout.createSequentialGroup()
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(jPanel3Layout.createSequentialGroup()
+                                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 27, Short.MAX_VALUE)
+                                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                            .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                            .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
+                .addContainerGap())
+        );
+        jPanel3Layout.setVerticalGroup(
+            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel3Layout.createSequentialGroup()
+                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                    .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                    .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel3Layout.createSequentialGroup()
+                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                        .add(109, 109, 109))
+                    .add(jPanel3Layout.createSequentialGroup()
+                        .add(jPanel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                        .addContainerGap())))
+        );
+        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);
+
+        jPanel8.setMinimumSize(new java.awt.Dimension(780, 90));
+        jPanel8.setPreferredSize(new java.awt.Dimension(780, 50));
+        jButton2.setText("Ok");
+
+        jButton3.setText("Cancel");
+
+        jButton4.setText("Help");
+
+        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
+        jPanel8.setLayout(jPanel8Layout);
+        jPanel8Layout.setHorizontalGroup(
+            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8Layout.createSequentialGroup()
+                .add(163, 163, 163)
+                .add(jButton4)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 308, Short.MAX_VALUE)
+                .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jButton3)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jButton3)
+                .addContainerGap())
+        );
+
+        jPanel8Layout.linkSize(new java.awt.Component[] {jButton2, jButton3, jButton4}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
+
+        jPanel8Layout.setVerticalGroup(
+            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8Layout.createSequentialGroup()
+                .addContainerGap(13, Short.MAX_VALUE)
+                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jButton3)
+                    .add(jButton3)
+                    .add(jButton4)
+                    .add(jButton2))
+                .addContainerGap())
+        );
+
+        jPanel8Layout.linkSize(new java.awt.Component[] {jButton2, jButton3}, org.jdesktop.layout.GroupLayout.VERTICAL);
+
+        getContentPane().add(jPanel8, java.awt.BorderLayout.SOUTH);
+
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+
+    private void WGS84ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WGS84ButtonActionPerformed
+// TODO add your handling code here:
+    }//GEN-LAST:event_WGS84ButtonActionPerformed
+
+    private void jToggleButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton1MouseClicked
+        visible = !visible;
+        jPanel3.setVisible(visible);
+        jPanel2.setPreferredSize(new Dimension(720,170));
+        jPanel8.setPreferredSize(new Dimension(720,50));
+        this.pack();
+// TODO add your handling code here:
+    }//GEN-LAST:event_jToggleButton1MouseClicked
+
+    private void AuthorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorComboBoxActionPerformed
+// TODO add your handling code here:
+    }//GEN-LAST:event_AuthorComboBoxActionPerformed
+    
+    /**
+     * @param args the command line arguments
+     */
+    public static void main(String args[]) {
+        java.awt.EventQueue.invokeLater(new Runnable() {
+            public void run() {
+                new AddEditView(new javax.swing.JFrame(), true, null).setVisible(true);
+            }
+        });
+    }
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    private javax.swing.JFormattedTextField AltitudeFormattedTextField;
+    private javax.swing.JComboBox AuthorComboBox;
+    private javax.swing.JLabel AuthorLabel;
+    private javax.swing.JSpinner DaySpinner;
+    private javax.swing.JTextField HerbariumTextField;
+    private javax.swing.JFormattedTextField LatitudeFormattedTextField;
+    private javax.swing.JFormattedTextField LongitudeFormattedTextField;
+    private javax.swing.JTextField MetadataTextField;
+    private javax.swing.JSpinner MonthSpinner;
+    private javax.swing.JTextField PublicationTextField;
+    private javax.swing.JRadioButton S42Button;
+    private javax.swing.JRadioButton SJTSKButton;
+    private javax.swing.JLabel TaxonLabel;
+    private javax.swing.JFormattedTextField TimeFormattedTextField;
+    private javax.swing.JComboBox TownComboBox;
+    private javax.swing.JLabel TownLabel;
+    private javax.swing.JRadioButton WGS84Button;
+    private javax.swing.JLabel YearLabel;
+    private javax.swing.JButton checklistButton;
+    private javax.swing.ButtonGroup convertCoordinatesGroup;
+    private javax.swing.JTextArea descriptionArea;
+    private javax.swing.JButton jButton2;
+    private javax.swing.JButton jButton3;
+    private javax.swing.JButton jButton4;
+    private javax.swing.JLabel jLabel1;
+    private javax.swing.JLabel jLabel10;
+    private javax.swing.JLabel jLabel11;
+    private javax.swing.JLabel jLabel12;
+    private javax.swing.JLabel jLabel13;
+    private javax.swing.JLabel jLabel14;
+    private javax.swing.JLabel jLabel15;
+    private javax.swing.JLabel jLabel16;
+    private javax.swing.JLabel jLabel17;
+    private javax.swing.JLabel jLabel2;
+    private javax.swing.JLabel jLabel3;
+    private javax.swing.JLabel jLabel4;
+    private javax.swing.JLabel jLabel5;
+    private javax.swing.JLabel jLabel6;
+    private javax.swing.JLabel jLabel7;
+    private javax.swing.JLabel jLabel8;
+    private javax.swing.JLabel jLabel9;
+    private javax.swing.JPanel jPanel1;
+    private javax.swing.JPanel jPanel2;
+    private javax.swing.JPanel jPanel3;
+    private javax.swing.JPanel jPanel4;
+    private javax.swing.JPanel jPanel5;
+    private javax.swing.JPanel jPanel6;
+    private javax.swing.JPanel jPanel7;
+    private javax.swing.JPanel jPanel8;
+    private javax.swing.JPanel jPanel9;
+    private javax.swing.JScrollPane jScrollPane2;
+    private javax.swing.JScrollPane jScrollPane3;
+    private javax.swing.JScrollPane jScrollPane4;
+    private javax.swing.JScrollPane jScrollPane5;
+    private javax.swing.JTextArea jTextArea2;
+    private javax.swing.JTextArea jTextArea3;
+    private javax.swing.JToggleButton jToggleButton1;
+    private javax.swing.JComboBox phytCodeCombo;
+    private javax.swing.JComboBox phytCountryCombo;
+    private javax.swing.JComboBox phytNameCombo;
+    private javax.swing.JComboBox quadrantCombo;
+    private javax.swing.JComboBox sourceCombo;
+    private javax.swing.JTextArea taxonTextArea;
+    private javax.swing.JComboBox territoryCodeCombo;
+    private javax.swing.JComboBox territoryNameCombo;
+    private javax.swing.JSpinner yearSpinner;
+    // End of variables declaration//GEN-END:variables
+    
+}

Modified: trunk/src/net/sf/plantlore/client/AppCore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-04 10:02:16 UTC (rev 112)
+++ trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-04 11:00:55 UTC (rev 113)
@@ -8,11 +8,17 @@
 package net.sf.plantlore.client;
 
 import java.rmi.RemoteException;
+import java.util.Hashtable;
 import java.util.Observable;
 import java.util.prefs.Preferences;
+import net.sf.plantlore.common.record.Author;
+import net.sf.plantlore.common.record.Plant;
+import net.sf.plantlore.common.record.Territory;
+import net.sf.plantlore.common.record.Village;
 
 // Imports for temporary db access
 import net.sf.plantlore.middleware.DBLayer;
+import net.sf.plantlore.middleware.SelectQuery;
 import net.sf.plantlore.server.DBLayerException;
 import net.sf.plantlore.server.HibernateDBLayer;
 import org.apache.log4j.Logger;
@@ -29,6 +35,10 @@
     private DBLayer database;  
     private OverviewTableModel tableModel;
     private Logger logger;
+    private Hashtable<String, Integer> plants = null;
+    private Object[] authors = null;
+    private Object[] villages = null;
+    private Object[] territories = null;
 
     private int selectedRow;
 
@@ -167,4 +177,117 @@
         logger.info("Saving main window preferences.");
         prefs.putInt("recordsPerPage", recordsPerPage);
     }
+    
+    public Hashtable getPlants() {
+        if (plants == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Plant p;
+            //FIXME:
+            try {
+                sq = database.createQuery(Plant.class);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                plants = new Hashtable<String, Integer>(resultsCount+1, 1);
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    p = (Plant)((Object[])records[i-1])[0];
+                    plants.put(p.getTaxon(), p.getId());
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return plants;
+        } else
+            return plants;
+    }
+    public Object[] getAuthors() {
+        if (authors == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            //FIXME:
+            try {
+                sq = database.createQuery(Author.class);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                authors = new Object[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    authors[i-1] = ((Author)((Object[])records[i-1])[0]).getWholeName();
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return authors;
+        } else
+            return authors;
+    }
+    
+    public Object[] getVillages() {
+        if (villages == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            //FIXME:
+            try {
+                sq = database.createQuery(Village.class);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                villages = new Object[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    villages[i-1] = ((Village)((Object[])records[i-1])[0]).getName();
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return villages;
+        } else
+            return villages;
+    }
+
+    public Object[] getTerritories() {
+        if (territories == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            //FIXME:
+            try {
+                sq = database.createQuery(Territory.class);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                territories = new Object[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    territories[i-1] = ((Territory)((Object[])records[i-1])[0]).getName();
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return territories;
+        } else
+            return territories;
+    }
 }

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-04 10:02:16 UTC (rev 112)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-04 11:00:55 UTC (rev 113)
@@ -22,6 +22,9 @@
 import javax.swing.ListSelectionModel;
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
+import net.sf.plantlore.common.record.Author;
+import net.sf.plantlore.common.record.AuthorOccurrence;
+import net.sf.plantlore.common.record.Occurrence;
 import net.sf.plantlore.server.DBLayerException;
 import net.sf.plantlore.common.record.Plant;
 import net.sf.plantlore.client.authors.AuthorManager;
@@ -252,7 +255,8 @@
         } 
 
         public void actionPerformed(ActionEvent actionEvent) {
-            System.out.println("Edit pressed");
+            AddEditView addEdit = new AddEditView(view, true, model);
+            addEdit.setVisible(true);
         }
     }
     
@@ -349,15 +353,15 @@
 
     class DataAuthorsListener implements ActionListener {
         public void actionPerformed(ActionEvent actionEvent) {
-            try {
+            //try {
                 AuthorManager authModel = new AuthorManager(model.getDatabase());
                 AuthorManagerView authView = new AuthorManagerView(authModel, view);
                 AuthorManagerCtrl authCtrl = new AuthorManagerCtrl(authModel, authView);
-                authModel.pokus();
+                //authModel.pokus();
                 authView.show();                
-            } catch(RemoteException e) {
-            	System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
-            }                
+            //} catch(RemoteException e) {
+            //	System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
+            //}                
         }
     }    
 

Modified: trunk/src/net/sf/plantlore/client/OverviewTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-04 10:02:16 UTC (rev 112)
+++ trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-04 11:00:55 UTC (rev 113)
@@ -167,6 +167,22 @@
         }//i        
     }
     
+    public AuthorOccurrence getRecord(int row) {
+        AuthorOccurrence result = null;
+        Object[] resultObj, records;
+        //FIXME:
+        try {
+            records = db.more(getResultid(), from, from + row);
+            result = (AuthorOccurrence)((Object[])records[0])[0];
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }
+        
+        return result;
+    }
+    
     public int getRowCount() {
         return data.length;
     }

Modified: trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-04 10:02:16 UTC (rev 112)
+++ trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-04 11:00:55 UTC (rev 113)
@@ -89,7 +89,7 @@
 
         //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Temp/plantloreHIBdata.fdb");
         //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Kovo/DatabaseTest/database/plantlore.fdb");
-        cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:C:/Kovo/PlantloreDevel/plantloreHIBdata.fdb");
+        cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:/mnt/data/temp/plantloreHIBdata.fdb");
         //cfg.setProperty("hibernate.connection.url", "jdbc:postgresql://localhost:5432/plantlore");
         cfg.setProperty("hibernate.connection.username", "sysdba");
         cfg.setProperty("hibernate.connection.password", "masterkey");        



From fraktalek at berlios.de  Tue Apr  4 22:19:50 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Tue, 4 Apr 2006 22:19:50 +0200
Subject: [Plantlore-dev] r114 - in trunk/src/net/sf/plantlore: client client/history common server
Message-ID: <200604042019.k34KJoMb026237@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-04 22:19:49 +0200 (Tue, 04 Apr 2006)
New Revision: 114

Modified:
   trunk/src/net/sf/plantlore/client/AppCore.java
   trunk/src/net/sf/plantlore/client/SettingsView.java
   trunk/src/net/sf/plantlore/client/history/History.java
   trunk/src/net/sf/plantlore/common/ComponentAdjust.java
   trunk/src/net/sf/plantlore/common/StatusBarManager.java
   trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
Log:
Get rid of trivial compiler warnings.


Modified: trunk/src/net/sf/plantlore/client/AppCore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-04 11:00:55 UTC (rev 113)
+++ trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-04 20:19:49 UTC (rev 114)
@@ -178,7 +178,7 @@
         prefs.putInt("recordsPerPage", recordsPerPage);
     }
     
-    public Hashtable getPlants() {
+    public Hashtable<String, Integer> getPlants() {
         if (plants == null)
         {
             SelectQuery sq;

Modified: trunk/src/net/sf/plantlore/client/SettingsView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/SettingsView.java	2006-04-04 11:00:55 UTC (rev 113)
+++ trunk/src/net/sf/plantlore/client/SettingsView.java	2006-04-04 20:19:49 UTC (rev 114)
@@ -61,7 +61,7 @@
     private JToggleButton other;
     
     /** This maps the buttons to their corresponding right side panels. */
-    private HashMap panels;
+    private HashMap<JToggleButton, JPanel> panels;
 
     private JButton okButton;
     private JButton cancelButton;
@@ -87,7 +87,7 @@
     private void init()
     {
         initDialog();
-        panels = new HashMap();
+        panels = new HashMap<JToggleButton, JPanel>();
         panels.put(language, languagesPane);
         panels.put(other, otherPane);
     }

Modified: trunk/src/net/sf/plantlore/client/history/History.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/History.java	2006-04-04 11:00:55 UTC (rev 113)
+++ trunk/src/net/sf/plantlore/client/history/History.java	2006-04-04 20:19:49 UTC (rev 114)
@@ -57,7 +57,7 @@
     /** Data (results of a search query) displayed in the table */
     private Object[][] editHistoryData;
     /** List of data (results of a search query) displayed in the table */
-    private ArrayList editHistoryDataList;
+    private ArrayList<HistoryRecord> editHistoryDataList;
    
     //********************* ***************************************//    
     private Occurrence occurrence;
@@ -96,9 +96,9 @@
 	
 	 //********************************************************//
 	 /** Mapping of entities */
-     private Hashtable publicationHash;
-     private Hashtable habitatHash;
-     private Hashtable occurrenceHash;  
+     private Hashtable<String, Integer> publicationHash;
+     private Hashtable<String, Integer> habitatHash;
+     private Hashtable<String, Integer> occurrenceHash;  
     
     /**  
      *  Creates a new instance of History 
@@ -313,7 +313,7 @@
             // Find out how many rows we can retrieve - it cannot be more than number of rows in the result
             int to = Math.min(currentRow, fromTable+count-1);           
             if (to == 0) {
-                this.editHistoryDataList = new ArrayList();                
+                this.editHistoryDataList = new ArrayList<HistoryRecord>();                
             } else {
                 logger.debug("Retrieving query results: 1 - "+to);
                 setCurrentDisplayRow(fromTable+ "-" + to);
@@ -330,7 +330,7 @@
                     int countResult = objectHistory.length;  
                     logger.debug("Results retrieved. Count: "+ countResult);
                     // Create storage for the results
-                    this.editHistoryDataList = new ArrayList();
+                    this.editHistoryDataList = new ArrayList<HistoryRecord>();
                     // Cast the results to the HistoryRecord objects
                     for (int i=0; i<countResult; i++ ) {                    							
 						Object[] objHis = (Object[])objectHistory[i];
@@ -546,7 +546,7 @@
     	// Index of firt row currently displayed
     	int indexFirstRow = getCurrentFirstRow();
     	//List of changed ITEM
-    	ArrayList changedList = new ArrayList();
+    	ArrayList<String> changedList = new ArrayList<String>();
     	//take from older record to younger record
     	for( int i=countMark-1; i >= 0; i--) {    	
     		logger.debug("Number of selected row: "+markResult.get(i));
@@ -1108,7 +1108,7 @@
     //**************************//
     
     private void initOccurrenceHash() {
-        occurrenceHash = new Hashtable(9); 
+        occurrenceHash = new Hashtable<String, Integer>(9); 
         occurrenceHash.put("plantId",1);
         occurrenceHash.put("yearCollected",2);
         occurrenceHash.put("monthCollected",3);
@@ -1133,7 +1133,7 @@
     }    
     
     private void initHabitatHash() {
-        habitatHash = new Hashtable(11);        
+        habitatHash = new Hashtable<String, Integer>(11);        
         habitatHash.put("quadrant",1);
         habitatHash.put("description",2);
         habitatHash.put("country",3);
@@ -1148,7 +1148,7 @@
     }
     
     private void initPublicationHash() {
-        publicationHash = new Hashtable(7);                       
+        publicationHash = new Hashtable<String, Integer>(7);                       
         publicationHash.put("collectionName",1);
         publicationHash.put("colletionYearPublication",2);
         publicationHash.put("journalName",3);

Modified: trunk/src/net/sf/plantlore/common/ComponentAdjust.java
===================================================================
--- trunk/src/net/sf/plantlore/common/ComponentAdjust.java	2006-04-04 11:00:55 UTC (rev 113)
+++ trunk/src/net/sf/plantlore/common/ComponentAdjust.java	2006-04-04 20:19:49 UTC (rev 114)
@@ -20,7 +20,7 @@
  */
 public class ComponentAdjust
 {
-    ArrayList list;
+    ArrayList<JComponent> list;
     boolean computed = false;
     int 
             maxW = 0, 
@@ -34,7 +34,7 @@
     /** Creates a new instance of ComponentAdjust */
     public ComponentAdjust()
     {
-        list = new ArrayList();
+        list = new ArrayList<JComponent>();
     }
     
     /** Adds a JComponent to the internal list of components.

Modified: trunk/src/net/sf/plantlore/common/StatusBarManager.java
===================================================================
--- trunk/src/net/sf/plantlore/common/StatusBarManager.java	2006-04-04 11:00:55 UTC (rev 113)
+++ trunk/src/net/sf/plantlore/common/StatusBarManager.java	2006-04-04 20:19:49 UTC (rev 114)
@@ -29,7 +29,7 @@
 public class StatusBarManager implements MouseListener
 {
     private JLabel statusLabel;
-    private Map map;
+    private Map<Component, String> map;
     private String defaultText;
     
     /** Creates a new instance of StatusBarManager.
@@ -38,7 +38,7 @@
     public StatusBarManager(JLabel status)
     {
         this.statusLabel = status;
-        map = new WeakHashMap();
+        map = new WeakHashMap<Component, String>();
         defaultText = "";
     }
 

Modified: trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-04 11:00:55 UTC (rev 113)
+++ trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-04 20:19:49 UTC (rev 114)
@@ -89,7 +89,8 @@
 
         //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Temp/plantloreHIBdata.fdb");
         //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Kovo/DatabaseTest/database/plantlore.fdb");
-        cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:/mnt/data/temp/plantloreHIBdata.fdb");
+        //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:/mnt/data/temp/plantloreHIBdata.fdb");
+        cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:natalka.kolej.mff.cuni.cz/3050:/mnt/data/temp/plantloreHIBdata.fdb");
         //cfg.setProperty("hibernate.connection.url", "jdbc:postgresql://localhost:5432/plantlore");
         cfg.setProperty("hibernate.connection.username", "sysdba");
         cfg.setProperty("hibernate.connection.password", "masterkey");        



From Lada at berlios.de  Wed Apr  5 11:37:13 2006
From: Lada at berlios.de (Lada at berlios.de)
Date: Wed, 5 Apr 2006 11:37:13 +0200
Subject: [Plantlore-dev] r115 - trunk/analysis/biocase
Message-ID: <200604050937.k359bDQw008514@sheep.berlios.de>

Author: Lada
Date: 2006-04-05 11:37:04 +0200 (Wed, 05 Apr 2006)
New Revision: 115

Modified:
   trunk/analysis/biocase/Poznamky k BioCASE.doc
Log:
Update file (Poznamky k BioCASE 22.3. --> 24.3.)

Modified: trunk/analysis/biocase/Poznamky k BioCASE.doc
===================================================================
(Binary files differ)



From discontinuum at gmail.com  Wed Apr  5 12:33:23 2006
From: discontinuum at gmail.com (Erik Kratochvil)
Date: Wed, 5 Apr 2006 12:33:23 +0200
Subject: [Plantlore-dev] Zapis ze schuzky
Message-ID: <f4dc39b90604050333o6330465dk7500e40043ab6172@mail.gmail.com>

Zapis ze schuzky z 4. dubna 2006. Byl by i na webu, kdyby si pan Kovarik
neuzurpoval soubory aktuality.php a zapisy.php (nebo jak).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060405/97ac7f9a/attachment.html>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: schuzka.txt
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060405/97ac7f9a/attachment.txt>

From fraktalek at berlios.de  Wed Apr  5 14:42:08 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Wed, 5 Apr 2006 14:42:08 +0200
Subject: [Plantlore-dev] r116 - trunk/lib
Message-ID: <200604051242.k35Cg8Mr010790@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-05 14:42:05 +0200 (Wed, 05 Apr 2006)
New Revision: 116

Added:
   trunk/lib/swing-layout-1.0.jar
Log:
Added jar needed to compile the Matisse-created AddEditView.java. Add it to
your plantlore project classpath.



Added: trunk/lib/swing-layout-1.0.jar
===================================================================
(Binary files differ)


Property changes on: trunk/lib/swing-layout-1.0.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From Lada at berlios.de  Wed Apr  5 15:28:46 2006
From: Lada at berlios.de (Lada at berlios.de)
Date: Wed, 5 Apr 2006 15:28:46 +0200
Subject: [Plantlore-dev] r117 - in trunk/src/net/sf/plantlore: common/record config/hibernate
Message-ID: <200604051328.k35DSkwY029620@sheep.berlios.de>

Author: Lada
Date: 2006-04-05 15:28:42 +0200 (Wed, 05 Apr 2006)
New Revision: 117

Added:
   trunk/src/net/sf/plantlore/common/record/LastUpdate.java
   trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml
Modified:
   trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml
Log:
Create new table TLASTUPDATE - TLASTUPDATE.CID, TLASTUPDATE.CTABLENAME (name of updating table), TLASTUPDATE.CLASTTIME (date and timo of last update of tableName). Add mapping and record for this table.

Added: trunk/src/net/sf/plantlore/common/record/LastUpdate.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/LastUpdate.java	2006-04-05 12:42:05 UTC (rev 116)
+++ trunk/src/net/sf/plantlore/common/record/LastUpdate.java	2006-04-05 13:28:42 UTC (rev 117)
@@ -0,0 +1,85 @@
+package net.sf.plantlore.common.record;
+
+import java.io.Serializable;
+
+/**
+ *  Data holder object representing TLASTUPDATE table in the DB. This object is used as a data
+ *  holder for Hibernate operations on the server side. On the side of the client, it represents part
+ *  of a lastUpdate record we are working with. It is being sent from client to server and back when
+ *  executing database queries.
+ *
+ *  @author Lada Oberreiterova  
+ */
+public class LastUpdate {
+
+	 /** Parameters of the LastUpdate. For detailed explanation see data model documentation. */
+    private int id;
+    private String tableName;
+    private java.util.Date lastUpdate;    
+    
+    /** Constants with column mapping (used for building select queries) */
+    public static final String ID = "id";
+    public static final String TABLENAME = "tableName";    
+    public static final String LASTUPDATE = "lastUpdate";
+   
+    /**
+     *   Default constructor to create new class LastUpdate
+     */
+    public LastUpdate() {
+        
+    }
+    
+    /**
+     *   Get LastUpdate record id
+     *   @return id of the LastUpdate record
+     *   @see setId
+     */
+    public int getId() {
+        return this.id;
+    }
+    
+    /**
+     *   Set LastUpdate record id
+     *   @param id   id of the LastUpdate record
+     *   @see getId
+     */
+    public void setId(int id) {
+        this.id = id;
+    }
+    
+    /**
+     *   Get name of the table where the value was changed
+     *   @return of the table where the value was changed
+     *   @see setTableName
+     */
+    public String getTableName() {
+        return this.tableName;
+    }
+    
+    /**
+     *   Set name of the table where the value was changed
+     *   @param tableName string containing of the table where the value was changed
+     *   @see getTableName
+     */
+    public void setTableName(String tableName) {
+        this.tableName = tableName;
+    }
+
+    /**
+     *   Get date and time of table last update
+     *   @return date and time of table last update
+     *   @see setLastUpdate
+     */
+    public java.util.Date getLastUpdate() {
+        return this.lastUpdate;
+    }
+    
+    /**
+     *   Set date and time of table last update
+     *   @param lastUpdate date and time of table last update
+     *   @see getLastUpdate
+     */
+    public void setLastUpdate(java.util.Date lastUpdate) {
+        this.lastUpdate = lastUpdate;
+    }
+}

Added: trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml	2006-04-05 12:42:05 UTC (rev 116)
+++ trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml	2006-04-05 13:28:42 UTC (rev 117)
@@ -0,0 +1,22 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC
+          "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+          "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping>
+   <class name="net.sf.plantlore.common.record.LastUpdate" table="TLASTUPDATE">
+      <id column="CID" name="id" type="java.lang.Integer">
+         <generator class="increment"/>
+      </id>
+
+      <property column="CTABLENAME"
+                length="20"
+                name="tableName"
+                not-null="true"                
+                type="java.lang.String"/>             
+      <property column="CLASTUPDATE"
+                name="lastUpdate"
+                not-null="true"                
+                type="java.util.Date"/>               
+   </class>
+</hibernate-mapping>

Modified: trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml	2006-04-05 12:42:05 UTC (rev 116)
+++ trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml	2006-04-05 13:28:42 UTC (rev 117)
@@ -15,7 +15,6 @@
       </property>
       <!-- Mapping files -->
       <mapping file="Authors.hbm.xml"/>
-      <mapping file="AuthorsOccurrences.hbm.xml"/>
       <mapping file="Habitats.hbm.xml"/>
       <mapping file="History.hbm.xml"/>
       <mapping file="HistoryChange.hbm.xml"/>
@@ -28,6 +27,7 @@
       <mapping file="Right.hbm.xml"/>
       <mapping file="Territories.hbm.xml"/>
       <mapping file="User.hbm.xml"/>
-      <mapping file="Villages.hbm.xml"/>   
+      <mapping file="Villages.hbm.xml"/>  
+      <mapping file="LastUpdate.hbm.xml"/> 
    </session-factory>
-</hibernate-configuration>
+</hibernate-configuration>
\ No newline at end of file



From Lada at berlios.de  Wed Apr  5 16:02:08 2006
From: Lada at berlios.de (Lada at berlios.de)
Date: Wed, 5 Apr 2006 16:02:08 +0200
Subject: [Plantlore-dev] r118 - trunk/analysis/database
Message-ID: <200604051402.k35E28wP022890@sheep.berlios.de>

Author: Lada
Date: 2006-04-05 16:01:18 +0200 (Wed, 05 Apr 2006)
New Revision: 118

Modified:
   trunk/analysis/database/DBmodel.jpg
   trunk/analysis/database/DBmodel.sql
Log:
SQL and diagrem of DB model with new table tLastUpdate

Modified: trunk/analysis/database/DBmodel.jpg
===================================================================
(Binary files differ)

Modified: trunk/analysis/database/DBmodel.sql
===================================================================
--- trunk/analysis/database/DBmodel.sql	2006-04-05 13:28:42 UTC (rev 117)
+++ trunk/analysis/database/DBmodel.sql	2006-04-05 14:01:18 UTC (rev 118)
@@ -18,6 +18,7 @@
 CREATE GENERATOR GEN_TTERRITORIES;
 CREATE GENERATOR GEN_TUSER;
 CREATE GENERATOR GEN_TVILLAGES;
+CREATE GENERATOR GEN_TLASTUPDATE;
 
 
 /* Table: TAUTHORS, Owner: SYSDBA */
@@ -197,11 +198,17 @@
     CNOTE        VARCHAR(4096),
 PRIMARY KEY (CID));
 
-
 /* Table: TVILLAGES, Owner: SYSDBA */
 CREATE TABLE TVILLAGES (
     CID    INTEGER NOT NULL,
     CNAME  VARCHAR(50) NOT NULL,
+PRIMARY KEY (CID)); 
+
+/* Table: TLASTUPDATE, Owner: SYSDBA */
+CREATE TABLE TLASTUPDATE (
+    CID          INTEGER NOT NULL,
+    CTABLENAME   VARCHAR(20) NOT NULL,
+    CLASTUPDATE  TIMESTAMP NOT NULL,
 PRIMARY KEY (CID));
 
 ALTER TABLE TAUTHORSOCCURRENCES ADD FOREIGN KEY (CAUTHORID) REFERENCES TAUTHORS (CID);



From tkovarik at gmail.com  Wed Apr  5 17:11:06 2006
From: tkovarik at gmail.com (Tomas Kovarik)
Date: Wed, 5 Apr 2006 17:11:06 +0200
Subject: [Plantlore-dev] Zapis ze schuzky
In-Reply-To: <f4dc39b90604050333o6330465dk7500e40043ab6172@mail.gmail.com>
References: <f4dc39b90604050333o6330465dk7500e40043ab6172@mail.gmail.com>
Message-ID: <ea88f1620604050811r5b6cceffmcc03f3cbbd0caacd@mail.gmail.com>

Erik, dik za zapis. Upravil som skupinu a prava pre subory so zapismi,
teraz uz by mal mat moznost to editovat kazdy.

Kovo

On 4/5/06, Erik Kratochvil <discontinuum at gmail.com> wrote:
> Zapis ze schuzky z 4. dubna 2006. Byl by i na webu, kdyby si pan Kovarik
> neuzurpoval soubory aktuality.php a zapisy.php (nebo jak).
>
>
>
>


From krater at berlios.de  Fri Apr  7 13:45:01 2006
From: krater at berlios.de (krater at berlios.de)
Date: Fri, 7 Apr 2006 13:45:01 +0200
Subject: [Plantlore-dev] r119 - trunk/src/net/sf/plantlore/common
Message-ID: <200604071145.k37Bj1vJ015984@sheep.berlios.de>

Author: krater
Date: 2006-04-07 13:44:57 +0200 (Fri, 07 Apr 2006)
New Revision: 119

Modified:
   trunk/src/net/sf/plantlore/common/Assistant.java
   trunk/src/net/sf/plantlore/common/AutoComboBox.java
   trunk/src/net/sf/plantlore/common/AutoTextArea.java
Log:
The Assistant placement bug has been fixed in AutoTextArea.java. The maximum-number-of-lines restriction has been added.

The AutoComboBox now accepts new strings as well (though the use of such behaviour is discouraged, see the Javadoc of this component).


Modified: trunk/src/net/sf/plantlore/common/Assistant.java
===================================================================
--- trunk/src/net/sf/plantlore/common/Assistant.java	2006-04-05 14:01:18 UTC (rev 118)
+++ trunk/src/net/sf/plantlore/common/Assistant.java	2006-04-07 11:44:57 UTC (rev 119)
@@ -1,10 +1,13 @@
 package net.sf.plantlore.common;
 
+import java.awt.Component;
 import java.awt.Container;
+import java.awt.Point;
 import java.awt.Rectangle;
 
 import javax.swing.JLayeredPane;
 import javax.swing.JList;
+import javax.swing.JRootPane;
 import javax.swing.JScrollPane;
 import javax.swing.ListSelectionModel;
 import javax.swing.text.Position;
@@ -25,6 +28,7 @@
 public class Assistant extends JScrollPane {
 
 	protected JList list;
+	private Point o;
 	
 	/**
 	 * Create the Assistant.
@@ -63,13 +67,29 @@
 
 	/** Display the Assistant on the designated coordinates. */
 	public void display(int x, int y) {
-		setLocation(x, y); setVisible(true);
+		setLocation(o.x + x, o.y + y); setVisible(true);
 	}
 
 	/** Display the Assistant on the designated coordinates if it is not already visible. */
 	public void display(Rectangle r) {
 		display(r.x, r.y);
 	}
+	
+	/** Re-adjust the offset of the Visual Assistant according to the position of the parent components. */
+	public void readjustOffset(Component c) {
+		o =  new Point(0, 0); 
+		while(c != null && !(c instanceof JRootPane)) {
+			Point p = c.getLocation();
+			o.translate(p.x, p.y);
+			c = c.getParent();			
+		}
+	}
+	
+	/** Adjust the offset of the Visual Assistant according to the position of the parent components. */
+	public void adjustOffset(Component c) {
+		if(o != null) return;
+		readjustOffset(c);
+	}
 
 	/** Set selected index and ensure it is visible. */
 	public void setSelectedIndex(int index) {

Modified: trunk/src/net/sf/plantlore/common/AutoComboBox.java
===================================================================
--- trunk/src/net/sf/plantlore/common/AutoComboBox.java	2006-04-05 14:01:18 UTC (rev 118)
+++ trunk/src/net/sf/plantlore/common/AutoComboBox.java	2006-04-07 11:44:57 UTC (rev 119)
@@ -1,5 +1,6 @@
 package net.sf.plantlore.common;
 
+
 import java.awt.event.FocusEvent;
 import java.awt.event.FocusListener;
 import java.awt.event.KeyEvent;
@@ -15,18 +16,32 @@
 
 /**
  * AutoComboBox is an extension of the standard JComboBox.
+ * The AutoComboBox can run in two modes now
+ * <ul>
+ * <li><b>strict</b> ~
  * It prevents the User from entering an invalid or incomplete entry,
- * and ensures that something is always selected.
+ * and ensures that something is always selected.</li>
+ * <li><b>benevolent</b> ~ The User can enter anything (not just something
+ * that matches one of the choices in the list). The component acts as a 
+ * guide this time.</li>
+ * </ul>
  * <br/>
  * Heavily refined from the source code created by Stephane Crasnier. 
  * <br/>
- * I wish I wrote it myself from scratch :/
+ * The use of the benevolent behaviour is discouraged as it contradicts the sole purpose 
+ * of this component. If you want to allow the User 
+ * to leave this field blank, use a special
+ * record "------" or "not specified" instead.
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @version 1.1
  * @since The beginning of time.
  */
 public class AutoComboBox extends JComboBox {
 	
+	protected boolean allowNew = false;
+	protected int capacity = 32;
+	
 
 	/**
 	 * Create the AutoComboBox with given array of choices.
@@ -42,8 +57,22 @@
 		editor.setDocument(a); editor.addKeyListener(a); editor.addFocusListener(a);
 	}
 	
+	/**
+	 * Specify whether the component should also accept strings that are not part of the list of choices.
+	 * 
+	 * @param strict  True (ie. be strict!) if new strings are not allowed.
+	 */
+	public void setStrict(boolean strict) { allowNew = !strict; }
 	
+	/**
+	 * Set the maximum number of characters the user can insert into the text field.
+	 * 
+	 * @param capacity The maximum number of characters the user can type.
+	 */
+	public void setCapacity(int capacity) { this.capacity = capacity; }
 	
+	
+	
 	private class AutoDocument extends PlainDocument implements KeyListener, FocusListener {
 		
 		/** Prevent entering the setMatch method recursively. */
@@ -53,25 +82,31 @@
 		 * Select the first suitable choice beginnig with <code>prefix</code>.
 		 * 
 		 * @param prefix		The prefix of the string. 
-		 * @param partial	Display only partial string? 
+		 * @param popupl	Display the string only (no popup selection)? 
 		 */
-		synchronized private void setMatch(String prefix, boolean partial) {
+		synchronized private void setMatch(String prefix, boolean popup) {
 			if (!prevent) {
 				prevent = true;
-				setPopupVisible(partial); // make sure popup is/isn't visible
+				setPopupVisible(popup); // make sure popup is/isn't visible
 				try {
+					boolean noMatch = true;
 					if (prefix == null) prefix = getText(0, getLength());
 					// Find the first suitable choice and select it.
 					for(int i = 0; i < getItemCount(); i++) {
 						String item = (String) getItemAt(i); // test the i-th choice
 						if( prefix.length() <= item.length() && prefix.equalsIgnoreCase(item.substring(0, prefix.length())) ) {
 							setSelectedIndex(i); // CRAP! This method calls remove() & insertString()!!!
-							if(partial) item = item.substring(0, prefix.length()); // trim the string
+							if(popup) item = item.substring(0, prefix.length()); // trim the string
 							super.remove(0, getLength());
 							super.insertString(0, item, null); // rewrite the text
+							noMatch = false;
 							break;
 						}
 					}
+					if(allowNew && noMatch && prefix.length() < capacity) {
+						super.remove(0, getLength());
+						super.insertString(0, prefix, null);
+					}
 				} catch (BadLocationException e) {} 
 				finally { prevent = false; }
 			}
@@ -102,4 +137,6 @@
 		public void keyReleased(KeyEvent arg0) {}
 		public void focusGained(FocusEvent arg0) {}
 	}
+
+	
 }

Modified: trunk/src/net/sf/plantlore/common/AutoTextArea.java
===================================================================
--- trunk/src/net/sf/plantlore/common/AutoTextArea.java	2006-04-05 14:01:18 UTC (rev 118)
+++ trunk/src/net/sf/plantlore/common/AutoTextArea.java	2006-04-07 11:44:57 UTC (rev 119)
@@ -28,7 +28,8 @@
  * 			<code>Page Up</code>, <code>Page Down</code> and
  * 			mouse clicks behave like when in <code>JTextArea</code>,
  * 		</li>
- * 		<li><code>Escape</code> and <code>Enter</code> are disabled,</li>
+ * 		<li><code>Escape</code> is disabled,</li>
+ * 		<li><code>Enter</code> creates a new line,</li>
  * 		<li><code>Tab</code> transfers the focus to the next component,</li>
  * 		<li><code>Delete</code>, <code>Backspace</code> and any
  * 			other key switch the <code>AutoTextArea</code> to the ASSISTANCE mode.</li>
@@ -65,17 +66,24 @@
  * </dl> 
  * <br/>
  * The AutoTextArea assumes the list of choices is sorted according to the selected language
- * (the behaviour of the Assistant may appear confusing otherwise).
+ * (the behaviour of the Assistant may seem to be confusing otherwise).
  * <br/>
+ * AutoTextArea <b>does now provide</b>
+ * <ul>
+ * <li>size restriction - "unlimited" number of records cannot be entered,</li>
+ * <li>smart assistant placement - the Visual Assistant now displays correctly even when placed within
+ *      several other components (panels).</li>
+ * </ul>
+ * 
+ * <br/>
  * AutoTextArea <b>does not provide</b> 
  * <ul>
- * <li>size restriction - "unlimited" number of records can be entered,</li>
  * <li>duplicity checks - one record may be entered twice,</li> 
- * <li>scrolling - use JScrollPane with AutoTextArea explicitly,</li>
- * <li>smart assistant placement - the Visual Assistant may not be completely visible in some cases.</li>
+ * <li>scrolling - use JScrollPane with AutoTextArea explicitly.</li>
  * </ul>   
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @version 1.1
  */
 public class AutoTextArea extends JTextArea implements KeyListener, FocusListener, MouseListener {
 	
@@ -95,6 +103,9 @@
 	/** The number of items skipped in the assistant when PAGE_DOWN/PAGE_UP is pressed. */
 	private int step = 10;
 	
+	/** The maximum number of lines that can be inserted into the text area. */
+	protected int capacity = 50;
+	
 
 	/*======================================================================
 	 	Keyboard behaviour
@@ -113,9 +124,13 @@
 			case KeyEvent.VK_TAB: // transfer the focus to another component
 				if((e.getModifiers() & KeyEvent.SHIFT_DOWN_MASK) > 0) transferFocusBackward();
 				else transferFocus();				
-			case KeyEvent.VK_ENTER:
 			case KeyEvent.VK_ESCAPE:
 				e.consume(); // no further processing of this event
+				
+			case KeyEvent.VK_ENTER:
+				// Consume this event only if the number of records exceeds the set capacity.
+				if(capacity <= this.getLineCount()) e.consume(); 
+				
 			case KeyEvent.VK_UP:
 			case KeyEvent.VK_DOWN:
 			case KeyEvent.VK_LEFT:
@@ -140,7 +155,7 @@
 		// Consume the event -> no further processing 
 		e.consume();
 		
-		boolean eoln = false;
+		boolean eoln = false; // does this line end with a newline \n?
 		String prefix = ""; // contents of the current line
 		try { prefix = getText(start, end - start); } catch(BadLocationException b) {}
 		if(prefix.endsWith("\n")) { end--; eoln = true; }
@@ -191,15 +206,18 @@
 			case KeyEvent.VK_ENTER: // insert the current selection, switch to the FreeRoam
 				mode = Mode.FREE_ROAM;
 				assistant.setVisible(false);
+				String newline = (capacity <= this.getLineCount()) ? "" : "\n";
 				if(eoln) end++;
 				if(list.isSelectionEmpty()) replaceRange("", start, end);
-				else replaceRange(list.getSelectedValue() + "\n", start, end);
+				else replaceRange(list.getSelectedValue() + newline, start, end);
 				return;
 			}
 		}
 		
 		// Mode switchers - DEL, BACKSPACE, ANY_OTHER_KEY
 		mode = Mode.ASSISTANCE;
+		assistant.adjustOffset(this); // make sure the Visual assistant gets displayed on the correct spot
+		
 		if(!assistant.isVisible())
 			try {
 				// Place the assistant below the current line
@@ -305,8 +323,19 @@
 		addKeyListener(this); addFocusListener(this);
 	}
 	
+	@Deprecated
+	public void adjustOffset() {
+		assistant.adjustOffset(this);
+	}
 	
+	/** Set the maximum number of records that can be inserted into this text area. */
+	public void setCapacity(int capacity) {
+		this.capacity = capacity;
+	}
+
 	
+	
+	
 	/*======================================================================
 	 	Unimplemented & uninteresting methods
 	  ======================================================================*/



From Lada at berlios.de  Fri Apr  7 14:23:57 2006
From: Lada at berlios.de (Lada at berlios.de)
Date: Fri, 7 Apr 2006 14:23:57 +0200
Subject: [Plantlore-dev] r120 - trunk/lib
Message-ID: <200604071223.k37CNvW7002081@sheep.berlios.de>

Author: Lada
Date: 2006-04-07 14:23:07 +0200 (Fri, 07 Apr 2006)
New Revision: 120

Added:
   trunk/lib/firebirdsql-full.jar
Log:
Add firebirdsql-full

Added: trunk/lib/firebirdsql-full.jar
===================================================================
(Binary files differ)


Property changes on: trunk/lib/firebirdsql-full.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From lada at berlios.de  Mon Apr 10 00:10:09 2006
From: lada at berlios.de (lada at berlios.de)
Date: Mon, 10 Apr 2006 00:10:09 +0200
Subject: [Plantlore-dev] r121 - trunk/src/net/sf/plantlore/config/hibernate
Message-ID: <200604092210.k39MA93a001875@sheep.berlios.de>

Author: lada
Date: 2006-04-10 00:10:08 +0200 (Mon, 10 Apr 2006)
New Revision: 121

Modified:
   trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml
Log:
Add mapping for AuthorsOccurrences.

Modified: trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml	2006-04-07 12:23:07 UTC (rev 120)
+++ trunk/src/net/sf/plantlore/config/hibernate/hibernate.cfg.xml	2006-04-09 22:10:08 UTC (rev 121)
@@ -14,6 +14,7 @@
          org.firebirdsql.jdbc.FBDriver 
       </property>
       <!-- Mapping files -->
+      <mapping file="AuthorsOccurrences.hbm.xml"/>
       <mapping file="Authors.hbm.xml"/>
       <mapping file="Habitats.hbm.xml"/>
       <mapping file="History.hbm.xml"/>



From fraktalek at berlios.de  Mon Apr 10 21:23:11 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Mon, 10 Apr 2006 21:23:11 +0200
Subject: [Plantlore-dev] r122 - in trunk/src/net/sf/plantlore: client l10n server
Message-ID: <200604101923.k3AJNBU0019556@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-10 21:22:55 +0200 (Mon, 10 Apr 2006)
New Revision: 122

Modified:
   trunk/src/net/sf/plantlore/client/OverviewTableModel.java
   trunk/src/net/sf/plantlore/client/Plantlore.java
   trunk/src/net/sf/plantlore/l10n/Plantlore.properties
   trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
Log:
Removed the look&feel setting - caused problems in Gnome in Fedora Core 5
Added remembering of selected records between pages in Overview.




Modified: trunk/src/net/sf/plantlore/client/OverviewTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-09 22:10:08 UTC (rev 121)
+++ trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-10 19:22:55 UTC (rev 122)
@@ -8,6 +8,8 @@
 package net.sf.plantlore.client;
 
 import java.rmi.RemoteException;
+import java.util.ArrayList;
+import java.util.HashMap;
 import javax.swing.table.AbstractTableModel;
 import net.sf.plantlore.common.PlantloreConstants;
 import net.sf.plantlore.common.record.AuthorOccurrence;
@@ -25,7 +27,7 @@
  */
 public class OverviewTableModel extends AbstractTableModel {
     private Logger logger;
-    private static final int COLUMN_COUNT = 23;
+    private static final int COLUMN_COUNT = 24;
     private DBLayer db;
     private String[] columnNames;
     private int[] columnSizes;
@@ -34,7 +36,27 @@
     private int resultsCount = 0;
     private int pageSize = 30;
     private int currentPage = 1;
+    private ArrayList<Record> recordsArray = new ArrayList<Record>();
+    private HashMap<Integer, Record> resultsMap = new HashMap<Integer, Record>();
     
+    class Record {
+        public Record(int id, boolean selected, int number) {
+            this.id = id;
+            this.selected = selected;
+            this.number = number;
+        }
+        public int id;
+        public boolean selected;
+        public int number;
+        
+        public boolean equals(Object o) {
+            if (!(o instanceof Record))
+                return false;
+            Record r = (Record)o;
+            return r.id == this.id;
+        }
+    }
+    
     private Object[][] data = {
         {true, "Pampeliska", "neznamy", "Praha", new Integer(1995), "phy", "cechy", new Boolean(false), new Integer(10), new Integer(12), new Integer(-5), "","","","","","","","","","","",""},
         {false,"Hermanek", "Jakub", "Zelezny Brod", new Integer(1990), "phy", "cechy", new Boolean(true), new Integer(10), new Integer(12), new Integer(-5), "","","","","","","","","","","",""}
@@ -72,50 +94,52 @@
         columnSizes = new int[COLUMN_COUNT];
         columnNames[0] = L10n.getString("overviewColX");
         columnSizes[0] = 30;
-        columnNames[1] = L10n.getString("overviewColName");
-        columnSizes[1] = 100;
-        columnNames[2] = L10n.getString("overviewColAuthor");
+        columnNames[1] = L10n.getString("overviewColResultNumber");
+        columnSizes[1] = 50;
+        columnNames[2] = L10n.getString("overviewColName");
         columnSizes[2] = 100;
-        columnNames[3] = L10n.getString("overviewColVillage");
+        columnNames[3] = L10n.getString("overviewColAuthor");
         columnSizes[3] = 100;
-        columnNames[4] = L10n.getString("overviewColPlace");
-        columnSizes[4] = 150;
-        columnNames[5] = L10n.getString("overviewColYear");
-        columnSizes[5] = 50;
-        columnNames[6] = L10n.getString("overviewColTerritory");
-        columnSizes[6] = 100;
-        columnNames[7] = L10n.getString("overviewColPhyt");
+        columnNames[4] = L10n.getString("overviewColVillage");
+        columnSizes[4] = 100;
+        columnNames[5] = L10n.getString("overviewColPlace");
+        columnSizes[5] = 150;
+        columnNames[6] = L10n.getString("overviewColYear");
+        columnSizes[6] = 50;
+        columnNames[7] = L10n.getString("overviewColTerritory");
         columnSizes[7] = 100;
-        columnNames[8] = L10n.getString("overviewColPhytCode");
-        columnSizes[8] = 50;
-        columnNames[9] = L10n.getString("overviewColCountry");
-        columnSizes[9] = 100;
-        columnNames[10] = L10n.getString("overviewColQuadrant");
-        columnSizes[10] = 50;
-        columnNames[11] = L10n.getString("overviewColOccNote");
-        columnSizes[11] = 150;
-        columnNames[12] = L10n.getString("overviewColLocNote");
+        columnNames[8] = L10n.getString("overviewColPhyt");
+        columnSizes[8] = 100;
+        columnNames[9] = L10n.getString("overviewColPhytCode");
+        columnSizes[9] = 50;
+        columnNames[10] = L10n.getString("overviewColCountry");
+        columnSizes[10] = 100;
+        columnNames[11] = L10n.getString("overviewColQuadrant");
+        columnSizes[11] = 50;
+        columnNames[12] = L10n.getString("overviewColOccNote");
         columnSizes[12] = 150;
-        columnNames[13] = L10n.getString("overviewColAltitude");
-        columnSizes[13] = 50;
-        columnNames[14] = L10n.getString("overviewColLongitude");
+        columnNames[13] = L10n.getString("overviewColLocNote");
+        columnSizes[13] = 150;
+        columnNames[14] = L10n.getString("overviewColAltitude");
         columnSizes[14] = 50;
-        columnNames[15] = L10n.getString("overviewColLatitude");
+        columnNames[15] = L10n.getString("overviewColLongitude");
         columnSizes[15] = 50;
-        columnNames[16] = L10n.getString("overviewColSource");
-        columnSizes[16] = 100;
-        columnNames[17] = L10n.getString("overviewColPublication");
+        columnNames[16] = L10n.getString("overviewColLatitude");
+        columnSizes[16] = 50;
+        columnNames[17] = L10n.getString("overviewColSource");
         columnSizes[17] = 100;
-        columnNames[18] = L10n.getString("overviewColHerbarium");
-        columnSizes[18] = 80;
-        columnNames[19] = L10n.getString("overviewColMetadata");
-        columnSizes[19] = 100;
-        columnNames[20] = L10n.getString("overviewColMonth");
-        columnSizes[20] = 50;
-        columnNames[21] = L10n.getString("overviewColDay");
+        columnNames[18] = L10n.getString("overviewColPublication");
+        columnSizes[18] = 100;
+        columnNames[19] = L10n.getString("overviewColHerbarium");
+        columnSizes[19] = 80;
+        columnNames[20] = L10n.getString("overviewColMetadata");
+        columnSizes[20] = 100;
+        columnNames[21] = L10n.getString("overviewColMonth");
         columnSizes[21] = 50;
-        columnNames[22] = L10n.getString("overviewColTime");
-        columnSizes[22] = 100;
+        columnNames[22] = L10n.getString("overviewColDay");
+        columnSizes[22] = 50;
+        columnNames[23] = L10n.getString("overviewColTime");
+        columnSizes[23] = 100;
     }
     
     /**
@@ -139,30 +163,37 @@
         for (int i = 1; i <= to - from + 1 ; i++) {
             resultObj = (Object[])records[i-1];
             result = (AuthorOccurrence)resultObj[0];
+            Record r = new Record(result.getId(), false, from + i - 1);
+            if (!recordsArray.contains(r))
+                recordsArray.add(r);
+            else 
+                r = recordsArray.get(from+i-2);
+                
             row = new Object[COLUMN_COUNT];
-            row[0] = false;
-            row[1] = result.getOccurrence().getPlant().getTaxon();
-            row[2] = result.getAuthor().getWholeName();
-            row[3] = result.getOccurrence().getHabitat().getNearestVillage().getName();
-            row[4] = result.getOccurrence().getHabitat().getDescription();
-            row[5] = result.getOccurrence().getYearCollected();
-            row[6] = result.getOccurrence().getHabitat().getTerritory().getName();
-            row[7] = result.getOccurrence().getHabitat().getPhytochorion().getName();
-            row[8] = result.getOccurrence().getHabitat().getPhytochorion().getCode();
-            row[9] = result.getOccurrence().getHabitat().getCountry();
-            row[10] = result.getOccurrence().getHabitat().getQuadrant();
-            row[11] = result.getOccurrence().getNote();
-            row[12] = result.getOccurrence().getHabitat().getNote();
-            row[13] = result.getOccurrence().getHabitat().getAltitude();
-            row[14] = result.getOccurrence().getHabitat().getLongitude();
-            row[15] = result.getOccurrence().getHabitat().getLatitude();
-            row[16] = result.getOccurrence().getDataSource();
-            row[17] = result.getOccurrence().getPublication().getCollectionName();
-            row[18] = result.getOccurrence().getHerbarium();
-            row[19] = result.getOccurrence().getMetadata().getDataSetTitle();
-            row[20] = result.getOccurrence().getMonthCollected();
-            row[21] = result.getOccurrence().getDayCollected();
-            row[22] = result.getOccurrence().getTimeCollected();
+            row[0] = r.selected;
+            row[1] = r.number;
+            row[2] = result.getOccurrence().getPlant().getTaxon();
+            row[3] = result.getAuthor().getWholeName();
+            row[4] = result.getOccurrence().getHabitat().getNearestVillage().getName();
+            row[5] = result.getOccurrence().getHabitat().getDescription();
+            row[6] = result.getOccurrence().getYearCollected();
+            row[7] = result.getOccurrence().getHabitat().getTerritory().getName();
+            row[8] = result.getOccurrence().getHabitat().getPhytochorion().getName();
+            row[9] = result.getOccurrence().getHabitat().getPhytochorion().getCode();
+            row[10] = result.getOccurrence().getHabitat().getCountry();
+            row[11] = result.getOccurrence().getHabitat().getQuadrant();
+            row[12] = result.getOccurrence().getNote();
+            row[13] = result.getOccurrence().getHabitat().getNote();
+            row[14] = result.getOccurrence().getHabitat().getAltitude();
+            row[15] = result.getOccurrence().getHabitat().getLongitude();
+            row[16] = result.getOccurrence().getHabitat().getLatitude();
+            row[17] = result.getOccurrence().getDataSource();
+            row[18] = result.getOccurrence().getPublication().getCollectionName();
+            row[19] = result.getOccurrence().getHerbarium();
+            row[20] = result.getOccurrence().getMetadata().getDataSetTitle();
+            row[21] = result.getOccurrence().getMonthCollected();
+            row[22] = result.getOccurrence().getDayCollected();
+            row[23] = result.getOccurrence().getTimeCollected();
             data[i-1] = row;
         }//i        
     }
@@ -205,6 +236,9 @@
     
     public void setValueAt(Object value, int row, int column) {
         data[row][column] = value;
+        if (column == 0)
+            //displayed number of record starts from 1 --> we have to subtract 1 coz ArrayList is indexed from 0
+            recordsArray.get((Integer)data[row][1]-1).selected = (Boolean)value;
         //repaint view - with new value
         this.fireTableCellUpdated(row, column);
     }

Modified: trunk/src/net/sf/plantlore/client/Plantlore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/Plantlore.java	2006-04-09 22:10:08 UTC (rev 121)
+++ trunk/src/net/sf/plantlore/client/Plantlore.java	2006-04-10 19:22:55 UTC (rev 122)
@@ -62,7 +62,7 @@
     public static void main(String[] args) {
         
         // Set beautiful system look & feel.
-        try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } catch (Exception e) { JFrame.setDefaultLookAndFeelDecorated(true); }
+        //try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } catch (Exception e) { JFrame.setDefaultLookAndFeelDecorated(true); }
         
         
         //BasicConfigurator.configure();

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-09 22:10:08 UTC (rev 121)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-10 19:22:55 UTC (rev 122)
@@ -49,6 +49,7 @@
 invertSelectedTT=Inverts the selection
 
 overviewColX = X
+overviewColResultNumber = Result number
 overviewColName = Name
 overviewColAuthor = Author
 overviewColVillage = Nearest village

Modified: trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-09 22:10:08 UTC (rev 121)
+++ trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-10 19:22:55 UTC (rev 122)
@@ -90,7 +90,7 @@
         //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Temp/plantloreHIBdata.fdb");
         //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Kovo/DatabaseTest/database/plantlore.fdb");
         //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:/mnt/data/temp/plantloreHIBdata.fdb");
-        cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:natalka.kolej.mff.cuni.cz/3050:/mnt/data/temp/plantloreHIBdata.fdb");
+        cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:/data/plantloreHIBdata.fdb");
         //cfg.setProperty("hibernate.connection.url", "jdbc:postgresql://localhost:5432/plantlore");
         cfg.setProperty("hibernate.connection.username", "sysdba");
         cfg.setProperty("hibernate.connection.password", "masterkey");        



From jakubkotowski at gmx.net  Mon Apr 10 21:40:52 2006
From: jakubkotowski at gmx.net (Jakub Kotowski)
Date: Mon, 10 Apr 2006 21:40:52 +0200
Subject: [Plantlore-dev] plantlore
Message-ID: <200604102140.52629.jakubkotowski@gmx.net>

Dobry den,

chtel bych se zeptat, jestli uz jste na navrhu zacal pracovat a pripadne v 
jakem stavu je. Potrebujeme mit prehled :)

Diky,

Jakub Kotowski


From Lada at berlios.de  Mon Apr 10 22:04:07 2006
From: Lada at berlios.de (Lada at berlios.de)
Date: Mon, 10 Apr 2006 22:04:07 +0200
Subject: [Plantlore-dev] r123 - trunk/src/net/sf/plantlore/client/history
Message-ID: <200604102004.k3AK47pq008200@sheep.berlios.de>

Author: Lada
Date: 2006-04-10 22:04:03 +0200 (Mon, 10 Apr 2006)
New Revision: 123

Modified:
   trunk/src/net/sf/plantlore/client/history/History.java
   trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
   trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java
   trunk/src/net/sf/plantlore/client/history/HistoryView.java
Log:
Update History - clever marking, overwrite function for Undo + finish programing Undo.

Modified: trunk/src/net/sf/plantlore/client/history/History.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/History.java	2006-04-10 19:22:55 UTC (rev 122)
+++ trunk/src/net/sf/plantlore/client/history/History.java	2006-04-10 20:04:03 UTC (rev 123)
@@ -4,10 +4,16 @@
 package net.sf.plantlore.client.history;
 
 import java.rmi.RemoteException;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.HashSet;
 import java.util.Hashtable;
 import java.util.Observable;
+import java.util.Set;
 
 import net.sf.plantlore.l10n.L10n;
 import net.sf.plantlore.middleware.DBLayer;
@@ -43,7 +49,7 @@
     /** Instance of a database management object */
     private DBLayer database;   
     /** Constant with default number of rows to display */
-    private static final int DEFAULT_DISPLAY_ROWS = 2;    
+    private static final int DEFAULT_DISPLAY_ROWS = 6;    
     /** Actual number of rows to display */
     private int displayRows = DEFAULT_DISPLAY_ROWS;   
     /** Index of the first record shown in the table */
@@ -54,12 +60,23 @@
     //*******Informations about searching Result from database*****//
     /** Result of the search query */
     private int resultId = 0;
-    /** Data (results of a search query) displayed in the table */
-    private Object[][] editHistoryData;
     /** List of data (results of a search query) displayed in the table */
-    private ArrayList<HistoryRecord> editHistoryDataList;
+    private ArrayList<HistoryRecord> editHistoryDataList = new ArrayList();    
+    //seznam id vsech oznacenych polozek
+    private HashSet markListId = new HashSet();
+    //Seznam Item + maxIdItem (nejstarsi oznacene id pro dany Item=sloupec)
+    private ArrayList<Object[]> markItem = new ArrayList();
+    //Informuje o tom, zda byla zvolena volba "SelectAll"
+    private boolean selectAll;
+    //Informuje o tom zda exituje pro dany nalez vazba 1:1 mezi tabulkami tHabitats a tOccurrences
+    private boolean relationship;
+    //Informuje o tom zda doslo k editaci polozky z tabulky tHabitat
+    private boolean editHabitat;
+    //zprava pro uzivatele
+    private String messageUndo;
    
-    //********************* ***************************************//    
+    
+    //*********************Record of history ***************************************//    
     private Occurrence occurrence;
 	private HistoryRecord historyRecord;
 	private HistoryChange historyChange;
@@ -76,7 +93,7 @@
 	/**Unique value identified record before changed */
 	private int oldRecordId;
 	/** Operation whitch was used*/   
-	private String operation;
+	private int operation;
 	/** Date and time when the reccord was changed*/
 	private java.util.Date when = new Date();	
 	/** Old value of attribute*/    
@@ -85,7 +102,7 @@
 	private String newValue;
    /** Name of user who did changed*/
 	private String nameUser;
-
+	
 	//**************Informations about occurrences***************//
 	/** Name of plant for specified occurrenc*/
 	private String namePlant;
@@ -96,9 +113,9 @@
 	
 	 //********************************************************//
 	 /** Mapping of entities */
-     private Hashtable<String, Integer> publicationHash;
-     private Hashtable<String, Integer> habitatHash;
-     private Hashtable<String, Integer> occurrenceHash;  
+	private Hashtable<String, Integer> publicationHash;
+	private Hashtable<String, Integer> habitatHash;
+	private Hashtable<String, Integer> occurrenceHash;  
     
     /**  
      *  Creates a new instance of History 
@@ -110,7 +127,7 @@
     public History(DBLayer database, String namePlant, String nameAuthor, String location, int idOcc)
     {
        logger = Logger.getLogger(this.getClass().getPackage().getName());	 
-       this.database = database;	
+       this.database = database;       
        
  /*
   *  v konstruktoru se bude predavat reference na OCCURRENCE pro ktery je vyvolana
@@ -173,7 +190,8 @@
  *     ...musit to byt retezec autoru - muze jich byt vice
  *     ...v historii se editace autoru zaznamenavat nebude 
  */       
-              	   
+        
+       
        //Searching for information about data entries concerned with specified occurrence
        searchInsertInfo();
 	   //Searching for information about data editing concerned with specified occurrence
@@ -183,8 +201,7 @@
     }	
 
     /**
-     *  Searches for information about data entries concerned with specified occurrence.
-     *  @param idOccurrence Unique value identified occurrence
+     *  Searches for information about data entries concerned with specified occurrence.   
      */
     public void searchInsertInfo() {
             
@@ -204,13 +221,11 @@
            resultIdInsert = database.executeQuery(query);        
        } catch (DBLayerException e) {
            // Log and set an error                   
-           logger.error("Searching history (inserting) failed. Unable to execute search query.");
-           //setError(e);
-           // setError("Searching history failed. Please contact your administrator.");
+           logger.error("Searching history data with condition 'operation = insert' failed. Unable to execute search query.");          
        } catch (RemoteException e) {		 
     	   System.err.println("RemoteException- searchInsertInfo(), executeQuery");
 	} finally {
-    	   logger.debug("Searching history (inserting) ends successfully");
+    	   logger.debug("Searching history data with condition 'operation = insert' ends successfully");
            // Save "insert" history data
            setInsertResult(resultIdInsert);                    
        }              
@@ -218,8 +233,7 @@
     
     
     /**     
-     * Searches for information about data editing concerned with specified occurrence.
-     * @param idOccurrence Unique value identified occurrence
+     * Searches for information about data editing concerned with specified occurrence. 
      */
      
     public void searchEditHistory()
@@ -236,8 +250,8 @@
 		}
         // Create aliases for table tHistoryChange.      
         query.createAlias("historyChange", "hc");        
-        // Add restriction to CUNITVALUE column of tOccurence table
-        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.operation", null, HistoryChange.HISTORYCHANGE_EDIT, null);
+        // Add restriction to COPERATION column of tJistoryChange table
+        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.operation", null, HistoryChange.HISTORYCHANGE_EDIT, null);        
         query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.occurrence", null, occurrence, null);    	
         query.addOrder(PlantloreConstants.DIRECT_DESC, "hc.when");        
     	
@@ -247,19 +261,16 @@
             resultIdEdit = database.executeQuery(query);        
         } catch (DBLayerException e) {
             // Log and set an error                   
-            logger.error("Searching history (editing) failed. Unable to execute search query.");
-            //setError(e);
-            // setError("Searching history failed. Please contact your administrator.");
+            logger.error("Searching history data with condition 'operation = edit' failed. Unable to execute search query.");           
         } catch (RemoteException e) { 		   
-     	   System.err.println("RemoteException- searchInsertInfo(), executeQuery");
+     	   System.err.println("RemoteException- searchEditHistory(), executeQuery");
 	 	} finally {
-	 		logger.debug("Searching history (editing) ends successfully");
+	 		logger.debug("Searching history data with condition 'operation = edit' ends successfully");
         	// Save "edit" history data
             setEditResult(resultIdEdit);                  
 	 	}              
     }
     
-
     
     /**     
      * Sets information about data (date, name of user) entries concerned with specified occurrence 
@@ -267,9 +278,8 @@
      */
     public void setInsertResult(int resultIdInsert) {
    	    	
-    	if (getResultRows() > 1) {
-    		// Log an error                   
-            logger.error("Too many results for inserting query.");  
+    	if (getResultRows() > 1) {                
+            logger.error("Too many results for searching insert operation.");  
     	}
             	
     	logger.debug("Retrieving query results."); 
@@ -278,26 +288,21 @@
         	 // Retrieve selected row interval         	
          	try {
          		objectHistory = database.more(resultIdInsert, 1, 1);  
-         	} catch(RemoteException e) {
-             	System.err.println("RemoteException- setInsertResult, more");
+         	} catch(RemoteException e) {             	
              	logger.debug("RemoteException- setInsertResult, more");
              	return;
              }   
          	Object[] objHis = (Object[])objectHistory[0]; 
-         	//setWhen(((HistoryChange)objHis[0]).getWhen());
-         	//setNameUser(((HistoryChange)objHis[0]).getWho().getWholeName());
-         	
-            this.when = ((HistoryChange)objHis[0]).getWhen();
-            this.nameUser = ((HistoryChange)objHis[0]).getWho().getWholeName();
-           
-        } catch (DBLayerException e) {
-            // Log and set error in case of an exception
+         	setWhen(((HistoryChange)objHis[0]).getWhen());
+         	setNameUser(((HistoryChange)objHis[0]).getWho().getWholeName());         	
+        } catch (DBLayerException e) {         
             logger.error("Processing search (inserting) results failed: "+e.toString());            
         } finally { 
-        	logger.debug("Sets 'insert' data ends successfully. When= " + this.when + " ");        	
+        	logger.debug("Sets 'insert' data ends successfully.");        	
         }        
     }
     
+    
     /**
      * Process results of a search query. Retrieves results using the database management object (DBLayer) and stores them in the data field of the class. 
      * @param fromTable number of the first row to show in table. Number of the first row to retraieve is 1.
@@ -312,11 +317,13 @@
            
             // Find out how many rows we can retrieve - it cannot be more than number of rows in the result
             int to = Math.min(currentRow, fromTable+count-1);           
-            if (to == 0) {
-                this.editHistoryDataList = new ArrayList<HistoryRecord>();                
+            if (to <= 0) {
+            	editHistoryDataList = new ArrayList<HistoryRecord>(); 
+            	setDisplayRows(0);
+            	setCurrentDisplayRows("0-0");
             } else {
                 logger.debug("Retrieving query results: 1 - "+to);
-                setCurrentDisplayRow(fromTable+ "-" + to);
+                setCurrentDisplayRows(fromTable+ "-" + to);
                 try {                	 
                      // Retrieve selected row interval 
                 	Object[] objectHistory;
@@ -336,8 +343,7 @@
 						Object[] objHis = (Object[])objectHistory[i];
                         this.editHistoryDataList.add((HistoryRecord)objHis[0]);
                     }                     
-                } catch (DBLayerException e) {
-                    // Log an error in case of an exception
+                } catch (DBLayerException e) {                  
                     logger.error("Processing search results failed: "+e.toString());            
                 } finally { 
                 	logger.debug("Sets 'edit' data ends successfully");
@@ -347,77 +353,14 @@
             }
         }         
     }
-    
+       
+
     /**
-     * z db vzdy ziskame vysledek od 1 do "to" - tato funkce nacte data pro zobrazeni 
-     * ve view (data, ktere v dane chvili uvidi uzivatel).  
-     * @return Object[][] with data values for displaying in the table
-     */
-    public Object[][] getData() {
-    	    	
-    	int countResult = editHistoryDataList.size();
-    	int firstRow = getCurrentFirstRow();
-    	int countRow = countResult - firstRow + 1;
-    	int ii = 0;    	
-        editHistoryData = new Object[countRow][6];
-    	for (int i=firstRow-1; i < countResult; i++) {    		
-    		editHistoryData[ii][0] = new Boolean(false);    		
-    	    editHistoryData[ii][1] = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getWhen();
-    	    editHistoryData[ii][2] = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getWho().getWholeName();    	   
-    	    editHistoryData[ii][3] = L10n.getString((((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getColumnName()));
-    	    editHistoryData[ii][4] = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
-    	    editHistoryData[ii][5] = ((HistoryRecord)editHistoryDataList.get(i)).getNewValue();
-    	    ii++;
-    	}  
-    	return this.editHistoryData;
-    	
-    }    
-    
-  
-    /**
      * 
      * @param id
      * @return
      */
-    public int searchHistoryChangeId(int id){
-    	SelectQuery query = null;
-        try {
-        	    query = database.createQuery(HistoryRecord.class);
-        } catch(RemoteException e) {
-        	    System.err.println("RemoteException- searchHistoryChangeId(), createQuery");       	  
-        }                    
-        // Create aliases for table tHistoryChange.      
-        query.createAlias("historyChange", "hc");        
-        // Add restriction to CUNITVALUE column of tOccurence table
-        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.id", null, id , null);
-        
-        int resultIdChange = 0;
-        try {                   
-        	resultIdChange = database.executeQuery(query);        
-        } catch (DBLayerException e) {                   
-            logger.error("Searching historyChangeId failed. Unable to execute search query.");
-        } catch (RemoteException e) {		 
-     	   System.err.println("RemoteException- searchHistoryChangeId(), executeQuery");
- 	    } finally {
-     	   logger.debug("Searching historyChangeId ends successfully.");
-        }         
- 	    
- 	    int countResult = 100;
- 	    try {
-			countResult = database.getNumRows(resultIdChange);
-			logger.debug("SearchHistoryChangeId - Number of result: "+countResult);
-		} catch (RemoteException e) {
-			System.err.println("RemoteException- searchHistoryChangeId(), getNumRows");
-		}		
-		return countResult;
-    }
-    
-    /**
-     * 
-     * @param id
-     * @return
-     */
-    public Object[] searchObject(String typeObject, int id, String oldRecordValue) { 
+    public Object[] searchObject(String typeObject, int id) { 
     	
     	SelectQuery query = null;
     	if (typeObject.equals("Habitat")){
@@ -433,35 +376,35 @@
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject() - Plant, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Plant.TAXON, null, oldRecordValue , null);
-    	}else if (typeObject.equals("Village")){
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Plant.ID, null, id , null);
+    	} else if (typeObject.equals("Publication")){
     		try {
+            	query = database.createQuery(Publication.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject() - Publication, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Publication.ID, null, id , null);
+    	} else if (typeObject.equals("Village")){
+    		try {
             	query = database.createQuery(Village.class);	        		        	    
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject()- Village, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Village.NAME, null, oldRecordValue, null);
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Village.ID, null, id, null);
     	}  else if  (typeObject.equals("Territory")){
     		try {
             	query = database.createQuery(Territory.class);	        		        	    
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject()- Territory, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Territory.NAME, null, oldRecordValue , null); 
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Territory.ID, null, id , null); 
     	} else if (typeObject.equals("Phytochorion")){
     		try {
             	query = database.createQuery(Phytochorion.class);	        		        	    
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject()- Phytochorion, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Phytochorion.NAME, null, oldRecordValue , null);
-    	} else if (typeObject.equals("PhytochorionCode")){
-    		try {
-            	query = database.createQuery(Phytochorion.class);	        		        	    
-            } catch(RemoteException e) {
-            	    System.err.println("RemoteException, searchObject()- Phytochorion code, createQuery");       	  
-            }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Phytochorion.CODE, null, oldRecordValue , null);
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Phytochorion.ID, null, id , null);
     	} else {
     		logger.error("SearchObject() - Incorrect type of object.");
     	}
@@ -495,73 +438,41 @@
        }     	        
     }
     
+ 
     /**
-     * 
-     *
+     * UNDO - funce projde oznacene zaznamy a nastavi stare hodnoty
+     * Pokud dojde zmenou k ovlivneni vice nalezu, tak o tom informuje uzivatele
      */
-    public void deleteHistoryRecords() {
-    	try {
-			database.executeDelete(historyRecord);
-			logger.debug("Deleting historyRecord successfully.");
-		} catch (RemoteException e) {
-			logger.error("Deleting historyRecord - remoteException. "+e.toString());
-		} catch (DBLayerException e) {
-			logger.error("Deleting historyRecord failed. "+e.toString());
-		}
-		int countResult = searchHistoryChangeId(historyRecord.getHistoryChange().getId());
-		if (countResult == 1) {
-			//samzat zaznam z tabulky tHistoryChange - muzeme protoze neexistuji dalsi FK z tHistory.cChngeId
-			try {
-				database.executeDelete(historyChange);
-				logger.debug("Deleting historyChange successfully.");
-			} catch (RemoteException e) {
-				logger.error("Deleting historyChange - remoteException. "+e.toString());
-			} catch (DBLayerException e) {
-				logger.error("Deleting historyChange failed. "+e.toString());
-			}
-		} else {
-			logger.debug("Exist other record in the table tHistory, whitch has the same value of attribute cChangeId.");
-		}
-    }
-    
-    /**
-     * Tato funkce bude menit hodnoty v DB (DELETE v historii, zmena v jakekoliv 
-     * tabulce pro kterou se zaznamenava historie) - UNDO
-     * 
-     * bude volana z CTR po stisku klavesy
-     * jako parametr dostane seznam oznacenych zmen, ktere se maji vratit
-     * 
-     * jde o update database :-)
-     */
-    public void updateOlderChanges(ArrayList markResult)
+    public void updateOlderChanges()
     {    	
     	    	
     	//Inicalization of hashTable
     	initOccurrenceHash();
-    	initHabitatHash();
-    	initPublicationHash();   
-    	    	
-    	//number of selected rows
-    	int countMark = markResult.size();
-    	// Index of firt row currently displayed
-    	int indexFirstRow = getCurrentFirstRow();
-    	//List of changed ITEM
-    	ArrayList<String> changedList = new ArrayList<String>();
-    	//take from older record to younger record
-    	for( int i=countMark-1; i >= 0; i--) {    	
-    		logger.debug("Number of selected row: "+markResult.get(i));
-    		historyRecord = (HistoryRecord)editHistoryDataList.get((Integer)markResult.get(i)+ getCurrentFirstRow()-1);    		
+    	initHabitatHash();    	  
+        	
+    	//number of result
+    	int countResult = getEditResult();
+    	// Pomocne hodnoty pro zjisteni zda zmena ovlivni vice nalezu
+    	relationship = false;
+    	editHabitat = false;
+    	
+    	//take from younger record to older record
+    	for( int i=0; i < countResult; i++) {
+    		if (! markListId.contains(i)) {
+    			continue;
+    		}
+    		
+    		//init history data about edit of record
+    		historyRecord = (HistoryRecord)editHistoryDataList.get(i);    		
     		historyChange = historyRecord.getHistoryChange();
     		tableName = historyRecord.getHistoryColumn().getTableName();
-    		columnName = historyRecord.getHistoryColumn().getColumnName();
-    		// oldRecordId je defautne nastaveno v databazi na hodnotu 0 !!!    			
+    		columnName = historyRecord.getHistoryColumn().getColumnName();    		    			
 			oldRecordId = historyChange.getOldRecordId();
 			recordId = historyChange.getRecordId();
-			occurrenceId = historyChange.getOccurrence().getId();
+			occurrenceId = historyChange.getOccurrence().getId();		   
+			operation = historyChange.getOperation();
 			oldValue = historyRecord.getOldValue();
-			
-			this.editHistoryDataList.remove((Integer)markResult.get(i)+ getCurrentFirstRow()-1);
-			
+						
     		if (tableName.equals("Occurrence")){  
     			if (occurrenceId != recordId){
     				logger.error("Inccorect information in history tables --> occurrenceId != recordId ... Incorrect identifier of Occurrence.");
@@ -574,113 +485,97 @@
     	        } else {
     	             columnConstant = 0;
     	        }        	    			
-    			    			
+    			  
+    			//init Calendar    		
+    			Calendar isoDateTime = new GregorianCalendar();
+    			
     			logger.debug("ColumnConstant: "+ columnConstant);
     			logger.debug("ColumnName: "+ columnName);
     			logger.debug("OldValue: "+ oldValue);    			     			
     			
     			switch (columnConstant) {
 	                case 1: //Taxon  
-	                	//test, zda byla nastavena hodnota pro update pro Taxon 
-	                	// pokud ano, tak se jedna o mladsi zmenu, ktera bude jen smazana z tabulek historie
-	                	if ( ! changedList.contains("taxon") ){
-	                		changedList.add("taxon");		                		
-                			Object[] object = searchObject("Plant",0,"oldValue");
+	                	if (oldRecordId > 0 ) {
+		                	//Select record Plant where id = oldRocordId 
+		                	Object[] object = searchObject("Plant",oldRecordId);
 		                	Plant plant = (Plant)object[0];
+		                	//Set old value to attribute plantID
 		                	occurrence.setPlant(plant);
-		                	logger.debug("Set selected value for update of attribute Taxon.");	                		
-	                	} else {
-	                		logger.debug("Later edit of Taxon. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();	                			                		                			                
+		                	logger.debug("Set selected value for update of attribute Taxon.");	
+		    			}else {
+		    				logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
+		    			}
 	                    break;
 	                case 2: //Year	
-	                	if (! changedList.contains("year")) {
-	                		changedList.add("year");	                		
-		                	occurrence.setYearCollected(Integer.parseInt(oldValue));
-		                	logger.debug("Set selected value for update of attribute Year.");
-		                	//Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
-	                		Date time = occurrence.getTimeCollected();
-	                		Date isoDateTime = new Date();
-	                		isoDateTime.setDate(occurrence.getDayCollected());
-	                		isoDateTime.setMonth(occurrence.getMonthCollected());
-	                		isoDateTime.setYear(Integer.parseInt(oldValue));	                		
-	                		//occurrence.setIsoDateTimeBegin(isoDateTime);
-	                		
-	                	} else {
-	                		logger.debug("Later edit of Year. ");	                		
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();             	
+                	    //Set old value to attribute Year          		
+	                	occurrence.setYearCollected(Integer.parseInt(oldValue));
+	                	logger.debug("Set selected value for update of attribute Year.");
+	                	//Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	                		
+                		isoDateTime.setTime(occurrence.getTimeCollected());
+                		isoDateTime.set(Integer.parseInt(oldValue),occurrence.getMonthCollected(),occurrence.getDayCollected());
+                		occurrence.setIsoDateTimeBegin(isoDateTime.getTime());	                	              	            	
 	                	break;
 	                case 3: //Month 
-	                	if (! changedList.contains("month")) {
-	                		changedList.add("month");	                		
-	                		occurrence.setMonthCollected(Integer.parseInt(oldValue));
-	                		logger.debug("Set selected value for update of attribute Month.");
-	                	} else {
-	                		logger.debug("Later edit of Month. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+	                	// Set old value to attribute Month 
+                		occurrence.setMonthCollected(Integer.parseInt(oldValue));
+                		logger.debug("Set selected value for update of attribute Month.");
+                		// Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
+                		isoDateTime.setTime(occurrence.getTimeCollected());
+                		isoDateTime.set(occurrence.getYearCollected(), Integer.parseInt(oldValue), occurrence.getDayCollected());
+                		occurrence.setIsoDateTimeBegin(isoDateTime.getTime());              		
 	                    break;
 	                case 4: //Day	                	
-	                	if (! changedList.contains("day")) {
-	                		changedList.add("day");	                		
-		                	occurrence.setDayCollected(Integer.parseInt(oldValue));
-		                	logger.debug("Set selected value for update of attribute Day.");
-	                	} else {
-	                		logger.debug("Later edit of Day. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+                		// Set old value to attribute Day            		
+	                	occurrence.setDayCollected(Integer.parseInt(oldValue));
+	                	logger.debug("Set selected value for update of attribute Day.");
+	                	// Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
+	                	isoDateTime.setTime(occurrence.getTimeCollected());
+                		isoDateTime.set(occurrence.getYearCollected(), occurrence.getMonthCollected(), Integer.parseInt(oldValue));
+                		occurrence.setIsoDateTimeBegin(isoDateTime.getTime());
 	                	break;
-	                case 5: //Time 	                	
-	                	if (! changedList.contains("time")) {
-	                		changedList.add("time");
-	                		//hodnota se bude muset rozdelit na hodiny:minuty:sekundy a pak se ulozit pomoci get a set metod pro Date
-		                	//occurrence.setTimeCollected(Integer.parseInt(oldValue));
-	                		logger.debug("Set selected value for update of attribute Time.");
-	                	} else {
-	                		logger.debug("Later edit of Time. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+	                case 5: //Time 	                		                	
+                		// Set old value to attribute Time   
+	                	Date time = new Date();
+	                	SimpleDateFormat df = new SimpleDateFormat( "HH:mm:ss.S" );
+	                	try {
+							time = df.parse( oldValue );
+						} catch (ParseException e) {
+							logger.error("Parse time failed. "+ e);
+						}
+						occurrence.setTimeCollected(time);
+                		logger.debug("Set selected value for update of attribute Time.");
+                		// Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
+	                	isoDateTime.setTime(time);
+                		isoDateTime.set(occurrence.getYearCollected(), occurrence.getMonthCollected(), occurrence.getDayCollected());
+                		occurrence.setIsoDateTimeBegin(isoDateTime.getTime());
 	                    break;
 	                case 6: //Source	                	
-	                	if (! changedList.contains("source")) {
-	                		changedList.add("source");
-		                	occurrence.setDataSource(oldValue);
-		                	logger.debug("Set selected value for update of attribute DataSource.");
-	                	} else {
-	                		logger.debug("Later edit of DataSource. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+	                	// Set old value to attribute Source 
+	                	occurrence.setDataSource(oldValue);
+	                	logger.debug("Set selected value for update of attribute DataSource.");		                	            	
 	                	break;
 	                case 7: //Herbarium
-	                	if (! changedList.contains("hebarium")){
-	                		changedList.add("herbarium");
-	                		occurrence.setHerbarium(oldValue);
-	                		logger.debug("Set selected value for update of attribute Herbarium.");
-	                	} else {
-	                		logger.debug("Later edit of Herbarium. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+	                	// Set old value to attribute Herbarium
+                		occurrence.setHerbarium(oldValue);
+                		logger.debug("Set selected value for update of attribute Herbarium.");	                		          
 	                    break;
 	                case 8: //Note occurrence	
-	                	if (! changedList.contains("noteOccurrence")) {
-	                		changedList.add("noteOccurrence");
-	                		occurrence.setNote(oldValue);
-	                		logger.debug("Set selected value for update of attribute NoteOccurrence.");
-	                	} else {
-	                		logger.debug("Later edit of NoteOccurrence. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+	                	// Set old value to attribute Note occurence	                	
+                		occurrence.setNote(oldValue);
+                		logger.debug("Set selected value for update of attribute NoteOccurrence.");	                		        	
 	                	break;
+	                case 9: //Publication  
+	                	//Select record Publication where id = oldRocordId 
+	                	if (oldRecordId > 0){
+		                	Object[] objectPubl = searchObject("Publication",oldRecordId);
+		                	Publication publication = (Publication)objectPubl[0];
+		                	//Set old value to attribute publicationID
+		                	occurrence.setPublication(publication);
+		                	logger.debug("Set selected value for update of attribute Publication.");
+		    			}else {
+		    				logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
+		    			}
+	                    break;
 	                default:            
 	                    logger.error("No column defined for name "+ columnName);	                   
     			}  	
@@ -689,12 +584,15 @@
     			
     			// Get a specified number of columnName from habitat mapping.
     			int columnConstant;
-    			if (occurrenceHash.containsKey(columnName)) {
-    				 columnConstant = (Integer)occurrenceHash.get(columnName); 
+    			if (habitatHash.containsKey(columnName)) {
+    				 columnConstant = (Integer)habitatHash.get(columnName); 
     	        } else {
     	             columnConstant = 0;
     	        }        	    			
-    			    			
+    			  
+    			//informuje o tom, ze byla editovana tabulka tHabitat 
+    			editHabitat = true;
+    			
     			logger.debug("ColumnConstant: "+ columnConstant);
     			logger.debug("ColumnName: "+ columnName);
     			logger.debug("OldValue: "+ oldValue);  
@@ -702,413 +600,236 @@
     			
     			// Save new value for the column        		
      			switch (columnConstant) {
- 	                case 1:  //Quadrant    
- 	                	if (! changedList.contains("quadrant")) {
-	                		changedList.add("quadrant");
-	                		if (oldRecordId != 0 ){
-		                		/*
-		                		 * Zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-		                		 * Do occurrence.cHabitatId ulozit nacteny objekt Habitat
-		                		 * Zjistit, zda na aktulani objkt Habitat existuji jeste nejake FK z tOccurrence.cHabitatID
-		                		 * pokud neexistuji, tak ho smazem ...Pozor na to,ze smazane zaznamy jsou oznaceny jeko cDelete=1 !!!
-		                		 */
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Qudrant.");
-		                	}else {		                	
-			                	occurrence.getHabitat().setQuadrant(oldValue);
-		                	}
-	                		logger.debug("Set selected value for update of attribute Quadrant.");
-	                	} else {
-	                		logger.debug("Later edit of Quadrant. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();	                	              		               
+ 	                case 1:  //Quadrant     	                	
+                		/* pokud doslo ke zmene vazeb mezi tHabitats a tOccurrences z 1:N na 1:1, tak v tOccurrences.cHabitatId
+                		 * bude jiz vzdy ulozeno id nove insertovany zaznamu do tHabitats a nikdy uz nedojde k jeho zmene, tzn.
+                		 * vazba mezi tabulkami pro dany nalez jiz bude na vzdy 1:1 
+                		 */ 	                		  
+                		occurrence.getHabitat().setQuadrant(oldValue);		                	
+	                	logger.debug("Set selected value for update of attribute Quadrant.");
+	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {
+	                		// existuji dva edity EDIT (ovlivni jeden nalez) a EDITGROUP (ovlivni vice nalezu)
+	                		// potrebujeme zjistit, zda pro dany nalez je vazeba mezi tHabitats a tOccurrences vzdy 1:N
+	                		// nebo zda editaci nalezu vznikla vazvba 1:1
+	                		relationship = true;
+	                	} 	                	
  	                    break;
- 	                case 2: //Place description
- 	                	if (! changedList.contains("description")) {
-	                		changedList.add("description");
-	                		if (oldRecordId != 0 ){
-		                		//Zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Description.");
-		                	}else {		                	
-			                	occurrence.getHabitat().setDescription(oldValue);
-		                	}
-	                		logger.debug("Set selected value for update of attribute Description Habitat.");
-	                	} else {
-	                		logger.debug("Later edit of Description Habitat. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+ 	                case 2: //Place description 	                	 	                			                		 
+                		occurrence.getHabitat().setDescription(oldValue);		                	
+	                	logger.debug("Set selected value for update of attribute Description.");
+	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                		relationship = true;
+	                	} 	              	
  	                	break;
- 	                case 3:  //Country
- 	                	if (! changedList.contains("country")) {
-	                		changedList.add("country");
-	                		if (oldRecordId != 0 ){
-		                		//menou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Country.");
-		                	}else {		                	
-			                	occurrence.getHabitat().setCountry(oldValue);
-		                	}
-	                		logger.debug("Set selected value for update of attribute Country.");
-	                	} else {
-	                		logger.debug("Later edit of Country. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+ 	                case 3:  //Country 	                	 	                			                		 
+                		occurrence.getHabitat().setCountry(oldValue);		                	
+	                	logger.debug("Set selected value for update of attribute Country.");
+	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                		relationship = true;
+	                	} 	
  	                    break;
- 	                case 4: //Altitude
- 	                	if (! changedList.contains("altitude")) {
-	                		changedList.add("altitude");
-	                		if (oldRecordId != 0 ){
-		                		//menou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Altitude.");
-		                	}else {		                	
-			                	occurrence.getHabitat().setAltitude(Double.parseDouble(oldValue));
-		                	}
-	                		logger.debug("Set selected value for update of attribute Altitude.");
-	                	} else {
-	                		logger.debug("Later edit of Altitude. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+ 	                case 4: //Altitude 	                	                			                		 
+                		occurrence.getHabitat().setAltitude(Double.parseDouble(oldValue));		                	
+	                	logger.debug("Set selected value for update of attribute Altitude.");
+	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                		relationship = true;
+	                	} 	
  	                	break;
- 	                case 5:  //Latitude  
- 	                	if (! changedList.contains("latitude")) {
-	                		changedList.add("latitude");
-	                		if (oldRecordId != 0 ){
-		                		//menou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Latitude.");
-		                	}else {		                	
-			                	occurrence.getHabitat().setLatitude(Double.parseDouble(oldValue));
-		                	}
-	                		logger.debug("Set selected value for update of attribute Latitude.");
-	                	} else {
-	                		logger.debug("Later edit of Latitude. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+ 	                case 5:  //Latitude   	                		                			                		  
+                		occurrence.getHabitat().setLatitude(Double.parseDouble(oldValue));		                	
+	                	logger.debug("Set selected value for update of attribute Latitude.");
+	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                		relationship = true;
+	                	} 	
  	                    break;
- 	                case 6: //Longitude
- 	                	if (! changedList.contains("longitude")) {
-	                		changedList.add("longitude");
-	                		if (oldRecordId != 0 ){
-		                		//menou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Longitude.");
-		                	}else {		                	
-			                	occurrence.getHabitat().setLongitude(Double.parseDouble(oldValue));
-		                	}
-	                		logger.debug("Set selected value for update of attribute Longitude.");
-	                	} else {
-	                		logger.debug("Later edit of Longitude. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+ 	                case 6: //Longitude 	                		                			                		
+                		occurrence.getHabitat().setLongitude(Double.parseDouble(oldValue));		                	
+	                	logger.debug("Set selected value for update of attribute Longitude.");
+	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                		relationship = true;
+	                	} 	
  	                	break;
- 	                case 7: //Nearest bigger seat  	
- 	                	if (! changedList.contains("nameVillage")) {
-	                		changedList.add("nameVillage");
-	                		if (oldRecordId != 0 ){
-		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);	   
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Village.");
-		                	}else {		                	
-		                		// Nacteni Village pro nasledny update tHabitat.cNearestVillageId
-	                			Object[] object = searchObject("Village",0,oldValue);
-	                			Village village = (Village) object[0];
-			                	occurrence.getHabitat().setNearestVillage(village);
-			                	logger.debug("Set selected value for update of attribute NearesVillage.");
-		                	}	                		
-	                	} else {
-	                		logger.debug("Later edit of Village. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+ 	                case 7: //Nearest bigger seat   	                	 	                			                		 
+                		//Nacteni Village pro nasledny update tHabitat.cNearestVillageId
+            			if (oldRecordId != 0){
+            				Object[] objectVill = searchObject("Village",oldRecordId);
+                			Village village = (Village)objectVill[0];
+    	                	occurrence.getHabitat().setNearestVillage(village);
+    	                	logger.debug("Set selected value for update of attribute NearesVillage.");
+            			} else {
+            				logger.error("UNDO - Incorrect oldRecordId for Village.");
+            			}
+	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                		relationship = true;
+	                	} 	
  	                    break;
- 	                case 8: //Phytochorion or hytochorion code 	                	
- 	                	if (! changedList.contains("phytochorion")) {
-	                		changedList.add("phytochorion");
-	                		if (oldRecordId != 0 ){
-		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);	 	    
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Phytochorion.");
-		                	}else {		                	
-		                		// Nacteni Phytochorion pro nasledny update tHabitat.cPhytochorionId
-	                			Object[] object = searchObject("Phytochorion",0,oldValue);
-	                			Phytochorion phytochorion = (Phytochorion) object[0];
-			                	occurrence.getHabitat().setPhytochorion(phytochorion);
-			                	logger.debug("Set selected value for update of attribute Phytochorion.");
-		                	}	                		
-	                	} else {
-	                		logger.debug("Later edit of Phytochorion. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
- 	                	break; 	
- 	               case 9: //Phytochorion code	                	
-	                	if (! changedList.contains("phytochorionCode")) {
-	                		changedList.add("phytochorionCode");
-	                		if (oldRecordId != 0 ){
-		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);	 	   
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute PhytochorionCode.");
-		                	}else {		                	
-		                		// Nacteni Phytochorion pro nasledny update tHabitat.cPhytochorionId
-	                			Object[] object = searchObject("PhytochorionCode",0,oldValue);
-	                			Phytochorion phytochorion = (Phytochorion) object[0];
-			                	occurrence.getHabitat().setPhytochorion(phytochorion);
-			                	logger.debug("Set selected value for update of attribute Phytochorion code.");
-		                	}	                		
-	                	} else {
-	                		logger.debug("Later edit of Phytochorion code. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
-	                	break; 	     
-	                case 10:  //Territory        
-	                	if (! changedList.contains("nameTerritory")) {
-	                		changedList.add("nameTerritory");
-	                		if (oldRecordId != 0 ){
-		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);	 	
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute Territory.");
-		                	}else {		                	
-		                		// Nacteni Territory pro nasledny update tHabitat.cTerritory
-	                			Object[] object = searchObject("Territory",0,oldValue);
-	                			Territory territory = (Territory) object[0];
-			                	occurrence.getHabitat().setTerritory(territory);
-			                	logger.debug("Set selected value for update of attribute Territory.");
-		                	}	                		
-	                	} else {
-	                		logger.debug("Later edit of Territory. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+ 	                case 8: //Phytochorion or phytochorion code 	                	             			                		 
+                		// Nacteni Phytochorion pro nasledny update tHabitat.cPhytochorionId
+ 	                	if (oldRecordId != 0){
+	            			Object[] objectPhyt = searchObject("Phytochorion",oldRecordId);
+	            			Phytochorion phytochorion = (Phytochorion)objectPhyt[0];
+		                	occurrence.getHabitat().setPhytochorion(phytochorion);
+		                	logger.debug("Set selected value for update of attribute Phytochorion.");
+ 	                	}else {
+            				logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
+            			}
+	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                		relationship = true;
+	                	} 	
+ 	                    break; 	               
+	                case 9:  //Territory   	                	                			                		  
+                		// Nacteni Territory pro nasledny update tHabitat.cTerritory
+	                	if (oldRecordId != 0){
+	            			Object[] objectTerr = searchObject("Territory",oldRecordId);
+	            			Territory territory = (Territory)objectTerr[0];
+		                	occurrence.getHabitat().setTerritory(territory);
+		                	logger.debug("Set selected value for update of attribute Territory.");
+	                	}else {
+            				logger.error("UNDO - Incorrect oldRecordId for Territory.");
+            			}	
+	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                		relationship = true;
+	                	} 	        	
 	                    break;
-	                case 11: //Note habitat
-	                	if (! changedList.contains("noteHabitat")) {
-	                		changedList.add("noteHabitat");
-	                		if (oldRecordId != 0 ){
-		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute NoteHabitat");
-		                	}else {		                	
-			                	occurrence.getHabitat().setNote(oldValue);
-		                	}
-	                		logger.debug("Set selected value for update of attribute NoteHabitat.");
-	                	} else {
-	                		logger.debug("Later edit of NoteHabitat. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
+	                case 10: //Note habitat	                		                			                		  
+                		occurrence.getHabitat().setNote(oldValue);		                	
+	                	logger.debug("Set selected value for update of attribute Note.");
+	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                		relationship = true;
+	                	} 	
 	                	break;
  	                default:            
  	                    logger.error("No column defined for name "+ columnName);	                   
-     			}  	
-    		} else if (tableName.equals("Publication")){
-    			
-    			// Get a specified number of columnName from publication mapping.
-    			int columnConstant;
-    			if (occurrenceHash.containsKey(columnName)) {
-    				 columnConstant = (Integer)occurrenceHash.get(columnName); 
-    	        } else {
-    	             columnConstant = 0;
-    	        }        	    			
-    			    			
-    			logger.debug("ColumnConstant: "+ columnConstant);
-    			logger.debug("ColumnName: "+ columnName);
-    			logger.debug("OldValue: "+ oldValue);  
-    			 			
-    			
-    			// Save new value for the column    			         		
-    			switch (columnConstant) {
-	                case 1: //Collection Name   
-	                	if (! changedList.contains("collectionName")) {
-	                		changedList.add("collectionName");
-	                		if (oldRecordId != 0 ){
-		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute CollectionName.");
-		                	}else {		                	
-			                	occurrence.getPublication().setCollectionName(oldValue);
-			                	//Update atribute isoDataTimeBegin (CollectionName + CollectionYearPublication + JournalName + JournalAuthor)
-			                	Integer publicationYear = occurrence.getPublication().getCollectionYearPublication();
-			                	String journalName = occurrence.getPublication().getJournalName();
-			                	String journalAuthor = occurrence.getPublication().getJournalAuthorName();
-			                	occurrence.getPublication().setReferenceCitation(oldValue+" "+publicationYear+" "+journalName+" "+journalAuthor);
-		                	}
-	                		logger.debug("Set selected value for update of attribute CollectionName .");
-	                	} else {
-	                		logger.debug("Later edit of CollectionName . ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
-	                    break;
-	                case 2: //Year of publication
-	                	if (! changedList.contains("colletionYearPublication")) {
-	                		changedList.add("colletionYearPublication");
-	                		if (oldRecordId != 0 ){
-		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute CollectionYearPublication.");
-		                	}else {		                	
-			                	occurrence.getPublication().setCollectionYearPublication(Integer.parseInt(oldValue));
-			                	//Update atribute isoDataTimeBegin (CollectionName + CollectionYearPublication + JournalName + JournalAuthor)
-			                	String collectionName = occurrence.getPublication().getCollectionName();			                	
-			                	String journalName = occurrence.getPublication().getJournalName();
-			                	String journalAuthor = occurrence.getPublication().getJournalAuthorName();
-			                	occurrence.getPublication().setReferenceCitation(collectionName+" "+oldValue+" "+journalName+" "+journalAuthor);
-		                	}
-	                		logger.debug("Set selected value for update of Year of publication .");
-	                	} else {
-	                		logger.debug("Later edit of Year of publication. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
-	                	break;
-	                case 3: //Journal  
-	                	if (! changedList.contains("journalName")) {
-	                		changedList.add("journalName");
-	                		if (oldRecordId != 0 ){
-		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute JournalName.");
-		                	}else {		                	
-			                	occurrence.getPublication().setJournalName(oldValue);
-			                	// Update atribute isoDataTimeBegin (CollectionName + CollectionYearPublication + JournalName + JournalAuthor)			                	
-			                	String collectionName = occurrence.getPublication().getCollectionName();
-			                	Integer publicationYear = occurrence.getPublication().getCollectionYearPublication();			                	
-			                	String journalAuthor = occurrence.getPublication().getJournalAuthorName();
-			                	occurrence.getPublication().setReferenceCitation(collectionName+" "+publicationYear+" "+oldValue+" "+journalAuthor);
-		                	}
-	                		logger.debug("Set selected value for update of attribute JournalName .");
-	                	} else {
-	                		logger.debug("Later edit of JournalName . ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
-	                    break;
-	                case 4: //Author of journal
-	                	if (! changedList.contains("journalAuthor")) {
-	                		changedList.add("journalAuthor");
-	                		if (oldRecordId != 0 ){
-		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute JournalAuthor.");
-		                	}else {		                	
-			                	occurrence.getPublication().setJournalAuthorName(oldValue);
-			                	//Update atribute isoDataTimeBegin (CollectionName + CollectionYearPublication + JournalName + JournalAuthor)			                	
-			                	String collectionName = occurrence.getPublication().getCollectionName();
-			                	Integer publicationYear = occurrence.getPublication().getCollectionYearPublication();
-			                	String journalName = occurrence.getPublication().getJournalName();			                	
-			                	occurrence.getPublication().setReferenceCitation(collectionName+" "+publicationYear+" "+journalName+" "+oldValue);
-		                	}
-	                		logger.debug("Set selected value for update of attribute JournalAuthor .");
-	                	} else {
-	                		logger.debug("Later edit of JournalAuthor. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
-	                	break;	                
-	                case 5: //Reference detail
-	                	if (! changedList.contains("referenceDetail")) {
-	                		changedList.add("referenceDetail");
-	                		if (oldRecordId != 0 ){
-		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute ReferenceDetail.");
-		                	}else {		                	
-			                	occurrence.getPublication().setReferenceDetail(oldValue);
-		                	}
-	                		logger.debug("Set selected value for update of attribute ReferenceDetail.");
-	                	} else {
-	                		logger.debug("Later edit of ReferenceDetail. ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
-	                	break;
-	                case 6: //URL    
-	                	if (! changedList.contains("url")) {
-	                		changedList.add("url");
-	                		if (oldRecordId != 0 ){
-		                		//zmenou polozky doslo k insertu a prenastaveni occurrence.cHabitatId --> nutno nacist a ulozitHabitat s id = oldRecordId
-	                			Object[] object = searchObject("Habitat",oldRecordId,"");
-	                			Habitat habitatOld = (Habitat) object[0];
-			                	occurrence.setHabitat(habitatOld);
-			                	logger.debug("Change tOccurrence.cHabitatId. The change was created by attribute URLpublication.");
-		                	}else {		                	
-			                	occurrence.getPublication().setUrl(oldValue);
-		                	}
-	                		logger.debug("Set selected value for update of attribute URL (publication).");
-	                	} else {
-	                		logger.debug("Later edit of ReferenceDetail (publication). ");
-	                	}
-	                	//Delete record from tHistory and tHistoryChange
-	                	deleteHistoryRecords();
-	                    break;	                
-	                default:            
-	                    logger.error("No column defined for name "+ columnName);	                   
-    			}  	
+     			}  	    		
     		} else {
     			logger.equals("No table defined");
-    		}    			
-    		
+    		}    			    		
     	}
+ 
+    	//informovat uzivatele, co bude provedeno (viz seznam markLIstId, markItem) a dat mu volbu, zda ano ci ne... zde je nutne, aby fungovalo spravne 
+    	//executeUpdate, aby k update doslo az po jeho zavolani....!!!!
+    	//zavolat delete na vsechny vracene polozky Historiie - projit seznam s ID
+    	//v tabulce tOccurrences by se meli aktualizovat polozky cUpdateWhen a cUpdatewho na uzivatele a cas, ktery zavolal undo
+    	//zavolat znovu dotaz do db, aby se aktualizovaly vysledky ... createQuery, atd.
     	
-    	//projdem vysledky od 0 do zobrazeneho vysledku
-    	//pokud je tu informace o editaci polozky, ktere byla vracena starsi hodnota, tak se tato informace smaze 
-    	for( int i=0; i<indexFirstRow-1; i++) {
-    		String columnName = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getColumnName();
-    		if (changedList.contains(columnName)){
-    			
-    		}
-    			
+    	//vygenerovani zpravy pro uzivatele    	
+    	generateMessageUndo();
+    }
+    
+    public void generateMessageUndo() {    	
+    	messageUndo = "Budou provedeny n?sleduj?c? zm?ny:\n";
+    	int count = markItem.size();
+    	for (int i=0; i<count; i++) {
+    		Object[] itemList = (Object[])(markItem.get(i));
+    		String item = (String)itemList[0];
+    		Integer maxId = (Integer)itemList[1];      		
+    		oldValue = ((HistoryRecord)editHistoryDataList.get(maxId)).getOldValue(); 
+    		messageUndo = messageUndo + item + " --> " + oldValue + "\n";
     	}
+    	if (!relationship && editHabitat) {
+    		logger.debug(relationship);
+    		logger.debug(editHabitat);
+    		messageUndo = "\n" + messageUndo + "Tyto zm?ny ovlivn? v?ce n?lez?.\n";
+    	}
+    }
+    
+    public void commitUpdate() {
+    	try {
+			database.executeUpdate(occurrence);
+		} catch (RemoteException e) {
+			logger.error("CommitUpdate - RemoteException: "+e.toString());
+		} catch (DBLayerException e) {
+			logger.error("CommitUpdate - DBLayerException: "+e.toString());
+		}
+    }
+  
+    /**
+     * Projde oznacene zaznamy a postupne je smaze z tabulek historie.
+     * Pri mazani z tabulky tHistoryChange overi, zda na dany zaznam neni vice vazeb.
+     */
+    public void deleteHistoryRecords() {
 
+    	//count of selected record
+    	int count = editHistoryDataList.size();
+    	
+    	//take from younger record to older record
+    	for( int i=0; i < count; i++) {
+    		if (! markListId.contains(i)) {
+    			continue;
+    		}    		    		
+    		historyRecord = (HistoryRecord)editHistoryDataList.get(i);     	  	
+	    	try {
+				database.executeDelete(historyRecord);
+				logger.debug("Deleting historyRecord successfully. Number of result: "+i);
+			} catch (RemoteException e) {
+				logger.error("Deleting historyRecord - remoteException. "+e.toString());
+			} catch (DBLayerException e) {
+				logger.error("Deleting historyRecord failed. "+e.toString());
+			}
+			int countResult = searchHistoryChangeId(i);			
+			if (countResult == 1) {
+				//samzat zaznam z tabulky tHistoryChange - muzeme protoze neexistuji dalsi FK z tHistory.cChngeId
+				try {
+					database.executeDelete(historyChange);
+					logger.debug("Deleting historyChange successfully.");
+				} catch (RemoteException e) {
+					logger.error("Deleting historyChange - remoteException. "+e.toString());
+				} catch (DBLayerException e) {
+					logger.error("Deleting historyChange failed. "+e.toString());
+				}
+			} else {
+				logger.debug("Exist other record in the table tHistory, whitch has the same value of attribute cChangeId.");
+			}
+    	}
+    	//Clear list 
+    	markListId.clear();
+    	markItem.clear();
+    } 
+    
+    /**
+     * Zjisteni kolik zaznamu v tabulce tHistory je provazano s konkretnim zaznamem z tHistoryHange 
+     * @param id
+     * @return
+     */
+    public int searchHistoryChangeId(int id){
+    	HistoryChange historyChange = ((HistoryRecord)editHistoryDataList.get(id)).getHistoryChange();
+    	SelectQuery query = null;
+        try {
+        	    query = database.createQuery(HistoryRecord.class);
+        } catch(RemoteException e) {
+        	    System.err.println("RemoteException- searchHistoryChangeId(), createQuery");       	  
+        }        
+        // Add restriction to cChangeId column 
+        query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryRecord.HISTORYCHANGE, null, historyChange , null);
+        
+        int resultIdChange = 0;
+        try {                   
+        	resultIdChange = database.executeQuery(query);        
+        } catch (DBLayerException e) {                   
+            logger.error("Searching historyChangeId failed. Unable to execute search query.");
+        } catch (RemoteException e) {		 
+     	   System.err.println("RemoteException- searchHistoryChangeId(), executeQuery");
+ 	    } finally {
+     	   logger.debug("Searching historyChangeId ends successfully.");
+        }         
+ 	    
+ 	    int countResult = 100;
+ 	    try {
+			countResult = database.getNumRows(resultIdChange);
+			logger.debug("SearchHistoryChangeId - Number of result: "+countResult);
+		} catch (RemoteException e) {
+			System.err.println("RemoteException- searchHistoryChangeId(), getNumRows");
+		}		
+		return countResult;
     }
     
+    
      //***************************//
     //****Init Hashtable*********//
     //**************************//
     
     private void initOccurrenceHash() {
-        occurrenceHash = new Hashtable<String, Integer>(9); 
+    	occurrenceHash = new Hashtable<String, Integer>(9); 
         occurrenceHash.put("plantId",1);
         occurrenceHash.put("yearCollected",2);
         occurrenceHash.put("monthCollected",3);
@@ -1117,23 +838,12 @@
         occurrenceHash.put("dataSource",6);
         occurrenceHash.put("herbarium",7);        
         occurrenceHash.put("noteOccurrence",8);
-        //isoDataTimeBegin je slozena s Year + Month + Day + Time ... mela by se zmenit vzdy, kdyz
-        // dojde ke zmene nektere z techto polozek ... jak to nejlepe zaridit???
-        //occurrenceHash.put("isoDataTimeBegin",9);
-        /*
-         * Jak se bude chovat cUpdateWhen, cUpdateWho v historii - asi se nastavi 
-         * cas vyvolani undo v historii a uzivatel, ktery to vyvolal
-         */
-        //occurrenceHash.put("cUpdateWhen",10);
-        //occurrenceHash.put("cUpdateWho",11);
-        /*
-         * Uvadet nejakou informaci z metadat - pripadne jakou
-         */
-        //occurrenceHash.put("metadataId",12);
+        occurrenceHash.put("publicationId",9);       
+        //occurrenceHash.put("metadataId",10);
     }    
     
     private void initHabitatHash() {
-        habitatHash = new Hashtable<String, Integer>(11);        
+    	habitatHash = new Hashtable<String, Integer>(11);         
         habitatHash.put("quadrant",1);
         habitatHash.put("description",2);
         habitatHash.put("country",3);
@@ -1142,34 +852,70 @@
         habitatHash.put("longitude",6);      
         habitatHash.put("nameVillage",7);      
         habitatHash.put("namePhytochorion",8);
-        habitatHash.put("code",9);
-        habitatHash.put("nameTerritory",10);
-        habitatHash.put("noteHabitat",11);
-    }
+        habitatHash.put("code",8);
+        habitatHash.put("nameTerritory",9);
+        habitatHash.put("noteHabitat",10);
+    }    
     
-    private void initPublicationHash() {
-        publicationHash = new Hashtable<String, Integer>(7);                       
-        publicationHash.put("collectionName",1);
-        publicationHash.put("colletionYearPublication",2);
-        publicationHash.put("journalName",3);
-        publicationHash.put("journalAuthorName",4);
-        //publicationHash.put("referenceCitation",7);
-        publicationHash.put("referenceDetail",5);
-        publicationHash.put("url",6);
-    }
-    
+   
     //****************************//
     //****Get and set metods*****//
     //**************************//
     
+    /**
+     * @return true if all recorda were selected.
+     */
+    public boolean getSelectAll() {
+		  return this.selectAll;		  
+	   }
+
+    /**
+     * Set information if all records were selected. 
+     * @param selectAll
+     */
+	 public void setSelectAll(boolean selectAll) {
+		  this.selectAll = selectAll;		  
+	 } 
+    
+	 public HashSet getMarkListId() {
+		  return this.markListId;		  
+	   }
+
+	 public void setMarkListId(HashSet markListId) {
+		  this.markListId = markListId;		  
+	 } 
+	 
+    public ArrayList<Object[]> getMarkItem() {
+		  return this.markItem;		  
+	   }
+
+	 public void setMarkItem(ArrayList<Object[]> markItem) {
+		  this.markItem = markItem;		  
+	 } 
+    
+    public ArrayList<HistoryRecord> getEditHistoryDataList() {
+		  return this.editHistoryDataList;		  
+	   }
+
+	 public void setEditHistoryDataList(ArrayList<HistoryRecord> editHistoryDataList) {
+		  this.editHistoryDataList = editHistoryDataList;		  
+	 } 
+    
      public String getCurrentDisplayRows() {
 		  return this.displayRow;		  
 	   }
 
-	 public void setCurrentDisplayRow(String displayRow) {
+	 public void setCurrentDisplayRows(String displayRow) {
 		  this.displayRow = displayRow;		  
 	 } 
      
+     public String getMessageUndo() {
+		  return this.messageUndo;		  
+	   }
+
+	 public void setMessageUndo(String messageUndo) {
+		  this.messageUndo = messageUndo;		  
+	 } 
     
     /**
      *  Set result of a database operation. This is used only for search operations.
@@ -1348,7 +1094,7 @@
 	*   Get operation whitch was used
 	*   @return operation whitch was used
 	*/
-	public String getOperation() {
+	public int getOperation() {
 	  return this.operation;
 	}
 
@@ -1356,7 +1102,7 @@
 	*   Set operation whitch was used
 	*   @param operation string containing operation whitch was used 
 	*/
-	public void setOperation(String operation) {
+	public void setOperation(int operation) {
 	  this.operation = operation;
 	}
 	 

Modified: trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-10 19:22:55 UTC (rev 122)
+++ trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-10 20:04:03 UTC (rev 123)
@@ -97,7 +97,7 @@
                model.processEditResult(firstRow, model.getDisplayRows()); 
                if (model.getCurrentFirstRow() > 1){
                }
-               view.getTable().setModel(new HistoryTableModel(model.getData()));
+               view.getTable().setModel(new HistoryTableModel(model));
                int from = model.getCurrentFirstRow();
                int to = from + view.getTable().getRowCount() - 1;
                view.setCurrentRowsInfo(from + "-" + to);
@@ -117,13 +117,17 @@
            logger.debug("current first row: "+model.getCurrentFirstRow());
            logger.debug("num rows in the result: "+ model.getResultRows());            
            logger.debug("display rows: "+ model.getDisplayRows());
-           logger.debug("num rows in table (view) "+ view.getTable().getRowCount());          
+           logger.debug("num rows in table (view) "+ view.getTable().getRowCount());              
            if (model.getCurrentFirstRow()+ view.getTable().getRowCount()<=model.getResultRows()) {
                model.processEditResult(model.getCurrentFirstRow()+ model.getDisplayRows(), view.getTable().getRowCount());
-               view.getTable().setModel(new HistoryTableModel(model.getData()));  
+               view.getTable().setModel(new HistoryTableModel(model));             
                int from = model.getCurrentFirstRow();
                int to = from + view.getTable().getRowCount() - 1;
-               view.setCurrentRowsInfo(from + "-" + to);
+               if (to <= 0){
+            	   view.setCurrentRowsInfo("0-0");
+               }else {
+            	   view.setCurrentRowsInfo(from + "-" + to);
+               }               
            }                       
        }
    }
@@ -134,13 +138,10 @@
     */
    class selectAllButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent)
-       {
-    	   logger.debug("selectAll");
-    	   int countRow = view.getTable().getRowCount();    	  
-           for (int row=0; row < countRow; row++)
-           {         	     	
-         	  view.getTable().setValueAt(true, row, 0);            	  
-           }       
+       {    	   
+    	   model.setSelectAll(true);
+    	   model.processEditResult(1,model.getResultRows());    	   
+    	   view.getTable().setModel(new HistoryTableModel(model));  
        }
    }
    
@@ -150,13 +151,10 @@
     */
    class unselectAllButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent)
-       {
-    	   logger.debug("unselectAll");
-    	   int countRow = view.getTable().getRowCount();    	   
-           for (int row=0; row < countRow; row++)
-           {        	        	  
-         	  view.getTable().setValueAt(false, row, 0);          	  
-           }           
+       {    
+    	   ArrayList<Object[]> markItem = new ArrayList();    	   
+    	   model.setMarkItem(markItem); 
+    	   view.getTable().setModel(new HistoryTableModel(model));
        }
    }
    
@@ -166,22 +164,32 @@
     */
    class undoSelectedButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent)
-       {
-    	   int countRow = view.getTable().getRowCount(); 
-    	   //list with number of selected rows
-    	   ArrayList markRows = new ArrayList();
-           for (int row=0; row < countRow; row++)
-           {           	  
-         	  if (view.getTable().getValueAt(row, 0).equals(true)) {
-         		 System.out.println("undo "+ row); 
-         		 markRows.add(row);         		          		          		
-         	  }     
-           }
-           model.updateOlderChanges(markRows);  
-           view.getTable().setModel(new HistoryTableModel(model.getData()));
-           int from = model.getCurrentFirstRow();
-           int to = from + view.getTable().getRowCount() - 1;
-           view.setCurrentRowsInfo(from + "-" + to);
+       {    	   
+           model.updateOlderChanges();            
+           int okCancle = view.messageUndo(model.getMessageUndo());
+           logger.debug("button "+okCancle);
+           if (okCancle == 0){
+        	   //Button OK was press
+        	   logger.debug("Button OK was press.");
+        	   model.commitUpdate();
+        	   model.deleteHistoryRecords();
+        	   model.searchEditHistory();
+        	   model.processEditResult(1,model.getDisplayRows());
+        	   view.getTable().setModel(new HistoryTableModel(model));
+        	   int resultRows = model.getResultRows();
+        	   if (resultRows == 0) {
+        		   view.setCurrentRowsInfo("0-0"); 
+        	   } else {
+        		   int from = model.getCurrentFirstRow();
+                   int to = from + view.getTable().getRowCount() - 1;               
+                   view.setCurrentRowsInfo(from + "-" + to);    
+        	   }               
+               view.setCountResutl(resultRows);
+           } else {
+        	   //Button Cancle was press
+        	   //neco jako rollback - bude se volat nebo to bude zarizeno tim, ze se nezavola executeUpdate??
+        	   logger.debug("Button Cancle was press.");
+           }           
        }
    }
     
@@ -192,7 +200,7 @@
    class rowSetDisplayChangeListener implements PropertyChangeListener {
 	   public void propertyChange(PropertyChangeEvent e) {
            // Save old value
-           int oldValue = model.getDisplayRows();
+           int oldValue = model.getDisplayRows();           
            // Check whether new value > 0
            if (view.getDisplayRows() < 1) {
                view.setDisplayRows(oldValue);
@@ -208,7 +216,7 @@
            // If neccessary reload search results
            if ((oldValue != view.getDisplayRows()) && (model.getDisplayRows() <= model.getResultRows())) {
                model.processEditResult(model.getCurrentFirstRow(), view.getDisplayRows());
-               view.getTable().setModel(new HistoryTableModel(model.getData()));
+               view.getTable().setModel(new HistoryTableModel(model));
                int from = model.getCurrentFirstRow();
                int to = from + view.getTable().getRowCount() - 1;
                view.setCurrentRowsInfo(from + "-" + to);               

Modified: trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java	2006-04-10 19:22:55 UTC (rev 122)
+++ trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java	2006-04-10 20:04:03 UTC (rev 123)
@@ -1,11 +1,18 @@
 package net.sf.plantlore.client.history;
 
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Set;
+
 import javax.swing.DefaultCellEditor;
 import javax.swing.JCheckBox;
 import javax.swing.table.AbstractTableModel;
 import javax.swing.table.TableColumn;
 import javax.swing.table.TableColumnModel;
 
+import org.apache.log4j.Logger;
+
+import net.sf.plantlore.common.record.HistoryRecord;
 import net.sf.plantlore.l10n.L10n;
 
 /** 
@@ -14,6 +21,14 @@
  */
 public class HistoryTableModel extends AbstractTableModel
 {
+	//Logger
+	private Logger logger;
+	// History model
+	private History model; 
+	private ArrayList<HistoryRecord> editHistoryDataList;
+    private HashSet markListId;
+    private ArrayList<Object[]> markItem;
+	
 	/** Names of the columns */
     private String[] columnNames;
     /** Data values displayed in the table*/
@@ -26,24 +41,20 @@
     public final static int OLD_VALUE = 4;
     public final static int NEW_VALUE = 5;
     
-    /** Creates a new instance of HistoryTableModel */
-    public HistoryTableModel()
-    {    	
-    	init();
-    }
 
     /** 
      *  Creates a new instance of HistoryTableModel with the specified data values  
-     *  @param tableData data values 
+     *  @param model
      */
-    public HistoryTableModel(Object[][] tableData)
+    public HistoryTableModel(History model)
     {
-    	data = tableData;
-    	init();    	
-
-    }    
+    	logger = Logger.getLogger(this.getClass().getPackage().getName());
+    	this.model = model;        
+    	initColumns();    	
+    	initData();    	
+    }  
    
-    private void init() {
+    private void initColumns() {
         columnNames = new String[6];        
         columnNames[0] = L10n.getString("historyColX");        
         columnNames[1] = L10n.getString("historyColDate");        
@@ -51,8 +62,162 @@
         columnNames[3] = L10n.getString("historyColItem");        
         columnNames[4] = L10n.getString("historyColOldValue");       
         columnNames[5] = L10n.getString("historyColNewValue");        
+    }       
+    
+    /**
+     * Load data for dislaying 
+     */
+    public void initData() {
+    	
+    	logger.debug("Init data.");
+    	
+    	editHistoryDataList = model.getEditHistoryDataList();
+    	if (editHistoryDataList.size()==0 ){
+    		this.data = new Object[0][];
+    		return;
+    	}
+    	markItem = model.getMarkItem();    	
+    	int firstRow = model.getCurrentFirstRow();
+    	int countResult = Math.min(editHistoryDataList.size(), firstRow+ model.getDisplayRows()-1);
+    	int countRow = countResult - firstRow + 1;
+    	boolean mark = false;
+    	int ii = 0;  
+    	//If was use button "sellect all" we must init list of mark item
+    	boolean selectAll = model.getSelectAll();
+    	if (selectAll) {
+    		initMarkAllItem();
+    		mark = true;    		
+    	}
+    	//loud data for view
+        Object[][] editHistoryData = new Object[countRow][6];   
+    	for (int i=firstRow-1; i < countResult; i++) {  
+    		String item = L10n.getString(((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getColumnName());    		
+    		if (! selectAll){     			
+    			mark = isMark(item, i);
+    		}
+    		editHistoryData[ii][0] = new Boolean(mark);    		
+    	    editHistoryData[ii][1] = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getWhen();
+    	    editHistoryData[ii][2] = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getWho().getWholeName();    	   
+    	    editHistoryData[ii][3] = item;
+    	    editHistoryData[ii][4] = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+    	    editHistoryData[ii][5] = ((HistoryRecord)editHistoryDataList.get(i)).getNewValue();
+    	    ii++;
+    	}      	
+    	model.setSelectAll(false);
+    	this.data = editHistoryData;    	
+    }    
+    
+    /**
+     * Check marking row
+     * @param item
+     * @return
+     */
+    public boolean isMark(String item, int itemId) {    	
+    	int count = markItem.size();       	
+    	for( int i=0; i < count; i++){
+    		Object[] itemList = (Object[])(markItem.get(i));
+    		String itemFromList = (String)itemList[0];
+    		Integer maxId = (Integer)itemList[1];
+    		logger.debug("IsMark - itemFromList: "+itemFromList + ", item: "+ item + ", maxId: "+ maxId + ", itemId: "+ itemId);
+    		if (item.equals(itemFromList)) {
+    			if (itemId <= maxId) {
+    				return true;
+    			}
+    		}
+    	}
+    	return false;
     }
+ 
+    /**
+     * 
+     * @param row
+     * @param value
+     */
+    public void updateMarkList(String item, int row, boolean value) {    	    	    	
+    	int itemId = row + model.getCurrentFirstRow() - 1;
+    	boolean contains = false;    	
+    	int count = markItem.size();
+    	logger.debug("Update markListItem. Count item: "+count);
+    	//ArrayList<Object[]> tmpMarkItem = markItem;
+    	for( int i=0; i < count; i++){
+    		Object[] itemList = (Object[])(markItem.get(i));
+    		String itemFromList = (String)itemList[0];
+    		Integer maxId = (Integer)itemList[1];    
+    		logger.debug("MarkItem update - item: "+ itemFromList + ", maxId: " + maxId);
+    		if (value) {    		    			    			
+    			if (item.equals(itemFromList)) { 
+    				contains = true;
+					if (itemId > maxId) {
+						//Set max id of mark item
+						itemList[1] = itemId;
+					   	markItem.set(i, itemList);
+					}
+				}
+		    } else {
+		    	if (item.equals(itemFromList)) {
+		    		contains = true;
+		    		if (itemId <= maxId){
+		    			//search smaller id of mark item
+		    			int newId = searchSmaller(item, itemId);
+		    			if (newId != -1) {
+		    				itemList[1] = newId;
+			    			markItem.set(i,itemList);
+			    			logger.debug("Unmark - new itemId is "+ itemList[1].toString());
+		    			} else {
+		    				markItem.remove(i);
+			    			logger.debug("Unmark - remote record has id: "+ itemId);
+			    			return;
+		    			}
+		    	    }else {		    		
+		    			markItem.remove(i);
+		    			logger.debug("Unmark - remote record has id: "+ itemId);
+		    			return;
+		    		}
+		    	}				 
+			}      	
+    	}
+    	if (! contains) {
+    		Object [] itemList = new Object[2];    		
+			itemList[0] = item;
+			itemList[1] = itemId;
+			markItem.add(itemList);
+		}       	
+    }
+ 
+    /**
+     * 
+     *
+     */
+    public void initMarkAllItem() {    	
+    	editHistoryDataList = model.getEditHistoryDataList();    	
+    	int countResult = editHistoryDataList.size();    	
+    	for (int i=0; i < countResult; i++) {      		    		    	
+    		String item = L10n.getString(((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getColumnName());
+    		updateMarkList(item, i, true);
+    	} 
+    	model.setMarkItem(markItem);
+    	updateMarkListId();
+    	logger.debug("All records were selected.");    	
+    }
     
+    /**
+     * 
+     *
+     */
+    public void updateMarkListId() {
+    	markListId = new HashSet();
+    	editHistoryDataList = model.getEditHistoryDataList();
+    	markItem = model.getMarkItem();
+    	int countResult = editHistoryDataList.size();    	
+    	for (int i=0; i < countResult; i++) {  
+    		String item = L10n.getString(((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getColumnName());    		    		
+    		if (isMark(item, i)){
+    			markListId.add(i);
+    		}
+    	}        	
+    	model.setMarkListId(markListId);
+    	logger.debug("List ID of selected record: "+ markListId.toString());
+    }
     
     /** 
      *  Allows to edit of the MARK cell.
@@ -76,39 +241,38 @@
      * @param column index of column
      */
     public void setValueAt(Object value, int row, int column)
-    {
+    {    	
         data[row][column] = value;
-        if (column == 0) {
-        	if ((Boolean)value){        	    
-        	    selectYounger(row, column);        	    
-        	} else {        		
-        		selectOlder(row, column);
-        	}
-        }
-        //repaint view - with new value
-        this.fireTableCellUpdated(row, column);
+        if (column == 0) {       
+        	 String item = (String)getValueAt(row, 3);
+        	 updateMarkList(item, row, (Boolean)value);         	 
+       	     model.setMarkItem(markItem); 
+        	 //update data
+        	 initData();
+        	 //Update list of selected record
+        	 updateMarkListId();
+        	 //update view
+        	 this.fireTableDataChanged();
+        }        
     }
 
-    public void selectYounger(int row, int column){
-    	String item = (String)getValueAt(row, 3);
-    	for(int i=0; i < row; i++) {
-    		if (item.equals(getValueAt(i,3))) {
-    			setValueAt(true,i,0);
-    			System.out.print("oznaceno " +i + " \n" );
-    		}
+    /**
+     * 
+     * @param item
+     * @param itemId
+     * @return
+     */
+    public int searchSmaller(String item, int itemId) {    	
+    	int itemNewId = -1;
+    	int firstRow = model.getCurrentFirstRow();
+    	for( int i=itemId-firstRow; i >=0 ; i--){
+    		if (getValueAt(i,3).equals(item)){
+    			return i+firstRow-1;
+    		}    		
     	}
+    	return -1;
     }
     
-    public void selectOlder(int row, int column){
-    	String item = (String)getValueAt(row, 3);
-    	for(int i=row+1; i < data.length; i++) {
-    		if (item.equals(getValueAt(i,3))) {
-    			setValueAt(false,i,0);
-    			System.out.print("odznaceno " +i + " \n" );
-    		}
-    	}
-    }
-    
     /**
      * Gets the value of the given cell.
      * @param row index of row

Modified: trunk/src/net/sf/plantlore/client/history/HistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-10 19:22:55 UTC (rev 122)
+++ trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-10 20:04:03 UTC (rev 123)
@@ -16,6 +16,7 @@
 import javax.swing.JComboBox;
 import javax.swing.JFormattedTextField;
 import javax.swing.JFrame;
+import javax.swing.JOptionPane;
 import javax.swing.JRadioButton;
 import javax.swing.JDialog;
 import javax.swing.JLabel;
@@ -270,12 +271,7 @@
         infoInsertPanel.add(insertWhoValueLabel, gbConstraints);              
         
         // Add table to the infoEditPanel panel    
-        //!!!pro velke mnozstvi dat je lepsi pouzit AbstractTableModel, ktera umoznuje postupne nacitani do pameti
-        // defaultTableModel vytvari odkazy na vsechny zapouzdrene informace
-        
-        data = model.getData();
-        
-        tableEditList = new JTable(new HistoryTableModel(data));        
+        tableEditList = new JTable(new HistoryTableModel(model));        
         TableColumnModel tcm = tableEditList.getColumnModel();        
         TableColumn tc;
         for (int i = 0; i < tableEditList.getColumnCount(); i++) {
@@ -422,6 +418,10 @@
         
     }     
  
+    public int messageUndo(String message) {
+    	int okCancle = JOptionPane.showConfirmDialog(historyDialog, message, "Information about change", JOptionPane.OK_CANCEL_OPTION);
+    	return okCancle;
+    }
 
     public void close() {
         historyDialog.dispose();
@@ -438,6 +438,11 @@
     	return this.tableEditList;
     }
     
+    public void setCountResutl(Integer resultRows)
+    {
+    	this.countResutl.setText(resultRows.toString());
+    }
+    
     /** */
     public void setCurrentRowsInfo(String displayedRows)
     {



From Lada at berlios.de  Mon Apr 10 22:08:08 2006
From: Lada at berlios.de (Lada at berlios.de)
Date: Mon, 10 Apr 2006 22:08:08 +0200
Subject: [Plantlore-dev] r124 - trunk/src/net/sf/plantlore/common/record
Message-ID: <200604102008.k3AK88tM012929@sheep.berlios.de>

Author: Lada
Date: 2006-04-10 22:07:58 +0200 (Mon, 10 Apr 2006)
New Revision: 124

Modified:
   trunk/src/net/sf/plantlore/common/record/HistoryChange.java
Log:
Change constant for operation EDIT, EDITGROUP.

Modified: trunk/src/net/sf/plantlore/common/record/HistoryChange.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/HistoryChange.java	2006-04-10 20:04:03 UTC (rev 123)
+++ trunk/src/net/sf/plantlore/common/record/HistoryChange.java	2006-04-10 20:07:58 UTC (rev 124)
@@ -23,7 +23,7 @@
     public static final int HISTORYCHANGE_INSERT = 1;
     public static final int HISTORYCHANGE_EDIT = 2;
     public static final int HISTORYCHANGE_DELETE = 3;
-    //public static final int HISTORYCHANGE_INSERTEDIT = 4;    
+    public static final int HISTORYCHANGE_EDITGROUP = 4;    
     
     /** Parameters of the HistoryChange. For detailed explanation see data model documentation. */
     private int id;



From fraktalek at berlios.de  Mon Apr 10 22:14:35 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Mon, 10 Apr 2006 22:14:35 +0200
Subject: [Plantlore-dev] r125 - trunk/src/net/sf/plantlore/client
Message-ID: <200604102014.k3AKEZb3028014@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-10 22:14:34 +0200 (Mon, 10 Apr 2006)
New Revision: 125

Modified:
   trunk/src/net/sf/plantlore/client/OverviewTableModel.java
Log:
Fixed a bug found by Erik: enter a page size bigger than the number of results
then an exception was thrown.



Modified: trunk/src/net/sf/plantlore/client/OverviewTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-10 20:07:58 UTC (rev 124)
+++ trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-10 20:14:34 UTC (rev 125)
@@ -167,7 +167,7 @@
             if (!recordsArray.contains(r))
                 recordsArray.add(r);
             else 
-                r = recordsArray.get(from+i-2);
+                r = recordsArray.get(from+i-2);//array starts from 0 whereas records are numbered from 1
                 
             row = new Object[COLUMN_COUNT];
             row[0] = r.selected;
@@ -291,6 +291,10 @@
         this.pageSize = pageSize;
         if (from + pageSize > resultsCount)
             from = resultsCount - pageSize + 1;
+        if (from < 1) //pageSize was bigger than the number of results
+            from = 1;
+        
+        currentPage = from / pageSize + 1;
         //FIXME: - taky musi umet prepocitat from a to
         try {
             loadData();



From fraktalek at berlios.de  Mon Apr 10 23:41:16 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Mon, 10 Apr 2006 23:41:16 +0200
Subject: [Plantlore-dev] r126 - trunk/src/net/sf/plantlore/client
Message-ID: <200604102141.k3ALfGM2014616@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-10 23:41:16 +0200 (Mon, 10 Apr 2006)
New Revision: 126

Modified:
   trunk/src/net/sf/plantlore/client/AppCore.java
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/AppCoreView.java
   trunk/src/net/sf/plantlore/client/OverviewTableModel.java
Log:
Removed moved initialization of Overview from constructors to
AppCoreView.initOverview(). Whata nice little change...:)))
Now data from database are loaded after a click on the Login menu item.



Modified: trunk/src/net/sf/plantlore/client/AppCore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-10 20:14:34 UTC (rev 125)
+++ trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-10 21:41:16 UTC (rev 126)
@@ -61,18 +61,6 @@
         
         
         
-        //FIXME:
-        try {
-            
-            tableModel = new OverviewTableModel(database, prefs.getInt("recordsPerPage", 30));
-        } catch (RemoteException ex) {
-            ex.printStackTrace();
-        } catch (DBLayerException ex) {
-            ex.printStackTrace();
-        }
-        logger.debug("tableModel created");
-        setChanged();
-        notifyObservers();
         logger.debug("AppCore observers notified");
     }
     
@@ -92,79 +80,132 @@
         return this.database;
     }    
     
+    /** Returns table model for the main Overview.
+     *
+     * Should be called only after the user logs in to a database.
+     *
+     * @return null if the database connection wasn't created yet or an exception was thrown while working with it...
+     * @return OverviewTableModel otherwise - creates a new one if it hasn't been created yet
+     */
     public OverviewTableModel getTableModel() {
-        return this.tableModel;
+        if (database != null)
+            if (tableModel == null) 
+            {
+            //FIXME:
+                try {
+                    tableModel = new OverviewTableModel(database, prefs.getInt("recordsPerPage", 30));
+                } catch (RemoteException ex) {
+                    ex.printStackTrace();
+                } catch (DBLayerException ex) {
+                    ex.printStackTrace();
+                }
+                logger.debug("tableModel created");
+                //FIXME: we should first return the model and *then* notifyObservers... :-/
+                setChanged();
+                notifyObservers();
+                return tableModel;
+            } else 
+                return tableModel;
+        else 
+            return null;
     }
         
     public void selectAll() {
-        tableModel.selectAll();
+        if (tableModel != null)
+            tableModel.selectAll();
         //setChanged();
         //notifyObservers();
     }
 
     public void selectNone() {
-        tableModel.selectNone();
+        if (tableModel != null)
+            tableModel.selectNone();
         //setChanged();
         //notifyObservers();
     }
     public void invertSelected() {
-        tableModel.invertSelected();
+        if (tableModel != null)
+            tableModel.invertSelected();
         //setChanged();
         //notifyObservers();
     }
 
     public int getRecordsPerPage() {
-        return tableModel.getPageSize();
+        if (tableModel != null)
+            return tableModel.getPageSize();
+        else 
+            return 0;
     }
 
     public void setRecordsPerPage(int recordsPerPage) {
-        tableModel.setPageSize(recordsPerPage);
-        setChanged();
-        notifyObservers();        
+        if (tableModel != null)
+        {
+            tableModel.setPageSize(recordsPerPage);
+            setChanged();
+            notifyObservers();        
+        }
     }
 
     public void nextPage() {
-        //FIXME:
-        try {
-            tableModel.nextPage();
-        } catch (RemoteException ex) {
-            ex.printStackTrace();
-        } catch (DBLayerException ex) {
-            ex.printStackTrace();
+        if (tableModel != null)
+        {
+            //FIXME:
+            try {
+                tableModel.nextPage();
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }
+            setChanged();
+            notifyObservers();        
         }
-        setChanged();
-        notifyObservers();        
     }
     
     public void prevPage() {
-        //FIXME:
-        try {
-            tableModel.prevPage();
-        } catch (RemoteException ex) {
-            ex.printStackTrace();
-        } catch (DBLayerException ex) {
-            ex.printStackTrace();
+        if (tableModel != null)
+        {
+            //FIXME:
+            try {
+                tableModel.prevPage();
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }
+            setChanged();
+            notifyObservers();
         }
-        setChanged();
-        notifyObservers();
     }
 
     public int getCurrentPage() {
-        return tableModel.getCurrentPage();
+        if (tableModel != null)
+            return tableModel.getCurrentPage();
+        else
+            return 0;
     }
 
     public void setCurrentPage(int currentPage) {
-        tableModel.setCurrentPage(currentPage);
-        setChanged();
-        notifyObservers();
+        if (tableModel != null)
+        {
+            tableModel.setCurrentPage(currentPage);
+            setChanged();
+            notifyObservers();
+        }
     }
     
     public int getResultsCount() {
-        return tableModel.getResultsCount();
+        if (tableModel != null)        
+            return tableModel.getResultsCount();
+        else
+            return 0;
     }
     
     public int getPagesCount() {
-        return tableModel.getPagesCount();
+        if (tableModel != null)
+            return tableModel.getPagesCount();
+        else
+            return 0;
     }
     
     public void setSelectedRow(int i) 

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-10 20:14:34 UTC (rev 125)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-10 21:41:16 UTC (rev 126)
@@ -393,7 +393,11 @@
                 int i = ((Number)tf.getValue()).intValue(); 
                 if (i < 1)
                 {
-                    tf.setValue(e.getOldValue());
+                    Object obj = e.getOldValue();
+                    if (obj != null)
+                        tf.setValue(obj);
+                    else // either multiple properties changed or there was no previous value - the value should better be at least 1 anyway...
+                        tf.setValue(1);
                 } else {
                     model.setRecordsPerPage(i);                    
                 }
@@ -425,6 +429,7 @@
             putValue(MNEMONIC_KEY, L10n.getMnemonic("Login"));                        
         }
         public void actionPerformed(ActionEvent arg0) {
+                view.initOverview();
                 // Reuse the existing dialogs, hide'em when they're no longer needed.
                 if(loginModel == null) loginModel = new Login(new RMIDBLayerFactory());
                 if(loginView == null) loginView = new LoginView(loginModel);

Modified: trunk/src/net/sf/plantlore/client/AppCoreView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-10 20:14:34 UTC (rev 125)
+++ trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-10 21:41:16 UTC (rev 126)
@@ -92,6 +92,7 @@
             prevPage = new JButton(),
             nextPage = new JButton();
     
+    private JScrollPane overviewScrollPane;
     private JLabel statusLabel;
     
     private JTable overview = new JTable();
@@ -124,7 +125,7 @@
         initFrame();
         initStatusBar();
         initMenu();
-        initOverview();
+        constructOverview();
         initMainToolBar();
         this.pack();
     }
@@ -210,23 +211,15 @@
     /** Constructs the data overview and adds it to the <code>mainPane</code>.
      *
      */
-    private void initOverview()
+    private void constructOverview()
     {
-        OverviewTableModel otm = model.getTableModel();
-        overview.setModel(otm);
         overview.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
-        TableColumn tc;
-        for (int i = 0; i < otm.getColumnCount(); i++) {
-            tc = overview.getColumnModel().getColumn(i);
-            tc.setPreferredWidth(otm.getColumnSize(i));
-        }
         JPanel tablePanel = new JPanel();
         tablePanel.setLayout(new BorderLayout());
-        JScrollPane sp = new JScrollPane(tablePanel);
+        overviewScrollPane = new JScrollPane(tablePanel);
         tablePanel.add(overview.getTableHeader(), BorderLayout.PAGE_START);
         tablePanel.add(overview, BorderLayout.CENTER);
-        sp.setPreferredSize(new Dimension(800, (otm.getRowCount()+1)*25));
-        mainPane.add(sp, BorderLayout.CENTER);
+        mainPane.add(overviewScrollPane, BorderLayout.CENTER);
         
         pageToolBar = new JToolBar();
         recordsPerPage.setValue(new Integer(model.getRecordsPerPage()));
@@ -276,6 +269,24 @@
         sbm.add(recordsPerPage, "Number of records per page");
     }
     
+    /** This method should be called right after the user logs into some database.
+     *
+     */
+    public void initOverview()
+    {
+        TableColumn tc;
+        OverviewTableModel otm = model.getTableModel();
+        //FIXME: what if otm == null ????????????
+        overview.setModel(otm);
+        overviewScrollPane.setPreferredSize(new Dimension(800, (otm.getRowCount()+1)*25));
+       
+        for (int i = 0; i < otm.getColumnCount(); i++) {
+            tc = overview.getColumnModel().getColumn(i);
+            tc.setPreferredWidth(otm.getColumnSize(i));
+        }
+        pack();
+    }
+    
     /** Returns the main window <code>StatusBarManager</code>.
      *
      */

Modified: trunk/src/net/sf/plantlore/client/OverviewTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-10 20:14:34 UTC (rev 125)
+++ trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-10 21:41:16 UTC (rev 126)
@@ -295,7 +295,7 @@
             from = 1;
         
         currentPage = from / pageSize + 1;
-        //FIXME: - taky musi umet prepocitat from a to
+        //FIXME: 
         try {
             loadData();
         } catch (RemoteException ex) {



From krater at berlios.de  Tue Apr 11 17:22:30 2006
From: krater at berlios.de (krater at berlios.de)
Date: Tue, 11 Apr 2006 17:22:30 +0200
Subject: [Plantlore-dev] r127 - trunk/src/net/sf/plantlore/client
Message-ID: <200604111522.k3BFMUqj022854@sheep.berlios.de>

Author: krater
Date: 2006-04-11 17:22:29 +0200 (Tue, 11 Apr 2006)
New Revision: 127

Modified:
   trunk/src/net/sf/plantlore/client/AppCore.java
Log:
Further purification of the constructor of the AppCore.

Modified: trunk/src/net/sf/plantlore/client/AppCore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-10 21:41:16 UTC (rev 126)
+++ trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-11 15:22:29 UTC (rev 127)
@@ -48,19 +48,6 @@
         logger = Logger.getLogger(this.getClass().getPackage().getName());        
         prefs = Preferences.userNodeForPackage(this.getClass());
         
-//        database = new FirebirdDBLayer("localhost", "3050", "/mnt/data/temp/plantloreHIB.fdb", "sysdba", "masterkey");
-        database = new HibernateDBLayer();
-      
-        try {
-            database.initialize(null, null, null); // FIXME sem prijdou samosebou rozumne hodnoty
-        } catch (DBLayerException e) {
-            System.out.println("Error initializing database: "+e.toString());
-        } catch(RemoteException e) {
-        	System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
-        }
-        
-        
-        
         logger.debug("AppCore observers notified");
     }
     



From krater at berlios.de  Tue Apr 11 17:41:15 2006
From: krater at berlios.de (krater at berlios.de)
Date: Tue, 11 Apr 2006 17:41:15 +0200
Subject: [Plantlore-dev] r128 - trunk/src/net/sf/plantlore/client
Message-ID: <200604111541.k3BFfFGR025284@sheep.berlios.de>

Author: krater
Date: 2006-04-11 17:41:14 +0200 (Tue, 11 Apr 2006)
New Revision: 128

Modified:
   trunk/src/net/sf/plantlore/client/AppCore.java
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
Log:
Minor changes to the AppCore and AppCoreCtrl classes, that should bring them closer to their final state.
The System should now retrieve the DBLayer from the Login model.

Modified: trunk/src/net/sf/plantlore/client/AppCore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-11 15:22:29 UTC (rev 127)
+++ trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-11 15:41:14 UTC (rev 128)
@@ -67,6 +67,10 @@
         return this.database;
     }    
     
+    protected void setDatabase(DBLayer dblayer) {
+    	this.database = dblayer;
+    }
+    
     /** Returns table model for the main Overview.
      *
      * Should be called only after the user logs in to a database.

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-11 15:22:29 UTC (rev 127)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-11 15:41:14 UTC (rev 128)
@@ -434,7 +434,12 @@
                 if(loginModel == null) loginModel = new Login(new RMIDBLayerFactory());
                 if(loginView == null) loginView = new LoginView(loginModel);
                 if(loginCtrl == null) loginCtrl = new LoginCtrl(loginModel, loginView);
-                loginView.setVisible(true);				
+                loginView.setVisible(true);
+                
+                // Update the database layer reference in the AppCore
+                model.setDatabase(loginModel.getDBLayer());
+                
+                // Now, who else would like to know, that the new DBLayer has been set?
         }
     }
 }



From jakubkotowski at gmx.net  Wed Apr 12 08:39:46 2006
From: jakubkotowski at gmx.net (Jakub Kotowski)
Date: Wed, 12 Apr 2006 08:39:46 +0200
Subject: [Plantlore-dev] Fwd: Re:plantlore
Message-ID: <200604120839.46514.jakubkotowski@gmx.net>


----------  Forwarded Message  ----------

Subject: Re:plantlore
Date: Tuesday 11 April 2006 09:41
From: Michal Ba??k <draudz at seznam.cz>
To: jakubkotowski at gmx.net

Dobr? den,
na n?vrhu jsem u? za?al pracovat, n?hledy bych v?m poslal na konci tohoto
 t?dne a hlavn? p???t? t?den po Velikonoc?ch.

S p??n?m hezk?ho t?dne

Michal Ba??k

> ------------ P?vodn? zpr?va ------------
> Od: Jakub Kotowski <jakubkotowski at gmx.net>
> P?edm?t: plantlore
> Datum: 10.4.2006 21:40:53
> ----------------------------------------
> Dobry den,
>
> chtel bych se zeptat, jestli uz jste na navrhu zacal pracovat a pripadne v
> jakem stavu je. Potrebujeme mit prehled :)
>
> Diky,
>
> Jakub Kotowski

-------------------------------------------------------


From krater at berlios.de  Wed Apr 12 13:01:24 2006
From: krater at berlios.de (krater at berlios.de)
Date: Wed, 12 Apr 2006 13:01:24 +0200
Subject: [Plantlore-dev] r129 - in trunk/src/net/sf/plantlore/client: . login
Message-ID: <200604121101.k3CB1O77027555@sheep.berlios.de>

Author: krater
Date: 2006-04-12 13:01:19 +0200 (Wed, 12 Apr 2006)
New Revision: 129

Added:
   trunk/src/net/sf/plantlore/client/login/AuthView.form
   trunk/src/net/sf/plantlore/client/login/ItemView.form
   trunk/src/net/sf/plantlore/client/login/LoginView.form
Modified:
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/login/AuthCtrl.java
   trunk/src/net/sf/plantlore/client/login/AuthView.java
   trunk/src/net/sf/plantlore/client/login/ItemCtrl.java
   trunk/src/net/sf/plantlore/client/login/ItemView.java
   trunk/src/net/sf/plantlore/client/login/Login.java
   trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
   trunk/src/net/sf/plantlore/client/login/LoginView.java
Log:
Appcore is now properly informed that the DBLayer has changed.

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-11 15:41:14 UTC (rev 128)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-12 11:01:19 UTC (rev 129)
@@ -16,6 +16,8 @@
 import java.beans.PropertyChangeListener;
 import java.lang.Integer;
 import java.rmi.RemoteException;
+import java.util.Observable;
+import java.util.Observer;
 import java.util.prefs.Preferences;
 import javax.swing.AbstractAction;
 import javax.swing.JFormattedTextField;
@@ -52,8 +54,11 @@
 public class AppCoreCtrl
 {
     Logger logger;
+    //--------------SUPPLIED MODELS AND VIEWS-----------------
     AppCore model;
     AppCoreView view;
+    
+    //--------------MODELS AND VIEWS THIS CONTROLLER CREATES-----------------
     Settings settingsModel;
     SettingsView settingsView;
     SettingsCtrl settingsCtrl;
@@ -429,17 +434,34 @@
             putValue(MNEMONIC_KEY, L10n.getMnemonic("Login"));                        
         }
         public void actionPerformed(ActionEvent arg0) {
-                view.initOverview();
                 // Reuse the existing dialogs, hide'em when they're no longer needed.
-                if(loginModel == null) loginModel = new Login(new RMIDBLayerFactory());
+                if(loginModel == null) {
+                	loginModel = new Login(new RMIDBLayerFactory());
+                	loginModel.addObserver(new DatabaseChange());
+                }
                 if(loginView == null) loginView = new LoginView(loginModel);
                 if(loginCtrl == null) loginCtrl = new LoginCtrl(loginModel, loginView);
                 loginView.setVisible(true);
-                
-                // Update the database layer reference in the AppCore
-                model.setDatabase(loginModel.getDBLayer());
-                
-                // Now, who else would like to know, that the new DBLayer has been set?
+                /*-------------------------------------------------------------------------------------
+                 * The problem here is that the dialog is opened - but another thread
+                 * takes care of its execution. That's why the code below will be executed
+                 * immediately after the dialog becomes visible. Clearly, the database layer
+                 * is not created at this time!
+                 *-------------------------------------------------------------------------------------*/
         }
     }
+    
+    // Update all information about the database layer and inform everyone who has to be informed 
+    class DatabaseChange implements Observer {
+    	public void update(Observable targer, Object parameter) {
+    		if(parameter != null && parameter instanceof DBLayer) {
+    			System.out.println("[!] DBLayer retrieval.");
+    			DBLayer dblayer = loginModel.getDBLayer();
+    			model.setDatabase(dblayer);
+    			view.initOverview();
+    		}
+    	}
+    }
+    
+    
 }

Modified: trunk/src/net/sf/plantlore/client/login/AuthCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthCtrl.java	2006-04-11 15:41:14 UTC (rev 128)
+++ trunk/src/net/sf/plantlore/client/login/AuthCtrl.java	2006-04-12 11:01:19 UTC (rev 129)
@@ -11,19 +11,17 @@
 	
 	public AuthCtrl(Login login, AuthView authview) {
 		this.model = login; this.view = authview;
-		
-		view.nextAddActionListener(new AbstractAction() {
-			public void actionPerformed(ActionEvent arg0) {
-				System.out.println("hiding");
-				try {
-					model.connectToSelected(view.getUserName(), view.getPassword());
-				} catch(Exception e) {
-					System.err.println("The connection to the database couldn't be established!\n" + e);
-				}
-				
-				view.setVisible(false);
-			}
-		});
+		view.next.addActionListener(new Next());
 	}
+	
+	class Next extends AbstractAction {
+		public void actionPerformed(ActionEvent arg0) {
+			try {
+				model.connectToSelected(view.user.getSelectedItem().toString(), new String(view.password.getPassword()));
+			} catch(Exception e) { System.err.println("The connection to the database couldn't be established!\n" + e); }
+			finally { view.password.setText(""); }
+			view.setVisible(false);
+		}
+	}
 
 }

Added: trunk/src/net/sf/plantlore/client/login/AuthView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthView.form	2006-04-11 15:41:14 UTC (rev 128)
+++ trunk/src/net/sf/plantlore/client/login/AuthView.form	2006-04-12 11:01:19 UTC (rev 129)
@@ -0,0 +1,89 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="3"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" attributes="0">
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Component id="jLabel1" alignment="0" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel2" alignment="0" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace min="-2" max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Component id="password" alignment="0" pref="222" max="32767" attributes="0"/>
+                          <Component id="user" alignment="0" pref="222" max="32767" attributes="0"/>
+                      </Group>
+                  </Group>
+                  <Group type="102" alignment="1" attributes="0">
+                      <EmptySpace pref="199" max="32767" attributes="1"/>
+                      <Component id="jButton1" min="-2" max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="jLabel1" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="user" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="jLabel2" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="password" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="32767" attributes="0"/>
+              <Component id="jButton1" min="-2" max="-2" attributes="0"/>
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Component class="javax.swing.JLabel" name="jLabel1">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="Username:"/>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JLabel" name="jLabel2">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="Password:"/>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JComboBox" name="user">
+      <Properties>
+        <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+          <StringArray count="0"/>
+        </Property>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JPasswordField" name="password">
+    </Component>
+    <Component class="javax.swing.JButton" name="jButton1">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="Authorize"/>
+      </Properties>
+    </Component>
+  </SubComponents>
+</Form>

Modified: trunk/src/net/sf/plantlore/client/login/AuthView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-11 15:41:14 UTC (rev 128)
+++ trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-12 11:01:19 UTC (rev 129)
@@ -1,96 +1,112 @@
+/*
+ * AuthView2.java
+ *
+ * Created on 9. duben 2006, 18:04
+ */
+
 package net.sf.plantlore.client.login;
 
-import java.awt.*;
-import java.awt.event.ActionListener;
+import java.util.Observable;
+import java.util.Observer;
 
-import javax.swing.*;
+import javax.swing.JDialog;
 
-
-public class AuthView extends JDialog {
+/**
+ *
+ * @author  yaa
+ */
+public class AuthView extends javax.swing.JFrame implements Observer {
 	
 	private Login model;
-	
-	public AuthView(Login model) {
-		this.model = model;
-		setTitle("Authorization");
-		setSize(300, 200);
-		setModal(true);
-		setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
-		initComponents();
-		setLocationRelativeTo(null); // center of the screen
-	}
-	
-	
-	protected void initComponents() {
-		setTitle("Authentification");
-		setModal(true);
+    
+    /** Creates new form AuthView2 */
+    public AuthView(Login model) {
+    	this.model = model;
+    	model.addObserver(this);
+        initComponents();
+        setLocationRelativeTo(null); // center of the screen
+        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+    }
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        jLabel1 = new javax.swing.JLabel();
+        jLabel2 = new javax.swing.JLabel();
+        user = new javax.swing.JComboBox();
+        password = new javax.swing.JPasswordField();
+        next = new javax.swing.JButton();
 
-		next = new JButton("next");
-		user = new JComboBox(); user.setEditable(true); 
-		user.setPreferredSize(new Dimension(50, 23));
-		password = new JPasswordField(32); password.setPreferredSize(new Dimension(50, 23));
+        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
+        jLabel1.setText("Username:");
 
-		
-		JPanel p1 = new JPanel(new FlowLayout(FlowLayout.RIGHT));
-		p1.add(next);
-		add(p1, BorderLayout.SOUTH);
-		
-		JLabel l1 = new JLabel("Username"), l2 = new JLabel("Password");
-		l1.setLabelFor(user); l2.setLabelFor(password);
-		JPanel p2 = new JPanel(new GridBagLayout());
-		GridBagConstraints c = new GridBagConstraints();
-		
-		// CHANGE HERE
-		c.gridx = 0; c.gridy = 0; c.fill =  GridBagConstraints.NONE; 
-		c.insets = new Insets(2, 4, 0, 0);
-		p2.add(l1, c);
-		
-		c.gridy = 1; c.insets = new Insets(1, 4, 0, 0);
-		p2.add(l2, c); 
-		
-		c.gridx = 1 ; c.gridy = 0; c.fill = GridBagConstraints.HORIZONTAL;
-		c.insets = new Insets(2, 3, 0, 4);
-		p2.add(user, c); 
-	
-		c.gridy = 1; c.insets = new Insets(2, 3, 0, 4);
-		p2.add(password, c);
-		
-		
-		add(p2, BorderLayout.CENTER);
-		
-		pack();
-		
-		setResizable(false);
+        jLabel2.setText("Password:");
+
+        next.setText("Authorize");
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(layout.createSequentialGroup()
+                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(jLabel1)
+                            .add(jLabel2))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(password, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
+                            .add(user, 0, 222, Short.MAX_VALUE)))
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 199, Short.MAX_VALUE)
+                        .add(next)))
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel1)
+                    .add(user, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel2)
+                    .add(password, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                .add(next)
+                .addContainerGap())
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    
+    
+    public void update(Observable arg0, Object arg1) {
+		DBInfo selected = model.getSelected();
+		if(selected == null) return;
+		user.removeAllItems();
+		String[] u = model.getSelected().users;
+		int i = 0;
+		for (; i < u.length && u[i] != null; i++)	user.addItem(u[i]);
+		if (i > 0)	user.setSelectedIndex(0);
 	}
-	
-	@Override
-	public void setVisible(boolean visible) {
-		if(visible) {
-			user.removeAllItems();
-			String[] u = model.getSelected().users;
-			int i = 0;
-			for(; i < u.length && u[i] != null; i++) user.addItem(u[i]);
-			if(i > 0) user.setSelectedIndex(0);
-		}
-		super.setVisible(visible);
-	}
-	
-	protected String getUserName() {
-		return (String) user.getSelectedItem();
-	}
-	
-	protected String getPassword() {
-		return new String( password.getPassword() );
-	}
-	
-	public void nextAddActionListener(ActionListener a) {
-		next.addActionListener(a);
-	}
-	
-	
-	protected JButton next;
-	protected JComboBox user;
-	protected JPasswordField password;
+    
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    protected javax.swing.JButton next;
+    protected javax.swing.JLabel jLabel1;
+    protected javax.swing.JLabel jLabel2;
+    protected javax.swing.JPasswordField password;
+    protected javax.swing.JComboBox user;
+    // End of variables declaration//GEN-END:variables
 
 	
+    
 }

Modified: trunk/src/net/sf/plantlore/client/login/ItemCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/ItemCtrl.java	2006-04-11 15:41:14 UTC (rev 128)
+++ trunk/src/net/sf/plantlore/client/login/ItemCtrl.java	2006-04-12 11:01:19 UTC (rev 129)
@@ -14,25 +14,45 @@
 	private Mode mode = Mode.ADD;
 	
 	
-	public void setMode(Mode m) { this.mode = m; }
+	// Switch between the ADD/EDIT behaviour
+	public void setMode(Mode m) { 
+		this.mode = m;
+		switch(m) {
+		case ADD:
+			view.setTitle("ADD");
+			view.alias.setText(""); 
+			view.host.setText("");
+			view.db.setText("");
+			break;
+		case EDIT:
+			view.setTitle("EDIT");
+			break;
+		}
+	}
 	
 	
 	public ItemCtrl(Login login, ItemView itemview) {
 		this.model = login; this.view = itemview;
-		
-		view.nextAddActionListener(new AbstractAction() {
-			public void actionPerformed(ActionEvent arg0) {
-				int t = view.getHost().indexOf(':');
-				if(mode == Mode.ADD)
-					if(t < 0) model.createRecord(view.getAlias(), view.getHost(), 1099, view.getDB());
-					else model.createRecord(view.getAlias(), view.getHost().substring(0, t - 1), Integer.parseInt(view.getHost().substring(t)), view.getDB());
-				else if(mode == Mode.EDIT)
-					if(t < 0) model.updateSelectedRecord(view.getAlias(), view.getHost(), 1099, view.getDB());
-					else model.updateSelectedRecord(view.getAlias(), view.getHost().substring(0, t - 1), Integer.parseInt(view.getHost().substring(t)), view.getDB());
-				view.setVisible(false);
+		view.next.addActionListener(new Next());
+	}
+	
+	class Next extends AbstractAction {
+		public void actionPerformed(ActionEvent arg0) {
+			int t = view.host.getText().indexOf(':');
+			int port = (t < 0) ? 1099 : Integer.parseInt(view.host.getText().substring(t));
+			String host = (t < 0) ? view.host.getText() : view.host.getText().substring(0, t - 1);
+			String alias = view.alias.getText(), db = view.db.getText();
+			
+			switch(mode) {
+			case ADD:
+				model.createRecord(alias, host, port, db);
+				break;
+			case EDIT:
+				model.updateSelectedRecord(alias, host, port, db);
+				break;
 			}
-		});
-		
+			view.setVisible(false);
+		}
 	}
 
 }

Added: trunk/src/net/sf/plantlore/client/login/ItemView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/login/ItemView.form	2006-04-11 15:41:14 UTC (rev 128)
+++ trunk/src/net/sf/plantlore/client/login/ItemView.form	2006-04-12 11:01:19 UTC (rev 129)
@@ -0,0 +1,95 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="3"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Component id="jLabel1" alignment="0" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel2" alignment="0" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel3" alignment="0" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace min="-2" max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Component id="db" alignment="0" pref="229" max="32767" attributes="0"/>
+                          <Component id="host" alignment="0" pref="229" max="32767" attributes="0"/>
+                          <Component id="alias" alignment="0" pref="229" max="32767" attributes="0"/>
+                      </Group>
+                  </Group>
+                  <Component id="jButton1" alignment="1" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="jLabel1" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="alias" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="jLabel2" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="host" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="jLabel3" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="db" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="32767" attributes="0"/>
+              <Component id="jButton1" min="-2" max="-2" attributes="0"/>
+              <EmptySpace min="-2" max="-2" attributes="1"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Component class="javax.swing.JLabel" name="jLabel1">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="Alias:"/>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JLabel" name="jLabel2">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="Hostname:"/>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JLabel" name="jLabel3">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="Database:"/>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JTextField" name="alias">
+    </Component>
+    <Component class="javax.swing.JTextField" name="host">
+    </Component>
+    <Component class="javax.swing.JTextField" name="db">
+    </Component>
+    <Component class="javax.swing.JButton" name="jButton1">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="Change"/>
+      </Properties>
+    </Component>
+  </SubComponents>
+</Form>

Modified: trunk/src/net/sf/plantlore/client/login/ItemView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/ItemView.java	2006-04-11 15:41:14 UTC (rev 128)
+++ trunk/src/net/sf/plantlore/client/login/ItemView.java	2006-04-12 11:01:19 UTC (rev 129)
@@ -1,98 +1,118 @@
+/*
+ * ItemView2.java
+ *
+ * Created on 9. duben 2006, 17:55
+ */
+
 package net.sf.plantlore.client.login;
 
-import java.awt.BorderLayout;
-import java.awt.FlowLayout;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-import java.awt.Insets;
-import java.awt.event.ActionListener;
+import java.util.Observable;
+import java.util.Observer;
 
-import javax.swing.JButton;
 import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
 
-import javax.swing.JTextField;
-
-public class ItemView extends JDialog {
-		
+/**
+ *
+ * @author  yaa
+ */
+public class ItemView extends javax.swing.JFrame implements Observer {
+	
 	private Login model;
-	
-
-	public ItemView(Login model) {
+    
+    /** Creates new form ItemView2 */
+    public ItemView(Login model) {
 		this.model = model;
-		setTitle("ItemEditor");
-		setModal(true);
-		setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+		model.addObserver(this);
 		initComponents();
 		setResizable(false);
 		setLocationRelativeTo(null);
-	}
-	
-	
-	public void fillWithSelected() {
+		setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+    }
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        jLabel1 = new javax.swing.JLabel();
+        jLabel2 = new javax.swing.JLabel();
+        jLabel3 = new javax.swing.JLabel();
+        alias = new javax.swing.JTextField();
+        host = new javax.swing.JTextField();
+        db = new javax.swing.JTextField();
+        next = new javax.swing.JButton();
+
+        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
+        jLabel1.setText("Alias:");
+
+        jLabel2.setText("Hostname:");
+
+        jLabel3.setText("Database:");
+
+        next.setText("Change");
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(layout.createSequentialGroup()
+                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(jLabel1)
+                            .add(jLabel2)
+                            .add(jLabel3))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(db, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
+                            .add(host, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
+                            .add(alias, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)))
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, next))
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel1)
+                    .add(alias, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel2)
+                    .add(host, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel3)
+                    .add(db, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                .add(next)
+                .addContainerGap())
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    
+    
+    public void update(Observable arg0, Object arg1) {
 		DBInfo info = model.getSelected();
 		if(info == null) return;
-		alias.setText(info.alias); host.setText(info.host + ((info.port != 1099) ? " : " + info.port : ""));
+		alias.setText(info.alias); 
+		host.setText(info.host + ((info.port != 1099) ? " : " + info.port : ""));
 		db.setText(info.db);
 	}
-	
-	
-	protected void initComponents() {
-		next = new JButton("change/add");
-		alias = new JTextField(20); 
-		host = new JTextField(20);
-		db = new JTextField(20);
-		 
-		
-		JPanel p1 = new JPanel(new FlowLayout(FlowLayout.RIGHT));
-		p1.add(next);
-		add(p1, BorderLayout.SOUTH);
-		
-		JLabel l1 = new JLabel("Alias"), l2 = new JLabel("Hostname"), l3 = new JLabel("DB ID");
-		l1.setLabelFor(alias); l2.setLabelFor(host); l3.setLabelFor(db);
-		JPanel p2 = new JPanel(new GridBagLayout());
-		GridBagConstraints c = new GridBagConstraints();
-		
-		// CHANGE HERE
-		c.gridx = 0; c.gridy = 0; c.fill =  GridBagConstraints.NONE; 
-		c.insets = new Insets(2, 4, 0, 0);
-		p2.add(l1, c);
-		
-		c.gridy = 1; c.insets = new Insets(1, 4, 0, 0);
-		p2.add(l2, c); 
-		
-		c.gridy = 2; c.insets = new Insets(1, 4, 0, 0);
-		p2.add(l3, c);
-		
-		c.gridx = 1 ; c.gridy = 0; c.fill = GridBagConstraints.HORIZONTAL;
-		c.insets = new Insets(2, 3, 0, 4);
-		p2.add(alias, c); 
-	
-		c.gridy = 1; c.insets = new Insets(2, 3, 0, 4);
-		p2.add(host, c);
-		
-		c.gridy = 2; c.insets = new Insets(2, 3, 0, 4);
-		p2.add(db, c);
-		
-		
-		add(p2, BorderLayout.CENTER);
-		
-		pack();
-	}
-	
-	
-	public void nextAddActionListener(ActionListener a) {
-		next.addActionListener(a);
-	}
-	
-	
-	public String getAlias() { return alias.getText(); }
-	public String getHost() { return host.getText(); }
-	public String getDB() { return db.getText(); }
-	
-	
-	protected JButton next;
-	protected JTextField alias, host, db;
-
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    protected javax.swing.JTextField alias;
+    protected javax.swing.JTextField db;
+    protected javax.swing.JTextField host;
+    protected javax.swing.JButton next;
+    protected javax.swing.JLabel jLabel1;
+    protected javax.swing.JLabel jLabel2;
+    protected javax.swing.JLabel jLabel3;
+    // End of variables declaration//GEN-END:variables
+    
 }

Modified: trunk/src/net/sf/plantlore/client/login/Login.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-11 15:41:14 UTC (rev 128)
+++ trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-12 11:01:19 UTC (rev 129)
@@ -33,12 +33,21 @@
 	private DBLayerFactory factory = null;
 	private DBLayer dblayer;
 	
+	/**
+	 * Create a new login model. The DBLayer factory will be used to produce 
+	 * new DBLayers.
+	 *  
+	 * @param factory The factory that will be used to create a new DBLayer. 
+	 */
 	public Login(DBLayerFactory factory) {
 		this.factory = factory;
 	}
 	
 	
-	
+	/**
+	 * Load saved information about the database connections.
+	 *
+	 */
 	protected void load() {
 		// TODO: JAKUB: nacist z XML souboru se jmenem `file` informace o databazich (triplety) do kolekce dbinfo.
 		
@@ -49,21 +58,41 @@
 		// TODO: JAKUB: ulozit kolekci dbinfo zpatky do XML souboru se jmenem `file`.
 	}
 	
-	
+
+	/**
+	 * Create a new record, add it to the list of connections and save that information for
+	 * future use.
+	 * 
+	 * @param alias	Alias of the database.
+	 * @param host	Hostname of the computer where the server dwells.
+	 * @param port	Port where the server listens.
+	 * @param db		Identifier of the database to which the User wants to connect.
+	 */
 	public void createRecord(String alias, String host, int port, String db) {
-		System.out.println("Creating record " + alias);
 		DBInfo r = new DBInfo(alias, host, port, db, new String[5]);
 		dbinfo.add(r);
 		save();
 		setChanged(); notifyObservers();
 	}
 	
-	public void deleteSelected() {
+	/**
+	 * Delete the selected record.
+	 *
+	 */
+	public void deleteSelectedRecord() {
 		dbinfo.remove(selected);
 		save();
 		this.setChanged(); this.notifyObservers();
 	}
 	
+	/**
+	 * Update the selected record.
+	 * 
+	 * @param alias	Alias of the database.
+	 * @param host	Hostname of the computer where the server dwells.
+	 * @param port	Port where the server listens.
+	 * @param db		Identifier of the database to which the User wants to connect.
+	 */
 	public void updateSelectedRecord(String alias, String host, int port, String db) {
 		selected.alias = alias;
 		selected.host = host;
@@ -72,33 +101,48 @@
 		this.setChanged(); this.notifyObservers();
 	}
 	
+	/**
+	 * 
+	 * @return
+	 */
 	public DBInfo[] getRecords() {
 		// Well, this sucks! The ugliest way to do things... is to have a Cloneable interface and don't use it.
 		// Seeing is believing: http://java.sun.com/j2se/1.5.0/docs/api/java/util/Collection.html#toArray(T[])
 		return dbinfo.toArray(new DBInfo[0]);
 	}
 	
+	/**
+	 * Set the selected record.
+	 * 
+	 * @param index	The index of the selected record. Zero means first. Negative means nothing gets selected.
+	 */
 	public void setSelected(int index) {
 		if(index >= 0) selected = dbinfo.elementAt(index); else selected = null;		
 	}
 	
+	/**
+	 * @return	The selected record.
+	 */
 	public DBInfo getSelected() {
 		return selected;
 	}
 	
+	
 	public DBLayer connectToSelected(String name, String password) throws NotBoundException, RemoteException, DBLayerException {
 		if(selected == null) return null;
 		dblayer = factory.create(selected.host, selected.port);
 		dblayer.initialize(name, password, selected.db);
 		selected.promoteUser(name);
+		save();
+		// Everything went fine.
+		this.setChanged(); this.notifyObservers(dblayer);
 		return dblayer;
 	}
 	
-	public DBLayer getDBLayer() { return dblayer; }
-	
-	
-	
-	
-
-
+	/**
+	 * @return The last DBLayer that was created.  
+	 */	
+	public DBLayer getDBLayer() { 
+		return dblayer; 
+	}
 }

Modified: trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-11 15:41:14 UTC (rev 128)
+++ trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-12 11:01:19 UTC (rev 129)
@@ -12,54 +12,61 @@
 	private Login model;
 	private LoginView view;
 	
+	private ItemView itemView;
+	private ItemCtrl itemCtrl;
+	private AuthView authView;
 	
+	
+	
 	public LoginCtrl(Login login, LoginView loginview) {
 		this.view = loginview; this.model = login;
+		// Create Item Add/Edit dialog.
+		itemView = new ItemView(model);
+		itemCtrl = new ItemCtrl(model, itemView);
+		// Create Authorization dialog.
+		authView = new AuthView(model);
+		new AuthCtrl(model, authView);
 		
-		view.listAddListSelectionListener(new ListSelectionListener() {
-			public void valueChanged(ListSelectionEvent e) {
-				model.setSelected(e.getFirstIndex());
-			}
-		});
 		
-		view.addAddActionListener(new AbstractAction() {
-			public void actionPerformed(ActionEvent arg0) {
-				ItemView i = new ItemView(model);
-				i.setTitle("Add");
-				ItemCtrl c = new ItemCtrl(model, i);
-				c.setMode(ItemCtrl.Mode.ADD);
-				i.setVisible(true);
-				System.out.println("Adding dialog opened.");
-			}
-		});
-		
-		view.editAddActionListener(new AbstractAction() {
-			public void actionPerformed(ActionEvent arg0) {
-				if(model.getSelected() == null) return;
-				ItemView i = new ItemView(model);
-				i.setTitle("Edit");
-				i.fillWithSelected();
-				ItemCtrl c = new ItemCtrl(model, i);
-				c.setMode(ItemCtrl.Mode.EDIT);
-				i.setVisible(true);
-			}
-		});
-				
-		view.removeAddActionListener(new AbstractAction() {
-			public void actionPerformed(ActionEvent arg0) {
-				model.deleteSelected();				
-			}
-		});
-		
-		view.nextAddActionListener(new AbstractAction() {
-			public void actionPerformed(ActionEvent arg0) {
-				if(model.getSelected() == null) return; // Must select somethin'								
-				AuthView a = new AuthView(model);
-				AuthCtrl c = new AuthCtrl(model, a);
-				a.setVisible(true);
-			}
-		});
-		
+		view.choice.addListSelectionListener(new ChoiceChanged());
+		view.add.addActionListener(new AddRecord());
+		view.edit.addActionListener(new EditRecord());
+		view.remove.addActionListener(new RemoveRecord());
+		view.next.addActionListener(new Next());
 	}
+	
+	class ChoiceChanged implements ListSelectionListener {
+		public void valueChanged(ListSelectionEvent e) {
+			model.setSelected(e.getFirstIndex());
+		}	
+	}
+	
+	class AddRecord extends AbstractAction {
+		public void actionPerformed(ActionEvent arg0) {
+			itemCtrl.setMode(ItemCtrl.Mode.ADD);
+			itemView.setVisible(true);
+		}
+	}
+	
+	class  RemoveRecord extends AbstractAction {
+		public void actionPerformed(ActionEvent arg0) {
+			model.deleteSelectedRecord();
+		}
+	}
+	
+	class EditRecord extends AbstractAction {
+		public void actionPerformed(ActionEvent arg0) {
+			if(model.getSelected() == null) return;
+			itemCtrl.setMode(ItemCtrl.Mode.EDIT);
+			itemView.setVisible(true);
+		}
+	}
+	
+	class Next extends AbstractAction {
+		public void actionPerformed(ActionEvent arg0) {
+			if(model.getSelected() != null)
+				authView.setVisible(true);
+		}
+	}
 
 }

Added: trunk/src/net/sf/plantlore/client/login/LoginView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginView.form	2006-04-11 15:41:14 UTC (rev 128)
+++ trunk/src/net/sf/plantlore/client/login/LoginView.form	2006-04-12 11:01:19 UTC (rev 129)
@@ -0,0 +1,114 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
+  <NonVisualComponents>
+    <Menu class="javax.swing.JPopupMenu" name="popup">
+      <Properties>
+        <Property name="name" type="java.lang.String" value="popup"/>
+      </Properties>
+      <SubComponents>
+        <MenuItem class="javax.swing.JMenuItem" name="add">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Add"/>
+          </Properties>
+        </MenuItem>
+        <MenuItem class="javax.swing.JMenuItem" name="edit">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Edit"/>
+          </Properties>
+        </MenuItem>
+        <MenuItem class="javax.swing.JMenuItem" name="remove">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Remove"/>
+          </Properties>
+        </MenuItem>
+      </SubComponents>
+    </Menu>
+  </NonVisualComponents>
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="3"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" attributes="0">
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Component id="jScrollPane1" alignment="1" pref="343" max="32767" attributes="0"/>
+                  <Group type="102" alignment="1" attributes="0">
+                      <Component id="remember" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace pref="157" max="32767" attributes="0"/>
+                      <Component id="next" min="-2" max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+              <Component id="jScrollPane1" pref="214" max="32767" attributes="0"/>
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="next" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="remember" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Component class="javax.swing.JButton" name="next">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="Continue"/>
+        <Property name="name" type="java.lang.String" value="next"/>
+      </Properties>
+    </Component>
+    <Container class="javax.swing.JScrollPane" name="jScrollPane1">
+      <AuxValues>
+        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
+      </AuxValues>
+
+      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+      <SubComponents>
+        <Component class="javax.swing.JList" name="choice">
+          <Properties>
+            <Property name="componentPopupMenu" type="javax.swing.JPopupMenu" editor="org.netbeans.modules.form.ComponentChooserEditor">
+              <ComponentRef name="popup"/>
+            </Property>
+            <Property name="model" type="javax.swing.ListModel" editor="org.netbeans.modules.form.editors2.ListModelEditor">
+              <StringArray count="0"/>
+            </Property>
+            <Property name="selectionMode" type="int" value="0"/>
+          </Properties>
+        </Component>
+      </SubComponents>
+    </Container>
+    <Component class="javax.swing.JCheckBox" name="remember">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="select automatically"/>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.EmptyBorderInfo">
+            <EmptyBorder bottom="0" left="0" right="0" top="0"/>
+          </Border>
+        </Property>
+        <Property name="margin" type="java.awt.Insets" editor="org.netbeans.beaninfo.editors.InsetsEditor">
+          <Insets value="[0, 0, 0, 0]"/>
+        </Property>
+      </Properties>
+    </Component>
+  </SubComponents>
+</Form>

Modified: trunk/src/net/sf/plantlore/client/login/LoginView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-11 15:41:14 UTC (rev 128)
+++ trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-12 11:01:19 UTC (rev 129)
@@ -1,99 +1,115 @@
+/*
+ * LoginView2.java
+ *
+ * Created on 9. duben 2006, 16:35
+ */
+
 package net.sf.plantlore.client.login;
 
-import java.awt.*;
-import java.awt.event.ActionListener;
-import java.awt.event.MouseAdapter;
-import java.awt.event.MouseEvent;
 import java.util.Observable;
 import java.util.Observer;
 
-import javax.swing.*;
-import javax.swing.event.ListSelectionListener;
+import javax.swing.JDialog;
 
-public class LoginView extends JDialog implements Observer {
+/**
+ *
+ * @author  yaa
+ */
+public class LoginView extends javax.swing.JFrame implements Observer {
 	
 	private Login model;
-	
-	
-	public LoginView(Login model) {
+    
+    /** Creates new form LoginView2 */
+    public LoginView(Login model) {
 		this.model = model;
 		model.addObserver(this);
-		setTitle("Login");
-		setSize(300,200);
-		setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
-		initComponents();
-		setLocationRelativeTo(null); // center of the screen
-	}
-	
-	
-	
-	protected void initComponents() {
-		
-		choice = new JList();
-		choice.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
-		
-		next = new JButton("next");
-		
-		JPanel panel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
-        panel.add(next);
-        
-		add(choice, BorderLayout.CENTER);
-		add(panel, BorderLayout.SOUTH);
-		
-		popup = new JPopupMenu();
-		add = new JMenuItem("Add a new item.");
-		edit = new JMenuItem("Edit this item.");
-		remove = new JMenuItem("Remove this item.");
-		popup.add(add);
-		popup.add(edit);
-		popup.add(remove);
-		
-		choice.addMouseListener(
-				new MouseAdapter() {
-					@Override
-					public void mouseReleased(MouseEvent e) {
-						if(e.isPopupTrigger()) popup.show(e.getComponent(), e.getX(), e.getY());						
-					}
-				});
-	}
-	
-	
-	
-	
+        initComponents();
+        setLocationRelativeTo(null); // center of the screen
+        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+    }
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        popup = new javax.swing.JPopupMenu();
+        add = new javax.swing.JMenuItem();
+        edit = new javax.swing.JMenuItem();
+        remove = new javax.swing.JMenuItem();
+        next = new javax.swing.JButton();
+        jScrollPane1 = new javax.swing.JScrollPane();
+        choice = new javax.swing.JList();
+        remember = new javax.swing.JCheckBox();
 
+        popup.setName("popup");
+        add.setText("Add");
+        popup.add(add);
 
+        edit.setText("Edit");
+        popup.add(edit);
 
+        remove.setText("Remove");
+        popup.add(remove);
 
-	public void update(Observable arg0, Object arg1) {
-		System.out.println("Updating");
+        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
+        next.setText("Continue");
+        next.setName("next");
+
+        choice.setComponentPopupMenu(popup);
+        choice.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
+        jScrollPane1.setViewportView(choice);
+
+        remember.setText("select automatically");
+        remember.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
+        remember.setMargin(new java.awt.Insets(0, 0, 0, 0));
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
+                        .add(remember)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 157, Short.MAX_VALUE)
+                        .add(next)))
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(next)
+                    .add(remember))
+                .addContainerGap())
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    
+    
+    public void update(Observable arg0, Object arg1) {
 		choice.setListData(model.getRecords());		
 	}
-	
-	
-	public void nextAddActionListener(ActionListener a) {
-		next.addActionListener(a);
-	}
-	
-	public void addAddActionListener(ActionListener a) {
-		add.addActionListener(a);
-	}
-	
-	public void editAddActionListener(ActionListener a) {
-		edit.addActionListener(a);
-	}
-	
-	public void removeAddActionListener(ActionListener a) {
-		remove.addActionListener(a);
-	}
-	
-	public void listAddListSelectionListener(ListSelectionListener a) {
-		choice.addListSelectionListener(a);
-	}
-	
-	
-	protected JList choice;
-	protected JButton next;
-	protected JMenuItem add, edit, remove;
-	protected JPopupMenu popup;
-
+    
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    protected javax.swing.JMenuItem add;
+    protected javax.swing.JList choice;
+    protected javax.swing.JMenuItem edit;
+    protected javax.swing.JScrollPane jScrollPane1;
+    protected javax.swing.JButton next;
+    protected javax.swing.JPopupMenu popup;
+    protected javax.swing.JCheckBox remember;
+    protected javax.swing.JMenuItem remove;
+    // End of variables declaration//GEN-END:variables
+    
 }



From krater at berlios.de  Wed Apr 12 14:17:33 2006
From: krater at berlios.de (krater at berlios.de)
Date: Wed, 12 Apr 2006 14:17:33 +0200
Subject: [Plantlore-dev] r130 - trunk/src/net/sf/plantlore/client/login
Message-ID: <200604121217.k3CCHXdJ024524@sheep.berlios.de>

Author: krater
Date: 2006-04-12 14:17:31 +0200 (Wed, 12 Apr 2006)
New Revision: 130

Modified:
   trunk/src/net/sf/plantlore/client/login/AuthCtrl.java
   trunk/src/net/sf/plantlore/client/login/LoginView.java
Log:
Bugfix: More careful extraction of names from dialogue AuthView (caused an exception in some cases).

Modified: trunk/src/net/sf/plantlore/client/login/AuthCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthCtrl.java	2006-04-12 11:01:19 UTC (rev 129)
+++ trunk/src/net/sf/plantlore/client/login/AuthCtrl.java	2006-04-12 12:17:31 UTC (rev 130)
@@ -17,10 +17,18 @@
 	class Next extends AbstractAction {
 		public void actionPerformed(ActionEvent arg0) {
 			try {
-				model.connectToSelected(view.user.getSelectedItem().toString(), new String(view.password.getPassword()));
-			} catch(Exception e) { System.err.println("The connection to the database couldn't be established!\n" + e); }
+				// Go very carefully here!
+				String user = (view.user.getSelectedItem() != null) ? view.user.getSelectedItem().toString() : null;
+				if(user != null) {
+					model.connectToSelected(user, new String(view.password.getPassword()));
+					view.setVisible(false);
+				}
+				else ; // TODO: fire something must be selected info!
+			} 
+			catch(Exception e) { 
+				System.err.println("The connection to the database couldn't be established!\n" + e); 
+			}
 			finally { view.password.setText(""); }
-			view.setVisible(false);
 		}
 	}
 

Modified: trunk/src/net/sf/plantlore/client/login/LoginView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-12 11:01:19 UTC (rev 129)
+++ trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-12 12:17:31 UTC (rev 130)
@@ -11,6 +11,8 @@
 
 import javax.swing.JDialog;
 
+import net.sf.plantlore.middleware.DBLayer;
+
 /**
  *
  * @author  yaa
@@ -96,8 +98,11 @@
     
     
     
-    public void update(Observable arg0, Object arg1) {
-		choice.setListData(model.getRecords());		
+    public void update(Observable source, Object parameter) {
+    	if(parameter == null)
+    		choice.setListData(model.getRecords());
+    	else if(parameter != null && parameter instanceof DBLayer)
+    		this.setVisible(false); // the database layer has been created, we are no longer neccessary
 	}
     
     



From krater at berlios.de  Wed Apr 12 15:05:59 2006
From: krater at berlios.de (krater at berlios.de)
Date: Wed, 12 Apr 2006 15:05:59 +0200
Subject: [Plantlore-dev] r131 - in trunk/src/net/sf/plantlore: client/login middleware server
Message-ID: <200604121305.k3CD5xXP012909@sheep.berlios.de>

Author: krater
Date: 2006-04-12 15:05:56 +0200 (Wed, 12 Apr 2006)
New Revision: 131

Modified:
   trunk/src/net/sf/plantlore/client/login/AuthView.java
   trunk/src/net/sf/plantlore/client/login/Login.java
   trunk/src/net/sf/plantlore/client/login/LoginView.java
   trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java
   trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
Log:
Improved the Login procedure so that it actually works ;)

Modified: trunk/src/net/sf/plantlore/client/login/AuthView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-12 12:17:31 UTC (rev 130)
+++ trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-12 13:05:56 UTC (rev 131)
@@ -92,7 +92,7 @@
 		DBInfo selected = model.getSelected();
 		if(selected == null) return;
 		user.removeAllItems();
-		String[] u = model.getSelected().users;
+		String[] u = selected.users;
 		int i = 0;
 		for (; i < u.length && u[i] != null; i++)	user.addItem(u[i]);
 		if (i > 0)	user.setSelectedIndex(0);

Modified: trunk/src/net/sf/plantlore/client/login/Login.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-12 12:17:31 UTC (rev 130)
+++ trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-12 13:05:56 UTC (rev 131)
@@ -5,6 +5,8 @@
 import java.util.Observable;
 import java.util.Vector;
 
+import org.apache.log4j.Logger;
+
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.middleware.DBLayerFactory;
 import net.sf.plantlore.server.DBLayerException;
@@ -19,7 +21,7 @@
  * 
  * 
  * @author Erik Kratochv?l, Jakub Kotowski
- * @version 0.5
+ * @version 0.9
  */
 public class Login extends Observable {
 	
@@ -32,6 +34,7 @@
 	
 	private DBLayerFactory factory = null;
 	private DBLayer dblayer;
+	private Logger logger;
 	
 	/**
 	 * Create a new login model. The DBLayer factory will be used to produce 
@@ -41,6 +44,8 @@
 	 */
 	public Login(DBLayerFactory factory) {
 		this.factory = factory;
+		logger = Logger.getLogger(this.getClass().getPackage().getName());
+		load();
 	}
 	
 	
@@ -50,6 +55,9 @@
 	 */
 	protected void load() {
 		// TODO: JAKUB: nacist z XML souboru se jmenem `file` informace o databazich (triplety) do kolekce dbinfo.
+		dbinfo.add(new DBInfo("# Testovac? datab?ze #", "", -1,
+				"jdbc:firebirdsql:natalka.kolej.mff.cuni.cz/3050:/mnt/data/temp/plantloreHIBdata.fdb", 
+				new String[] { "sysdba", null, null, null, null }));
 		
 		this.setChanged(); this.notifyObservers();
 	}
@@ -117,7 +125,8 @@
 	 * @param index	The index of the selected record. Zero means first. Negative means nothing gets selected.
 	 */
 	public void setSelected(int index) {
-		if(index >= 0) selected = dbinfo.elementAt(index); else selected = null;		
+		if(index >= 0) selected = dbinfo.elementAt(index); else selected = null;	
+		this.setChanged(); this.notifyObservers();
 	}
 	
 	/**
@@ -131,7 +140,7 @@
 	public DBLayer connectToSelected(String name, String password) throws NotBoundException, RemoteException, DBLayerException {
 		if(selected == null) return null;
 		dblayer = factory.create(selected.host, selected.port);
-		dblayer.initialize(name, password, selected.db);
+		dblayer.initialize(selected.db,name, password);
 		selected.promoteUser(name);
 		save();
 		// Everything went fine.
@@ -139,6 +148,10 @@
 		return dblayer;
 	}
 	
+	public void reconnect() {
+		
+	}
+	
 	/**
 	 * @return The last DBLayer that was created.  
 	 */	

Modified: trunk/src/net/sf/plantlore/client/login/LoginView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-12 12:17:31 UTC (rev 130)
+++ trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-12 13:05:56 UTC (rev 131)
@@ -28,6 +28,8 @@
         initComponents();
         setLocationRelativeTo(null); // center of the screen
         setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+        // See what's new.
+        update(null, null);
     }
     
     /** This method is called from within the constructor to

Modified: trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java
===================================================================
--- trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java	2006-04-12 12:17:31 UTC (rev 130)
+++ trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java	2006-04-12 13:05:56 UTC (rev 131)
@@ -68,6 +68,7 @@
 		
 		return db;
 	}
+	
 
 	/**
 	 * Create a new DBLayer.
@@ -84,6 +85,12 @@
 	 * with the remote database.
 	 */
 	public synchronized DBLayer create(String host, int port) throws RemoteException, NotBoundException {
+		// Some exceptional cases are handled specially.
+		if(host == null || host.equals("") || host.equalsIgnoreCase("localhost"))
+			return create();
+		
+		System.out.println("GOING RMI");
+		
 		// Connect to the remote server and obtain the RemoteDBLayerFactory
 		Registry registry = LocateRegistry.getRegistry(host, port);
 		RemoteDBLayerFactory remoteFactory = (RemoteDBLayerFactory) registry.lookup(RemoteDBLayerFactory.ID);

Modified: trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-12 12:17:31 UTC (rev 130)
+++ trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-12 13:05:56 UTC (rev 131)
@@ -90,10 +90,10 @@
         //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Temp/plantloreHIBdata.fdb");
         //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Kovo/DatabaseTest/database/plantlore.fdb");
         //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:/mnt/data/temp/plantloreHIBdata.fdb");
-        cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:/data/plantloreHIBdata.fdb");
+        cfg.setProperty("hibernate.connection.url", dbID);
         //cfg.setProperty("hibernate.connection.url", "jdbc:postgresql://localhost:5432/plantlore");
-        cfg.setProperty("hibernate.connection.username", "sysdba");
-        cfg.setProperty("hibernate.connection.password", "masterkey");        
+        cfg.setProperty("hibernate.connection.username", user);
+        cfg.setProperty("hibernate.connection.password", password);        
         try {
             // Build session factory
             SessionFactory sessionFactory = cfg.buildSessionFactory();



From kovo at berlios.de  Wed Apr 12 17:08:30 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Wed, 12 Apr 2006 17:08:30 +0200
Subject: [Plantlore-dev] r132 - trunk/analysis/database
Message-ID: <200604121508.k3CF8UNT004486@sheep.berlios.de>

Author: kovo
Date: 2006-04-12 17:08:29 +0200 (Wed, 12 Apr 2006)
New Revision: 132

Added:
   trunk/analysis/database/UkladaniHistorie.doc
Log:
Description of how deleted/updated/inserted records should be saved in History (by Lada)

Added: trunk/analysis/database/UkladaniHistorie.doc
===================================================================
(Binary files differ)


Property changes on: trunk/analysis/database/UkladaniHistorie.doc
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From krater at berlios.de  Wed Apr 12 17:11:12 2006
From: krater at berlios.de (krater at berlios.de)
Date: Wed, 12 Apr 2006 17:11:12 +0200
Subject: [Plantlore-dev] r133 - in trunk/src/net/sf/plantlore: client/login common
Message-ID: <200604121511.k3CFBCM4004725@sheep.berlios.de>

Author: krater
Date: 2006-04-12 17:11:11 +0200 (Wed, 12 Apr 2006)
New Revision: 133

Modified:
   trunk/src/net/sf/plantlore/client/login/AuthView.java
   trunk/src/net/sf/plantlore/client/login/Login.java
   trunk/src/net/sf/plantlore/common/AutoComboBox.java
Log:
Very nasty bug in AutoComboBox fixed (adding new elements to the autocombobox while it was not visible on the screen caused an exception).
Authview uses the AutoComboBox now.
Login contains a bug that is yet to be found :(

Modified: trunk/src/net/sf/plantlore/client/login/AuthView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-12 15:08:29 UTC (rev 132)
+++ trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-12 15:11:11 UTC (rev 133)
@@ -11,6 +11,8 @@
 
 import javax.swing.JDialog;
 
+import net.sf.plantlore.common.AutoComboBox;
+
 /**
  *
  * @author  yaa
@@ -37,7 +39,7 @@
     private void initComponents() {
         jLabel1 = new javax.swing.JLabel();
         jLabel2 = new javax.swing.JLabel();
-        user = new javax.swing.JComboBox();
+        user = new AutoComboBox();
         password = new javax.swing.JPasswordField();
         next = new javax.swing.JButton();
 
@@ -45,7 +47,9 @@
         jLabel1.setText("Username:");
 
         jLabel2.setText("Password:");
-
+        
+        user.setStrict(false);
+        
         next.setText("Authorize");
 
         org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
@@ -91,11 +95,9 @@
     public void update(Observable arg0, Object arg1) {
 		DBInfo selected = model.getSelected();
 		if(selected == null) return;
+		System.out.println("selected = " + selected);
 		user.removeAllItems();
-		String[] u = selected.users;
-		int i = 0;
-		for (; i < u.length && u[i] != null; i++)	user.addItem(u[i]);
-		if (i > 0)	user.setSelectedIndex(0);
+		user.addItems(selected.users);
 	}
     
     
@@ -104,7 +106,7 @@
     protected javax.swing.JLabel jLabel1;
     protected javax.swing.JLabel jLabel2;
     protected javax.swing.JPasswordField password;
-    protected javax.swing.JComboBox user;
+    protected AutoComboBox user;
     // End of variables declaration//GEN-END:variables
 
 	

Modified: trunk/src/net/sf/plantlore/client/login/Login.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-12 15:08:29 UTC (rev 132)
+++ trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-12 15:11:11 UTC (rev 133)
@@ -54,6 +54,7 @@
 	 *
 	 */
 	protected void load() {
+		logger.debug("Loading the stored list of databases.");
 		// TODO: JAKUB: nacist z XML souboru se jmenem `file` informace o databazich (triplety) do kolekce dbinfo.
 		dbinfo.add(new DBInfo("# Testovac? datab?ze #", "", -1,
 				"jdbc:firebirdsql:natalka.kolej.mff.cuni.cz/3050:/mnt/data/temp/plantloreHIBdata.fdb", 
@@ -63,7 +64,9 @@
 	}
 	
 	protected void save() {
+		logger.debug("Saving the list of databases.");
 		// TODO: JAKUB: ulozit kolekci dbinfo zpatky do XML souboru se jmenem `file`.
+		
 	}
 	
 
@@ -79,6 +82,7 @@
 	public void createRecord(String alias, String host, int port, String db) {
 		DBInfo r = new DBInfo(alias, host, port, db, new String[5]);
 		dbinfo.add(r);
+		logger.debug("New database record has been created " + r);
 		save();
 		setChanged(); notifyObservers();
 	}
@@ -89,6 +93,8 @@
 	 */
 	public void deleteSelectedRecord() {
 		dbinfo.remove(selected);
+		logger.debug("The selected record has been removed " + selected);
+		selected = null;
 		save();
 		this.setChanged(); this.notifyObservers();
 	}
@@ -106,6 +112,7 @@
 		selected.host = host;
 		selected.port = port;
 		selected.db = db;
+		logger.debug("The selected record has been updated " + selected);
 		this.setChanged(); this.notifyObservers();
 	}
 	
@@ -125,7 +132,8 @@
 	 * @param index	The index of the selected record. Zero means first. Negative means nothing gets selected.
 	 */
 	public void setSelected(int index) {
-		if(index >= 0) selected = dbinfo.elementAt(index); else selected = null;	
+		if(index >= 0) selected = dbinfo.elementAt(index); else selected = null;
+		logger.debug("Another record has been selected " + selected);
 		this.setChanged(); this.notifyObservers();
 	}
 	
@@ -138,10 +146,20 @@
 	
 	
 	public DBLayer connectToSelected(String name, String password) throws NotBoundException, RemoteException, DBLayerException {
-		if(selected == null) return null;
+		if(selected == null) {
+			logger.debug("The System cannot create a connection when nothing was selected!");
+			return null;
+		}
+		selected.promoteUser(name);
+		
+		// Create a new database layer.
+		logger.info("Asking the DBLayerFactory for a new DBLayer @ " + selected.host + ":" + selected.port);
 		dblayer = factory.create(selected.host, selected.port);
+		// Initialize the database layer.
+		logger.info("Initializing that DBLayer...");
 		dblayer.initialize(selected.db,name, password);
-		selected.promoteUser(name);
+		logger.info("DBLayer initialized.");
+		// Save the current state.
 		save();
 		// Everything went fine.
 		this.setChanged(); this.notifyObservers(dblayer);

Modified: trunk/src/net/sf/plantlore/common/AutoComboBox.java
===================================================================
--- trunk/src/net/sf/plantlore/common/AutoComboBox.java	2006-04-12 15:08:29 UTC (rev 132)
+++ trunk/src/net/sf/plantlore/common/AutoComboBox.java	2006-04-12 15:11:11 UTC (rev 133)
@@ -34,7 +34,7 @@
  * record "------" or "not specified" instead.
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
- * @version 1.1
+ * @version 1.2
  * @since The beginning of time.
  */
 public class AutoComboBox extends JComboBox {
@@ -42,6 +42,10 @@
 	protected boolean allowNew = false;
 	protected int capacity = 32;
 	
+	
+	public AutoComboBox() {
+		this(new String[] { null });		
+	}
 
 	/**
 	 * Create the AutoComboBox with given array of choices.
@@ -49,12 +53,13 @@
 	 * @param choices	<b>Sorted</b> list of available choices (items).
 	 */
 	public AutoComboBox(Object[] choices) {
-		super(choices); // base class constructor
 		setEditable(true);
+
+		addItems(choices);
 		
 		JTextField editor = (JTextField)getEditor().getEditorComponent();
 		AutoDocument a = new AutoDocument(); // change the model ~~> AutoDocument 
-		editor.setDocument(a); editor.addKeyListener(a); editor.addFocusListener(a);
+		editor.setDocument(a); editor.addKeyListener(a); editor.addFocusListener(a);;
 	}
 	
 	/**
@@ -71,8 +76,15 @@
 	 */
 	public void setCapacity(int capacity) { this.capacity = capacity; }
 	
+		
+	public void addItems(Object[] items) {
+		for(Object item : items)
+			if(item != null) 
+				this.addItem(item);
+	}
 	
 	
+	
 	private class AutoDocument extends PlainDocument implements KeyListener, FocusListener {
 		
 		/** Prevent entering the setMatch method recursively. */
@@ -87,7 +99,16 @@
 		synchronized private void setMatch(String prefix, boolean popup) {
 			if (!prevent) {
 				prevent = true;
-				setPopupVisible(popup); // make sure popup is/isn't visible
+				/*----------------------------------------------------------------
+				 * Another amazing example of hyperactivity of this component.
+				 * When someone calls addItem(), that item gets automatically selected.
+				 * This means insertString() and setMatch() are called.
+				 * 
+				 * The problem is, that this method is likely to show the popup
+				 * part of the ComboBox; if the AutoComboBox is not currently
+				 * visible on the screen, that call will throw an exception.
+				 *----------------------------------------------------------------*/
+				if(isShowing()) setPopupVisible(popup); // make sure popup is/isn't visible
 				try {
 					boolean noMatch = true;
 					if (prefix == null) prefix = getText(0, getLength());



From kovo at berlios.de  Wed Apr 12 17:15:00 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Wed, 12 Apr 2006 17:15:00 +0200
Subject: [Plantlore-dev] r134 - trunk/analysis/database
Message-ID: <200604121515.k3CFF0Qr005007@sheep.berlios.de>

Author: kovo
Date: 2006-04-12 17:14:59 +0200 (Wed, 12 Apr 2006)
New Revision: 134

Added:
   trunk/analysis/database/UkladaniHistorie.odt
   trunk/analysis/database/UkladaniHistorie.pdf
Removed:
   trunk/analysis/database/UkladaniHistorie.doc
Log:
Converted to Open Document Format (and for those without OO.org, KOffice, StarOffice etc. we have pdf version)

Deleted: trunk/analysis/database/UkladaniHistorie.doc
===================================================================
(Binary files differ)

Added: trunk/analysis/database/UkladaniHistorie.odt
===================================================================
(Binary files differ)


Property changes on: trunk/analysis/database/UkladaniHistorie.odt
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/analysis/database/UkladaniHistorie.pdf
===================================================================
(Binary files differ)


Property changes on: trunk/analysis/database/UkladaniHistorie.pdf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From fraktalek at berlios.de  Wed Apr 12 19:33:30 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Wed, 12 Apr 2006 19:33:30 +0200
Subject: [Plantlore-dev] r135 - in trunk: src/net/sf/plantlore/common test test/net test/net/sf test/net/sf/plantlore test/net/sf/plantlore/common
Message-ID: <200604121733.k3CHXU4X014468@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-12 19:32:57 +0200 (Wed, 12 Apr 2006)
New Revision: 135

Added:
   trunk/src/net/sf/plantlore/common/Pair.java
   trunk/test/net/
   trunk/test/net/sf/
   trunk/test/net/sf/plantlore/
   trunk/test/net/sf/plantlore/common/
   trunk/test/net/sf/plantlore/common/PairTest.java
Log:
Pair class added together with it's respective JUnit test.


Added: trunk/src/net/sf/plantlore/common/Pair.java
===================================================================
--- trunk/src/net/sf/plantlore/common/Pair.java	2006-04-12 15:14:59 UTC (rev 134)
+++ trunk/src/net/sf/plantlore/common/Pair.java	2006-04-12 17:32:57 UTC (rev 135)
@@ -0,0 +1,92 @@
+/*
+ * Pair.java
+ *
+ * Created on 12. duben 2006, 17:08
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.common;
+
+/**
+ *
+ * @author Jakub
+ */
+public class Pair<A, B> {
+    private A a;
+    private B b;
+    
+    /** Creates a new instance of Pair */
+    public Pair(A a, B b) {
+        this.a = a;
+        this.b = b;
+    }
+    
+    /** Returns the first element of this pair.
+     * @return the first element of this pair
+     */
+    public A getFirst() {
+        return a;
+    }
+
+    /** Sets the first element of this pair.
+     */
+    public void setFirst(A a) {
+        this.a = a;
+    }
+
+    /** Returns the second element of this pair.
+     * @return the second element of this pair
+     */
+    public B getSecond() {
+        return b;
+    }
+
+    /** Sets the second element of this pair.
+     * @return the second element of this pair
+     */
+    public void setSecond(B b) {
+        this.b = b;
+    }
+
+    /** Compares this object to the parameter o.
+     *
+     *  Uses the elements equals methods.
+     *
+     * @return true if o is instance of Pair and first and second elements equal respectively.
+     * @return false otherwise
+     */
+    public boolean equals(Object o) {
+        if (!(o instanceof Pair)) //can't use generics with instanceof - it doesn't even make sense thanks to the type erasure technique using which generics are implemented
+            return false;
+        else 
+        {
+            Pair p = (Pair)o; //(Pair<C,D>)o  cast is unchecked and doesn't make sense either because the actual class is always just Pair
+            return ( a.equals(p.getFirst()) && b.equals(p.getSecond()) );
+        }
+    }
+    
+    /** Converts this pair to String.
+     *
+     * @return "[first,second]" in case first and second are both instances of String
+     * @return if only one of the elements is a String then this one is returned
+     * @return "[first.toString,second.toString]" if both elements are non-strings
+     * @return null otherwise
+     */
+    public String toString() 
+    {
+        if (a == null || b == null)
+            return null;
+        if ((a instanceof String)&&(b instanceof String))
+            return "["+a+","+b+"]";
+
+        if (a instanceof String)
+            return (String) a; //heh :)
+
+        if (b instanceof String)
+            return (String) b; //hmm:)
+        
+        return "["+a+","+b+"]";
+    }
+}

Added: trunk/test/net/sf/plantlore/common/PairTest.java
===================================================================
--- trunk/test/net/sf/plantlore/common/PairTest.java	2006-04-12 15:14:59 UTC (rev 134)
+++ trunk/test/net/sf/plantlore/common/PairTest.java	2006-04-12 17:32:57 UTC (rev 135)
@@ -0,0 +1,116 @@
+/*
+ * PairTest.java
+ * JUnit based test
+ *
+ * Created on 12. duben 2006, 17:42
+ */
+
+package net.sf.plantlore.common;
+
+import junit.framework.*;
+
+/**
+ *
+ * @author kotoj1am
+ */
+public class PairTest extends TestCase {
+        Pair<String, Integer> si;
+        Pair<String, String> ss;
+        Pair<Integer, Integer> ii;
+        
+    public PairTest(String testName) {
+        super(testName);
+    }
+
+    protected void setUp() throws Exception {
+        System.out.println("setting up");
+        si = new Pair<String, Integer>("FedoraCore",5);
+        ss = new Pair<String, String>("John","Doe");
+        ii = new Pair<Integer,Integer>(5,6);
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    public static Test suite() {
+        TestSuite suite = new TestSuite(PairTest.class);
+        
+        return suite;
+    }
+
+    /**
+     * Test of getFirst method, of class net.sf.plantlore.common.Pair.
+     */
+    public void testGetFirst() {
+        System.out.println("getFirst");
+        
+        String s = si.getFirst();
+        assertEquals("FedoraCore",s);
+        
+        s = ss.getFirst();
+        assertEquals("John",s);
+        
+        assertEquals((int)5,(int)ii.getFirst());
+    }
+
+    /**
+     * Test of setFirst method, of class net.sf.plantlore.common.Pair.
+     */
+    public void testSetFirst() {
+        System.out.println("setFirst");
+        ss.setFirst("xxx");
+        assertEquals("xxx", ss.getFirst());
+        
+        ii.setFirst(-8);
+        assertEquals((int)-8, (int)ii.getFirst());
+    }
+
+    /**
+     * Test of getSecond method, of class net.sf.plantlore.common.Pair.
+     */
+    public void testGetSecond() {
+        System.out.println("getSecond");
+        assertEquals(5, (int)si.getSecond());
+        assertEquals("Doe", ss.getSecond());
+        assertEquals(6,(int)ii.getSecond());
+    }
+
+    /**
+     * Test of setSecond method, of class net.sf.plantlore.common.Pair.
+     */
+    public void testSetSecond() {
+        System.out.println("setSecond");
+        ii.setSecond(-9);
+        assertEquals(-9, (int)ii.getSecond());
+        
+        ss.setSecond("xxx");
+        assertEquals("xxx", ss.getSecond());
+    }
+
+    /**
+     * Test of equals method, of class net.sf.plantlore.common.Pair.
+     */
+    public void testEquals() {
+        System.out.println("equals");
+        
+        Pair<String,Integer> t = new Pair<String,Integer>("FedoraCore",5);
+        assertTrue(t.equals(si));
+        
+        Pair<String,String> u = new Pair<String,String>("John","Doe");
+        assertTrue(u.equals(ss));
+        
+        assertFalse(t.equals(u));
+        assertFalse(t.equals(5));
+    }
+
+    /**
+     * Test of toString method, of class net.sf.plantlore.common.Pair.
+     */
+    public void testToString() {
+        System.out.println("toString");
+        assertEquals("[John,Doe]",ss.toString());
+        assertEquals("[5,6]",ii.toString());
+        assertEquals("FedoraCore",si.toString());
+    }
+    
+}



From fraktalek at berlios.de  Wed Apr 12 19:37:50 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Wed, 12 Apr 2006 19:37:50 +0200
Subject: [Plantlore-dev] r136 - trunk/src/net/sf/plantlore/common
Message-ID: <200604121737.k3CHbo1P015251@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-12 19:37:47 +0200 (Wed, 12 Apr 2006)
New Revision: 136

Modified:
   trunk/src/net/sf/plantlore/common/Pair.java
Log:
JavaDoc updated a little.


Modified: trunk/src/net/sf/plantlore/common/Pair.java
===================================================================
--- trunk/src/net/sf/plantlore/common/Pair.java	2006-04-12 17:32:57 UTC (rev 135)
+++ trunk/src/net/sf/plantlore/common/Pair.java	2006-04-12 17:37:47 UTC (rev 136)
@@ -3,21 +3,24 @@
  *
  * Created on 12. duben 2006, 17:08
  *
- * To change this template, choose Tools | Template Manager
- * and open the template in the editor.
  */
 
 package net.sf.plantlore.common;
 
-/**
+/** Class to hold pairs of objects.
  *
+ *
  * @author Jakub
  */
 public class Pair<A, B> {
     private A a;
     private B b;
     
-    /** Creates a new instance of Pair */
+    /** Creates a new instance of Pair 
+     *
+     * Pair() constructor (without arguments) is not provided deliberately!
+     * It would only cause problems in my opinion.
+     */
     public Pair(A a, B b) {
         this.a = a;
         this.b = b;



From kovo at berlios.de  Wed Apr 12 20:12:38 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Wed, 12 Apr 2006 20:12:38 +0200
Subject: [Plantlore-dev] r137 - in trunk/src/net/sf/plantlore: common/record config/hibernate
Message-ID: <200604121812.k3CICcso030824@sheep.berlios.de>

Author: kovo
Date: 2006-04-12 20:12:27 +0200 (Wed, 12 Apr 2006)
New Revision: 137

Modified:
   trunk/src/net/sf/plantlore/common/record/Author.java
   trunk/src/net/sf/plantlore/common/record/Publication.java
   trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml
Log:
Update of DB mapping and holder objects - CDELETED column was not mapped

Modified: trunk/src/net/sf/plantlore/common/record/Author.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Author.java	2006-04-12 17:37:47 UTC (rev 136)
+++ trunk/src/net/sf/plantlore/common/record/Author.java	2006-04-12 18:12:27 UTC (rev 137)
@@ -27,6 +27,7 @@
     private String phoneNumber;
     private String email;
     private String url;
+    private Integer deleted;    
     private String note;
     
     /** Constants with column mapping (used for building select queries) */
@@ -39,6 +40,7 @@
     public static final String EMAIL = "email";    
     public static final String URL = "url";
     public static final String NOTE = "note";    
+    public static final String DELETED = "deleted";
     
     /** Creates a new instance of AuthorRecord */
     public Author() {
@@ -188,8 +190,26 @@
     public void setUrl(String url) {
         this.url = url;
     }
+
+    /**
+     *   Get flag telling whether the record has been deleted
+     *   @return flag telling whether the record has been deleted. Value 1 means deleted.
+     *   @see setDeleted
+     */
+    public Integer getDeleted() {
+        return this.deleted;
+    }
     
     /**
+     *   Set flag telling whether the record has been deleted
+     *   @param deleted flag telling whether the record has been deleted. Value 1 means deleted.
+     *   @see getDeleted
+     */
+    public void setDeleted(Integer deleted) {
+        this.deleted = deleted;
+    }       
+    
+    /**
      *   Get note about the author
      *   @return string containing note about the author
      *   @see setNote

Modified: trunk/src/net/sf/plantlore/common/record/Publication.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-12 17:37:47 UTC (rev 136)
+++ trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-12 18:12:27 UTC (rev 137)
@@ -28,7 +28,7 @@
     private String referenceCitation;
     private String referenceDetail;
     private String url;
-    private int deleted;
+    private Integer deleted;
     private String note;
 
     /** Constants with column mapping (used for building select queries) */
@@ -196,7 +196,7 @@
      *   @return flag telling whether the record has been deleted. Value 1 means deleted.
      *   @see setDeleted
      */
-    public int getDeleted() {
+    public Integer getDeleted() {
         return this.deleted;
     }
     
@@ -205,7 +205,7 @@
      *   @param deleted flag telling whether the record has been deleted. Value 1 means deleted.
      *   @see getDeleted
      */
-    public void setDeleted(int deleted) {
+    public void setDeleted(Integer deleted) {
         this.deleted = deleted;
     }   
     

Modified: trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml	2006-04-12 17:37:47 UTC (rev 136)
+++ trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml	2006-04-12 18:12:27 UTC (rev 137)
@@ -44,6 +44,10 @@
                 name="Url"
                 not-null="false"                
                 type="java.lang.String"/> 
+      <property column="CDELETE"
+                name="deleted"
+                not-null="false"                
+                type="java.lang.Integer"/>   
       <property column="CNOTE"
                 length="256"
                 name="note"

Modified: trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml	2006-04-12 17:37:47 UTC (rev 136)
+++ trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml	2006-04-12 18:12:27 UTC (rev 137)
@@ -42,6 +42,10 @@
                 length="255"
                 name="referenceCitation"
                 not-null="true"                
-                type="java.lang.String"/>                                                         
+                type="java.lang.String"/>   
+      <property column="CDELETE"
+                name="deleted"
+                not-null="false"                
+                type="java.lang.Integer"/>                                                         
    </class>
 </hibernate-mapping>



From kovo at berlios.de  Wed Apr 12 20:16:25 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Wed, 12 Apr 2006 20:16:25 +0200
Subject: [Plantlore-dev] r138 - trunk/src/net/sf/plantlore/client
Message-ID: <200604121816.k3CIGPZh000161@sheep.berlios.de>

Author: kovo
Date: 2006-04-12 20:16:15 +0200 (Wed, 12 Apr 2006)
New Revision: 138

Modified:
   trunk/src/net/sf/plantlore/client/AppCore.java
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/AppCoreView.java
Log:
Updated so that connection to the DB is automatic (not using the login dialog). All the updates are commented out (or uncommented if the original was there), you have to uncomment it to use automatic login

Modified: trunk/src/net/sf/plantlore/client/AppCore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-12 18:12:27 UTC (rev 137)
+++ trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-12 18:16:15 UTC (rev 138)
@@ -48,6 +48,17 @@
         logger = Logger.getLogger(this.getClass().getPackage().getName());        
         prefs = Preferences.userNodeForPackage(this.getClass());
         
+        // This is here in order to skip login procedure and connect to the database automatically
+        // For developement purposes only - so that we don't have to go through login each time we run Plantlore 
+/*        
+        this.database = new HibernateDBLayer();
+        try {        
+            database.initialize("jdbc:firebirdsql:localhost/3050:c:/Temp/Plantlore/plantloreHIBdata.fdb","sysdba","masterkey");
+        } catch (Exception e) {
+            
+        }
+        // --- End of temporary code
+*/        
         logger.debug("AppCore observers notified");
     }
     

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-12 18:12:27 UTC (rev 137)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-12 18:16:15 UTC (rev 138)
@@ -108,6 +108,10 @@
         
         // TODO: Comb the code here KR at TER
         view.setLoginAction(new LoginAction());
+        
+        // This is here in order to skip login procedure and connect to the database automatically
+        // For developement purposes only - so that we don't have to go through login each time we run Plantlore 
+        // view.initOverview();
     }
     
     /** Handles click to menu item Settings.
@@ -383,7 +387,7 @@
             //toto volani historie nebude v menu, ale jako tlacitko pro vybrany zaznam        
             //o vybranem zaznamu predame informace, ktere chceme o nem v historii zobrazit
             //jmeno rosliny, jmeno autora a lokaci a idOccurrences
-            historyModel = new History(model.getDatabase(),"Adis Abeba", "Lada", "Praha v?chod", 1);
+            historyModel = new History(model.getDatabase(),"Adis Abeba", "Lada", "Praha v??chod", 1);
             historyView = new HistoryView(historyModel, view);
             historyCtrl = new HistoryCtrl(historyModel, historyView);
             historyView.show();  

Modified: trunk/src/net/sf/plantlore/client/AppCoreView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-12 18:12:27 UTC (rev 137)
+++ trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-12 18:16:15 UTC (rev 138)
@@ -278,6 +278,8 @@
         OverviewTableModel otm = model.getTableModel();
         //FIXME: what if otm == null ????????????
         overview.setModel(otm);
+        
+        // Comment to established db connection automatically without the login procedure        
         overviewScrollPane.setPreferredSize(new Dimension(800, (otm.getRowCount()+1)*25));
        
         for (int i = 0; i < otm.getColumnCount(); i++) {



From kovo at berlios.de  Wed Apr 12 20:29:45 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Wed, 12 Apr 2006 20:29:45 +0200
Subject: [Plantlore-dev] r139 - trunk/src/net/sf/plantlore/server
Message-ID: <200604121829.k3CITjSr005712@sheep.berlios.de>

Author: kovo
Date: 2006-04-12 20:29:44 +0200 (Wed, 12 Apr 2006)
New Revision: 139

Modified:
   trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
Log:
Fix bug with indexing of results (calls to more() should now use index 0 for the first result)

Modified: trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-12 18:16:15 UTC (rev 138)
+++ trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-12 18:29:44 UTC (rev 139)
@@ -192,8 +192,8 @@
         if (from>to) {
             logger.error("Cannot read rows from "+from+" to "+to+" because from > to");
             throw new DBLayerException("Cannot read rows from "+from+" to "+to+" because from > to");
-        }
-        if (from < 1) {
+        } 
+        if (from < 0) {
             logger.error("Cannot read rows starting at the given index: "+from);
             throw new DBLayerException("Cannot read rows starting at the given index: "+from);            
         }
@@ -403,4 +403,4 @@
 	}
 	//===============================================================
 	      
-}
\ No newline at end of file
+}



From kovo at berlios.de  Wed Apr 12 20:30:57 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Wed, 12 Apr 2006 20:30:57 +0200
Subject: [Plantlore-dev] r140 - trunk/src/net/sf/plantlore/client/authors
Message-ID: <200604121830.k3CIUvWG006351@sheep.berlios.de>

Author: kovo
Date: 2006-04-12 20:30:54 +0200 (Wed, 12 Apr 2006)
New Revision: 140

Modified:
   trunk/src/net/sf/plantlore/client/authors/AuthorManager.java
Log:
Updated to fix bug with wrong result indexing

Modified: trunk/src/net/sf/plantlore/client/authors/AuthorManager.java
===================================================================
--- trunk/src/net/sf/plantlore/client/authors/AuthorManager.java	2006-04-12 18:29:44 UTC (rev 139)
+++ trunk/src/net/sf/plantlore/client/authors/AuthorManager.java	2006-04-12 18:30:54 UTC (rev 140)
@@ -278,7 +278,9 @@
                     // Retrieve selected row interval
                 	Object[] objArray;
                 	try {
-                		objArray = database.more(resultId, from, to);
+                            // FIXME: Should change all the usages of processResults to use 0 as the index of the forst row
+                            // from-1 and to-1 just temporary
+                            objArray = database.more(resultId, from-1, to-1);
                 	} catch(RemoteException e) {
                     	System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
                     	return;



From krater at berlios.de  Wed Apr 12 20:50:35 2006
From: krater at berlios.de (krater at berlios.de)
Date: Wed, 12 Apr 2006 20:50:35 +0200
Subject: [Plantlore-dev] r141 - trunk/src/net/sf/plantlore/client/login
Message-ID: <200604121850.k3CIoZx8013912@sheep.berlios.de>

Author: krater
Date: 2006-04-12 20:50:33 +0200 (Wed, 12 Apr 2006)
New Revision: 141

Modified:
   trunk/src/net/sf/plantlore/client/login/AuthView.java
   trunk/src/net/sf/plantlore/client/login/Login.java
   trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
   trunk/src/net/sf/plantlore/client/login/LoginView.java
Log:
AuthView "repaired" = prevented from entering recursion (by distinguishing the type of the incoming event).
Correct handling of the selected index of some database in the list. ListEvent.getFirst() cannot be trusted!

Modified: trunk/src/net/sf/plantlore/client/login/AuthView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-12 18:30:54 UTC (rev 140)
+++ trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-12 18:50:33 UTC (rev 141)
@@ -95,7 +95,7 @@
     public void update(Observable arg0, Object arg1) {
 		DBInfo selected = model.getSelected();
 		if(selected == null) return;
-		System.out.println("selected = " + selected);
+		System.out.println("AuthView [98] :: selected record is " + selected);
 		user.removeAllItems();
 		user.addItems(selected.users);
 	}

Modified: trunk/src/net/sf/plantlore/client/login/Login.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-12 18:30:54 UTC (rev 140)
+++ trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-12 18:50:33 UTC (rev 141)
@@ -133,8 +133,9 @@
 	 */
 	public void setSelected(int index) {
 		if(index >= 0) selected = dbinfo.elementAt(index); else selected = null;
-		logger.debug("Another record has been selected " + selected);
-		this.setChanged(); this.notifyObservers();
+		logger.debug("Selected database is " + selected);
+		this.setChanged(); 
+		this.notifyObservers("[!] recursion won't be tolerated");
 	}
 	
 	/**

Modified: trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-12 18:30:54 UTC (rev 140)
+++ trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-12 18:50:33 UTC (rev 141)
@@ -37,7 +37,7 @@
 	
 	class ChoiceChanged implements ListSelectionListener {
 		public void valueChanged(ListSelectionEvent e) {
-			model.setSelected(e.getFirstIndex());
+			model.setSelected( view.choice.getSelectedIndex() );
 		}	
 	}
 	

Modified: trunk/src/net/sf/plantlore/client/login/LoginView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-12 18:30:54 UTC (rev 140)
+++ trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-12 18:50:33 UTC (rev 141)
@@ -101,8 +101,12 @@
     
     
     public void update(Observable source, Object parameter) {
-    	if(parameter == null)
+    	if(parameter == null) {
+    		// Every item of the list will - after being added to the list - cause an valueChange event,
+    		// because every time an item is inserted to the list, it is also selected!
     		choice.setListData(model.getRecords());
+    		
+    	}
     	else if(parameter != null && parameter instanceof DBLayer)
     		this.setVisible(false); // the database layer has been created, we are no longer neccessary
 	}



From fraktalek at berlios.de  Wed Apr 12 20:52:17 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Wed, 12 Apr 2006 20:52:17 +0200
Subject: [Plantlore-dev] r142 - in trunk/src/net/sf/plantlore: client common
Message-ID: <200604121852.k3CIqH98014213@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-12 20:51:58 +0200 (Wed, 12 Apr 2006)
New Revision: 142

Modified:
   trunk/src/net/sf/plantlore/client/AddEditView.form
   trunk/src/net/sf/plantlore/client/AddEditView.java
   trunk/src/net/sf/plantlore/client/AppCore.java
   trunk/src/net/sf/plantlore/client/OverviewTableModel.java
   trunk/src/net/sf/plantlore/common/AutoComboBox.java
   trunk/src/net/sf/plantlore/common/Pair.java
Log:
Changed Overview to use arrays of Pairs.
Fixed AutoComboBox.



Modified: trunk/src/net/sf/plantlore/client/AddEditView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditView.form	2006-04-12 18:50:33 UTC (rev 141)
+++ trunk/src/net/sf/plantlore/client/AddEditView.form	2006-04-12 18:51:58 UTC (rev 142)
@@ -125,7 +125,7 @@
           </Events>
           <AuxValues>
             <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getAuthors());&#xa;"/>
-            <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="Object[] items = {&quot;Ahoj&quot;, &quot;Nazdar&quot;, &quot;Jak se mas&quot;};"/>
+            <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="Object [] items;"/>
           </AuxValues>
         </Component>
         <Component class="javax.swing.JLabel" name="TownLabel">
@@ -189,7 +189,7 @@
               </Properties>
               <AuxValues>
                 <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoTextArea(choices, this);"/>
-                <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="Hashtable&lt;String, Integer&gt; plants = model.getPlants();&#xa;String[] choices = new String[plants.size()];&#xa;plants.keySet().toArray(choices);"/>
+                <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="Pair&lt;String, Integer&gt;[] plants = model.getPlants();&#xa;String[] choices = new String[plants.length];&#xa;for (int i = 0; i &lt; plants.length; i++) &#xa;    choices[i] = plants[i].getFirst();&#xa;&#xa;"/>
               </AuxValues>
             </Component>
           </SubComponents>

Modified: trunk/src/net/sf/plantlore/client/AddEditView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditView.java	2006-04-12 18:50:33 UTC (rev 141)
+++ trunk/src/net/sf/plantlore/client/AddEditView.java	2006-04-12 18:51:58 UTC (rev 142)
@@ -11,6 +11,7 @@
 import javax.swing.JPanel;
 import net.sf.plantlore.common.AutoComboBox;
 import net.sf.plantlore.common.AutoTextArea;
+import net.sf.plantlore.common.Pair;
 import net.sf.plantlore.common.record.AuthorOccurrence;
 
 /**
@@ -41,7 +42,7 @@
         convertCoordinatesGroup = new javax.swing.ButtonGroup();
         jPanel2 = new javax.swing.JPanel();
         AuthorLabel = new javax.swing.JLabel();
-        Object[] items = {"Ahoj", "Nazdar", "Jak se mas"};
+        Object [] items;
         AuthorComboBox = new AutoComboBox(model.getAuthors());
 
         TownLabel = new javax.swing.JLabel();
@@ -53,9 +54,11 @@
         jScrollPane2 = new javax.swing.JScrollPane();
         descriptionArea = new javax.swing.JTextArea();
         jScrollPane3 = new javax.swing.JScrollPane();
-        Hashtable<String, Integer> plants = model.getPlants();
-        String[] choices = new String[plants.size()];
-        plants.keySet().toArray(choices);
+        Pair<String, Integer>[] plants = model.getPlants();
+        String[] choices = new String[plants.length];
+        for (int i = 0; i < plants.length; i++)
+        choices[i] = plants[i].getFirst();
+
         taxonTextArea = new AutoTextArea(choices, this);
         jToggleButton1 = new javax.swing.JToggleButton();
         checklistButton = new javax.swing.JButton();

Modified: trunk/src/net/sf/plantlore/client/AppCore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-12 18:50:33 UTC (rev 141)
+++ trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-12 18:51:58 UTC (rev 142)
@@ -11,6 +11,8 @@
 import java.util.Hashtable;
 import java.util.Observable;
 import java.util.prefs.Preferences;
+import net.sf.plantlore.common.Pair;
+import net.sf.plantlore.common.PlantloreConstants;
 import net.sf.plantlore.common.record.Author;
 import net.sf.plantlore.common.record.Plant;
 import net.sf.plantlore.common.record.Territory;
@@ -35,10 +37,10 @@
     private DBLayer database;  
     private OverviewTableModel tableModel;
     private Logger logger;
-    private Hashtable<String, Integer> plants = null;
-    private Object[] authors = null;
-    private Object[] villages = null;
-    private Object[] territories = null;
+    private Pair<String, Integer>[] plants = null;
+    private Pair<String, Integer>[] authors = null;
+    private Pair<String, Integer>[] villages = null;
+    private Pair<String, Integer>[] territories = null;
 
     private int selectedRow;
 
@@ -221,7 +223,7 @@
         prefs.putInt("recordsPerPage", recordsPerPage);
     }
     
-    public Hashtable<String, Integer> getPlants() {
+    public Pair<String, Integer>[] getPlants() {
         if (plants == null)
         {
             SelectQuery sq;
@@ -229,17 +231,19 @@
             int resultsCount;
             Object[] records;
             Plant p;
+            
             //FIXME:
             try {
                 sq = database.createQuery(Plant.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Plant.TAXON);
                 resultid = database.executeQuery(sq);
                 resultsCount = database.getNumRows(resultid);
                 records = database.more(resultid, 1, resultsCount);
-                plants = new Hashtable<String, Integer>(resultsCount+1, 1);
+                plants = new Pair[resultsCount];
                 for (int i = 1; i <= resultsCount; i++)
                 {
                     p = (Plant)((Object[])records[i-1])[0];
-                    plants.put(p.getTaxon(), p.getId());
+                    plants[i-1] = new Pair(p.getTaxon(), p.getId());
                 }
             } catch (RemoteException ex) {
                 ex.printStackTrace();
@@ -250,23 +254,26 @@
         } else
             return plants;
     }
-    public Object[] getAuthors() {
+    public Pair<String, Integer>[] getAuthors() {
         if (authors == null)
         {
             SelectQuery sq;
             int resultid;
             int resultsCount;
             Object[] records;
+            Author a;
             //FIXME:
             try {
                 sq = database.createQuery(Author.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Author.WHOLENAME);
                 resultid = database.executeQuery(sq);
                 resultsCount = database.getNumRows(resultid);
                 records = database.more(resultid, 1, resultsCount);
-                authors = new Object[resultsCount];
+                authors = new Pair[resultsCount];
                 for (int i = 1; i <= resultsCount; i++)
                 {
-                    authors[i-1] = ((Author)((Object[])records[i-1])[0]).getWholeName();
+                    a = (Author)((Object[])records[i-1])[0];
+                    authors[i-1] = new Pair<String, Integer>(a.getWholeName(), a.getId());
                 }
             } catch (RemoteException ex) {
                 ex.printStackTrace();
@@ -278,23 +285,27 @@
             return authors;
     }
     
-    public Object[] getVillages() {
+    public Pair<String, Integer>[] getVillages() {
         if (villages == null)
         {
             SelectQuery sq;
             int resultid;
             int resultsCount;
             Object[] records;
+            Village v;
+            
             //FIXME:
             try {
                 sq = database.createQuery(Village.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Village.NAME);
                 resultid = database.executeQuery(sq);
                 resultsCount = database.getNumRows(resultid);
                 records = database.more(resultid, 1, resultsCount);
-                villages = new Object[resultsCount];
+                villages = new Pair[resultsCount];
                 for (int i = 1; i <= resultsCount; i++)
                 {
-                    villages[i-1] = ((Village)((Object[])records[i-1])[0]).getName();
+                    v = (Village)((Object[])records[i-1])[0];
+                    villages[i-1] = new Pair<String, Integer>(v.getName(), v.getId());
                 }
             } catch (RemoteException ex) {
                 ex.printStackTrace();
@@ -306,23 +317,27 @@
             return villages;
     }
 
-    public Object[] getTerritories() {
+    public Pair<String, Integer>[] getTerritories() {
         if (territories == null)
         {
             SelectQuery sq;
             int resultid;
             int resultsCount;
             Object[] records;
+            Territory t;
+            
             //FIXME:
             try {
                 sq = database.createQuery(Territory.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Territory.NAME);
                 resultid = database.executeQuery(sq);
                 resultsCount = database.getNumRows(resultid);
                 records = database.more(resultid, 1, resultsCount);
-                territories = new Object[resultsCount];
+                territories = new Pair[resultsCount];
                 for (int i = 1; i <= resultsCount; i++)
                 {
-                    territories[i-1] = ((Territory)((Object[])records[i-1])[0]).getName();
+                    t = (Territory)((Object[])records[i-1])[0];
+                    territories[i-1] = new Pair<String,Integer>(t.getName(), t.getId());
                 }
             } catch (RemoteException ex) {
                 ex.printStackTrace();

Modified: trunk/src/net/sf/plantlore/client/OverviewTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-12 18:50:33 UTC (rev 141)
+++ trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-12 18:51:58 UTC (rev 142)
@@ -164,7 +164,7 @@
             resultObj = (Object[])records[i-1];
             result = (AuthorOccurrence)resultObj[0];
             Record r = new Record(result.getId(), false, from + i - 1);
-            if (!recordsArray.contains(r))
+            if (from + i - 1 > recordsArray.size()) //most probably much faster than to ask recordsArray.contains(r)
                 recordsArray.add(r);
             else 
                 r = recordsArray.get(from+i-2);//array starts from 0 whereas records are numbered from 1

Modified: trunk/src/net/sf/plantlore/common/AutoComboBox.java
===================================================================
--- trunk/src/net/sf/plantlore/common/AutoComboBox.java	2006-04-12 18:50:33 UTC (rev 141)
+++ trunk/src/net/sf/plantlore/common/AutoComboBox.java	2006-04-12 18:51:58 UTC (rev 142)
@@ -114,7 +114,7 @@
 					if (prefix == null) prefix = getText(0, getLength());
 					// Find the first suitable choice and select it.
 					for(int i = 0; i < getItemCount(); i++) {
-						String item = (String) getItemAt(i); // test the i-th choice
+						String item = getItemAt(i).toString(); // test the i-th choice
 						if( prefix.length() <= item.length() && prefix.equalsIgnoreCase(item.substring(0, prefix.length())) ) {
 							setSelectedIndex(i); // CRAP! This method calls remove() & insertString()!!!
 							if(popup) item = item.substring(0, prefix.length()); // trim the string

Modified: trunk/src/net/sf/plantlore/common/Pair.java
===================================================================
--- trunk/src/net/sf/plantlore/common/Pair.java	2006-04-12 18:50:33 UTC (rev 141)
+++ trunk/src/net/sf/plantlore/common/Pair.java	2006-04-12 18:51:58 UTC (rev 142)
@@ -85,10 +85,10 @@
             return "["+a+","+b+"]";
 
         if (a instanceof String)
-            return (String) a; //heh :)
+            return (String) a; 
 
         if (b instanceof String)
-            return (String) b; //hmm:)
+            return (String) b; 
         
         return "["+a+","+b+"]";
     }



From krater at berlios.de  Wed Apr 12 23:59:39 2006
From: krater at berlios.de (krater at berlios.de)
Date: Wed, 12 Apr 2006 23:59:39 +0200
Subject: [Plantlore-dev] r143 - trunk/src/net/sf/plantlore/client/login
Message-ID: <200604122159.k3CLxdJb013703@sheep.berlios.de>

Author: krater
Date: 2006-04-12 23:59:38 +0200 (Wed, 12 Apr 2006)
New Revision: 143

Modified:
   trunk/src/net/sf/plantlore/client/login/Login.java
   trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
   trunk/src/net/sf/plantlore/client/login/LoginView.java
Log:
Explanatory comments added to classes that cope with some weird and hyperactive behaviour of Swing components.

Modified: trunk/src/net/sf/plantlore/client/login/Login.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-12 18:51:58 UTC (rev 142)
+++ trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-12 21:59:38 UTC (rev 143)
@@ -135,6 +135,18 @@
 		if(index >= 0) selected = dbinfo.elementAt(index); else selected = null;
 		logger.debug("Selected database is " + selected);
 		this.setChanged(); 
+		/*------------------------------------------------------------
+		 * This here is a particularly mystique code.
+		 * The reason why a parameter is used here is simple:
+		 * 1. you select something in the choice list in the LoginView ->
+		 * 2. ListSelectionEvent is fired ->
+		 * 3. model.setSelected(..) is called in the handler ->
+		 * 4. notifyObservers(..) is called here ->
+		 * 5. loginView.update() gets involved ->
+		 * 6. without proper recognition of events setList(data)
+		 *    would be called which will in turn trigger 
+		 *    ListSelectionEvent -> 2.
+		 *------------------------------------------------------------*/
 		this.notifyObservers("[!] recursion won't be tolerated");
 	}
 	

Modified: trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-12 18:51:58 UTC (rev 142)
+++ trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-12 21:59:38 UTC (rev 143)
@@ -37,6 +37,12 @@
 	
 	class ChoiceChanged implements ListSelectionListener {
 		public void valueChanged(ListSelectionEvent e) {
+			/*----------------------------------------------------------
+			 *  Well here is some nasty behaviour of the Swing
+			 *  framework: for some unknown reason 
+			 *  the ListSelectionEvent is sent twice every time 
+			 *  you select something in the list. Why?
+			 *----------------------------------------------------------*/
 			model.setSelected( view.choice.getSelectedIndex() );
 		}	
 	}

Modified: trunk/src/net/sf/plantlore/client/login/LoginView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-12 18:51:58 UTC (rev 142)
+++ trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-12 21:59:38 UTC (rev 143)
@@ -101,9 +101,12 @@
     
     
     public void update(Observable source, Object parameter) {
+    	// Ignore setSelected() event
     	if(parameter == null) {
-    		// Every item of the list will - after being added to the list - cause an valueChange event,
-    		// because every time an item is inserted to the list, it is also selected!
+    		// Every item of the list will - after being added to the list - 
+    		// cause a ListSelectionEvent (valueChange) event!
+    		// This is probably because every time an item is inserted 
+    		// into the list, it is also selected!
     		choice.setListData(model.getRecords());
     		
     	}



From lada at berlios.de  Thu Apr 13 09:11:59 2006
From: lada at berlios.de (lada at berlios.de)
Date: Thu, 13 Apr 2006 09:11:59 +0200
Subject: [Plantlore-dev] r144 - trunk/analysis/database
Message-ID: <200604130711.k3D7Bxj2005635@sheep.berlios.de>

Author: lada
Date: 2006-04-13 09:11:45 +0200 (Thu, 13 Apr 2006)
New Revision: 144

Modified:
   trunk/analysis/database/DBModel_postgres.sql
   trunk/analysis/database/DBmodel.jpg
   trunk/analysis/database/DBmodel.sql
Log:
Update DB model (sql, diagram) - add tAuthors.cDelete, tUser.cPassword. Current db is on urtax.

Modified: trunk/analysis/database/DBModel_postgres.sql
===================================================================
--- trunk/analysis/database/DBModel_postgres.sql	2006-04-12 21:59:38 UTC (rev 143)
+++ trunk/analysis/database/DBModel_postgres.sql	2006-04-13 07:11:45 UTC (rev 144)
@@ -24,6 +24,7 @@
     CEMAIL            VARCHAR(100),
     CURL              VARCHAR(255),
     CNOTE             VARCHAR(4096),
+    CDELETE           SMALLINT DEFAULT 0,
 PRIMARY KEY (CID));
 
 /* Table: TAUTHORSOCCURRENCES, Owner: SYSDBA */
@@ -48,7 +49,7 @@
     CLATITUDE          DOUBLE PRECISION,
     CLONGITUDE         DOUBLE PRECISION,
     CNOTE              VARCHAR(4096),
-    CDELETE            SMALLINT,
+    CDELETE            SMALLINT DEFAULT 0,
 PRIMARY KEY (CID));
 
 /* Table: THISTORY, Owner: SYSDBA */
@@ -120,7 +121,7 @@
     CUPDATEWHO         INTEGER NOT NULL,
     CNOTE              VARCHAR(4096),
     CMETADATAID        INTEGER NOT NULL,
-    CDELETE            SMALLINT,
+    CDELETE            SMALLINT DEFAULT 0,
 PRIMARY KEY (CID));
 
 /* Table: TPHYTOCHORIA, Owner: SYSDBA */
@@ -155,7 +156,7 @@
     CREFERENCEDETAIL            VARCHAR(20),
     CURL                        VARCHAR(100),
     CNOTE                       VARCHAR(4096),
-    CDELETE                     SMALLINT,
+    CDELETE                     SMALLINT DEFAULT 0,
 PRIMARY KEY (CID));
 
 /* Table: TRIGHT, Owner: SYSDBA */
@@ -301,4 +302,4 @@
 from TAUTHORS A JOIN TAUTHORSOCCURRENCES AO ON (A.CID = AO.cauthorid)
 WHERE AO.crole = 'identify'
 ;
-*/
\ No newline at end of file
+*/

Modified: trunk/analysis/database/DBmodel.jpg
===================================================================
(Binary files differ)

Modified: trunk/analysis/database/DBmodel.sql
===================================================================
--- trunk/analysis/database/DBmodel.sql	2006-04-12 21:59:38 UTC (rev 143)
+++ trunk/analysis/database/DBmodel.sql	2006-04-13 07:11:45 UTC (rev 144)
@@ -32,6 +32,7 @@
     CEMAIL            VARCHAR(100),
     CURL              VARCHAR(255),
     CNOTE             VARCHAR(4096),
+    CDELETE           SMALLINT DEFAULT 0,
 PRIMARY KEY (CID));
 
 /* Table: TAUTHORSOCCURRENCES, Owner: SYSDBA */
@@ -56,7 +57,7 @@
     CLATITUDE          DOUBLE PRECISION,
     CLONGITUDE         DOUBLE PRECISION,
     CNOTE              VARCHAR(4096),
-    CDELETE            SMALLINT,
+    CDELETE            SMALLINT DEFAULT 0 ,
 PRIMARY KEY (CID));
 
 /* Table: THISTORY, Owner: SYSDBA */
@@ -128,7 +129,7 @@
     CUPDATEWHO         INTEGER NOT NULL,
     CNOTE              VARCHAR(4096),
     CMETADATAID        INTEGER NOT NULL,
-    CDELETE            SMALLINT,
+    CDELETE            SMALLINT DEFAULT 0,
 PRIMARY KEY (CID));
 
 /* Table: TPHYTOCHORIA, Owner: SYSDBA */
@@ -163,7 +164,7 @@
     CREFERENCEDETAIL            VARCHAR(20),
     CURL                        VARCHAR(100),
     CNOTE                       VARCHAR(4096),
-    CDELETE                     SMALLINT,
+    CDELETE                     SMALLINT DEFAULT 0,
 PRIMARY KEY (CID));
 
 /* Table: TRIGHT, Owner: SYSDBA */
@@ -187,6 +188,7 @@
 CREATE TABLE TUSER (
     CID          INTEGER NOT NULL,
     CLOGIN       VARCHAR(20) NOT NULL,
+    CPASSWORD    SMALLINT,
     CFIRSTNAME   VARCHAR(20),
     CSURNAME     VARCHAR(30),
     CWHOLENAME   VARCHAR(50),



From lada at berlios.de  Fri Apr 14 15:31:04 2006
From: lada at berlios.de (lada at berlios.de)
Date: Fri, 14 Apr 2006 15:31:04 +0200
Subject: [Plantlore-dev] r145 - in trunk/src/net/sf/plantlore: client client/history l10n
Message-ID: <200604141331.k3EDV4gO005802@sheep.berlios.de>

Author: lada
Date: 2006-04-14 15:30:42 +0200 (Fri, 14 Apr 2006)
New Revision: 145

Added:
   trunk/src/net/sf/plantlore/client/history/HistoryView.form
Modified:
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
   trunk/src/net/sf/plantlore/client/history/HistoryView.java
   trunk/src/net/sf/plantlore/l10n/Plantlore.properties
Log:
Use Matisse for creating historyView. AppCoreCtrl - modivied constructor for historyView. Properties - new value for history.

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-13 07:11:45 UTC (rev 144)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-14 13:30:42 UTC (rev 145)
@@ -387,10 +387,10 @@
             //toto volani historie nebude v menu, ale jako tlacitko pro vybrany zaznam        
             //o vybranem zaznamu predame informace, ktere chceme o nem v historii zobrazit
             //jmeno rosliny, jmeno autora a lokaci a idOccurrences
-            historyModel = new History(model.getDatabase(),"Adis Abeba", "Lada", "Praha v??chod", 1);
-            historyView = new HistoryView(historyModel, view);
+            historyModel = new History(model.getDatabase(),"Adis Abeba", "Lada", "Praha v?chod", 1);
+            historyView = new HistoryView(historyModel, view, true);
             historyCtrl = new HistoryCtrl(historyModel, historyView);
-            historyView.show();  
+            historyView.setVisible(true);  
         }
     }    
     

Modified: trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-13 07:11:45 UTC (rev 144)
+++ trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-14 13:30:42 UTC (rev 145)
@@ -34,19 +34,19 @@
         logger = Logger.getLogger(this.getClass().getPackage().getName());        
         this.model = model;
         this.view = view;
-                     
-        view.addOkButtonListener(new okButtonListener());
-        view.addCancelButtonListener(new cancelButtonListener());
-        view.addHelpButtonListener(new helpButtonListener());
-        view.addPreviousButtonListener(new previousButtonListener());
-        view.addNextButtonListener(new nextButtonListener());
-        view.addSelectAllButtonListener(new selectAllButtonListener());
-        view.addUnselectAllButtonListener(new unselectAllButtonListener());
-        view.addUndoSelectedButtonListener(new undoSelectedButtonListener());
-        view.rowSetPropertyChangeListener(new rowSetDisplayChangeListener());
+             
+        view.okButton.addActionListener(new okButtonListener());
+        view.closeButton.addActionListener(new closeButtonListener());
+        view.helpButton.addActionListener(new helpButtonListener());
+        view.previousButton.addActionListener(new previousButtonListener());
+        view.nextButton.addActionListener(new nextButtonListener());
+        view.selectAllButton.addActionListener(new selectAllButtonListener());
+        view.unselectAllButton.addActionListener(new unselectAllButtonListener());
+        view.undoButton.addActionListener(new undoSelectedButtonListener());
+        view.toDisplayValueTextField.addPropertyChangeListener(new rowSetDisplayChangeListener());        
     }
     
-    /** 
+        /** 
     * On Ok makes the model store() the preferences and hides the view.
     * 
     */
@@ -61,7 +61,7 @@
     * On Cancel just hides the view.
     *
     */
-   class cancelButtonListener implements ActionListener {
+   class closeButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent)
        {
     	   view.close();
@@ -223,4 +223,5 @@
            }
        }        	   
    }
+  
 }

Added: trunk/src/net/sf/plantlore/client/history/HistoryView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryView.form	2006-04-13 07:11:45 UTC (rev 144)
+++ trunk/src/net/sf/plantlore/client/history/HistoryView.form	2006-04-14 13:30:42 UTC (rev 145)
@@ -0,0 +1,496 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JDialogFormInfo">
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="2"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" attributes="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="1" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="1" attributes="0">
+                          <Component id="jPanel3" alignment="0" max="32767" attributes="0"/>
+                          <Component id="jPanel2" alignment="0" max="32767" attributes="0"/>
+                          <Component id="jPanel1" alignment="0" max="32767" attributes="0"/>
+                      </Group>
+                  </Group>
+                  <Group type="102" alignment="0" attributes="0">
+                      <EmptySpace min="-2" pref="310" max="-2" attributes="0"/>
+                      <Component id="okButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace min="-2" pref="16" max="-2" attributes="0"/>
+                      <Component id="closeButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace min="-2" pref="15" max="-2" attributes="0"/>
+                      <Component id="helpButton" min="-2" max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="jPanel1" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="jPanel2" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="jPanel3" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="closeButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="okButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="helpButton" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Container class="javax.swing.JPanel" name="jPanel1">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Details of the record"/>
+          </Border>
+        </Property>
+      </Properties>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Component id="taxonLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                      <Component id="authorLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                      <Component id="locationLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace min="-2" pref="83" max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Component id="locationValueLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                      <Component id="authorValueLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                      <Component id="taxonValueLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace pref="601" max="32767" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="0" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="taxonLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="taxonValueLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="authorLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="authorValueLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="32767" attributes="0"/>
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="locationLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="locationValueLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Component class="javax.swing.JLabel" name="taxonLabel">
+          <Properties>
+            <Property name="font" type="java.awt.Font" editor="org.netbeans.beaninfo.editors.FontEditor">
+              <Font name="Tahoma" size="11" style="1"/>
+            </Property>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;taxon&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="authorLabel">
+          <Properties>
+            <Property name="font" type="java.awt.Font" editor="org.netbeans.beaninfo.editors.FontEditor">
+              <Font name="Tahoma" size="11" style="1"/>
+            </Property>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;author&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="locationLabel">
+          <Properties>
+            <Property name="font" type="java.awt.Font" editor="org.netbeans.beaninfo.editors.FontEditor">
+              <Font name="Tahoma" size="11" style="1"/>
+            </Property>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;location&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="taxonValueLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="model.getNamePlant()" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="authorValueLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="model.getNameAuthor()" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="locationValueLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="model.getLocation()" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+      </SubComponents>
+    </Container>
+    <Container class="javax.swing.JPanel" name="jPanel2">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Record created"/>
+          </Border>
+        </Property>
+      </Properties>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Component id="whenInserLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                      <Component id="whoInsertLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace min="-2" pref="80" max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Component id="whoInsertValueLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                      <Component id="whenInsertValueLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace pref="604" max="32767" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="0" attributes="0">
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="whenInserLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="whenInsertValueLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="whoInsertLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="whoInsertValueLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace pref="14" max="32767" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Component class="javax.swing.JLabel" name="whenInserLabel">
+          <Properties>
+            <Property name="font" type="java.awt.Font" editor="org.netbeans.beaninfo.editors.FontEditor">
+              <Font name="Tahoma" size="11" style="1"/>
+            </Property>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;whenInsert&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="whoInsertLabel">
+          <Properties>
+            <Property name="font" type="java.awt.Font" editor="org.netbeans.beaninfo.editors.FontEditor">
+              <Font name="Tahoma" size="11" style="1"/>
+            </Property>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;whoInsert&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="whenInsertValueLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="model.getWhen().toString()" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="whoInsertValueLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="model.getNameUser()" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+      </SubComponents>
+    </Container>
+    <Container class="javax.swing.JPanel" name="jPanel3">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Lst of changes"/>
+          </Border>
+        </Property>
+      </Properties>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="1" attributes="0">
+                  <Component id="jScrollPane1" pref="671" max="32767" attributes="0"/>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Component id="jPanel4" min="-2" max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Component id="jScrollPane1" alignment="0" pref="285" max="32767" attributes="0"/>
+              <Component id="jPanel4" alignment="1" max="32767" attributes="0"/>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Container class="javax.swing.JScrollPane" name="jScrollPane1">
+
+          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+          <SubComponents>
+            <Component class="javax.swing.JTable" name="tableEditList">
+              <Properties>
+                <Property name="model" type="javax.swing.table.TableModel" editor="org.netbeans.modules.form.editors2.TableModelEditor">
+                  <Table columnCount="4" rowCount="4">
+                    <Column editable="true" title="Title 1" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 2" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 3" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 4" type="java.lang.Object"/>
+                  </Table>
+                </Property>
+              </Properties>
+            </Component>
+          </SubComponents>
+        </Container>
+        <Container class="javax.swing.JPanel" name="jPanel4">
+
+          <Layout>
+            <DimensionLayout dim="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Group type="102" alignment="0" attributes="0">
+                              <Component id="totalResultLabel" min="-2" max="-2" attributes="0"/>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Component id="totalResultValueLabel" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <Group type="102" alignment="0" attributes="0">
+                              <Group type="103" groupAlignment="0" attributes="0">
+                                  <Component id="displayedLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                                  <Component id="toDisplayLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                              </Group>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Group type="103" groupAlignment="1" attributes="0">
+                                  <Component id="displayedValueLabel" min="-2" max="-2" attributes="0"/>
+                                  <Component id="toDisplayValueTextField" alignment="1" min="-2" pref="25" max="-2" attributes="0"/>
+                              </Group>
+                          </Group>
+                          <Component id="selectAllButton" alignment="0" pref="138" max="32767" attributes="1"/>
+                          <Component id="unselectAllButton" alignment="0" pref="138" max="32767" attributes="1"/>
+                          <Component id="undoButton" alignment="0" pref="138" max="32767" attributes="1"/>
+                          <Component id="previousButton" alignment="0" pref="138" max="32767" attributes="1"/>
+                          <Component id="nextButton" alignment="0" pref="138" max="32767" attributes="1"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+            <DimensionLayout dim="1">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <Component id="selectAllButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="unselectAllButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="undoButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace pref="78" max="32767" attributes="0"/>
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="totalResultLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="totalResultValueLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="displayedLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="displayedValueLabel" alignment="3" min="-2" pref="14" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="toDisplayLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="toDisplayValueTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace min="-2" pref="15" max="-2" attributes="0"/>
+                      <Component id="previousButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="nextButton" min="-2" max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+          </Layout>
+          <SubComponents>
+            <Component class="javax.swing.JButton" name="selectAllButton">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;selectAll&quot;)" type="code"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JButton" name="unselectAllButton">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;unselectAll&quot;)" type="code"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JButton" name="undoButton">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;undoSelected&quot;)" type="code"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JButton" name="nextButton">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;nextButton&quot;)" type="code"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JButton" name="previousButton">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;prevButton&quot;)" type="code"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JLabel" name="toDisplayLabel">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;toDisplay&quot;)" type="code"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="displayedLabel">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;displayed&quot;)" type="code"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="totalResultLabel">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;totalResult&quot;)" type="code"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="totalResultValueLabel">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="((Integer)model.getResultRows()).toString()" type="code"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="displayedValueLabel">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="model.getCurrentDisplayRows()" type="code"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JTextField" name="toDisplayValueTextField">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="((Integer)model.getDisplayRows()).toString()" type="code"/>
+                </Property>
+                <Property name="autoscrolls" type="boolean" value="false"/>
+                <Property name="minimumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
+                  <Dimension value="[16, 19]"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+          </SubComponents>
+        </Container>
+      </SubComponents>
+    </Container>
+    <Component class="javax.swing.JButton" name="okButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Ok&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Component class="javax.swing.JButton" name="closeButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Close&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Component class="javax.swing.JButton" name="helpButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Help&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+  </SubComponents>
+</Form>

Modified: trunk/src/net/sf/plantlore/client/history/HistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-13 07:11:45 UTC (rev 144)
+++ trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-14 13:30:42 UTC (rev 145)
@@ -1,522 +1,403 @@
+/*
+ * HistoryView.java
+ *
+ * Created on 14. duben 2006, 11:55
+ */
+
 package net.sf.plantlore.client.history;
 
-
-import java.awt.FlowLayout;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-import java.awt.event.ActionListener;
-import java.awt.event.WindowListener;
-import java.beans.PropertyChangeListener;
 import java.util.Observable;
 import java.util.Observer;
-import javax.swing.AbstractAction;
-
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JComboBox;
-import javax.swing.JFormattedTextField;
-import javax.swing.JFrame;
 import javax.swing.JOptionPane;
-import javax.swing.JRadioButton;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
 import javax.swing.JTable;
-import javax.swing.table.TableColumn;
-import javax.swing.table.TableColumnModel;
-import javax.swing.DefaultCellEditor;
-import javax.swing.table.DefaultTableModel;
-import javax.swing.table.AbstractTableModel;
-import javax.swing.JScrollPane;
-
-import net.sf.plantlore.common.ComponentAdjust;
-import net.sf.plantlore.common.record.Occurrence;
 import net.sf.plantlore.l10n.L10n;
 
 /**
- * 
- * @author Lada
  *
+ * @author  Lada
  */
-public class HistoryView implements Observer {
-
-	//Dialog
-	private JDialog historyDialog;
-	//History model
-	private History model;	
-	//Panels
-    private JPanel buttonsPane;
-    private JPanel infoRecordPanel;
-    private JPanel infoInsertPanel;
-    private JPanel infoEditPanel;
-    //Labels
-    private JLabel nameLabel;    
-    private JLabel authorLabel;
-    private JLabel locationLabel;    
-    private JLabel dateLabel;
-    private JLabel insertWhoLabel;
-    private JLabel nameValueLabel;
-    private JLabel authorValueLabel;
-    private JLabel locationValueLabel;
-    private JLabel dateValueLabel;
-    private JLabel insertWhoValueLabel;
-    private JLabel displayRowsText;    
-    private JLabel countResultText;
-    private JLabel countResutl;
-    private JLabel currentRowsInfoText;
-    private JLabel currentRowsInfo;
+public class HistoryView extends javax.swing.JDialog implements Observer{
     
-    //JFormattedTextField
-    private JFormattedTextField displayRows;
-    //JTable
-    private JTable tableEditList;
-    private DefaultTableModel tableModel;
-    private JScrollPane jsp;
+    //History model
+    private History model;  
     //data
-    private Object[][] dateTable;
-    //Buttons
-    private JButton nextButton;
-    private JButton previousButton;
-    private JButton selectAllButton;
-    private JButton unselectAllButton;
-    private JButton undoSelectedButton;
-    private JButton undoToButton;
-    private JButton okButton;
-    private JButton cancelButton;
-    private JButton helpButton;
-    //data
     private Object[][] data;
     
-    /** Creates a new instance of HistoryView */
-    public HistoryView(History model, JFrame owner)
-    {    	
-        this.model = model; 
-        historyDialog = new JDialog(owner, "History", true);
-        historyDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
-        historyDialog.setVisible(false);
-        init();
+    /**
+     * Creates new form HistoryView
+     */
+    public HistoryView(History model, java.awt.Frame parent, boolean modal) {
+                
+        super(parent, modal);
+        this.model = model;
+        initComponents();
+        getTable().setModel(new HistoryTableModel(model));
     }
     
-    public void update(Observable observable, Object object)
+      public void update(Observable observable, Object object)
     {
     } 
     
-    /** 
-     *
-     * The top initializing method.
-     *
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
      */
-    private void init()
-    {    
-        
-        //initialization of the subPanel
-        initButtonsPane();
-        
-        //Layout (JDialog)
-        historyDialog.setLayout(new GridBagLayout());
-        GridBagConstraints gbConstraints;       
-        gbConstraints = new GridBagConstraints();
-            
-        //Add panel with information about record
-        infoRecordPanel = new JPanel();
- 	    infoRecordPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Details of the record"));
- 	    infoRecordPanel.setLayout(new java.awt.GridBagLayout()); 
- 	    gbConstraints = new GridBagConstraints();
-        gbConstraints.gridy = 0;
-        gbConstraints.gridx = 0;       
-        gbConstraints.weighty = 0.1;
-        gbConstraints.weightx = 1.0;
-        gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
-        gbConstraints.anchor = GridBagConstraints.NORTH;
-        gbConstraints.fill = GridBagConstraints.BOTH;  
-        historyDialog.add(infoRecordPanel, gbConstraints);
-         
-        //Add panel with information about record created
-        infoInsertPanel = new JPanel();
- 	    infoInsertPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Record created"));
- 	    infoInsertPanel.setLayout(new java.awt.GridBagLayout()); 
- 	    gbConstraints = new GridBagConstraints();
- 	    gbConstraints.gridy = 1;
-        gbConstraints.gridx = 0;
-        gbConstraints.weighty = 0.1;
-        gbConstraints.weightx = 1;
-        gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
-        gbConstraints.anchor = GridBagConstraints.NORTH;
-        gbConstraints.fill = GridBagConstraints.BOTH;  
-        historyDialog.add(infoInsertPanel, gbConstraints);
-        
-        //Add panel with list of changes
-        infoEditPanel = new JPanel();
- 	    infoEditPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("List of changes"));
- 	    infoEditPanel.setLayout(new java.awt.GridBagLayout()); 
- 	    gbConstraints = new GridBagConstraints();
- 	    gbConstraints.gridy = 2;
-        gbConstraints.gridx = 0;
-        gbConstraints.weighty = 0.75;
-        gbConstraints.weightx = 1;
-        gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
-        gbConstraints.anchor = GridBagConstraints.NORTH;
-        gbConstraints.fill = GridBagConstraints.BOTH;  
-        historyDialog.add(infoEditPanel, gbConstraints);
-        
-        //Add panel with ok, cancle and help buttons
-        gbConstraints.gridy = 3;
-        gbConstraints.gridx = 0;
-        gbConstraints.weighty = 0.05;
-        gbConstraints.weightx = 1.0;
-        gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
-        gbConstraints.anchor = GridBagConstraints.SOUTHEAST;
-        historyDialog.add(buttonsPane, gbConstraints);
-       
-        // Add labels to the infoRecordPanel panel
-        nameLabel = new JLabel();
-        nameLabel.setText("Name:"); 
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 0;
-        gbConstraints.gridy = 0;       
-        gbConstraints.weightx = 0.1;
-        gbConstraints.anchor = java.awt.GridBagConstraints.WEST;
-        gbConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
-        infoRecordPanel.add(nameLabel, gbConstraints);    
-        
-        nameValueLabel = new JLabel();
-        nameValueLabel.setText(model.getNamePlant());        
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 1;
-        gbConstraints.gridy = 0;       
-        gbConstraints.weightx = 0.9;
-        gbConstraints.anchor = java.awt.GridBagConstraints.WEST;
-        gbConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
-        infoRecordPanel.add(nameValueLabel, gbConstraints);   
-        
-        authorLabel = new JLabel();
-        authorLabel.setText("Author:"); 
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 0;
-        gbConstraints.gridy = 1;
-        gbConstraints.weightx = 0.1;
-        gbConstraints.anchor = java.awt.GridBagConstraints.WEST;
-        gbConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
-        infoRecordPanel.add(authorLabel, gbConstraints);
-        
-        authorValueLabel = new JLabel();
-        authorValueLabel.setText(model.getNameAuthor());   
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 1;
-        gbConstraints.gridy = 1;
-        gbConstraints.weightx = 0.9;
-        gbConstraints.anchor = java.awt.GridBagConstraints.WEST;
-        gbConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
-        infoRecordPanel.add(authorValueLabel, gbConstraints);
-        
-        locationLabel = new JLabel();
-        locationLabel.setText("Location:");  
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 0;
-        gbConstraints.gridy = 2;
-        gbConstraints.weightx = 0.1;
-        gbConstraints.anchor = java.awt.GridBagConstraints.WEST;
-        gbConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
-        infoRecordPanel.add(locationLabel, gbConstraints);
-        
-        locationValueLabel = new JLabel();
-        locationValueLabel.setText(model.getLocation());  
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 1;
-        gbConstraints.gridy = 2;
-        gbConstraints.weightx = 0.9;
-        gbConstraints.anchor = java.awt.GridBagConstraints.WEST;
-        gbConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
-        infoRecordPanel.add(locationValueLabel, gbConstraints);
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        jPanel1 = new javax.swing.JPanel();
+        taxonLabel = new javax.swing.JLabel();
+        authorLabel = new javax.swing.JLabel();
+        locationLabel = new javax.swing.JLabel();
+        taxonValueLabel = new javax.swing.JLabel();
+        authorValueLabel = new javax.swing.JLabel();
+        locationValueLabel = new javax.swing.JLabel();
+        jPanel2 = new javax.swing.JPanel();
+        whenInserLabel = new javax.swing.JLabel();
+        whoInsertLabel = new javax.swing.JLabel();
+        whenInsertValueLabel = new javax.swing.JLabel();
+        whoInsertValueLabel = new javax.swing.JLabel();
+        jPanel3 = new javax.swing.JPanel();
+        jScrollPane1 = new javax.swing.JScrollPane();
+        tableEditList = new javax.swing.JTable();
+        jPanel4 = new javax.swing.JPanel();
+        selectAllButton = new javax.swing.JButton();
+        unselectAllButton = new javax.swing.JButton();
+        undoButton = new javax.swing.JButton();
+        nextButton = new javax.swing.JButton();
+        previousButton = new javax.swing.JButton();
+        toDisplayLabel = new javax.swing.JLabel();
+        displayedLabel = new javax.swing.JLabel();
+        totalResultLabel = new javax.swing.JLabel();
+        totalResultValueLabel = new javax.swing.JLabel();
+        displayedValueLabel = new javax.swing.JLabel();
+        toDisplayValueTextField = new javax.swing.JTextField();
+        okButton = new javax.swing.JButton();
+        closeButton = new javax.swing.JButton();
+        helpButton = new javax.swing.JButton();
 
-        // Add labels to the infoInsertPanel panel
-        dateLabel = new JLabel();
-        dateLabel.setText("Date record creation:"); 
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 0;
-        gbConstraints.gridy = 0;       
-        gbConstraints.weightx = 0.1;
-        gbConstraints.anchor = java.awt.GridBagConstraints.WEST;
-        gbConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
-        infoInsertPanel.add(dateLabel, gbConstraints);    
-        
-        dateValueLabel = new JLabel();        
-        dateValueLabel.setText(model.getWhen().toString());
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 1;
-        gbConstraints.gridy = 0;       
-        gbConstraints.weightx = 0.9;
-        gbConstraints.anchor = java.awt.GridBagConstraints.WEST;
-        gbConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
-        infoInsertPanel.add(dateValueLabel, gbConstraints);   
-        
-        insertWhoLabel = new JLabel();
-        insertWhoLabel.setText("User who record created:"); 
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 0;
-        gbConstraints.gridy = 1;
-        gbConstraints.weightx = 0.1;
-        gbConstraints.anchor = java.awt.GridBagConstraints.WEST;
-        gbConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
-        infoInsertPanel.add(insertWhoLabel, gbConstraints);
-        
-        insertWhoValueLabel = new JLabel();
-        insertWhoValueLabel.setText(model.getNameUser());   
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 1;
-        gbConstraints.gridy = 1;
-        gbConstraints.weightx = 0.9;
-        gbConstraints.anchor = java.awt.GridBagConstraints.WEST;
-        gbConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
-        infoInsertPanel.add(insertWhoValueLabel, gbConstraints);              
-        
-        // Add table to the infoEditPanel panel    
-        tableEditList = new JTable(new HistoryTableModel(model));        
-        TableColumnModel tcm = tableEditList.getColumnModel();        
-        TableColumn tc;
-        for (int i = 0; i < tableEditList.getColumnCount(); i++) {
-            tc = tcm.getColumn(i);
-            if (i == 0) {
-                tc.setPreferredWidth(20); 
-            } else {
-                tc.setPreferredWidth(100);
+        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
+        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Details of the record"));
+        taxonLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
+        taxonLabel.setText(L10n.getString("taxon"));
+
+        authorLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
+        authorLabel.setText(L10n.getString("author"));
+
+        locationLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
+        locationLabel.setText(L10n.getString("location"));
+
+        taxonValueLabel.setText(model.getNamePlant());
+
+        authorValueLabel.setText(model.getNameAuthor());
+
+        locationValueLabel.setText(model.getLocation());
+
+        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
+        jPanel1.setLayout(jPanel1Layout);
+        jPanel1Layout.setHorizontalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel1Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(taxonLabel)
+                    .add(authorLabel)
+                    .add(locationLabel))
+                .add(83, 83, 83)
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(locationValueLabel)
+                    .add(authorValueLabel)
+                    .add(taxonValueLabel))
+                .addContainerGap(601, Short.MAX_VALUE))
+        );
+        jPanel1Layout.setVerticalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel1Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(taxonLabel)
+                    .add(taxonValueLabel))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(authorLabel)
+                    .add(authorValueLabel))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(locationLabel)
+                    .add(locationValueLabel))
+                .addContainerGap())
+        );
+
+        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Record created"));
+        whenInserLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
+        whenInserLabel.setText(L10n.getString("whenInsert"));
+
+        whoInsertLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
+        whoInsertLabel.setText(L10n.getString("whoInsert"));
+
+        whenInsertValueLabel.setText(model.getWhen().toString());
+
+        whoInsertValueLabel.setText(model.getNameUser());
+
+        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
+        jPanel2.setLayout(jPanel2Layout);
+        jPanel2Layout.setHorizontalGroup(
+            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel2Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(whenInserLabel)
+                    .add(whoInsertLabel))
+                .add(80, 80, 80)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(whoInsertValueLabel)
+                    .add(whenInsertValueLabel))
+                .addContainerGap(604, Short.MAX_VALUE))
+        );
+        jPanel2Layout.setVerticalGroup(
+            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel2Layout.createSequentialGroup()
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(whenInserLabel)
+                    .add(whenInsertValueLabel))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(whoInsertLabel)
+                    .add(whoInsertValueLabel))
+                .addContainerGap(14, Short.MAX_VALUE))
+        );
+
+        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Lst of changes"));
+        tableEditList.setModel(new javax.swing.table.DefaultTableModel(
+            new Object [][] {
+                {null, null, null, null},
+                {null, null, null, null},
+                {null, null, null, null},
+                {null, null, null, null}
+            },
+            new String [] {
+                "Title 1", "Title 2", "Title 3", "Title 4"
             }
-        }
-        tableEditList.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 100)); 
-        tableEditList.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
-        jsp = new JScrollPane(tableEditList);     
-                
-        gbConstraints = new java.awt.GridBagConstraints();
-        gbConstraints.gridx = 0;
-        gbConstraints.gridy = 0;
-        gbConstraints.anchor = java.awt.GridBagConstraints.CENTER;
-        gbConstraints.fill = java.awt.GridBagConstraints.BOTH;
-        gbConstraints.weightx = 1;        
-        gbConstraints.weighty = 0.65;  
-        gbConstraints.gridheight = 8;
-        gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
-        jsp.setMinimumSize(new java.awt.Dimension(500, 100));        
-        jsp.setPreferredSize(new java.awt.Dimension(500, 100));        
-        infoEditPanel.add(jsp, gbConstraints);
-        jsp.add(tableEditList);
-        jsp.setViewportView(tableEditList); 
-        
-        //Add buttons to the infoEditPanel panel       
-        
-                
-        selectAllButton = new JButton("Select all");
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 1;
-        gbConstraints.gridy = 0;       
-        gbConstraints.gridwidth = 2;
-        gbConstraints.anchor = java.awt.GridBagConstraints.NORTH;
-        gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
-        selectAllButton.setMinimumSize(new java.awt.Dimension(110, 25));        
-        selectAllButton.setPreferredSize(new java.awt.Dimension(110, 25));
-        infoEditPanel.add(selectAllButton, gbConstraints);
-        
-        unselectAllButton = new JButton("Unselect all");
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 1;
-        gbConstraints.gridy = 1;       
-        gbConstraints.gridwidth = 2;
-        gbConstraints.anchor = java.awt.GridBagConstraints.NORTH;
-        gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
-        unselectAllButton.setMinimumSize(new java.awt.Dimension(110, 25));        
-        unselectAllButton.setPreferredSize(new java.awt.Dimension(110, 25));
-        infoEditPanel.add(unselectAllButton, gbConstraints);
-        
-        undoSelectedButton = new JButton("Undo selected");
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 1;
-        gbConstraints.gridy = 2;     
-        gbConstraints.gridwidth = 2;
-        gbConstraints.anchor = java.awt.GridBagConstraints.NORTH;
-        gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
-        undoSelectedButton.setMinimumSize(new java.awt.Dimension(110, 25));        
-        undoSelectedButton.setPreferredSize(new java.awt.Dimension(110, 25));
-        infoEditPanel.add(undoSelectedButton, gbConstraints);
-        
-        countResultText = new JLabel();
-        countResultText.setText("Total results:"); 
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 1;
-        gbConstraints.gridy = 3;   
-        gbConstraints.weighty = 0.1;         
-        gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
-        gbConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
-        infoEditPanel.add(countResultText, gbConstraints);
-                
-        Integer countRes = model.getResultRows();
-        countResutl = new JLabel();
-        countResutl.setText(countRes.toString()); 
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 2;
-        gbConstraints.gridy = 3;       
-        gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
-        gbConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
-        infoEditPanel.add(countResutl, gbConstraints);
-        
-        currentRowsInfoText = new JLabel();
-        currentRowsInfoText.setText("Displayed:"); 
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 1;
-        gbConstraints.gridy = 4;                  
-        gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
-        gbConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
-        infoEditPanel.add(currentRowsInfoText, gbConstraints);
-                        
-        currentRowsInfo = new JLabel();
-        currentRowsInfo.setText(model.getCurrentDisplayRows()); 
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 2;
-        gbConstraints.gridy = 4;       
-        gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
-        gbConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
-        infoEditPanel.add(currentRowsInfo, gbConstraints);
-        
-        displayRowsText = new JLabel();
-        displayRowsText.setText("Rows to display:"); 
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 1;
-        gbConstraints.gridy = 5;       
-        gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
-        gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
-        infoEditPanel.add(displayRowsText, gbConstraints);
-        
-        displayRows = new JFormattedTextField();
-        displayRows.setValue(model.getDisplayRows());
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 2;
-        gbConstraints.gridy = 5;           
-        gbConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
-        gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
-        gbConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
-        infoEditPanel.add(displayRows, gbConstraints);
-        
-        previousButton = new JButton("Previous");
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 1;
-        gbConstraints.gridy = 6;            
-        gbConstraints.gridwidth = 2;
-        gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
-        gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
-        previousButton.setMinimumSize(new java.awt.Dimension(110, 25));        
-        previousButton.setPreferredSize(new java.awt.Dimension(110, 25));
-        infoEditPanel.add(previousButton, gbConstraints);
-        
-        nextButton = new JButton("Next");
-        gbConstraints = new GridBagConstraints();
-        gbConstraints.gridx = 1;
-        gbConstraints.gridy = 7;  
-        gbConstraints.gridwidth = 2;
-        gbConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
-        gbConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
-        nextButton.setMinimumSize(new java.awt.Dimension(110, 25));        
-        nextButton.setPreferredSize(new java.awt.Dimension(110, 25));
-        infoEditPanel.add(nextButton, gbConstraints);
-        
-    }     
- 
+        ));
+        jScrollPane1.setViewportView(tableEditList);
+
+        selectAllButton.setText(L10n.getString("selectAll"));
+
+        unselectAllButton.setText(L10n.getString("unselectAll"));
+
+        undoButton.setText(L10n.getString("undoSelected"));
+
+        nextButton.setText(L10n.getString("nextButton"));
+
+        previousButton.setText(L10n.getString("prevButton"));
+
+        toDisplayLabel.setText(L10n.getString("toDisplay"));
+
+        displayedLabel.setText(L10n.getString("displayed"));
+
+        totalResultLabel.setText(L10n.getString("totalResult"));
+
+        totalResultValueLabel.setText(((Integer)model.getResultRows()).toString());
+
+        displayedValueLabel.setText(model.getCurrentDisplayRows());
+
+        toDisplayValueTextField.setText(((Integer)model.getDisplayRows()).toString());
+        toDisplayValueTextField.setAutoscrolls(false);
+        toDisplayValueTextField.setMinimumSize(new java.awt.Dimension(16, 19));
+
+        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
+        jPanel4.setLayout(jPanel4Layout);
+        jPanel4Layout.setHorizontalGroup(
+            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel4Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel4Layout.createSequentialGroup()
+                        .add(totalResultLabel)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(totalResultValueLabel))
+                    .add(jPanel4Layout.createSequentialGroup()
+                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(displayedLabel)
+                            .add(toDisplayLabel))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                            .add(displayedValueLabel)
+                            .add(toDisplayValueTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
+                    .add(selectAllButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
+                    .add(unselectAllButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
+                    .add(undoButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
+                    .add(previousButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
+                    .add(nextButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
+                .addContainerGap())
+        );
+        jPanel4Layout.setVerticalGroup(
+            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel4Layout.createSequentialGroup()
+                .add(selectAllButton)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(unselectAllButton)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(undoButton)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 78, Short.MAX_VALUE)
+                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(totalResultLabel)
+                    .add(totalResultValueLabel))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(displayedLabel)
+                    .add(displayedValueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(toDisplayLabel)
+                    .add(toDisplayValueTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .add(15, 15, 15)
+                .add(previousButton)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(nextButton))
+        );
+
+        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
+        jPanel3.setLayout(jPanel3Layout);
+        jPanel3Layout.setHorizontalGroup(
+            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
+                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+        );
+        jPanel3Layout.setVerticalGroup(
+            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+        );
+
+        okButton.setText(L10n.getString("Ok"));
+
+        closeButton.setText(L10n.getString("Close"));
+
+        helpButton.setText(L10n.getString("Help"));
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
+                        .addContainerGap()
+                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
+                    .add(layout.createSequentialGroup()
+                        .add(310, 310, 310)
+                        .add(okButton)
+                        .add(16, 16, 16)
+                        .add(closeButton)
+                        .add(15, 15, 15)
+                        .add(helpButton)))
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(closeButton)
+                    .add(okButton)
+                    .add(helpButton))
+                .addContainerGap())
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    /**
+     * @param args the command line arguments
+     */
+    public static void main(String args[]) {
+        java.awt.EventQueue.invokeLater(new Runnable() {
+            public void run() {
+                new HistoryView(null, new javax.swing.JFrame(), true).setVisible(true);
+            }
+        });
+    }
+    
+     
     public int messageUndo(String message) {
-    	int okCancle = JOptionPane.showConfirmDialog(historyDialog, message, "Information about change", JOptionPane.OK_CANCEL_OPTION);
+    	int okCancle = JOptionPane.showConfirmDialog(this, message, "Information about change", JOptionPane.OK_CANCEL_OPTION);
     	return okCancle;
     }
 
     public void close() {
-        historyDialog.dispose();
+        dispose();
     }
-    
-    public void show() {
-        historyDialog.setSize(800,600);
-        historyDialog.setLocationRelativeTo(null);
-        historyDialog.setVisible(true);
-    }
-    
+  
     public JTable getTable()
     {
     	return this.tableEditList;
     }
     
+    /** Total results */
     public void setCountResutl(Integer resultRows)
     {
-    	this.countResutl.setText(resultRows.toString());
+    	this.totalResultValueLabel.setText(resultRows.toString());
     }
     
-    /** */
+    /**Displayed rows */
     public void setCurrentRowsInfo(String displayedRows)
     {
-    	this.currentRowsInfo.setText(displayedRows);
+    	this.displayedValueLabel.setText(displayedRows);
     }
     
+    /**Rows to display */
     public Integer getDisplayRows() {
-        return (Integer)displayRows.getValue();
+        return Integer.parseInt(toDisplayValueTextField.getText());
     }
     
-    public void setDisplayRows(int value) {
-        this.displayRows.setValue(value);
+    /**Rows to display*/
+    public void setDisplayRows(Integer value) {
+        this.toDisplayValueTextField.setText(value.toString());
     }  
     
-    /** 
-    *  Constructs the buttons pane.
-    */
-   private void initButtonsPane()
-   {
-       ComponentAdjust ca = new ComponentAdjust();
-              
-       okButton = new JButton(L10n.getString("Ok"));
-       cancelButton = new JButton(L10n.getString("Cancel"));
-       helpButton = new JButton(L10n.getString("Help"));
-       okButton.setActionCommand("OK");
-       cancelButton.setActionCommand("CANCEL");
-       helpButton.setActionCommand("HELP");
-       
-       ca.add(okButton);
-       ca.add(cancelButton);
-       ca.add(helpButton);
-       ca.setMaxWidth();
-       
-       buttonsPane = new JPanel();                    
-       buttonsPane.setLayout(new FlowLayout());
-       buttonsPane.add(okButton);
-       buttonsPane.add(cancelButton);
-       buttonsPane.add(helpButton);
-   }
-   
-
-  public void addOkButtonListener(ActionListener al) {
-     okButton.addActionListener(al);     
-  }  
-  
-  public void addCancelButtonListener(ActionListener al) {	     
-	     cancelButton.addActionListener(al);	     
-	  }  
-  
-  public void addHelpButtonListener(ActionListener al) {
-	     helpButton.addActionListener(al);
-	  }  
-  
-  public void addNextButtonListener(ActionListener al) {
-      nextButton.addActionListener(al);
-  }
-  
-  public void addPreviousButtonListener(ActionListener al) {
-      previousButton.addActionListener(al);
-  }
-  
-  public void addSelectAllButtonListener(ActionListener al) {
-      selectAllButton.addActionListener(al);
-  }
-  
-  public void addUnselectAllButtonListener(ActionListener al) {
-      unselectAllButton.addActionListener(al);
-  }
-  
-  public void addUndoSelectedButtonListener(ActionListener al) {
-      undoSelectedButton.addActionListener(al);
-  }
-  
-  void rowSetPropertyChangeListener(PropertyChangeListener pcl) {
-	  displayRows.addPropertyChangeListener(pcl);
-  }  
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    private javax.swing.JLabel authorLabel;
+    private javax.swing.JLabel authorValueLabel;
+    protected javax.swing.JButton closeButton;
+    private javax.swing.JLabel displayedLabel;
+    private javax.swing.JLabel displayedValueLabel;
+    protected javax.swing.JButton helpButton;
+    private javax.swing.JPanel jPanel1;
+    private javax.swing.JPanel jPanel2;
+    private javax.swing.JPanel jPanel3;
+    private javax.swing.JPanel jPanel4;
+    private javax.swing.JScrollPane jScrollPane1;
+    private javax.swing.JLabel locationLabel;
+    private javax.swing.JLabel locationValueLabel;
+    protected javax.swing.JButton nextButton;
+    protected javax.swing.JButton okButton;
+    protected javax.swing.JButton previousButton;
+    protected javax.swing.JButton selectAllButton;
+    private javax.swing.JTable tableEditList;
+    private javax.swing.JLabel taxonLabel;
+    private javax.swing.JLabel taxonValueLabel;
+    private javax.swing.JLabel toDisplayLabel;
+    protected javax.swing.JTextField toDisplayValueTextField;
+    private javax.swing.JLabel totalResultLabel;
+    private javax.swing.JLabel totalResultValueLabel;
+    protected javax.swing.JButton undoButton;
+    protected javax.swing.JButton unselectAllButton;
+    private javax.swing.JLabel whenInserLabel;
+    private javax.swing.JLabel whenInsertValueLabel;
+    private javax.swing.JLabel whoInsertLabel;
+    private javax.swing.JLabel whoInsertValueLabel;
+    // End of variables declaration//GEN-END:variables
+    
 }

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-13 07:11:45 UTC (rev 144)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-14 13:30:42 UTC (rev 145)
@@ -1,6 +1,5 @@
 # Properties common for all languages go here
 plantlore = Plantlore
-Help = &Help
 Settings = &Settings
 SettingsTooltip = Invokes the setting dialog
 Print = &Print
@@ -13,6 +12,8 @@
 Other = &Other
 Ok = &Ok
 Cancel = &Cancel
+Close = Close
+Help = &Help
 defaultLang = Default system language
 Czech = Czech
 English = English
@@ -82,18 +83,31 @@
 
 publicationMgr=Publication manager
 
+#History of the occurrences
 History= History - undo
-
+#History - Details of record
+taxon = Taxon:
+author = Author:
+location = Location:
+#History - List of changes
+whenInsert = Date record creation:
+whoInsert = User who record created:
+#History - buttons
+selectAll = Select all
+unselectAll = Unselect all
+undoSelected = Undo selected
+#History - information about result and displayed rows
+totalResult = Total results:
+displayed = Displayed rows:
+toDisplay = Rows to display:
+#History - Title of table columns
 historyColX = X
 historyColDate = Date
 historyColUser = User
 historyColItem = Item
 historyColOldValue = Old value
 historyColNewValue = New value
-updatedWho = updatedWho
-metadata = metadata
-note = note
-
+#History - value of tHistoryColumn.cColumnName (use as value of table column Item)
 plantId = Taxon
 yearCollected = Year
 monthCollected = Month
@@ -123,3 +137,7 @@
 nameTerritory = Territory
 namePhytochorion = Phytochorion
 code = Phytochorion code 
+#pravdepodobne budou smazany
+updatedWho = updatedWho
+metadata = metadata
+note = note



From lada at berlios.de  Sat Apr 15 11:44:05 2006
From: lada at berlios.de (lada at berlios.de)
Date: Sat, 15 Apr 2006 11:44:05 +0200
Subject: [Plantlore-dev] r146 - in trunk/src/net/sf/plantlore: client client/history l10n
Message-ID: <200604150944.k3F9i5LE030918@sheep.berlios.de>

Author: lada
Date: 2006-04-15 11:44:04 +0200 (Sat, 15 Apr 2006)
New Revision: 146

Added:
   trunk/src/net/sf/plantlore/client/history/WholeHistory.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryView.form
   trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java
Modified:
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/AppCoreView.java
   trunk/src/net/sf/plantlore/client/history/History.java
   trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java
   trunk/src/net/sf/plantlore/client/history/HistoryView.java
   trunk/src/net/sf/plantlore/l10n/Plantlore.properties
Log:
Add whole history --> add new item to menu (edit AppCoreView and AppCoreCtrl), add some properties.

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-14 13:30:42 UTC (rev 145)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-15 09:44:04 UTC (rev 146)
@@ -24,6 +24,9 @@
 import javax.swing.ListSelectionModel;
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
+import net.sf.plantlore.client.history.WholeHistory;
+import net.sf.plantlore.client.history.WholeHistoryCtrl;
+import net.sf.plantlore.client.history.WholeHistoryView;
 import net.sf.plantlore.common.record.Author;
 import net.sf.plantlore.common.record.AuthorOccurrence;
 import net.sf.plantlore.common.record.Occurrence;
@@ -64,10 +67,16 @@
     SettingsCtrl settingsCtrl;
     Preferences prefs;
     
+    // History of one occurrence
     History historyModel;
     HistoryView historyView;
     HistoryCtrl historyCtrl;
     
+    //History of "database" 
+    WholeHistory wholeHistoryModel;
+    WholeHistoryView wholeHistoryView;
+    WholeHistoryCtrl wholeHistoryCtrl;
+    
     Login loginModel;
     LoginView loginView;
     LoginCtrl loginCtrl;
@@ -90,6 +99,7 @@
         view.addDataAuthorsListener(new DataAuthorsListener());
         view.addDataPublicationsListener(new DataPublicationsListener());
         view.addDataHistoryListener(new DataHistoryListener());
+        view.addDataWholeHistoryListener(new DataWholeHistoryListener());
         
         view.setSearchAction(new SearchAction());
         view.setAddAction(new AddAction());
@@ -387,13 +397,26 @@
             //toto volani historie nebude v menu, ale jako tlacitko pro vybrany zaznam        
             //o vybranem zaznamu predame informace, ktere chceme o nem v historii zobrazit
             //jmeno rosliny, jmeno autora a lokaci a idOccurrences
+            
             historyModel = new History(model.getDatabase(),"Adis Abeba", "Lada", "Praha v?chod", 1);
             historyView = new HistoryView(historyModel, view, true);
             historyCtrl = new HistoryCtrl(historyModel, historyView);
-            historyView.setVisible(true);  
+            historyView.setVisible(true);                         
         }
     }    
     
+        class DataWholeHistoryListener implements ActionListener {
+    	public void actionPerformed(ActionEvent actionEvent)
+        {
+            System.out.println("Whole history - Undo selected");
+            
+            wholeHistoryModel = new WholeHistory(model.getDatabase());
+            wholeHistoryView = new WholeHistoryView(wholeHistoryModel, view, true);
+            wholeHistoryCtrl = new WholeHistoryCtrl(wholeHistoryModel, wholeHistoryView);
+            wholeHistoryView.setVisible(true); 
+        }
+    }    
+    
     class RecordsPerPagePropertyChangeListener implements PropertyChangeListener {
         public void propertyChange(PropertyChangeEvent e) {
             JFormattedTextField tf = (JFormattedTextField)e.getSource();

Modified: trunk/src/net/sf/plantlore/client/AppCoreView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-14 13:30:42 UTC (rev 145)
+++ trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-15 09:44:04 UTC (rev 146)
@@ -74,6 +74,7 @@
     private JMenuItem dataAuthors = new JMenuItem(L10n.getString("authorMgr"));
     private JMenuItem dataPublications = new JMenuItem(L10n.getString("publicationMgr"));    
     private JMenuItem dataHistory = new JMenuItem(L10n.getString("History"));
+    private JMenuItem dataWholeHistory = new JMenuItem(L10n.getString("wholeHistory"));
     private JMenuItem dataImport = new JMenuItem(L10n.getString("dataImport"));
     private JMenuItem dataExport = new JMenuItem(L10n.getString("dataExport"));
     private JMenuItem dataSearch = new JMenuItem(L10n.getString("dataSearch"));
@@ -166,6 +167,7 @@
         dataMenu.add(dataExport);
         dataMenu.add(dataSearch);
         dataMenu.add(dataHistory); 
+        dataMenu.add(dataWholeHistory); 
 
         helpMenu.setMnemonic(L10n.getMnemonic("Help"));
         helpMenu.add(helpContents);
@@ -447,6 +449,13 @@
         dataHistory.addActionListener(al);
     }
     
+     /** Adds a listener to the HistoryData menu item.
+    *
+    */
+    public void addDataWholeHistoryListener(ActionListener al) {
+        dataWholeHistory.addActionListener(al);
+    }
+    
     public void setRecordsPerPageListener(PropertyChangeListener p)
     {
         recordsPerPage.addPropertyChangeListener(p);

Modified: trunk/src/net/sf/plantlore/client/history/History.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/History.java	2006-04-14 13:30:42 UTC (rev 145)
+++ trunk/src/net/sf/plantlore/client/history/History.java	2006-04-15 09:44:04 UTC (rev 146)
@@ -42,7 +42,7 @@
  */
 public class History extends Observable {
 
-	/** Instance of a logger */
+    /** Instance of a logger */
     private Logger logger;   
     /** Exception with details about an error */
     private DBLayerException error = null;

Modified: trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java	2006-04-14 13:30:42 UTC (rev 145)
+++ trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java	2006-04-15 09:44:04 UTC (rev 146)
@@ -21,15 +21,15 @@
  */
 public class HistoryTableModel extends AbstractTableModel
 {
-	//Logger
-	private Logger logger;
-	// History model
-	private History model; 
-	private ArrayList<HistoryRecord> editHistoryDataList;
+    //Logger
+    private Logger logger;
+    // History model
+    private History model; 
+    private ArrayList<HistoryRecord> editHistoryDataList;
     private HashSet markListId;
     private ArrayList<Object[]> markItem;
 	
-	/** Names of the columns */
+    /** Names of the columns */
     private String[] columnNames;
     /** Data values displayed in the table*/
     private Object[][] data;

Modified: trunk/src/net/sf/plantlore/client/history/HistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-14 13:30:42 UTC (rev 145)
+++ trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-15 09:44:04 UTC (rev 146)
@@ -358,7 +358,13 @@
     
     /**Rows to display */
     public Integer getDisplayRows() {
-        return Integer.parseInt(toDisplayValueTextField.getText());
+         Integer countRows;
+        try {
+            countRows = Integer.parseInt(toDisplayValueTextField.getText());
+        }catch (NumberFormatException e){            
+            countRows = 0;
+        }
+        return countRows;
     }
     
     /**Rows to display*/

Added: trunk/src/net/sf/plantlore/client/history/WholeHistory.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistory.java	2006-04-14 13:30:42 UTC (rev 145)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistory.java	2006-04-15 09:44:04 UTC (rev 146)
@@ -0,0 +1,229 @@
+/*
+ * WholeHistory.java
+ *
+ * Created on 14. duben 2006, 15:43
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client.history;
+
+import java.rmi.RemoteException;
+import java.util.ArrayList;
+import net.sf.plantlore.common.PlantloreConstants;
+import net.sf.plantlore.common.record.HistoryChange;
+import net.sf.plantlore.common.record.HistoryRecord;
+import net.sf.plantlore.middleware.DBLayer;
+import net.sf.plantlore.middleware.SelectQuery;
+import net.sf.plantlore.server.DBLayerException;
+import org.apache.log4j.Logger;
+
+/**
+ *
+ * @author Lada
+ */
+public class WholeHistory {
+    
+      /** Instance of a logger */
+    private Logger logger;   
+    /** Exception with details about an error */
+    private DBLayerException error = null;
+    /** Instance of a database management object */
+    private DBLayer database;   
+    /** Constant with default number of rows to display */
+    private static final int DEFAULT_DISPLAY_ROWS = 6;    
+    /** Actual number of rows to display */
+    private int displayRows = DEFAULT_DISPLAY_ROWS;   
+    /** Index of the first record shown in the table */
+    private int currentFirstRow;
+    /** Information about current display rows*/
+    private String displayRow;
+    
+    //*******Informations about searching Result from database*****//
+    /** Result of the search query */
+    private int resultId = 0;
+    /** List of data (results of a search query) displayed in the table */
+    private ArrayList<HistoryRecord> editHistoryDataList = new ArrayList(); 
+    // informace pro uzivatele o undo
+    private String messageUndo;
+    
+    
+    /** Creates a new instance of WholeHistory */
+    public WholeHistory(DBLayer database) {
+          
+       logger = Logger.getLogger(this.getClass().getPackage().getName());	 
+       this.database = database;
+       
+       //nacist vsechny data z historie -->bez podminky, jen je seradit podle casu
+       searchWholeHistoryData();
+       //opet funkci pro vyzadani si dat postupne
+       processResult(1, displayRows);
+    }
+    
+    /**
+     *
+     */
+    public void searchWholeHistoryData() {
+        
+        //Create new Select query
+        SelectQuery query = null;       
+
+    	//  Select data from tHistory table
+        try {
+		query = database.createQuery(HistoryRecord.class);
+        } catch (RemoteException e) {
+                System.err.println("RemoteException- searchWholeHistoryData(), createQuery");
+        }
+        // Create aliases for table tHistoryChange.      
+        query.createAlias("historyChange", "hc");
+       //sort by date/time 	
+        query.addOrder(PlantloreConstants.DIRECT_DESC, "hc.when");        
+    	
+        int resultId = 0;
+        try {
+            // Execute query                    
+            resultId = database.executeQuery(query);        
+        } catch (DBLayerException e) {                            
+            logger.error("Searching whole history data failed. Unable to execute search query.");           
+        } catch (RemoteException e) { 		   
+     	   System.err.println("RemoteException- searchWholeHistoryData(), executeQuery");
+        } finally {
+                logger.debug("Searching whole history data ends successfully");
+                // Save "edit" history data
+                setResultId(resultId);                  
+        }              
+    }
+    
+   /**
+     * Process results of a search query. Retrieves results using the database management object (DBLayer) and stores them in the data field of the class. 
+     * @param fromTable number of the first row to show in table. Number of the first row to retraieve is 1.
+     * @param count number of rows to retrieve 
+     */
+    public void processResult(int fromTable, int count) {
+        
+        if (this.resultId != 0) {
+            int currentRow = getResultRows();
+            logger.debug("Rows in the result: "+currentRow);
+            logger.debug("Max available rows: "+(fromTable+count-1));
+           
+            // Find out how many rows we can retrieve - it cannot be more than number of rows in the result
+            int to = Math.min(currentRow, fromTable+count-1);           
+            if (to <= 0) {
+            	editHistoryDataList = new ArrayList<HistoryRecord>(); 
+            	setDisplayRows(0);
+            	setCurrentDisplayRows("0-0");
+            } else {
+                logger.debug("Retrieving query results: 1 - "+to);
+                setCurrentDisplayRows(fromTable+ "-" + to);
+                try {                	 
+                     // Retrieve selected row interval 
+                	Object[] objectHistory;
+                 	try {
+                 		objectHistory = database.more(this.resultId, 1, to);  
+                 	} catch(RemoteException e) {
+                     	System.err.println("RemoteException- processEditResult, more");
+                     	logger.debug("RemoteException- processEditResult, more");
+                     	return;
+                     }                   
+                    int countResult = objectHistory.length;  
+                    logger.debug("Results retrieved. Count: "+ countResult);
+                    // Create storage for the results
+                    this.editHistoryDataList = new ArrayList<HistoryRecord>();
+                    // Cast the results to the HistoryRecord objects
+                    for (int i=0; i<countResult; i++ ) {                    							
+						Object[] objHis = (Object[])objectHistory[i];
+                        this.editHistoryDataList.add((HistoryRecord)objHis[0]);
+                    }                     
+                } catch (DBLayerException e) {                  
+                    logger.error("Processing search results failed: "+e.toString());            
+                } finally { 
+                    logger.debug("Sets 'edit' data ends successfully");
+                    //Update current first displayed row (only if data retrieval was successful)
+                    setCurrentFirstRow(fromTable);                    
+                }               
+            }
+        }         
+    }
+    
+       
+    //****************************//
+    //****Get and set metods*****//
+    //**************************//
+    
+    //id vysledku po vyhledavani v db
+    public void setResultId(int resultId) {
+        this.resultId = resultId;
+    }
+    
+    public int getResultId() {
+        return this.resultId;
+    }
+    
+    public int getResultRows() {
+        int resultCount = 0;
+        if (resultId != 0) try {
+                resultCount = database.getNumRows(resultId);        	
+        } catch(RemoteException e) {
+                System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
+        }
+        return resultCount;
+    }
+
+    public ArrayList<HistoryRecord> getEditHistoryDataList() {
+              return this.editHistoryDataList;		  
+       }
+
+     public void setEditHistoryDataList(ArrayList<HistoryRecord> editHistoryDataList) {
+              this.editHistoryDataList = editHistoryDataList;		  
+     } 
+    
+     public String getCurrentDisplayRows() {
+		  return this.displayRow;		  
+	   }
+
+     public void setCurrentDisplayRows(String displayRow) {
+              this.displayRow = displayRow;		  
+     } 
+     
+     public String getMessageUndo() {
+		  return this.messageUndo;		  
+	   }
+
+     public void setMessageUndo(String messageUndo) {
+              this.messageUndo = messageUndo;		  
+     } 
+     
+         /**
+     *  Get index of the first row currently displayed in the list of record changes. This is an index in the results returned by a search query.
+     *  @return index of the first row currently displayed in the list of history
+     */
+    public int getCurrentFirstRow() {
+        return this.currentFirstRow;
+    }
+    
+    /**
+     *  Set index of the forst row currently displayed in the list of record changes. This is an index in the results returned by a search query.
+     *  @param row index of the first row currently displayed in the list of history
+     */
+    public void setCurrentFirstRow(int row) {
+        this.currentFirstRow = row;
+    }    
+
+    /**
+     *  Get number of rows to be displayed on one page.
+     *  @return number of rows to be displayed per page
+     */
+    public int getDisplayRows() {
+        return this.displayRows;
+    }
+    
+    /**
+     *  Set number of rows to be displayed on one page
+     *  @param rows number of rows ro be displayed per page
+     */
+    public void setDisplayRows(int rows) {
+        this.displayRows = rows;
+    }
+    
+}

Added: trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java	2006-04-14 13:30:42 UTC (rev 145)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java	2006-04-15 09:44:04 UTC (rev 146)
@@ -0,0 +1,185 @@
+/*
+ * WholeHistoryCtrl.java
+ *
+ * Created on 14. duben 2006, 15:44
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client.history;
+
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
+import org.apache.log4j.Logger;
+
+
+
+
+/**
+ *
+ * @author Lada
+ */
+public class WholeHistoryCtrl {
+   
+    private Logger logger;
+    private WholeHistory model;
+    private WholeHistoryView view;
+    
+    /** Creates a new instance of WholeHistoryCtrl */
+    public WholeHistoryCtrl(WholeHistory model, WholeHistoryView view) {
+      
+        logger = Logger.getLogger(this.getClass().getPackage().getName());        
+        this.model = model;
+        this.view = view;
+                  
+        view.okButton.addActionListener(new okButtonListener());
+        view.closeButton.addActionListener(new closeButtonListener());
+        view.helpButton.addActionListener(new helpButtonListener());
+        view.previousButton.addActionListener(new previousButtonListener());
+        view.nextButton.addActionListener(new nextButtonListener());     
+        view.undoToDateButton.addActionListener(new undoToDateButtonListener());
+        view.toDisplayValueTextField.addPropertyChangeListener(new rowSetDisplayChangeListener());        
+    }
+    
+            /** 
+    * On Ok makes the model store() the preferences and hides the view.
+    * 
+    */
+   class okButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {       
+           view.close();           
+       }
+   }
+  
+   /**
+    * On Cancel just hides the view.
+    *
+    */
+   class closeButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+    	   view.close();
+       }
+   }
+   
+   /**
+    * On Help should call help.
+    *
+    */
+   class helpButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {    	  
+    	   // Display help viewer            
+    	   System.out.println("Tady se bude volat Help!");
+       }
+   }
+   
+   /**
+    * 
+    *
+    */
+   class previousButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+    	   //   Call processResults only if we don't see the first page (should not happen, button should be disabled)
+    	   logger.debug("FIRST");
+    	   logger.debug("current first row: "+model.getCurrentFirstRow());
+           logger.debug("num rows in the result: "+ model.getResultRows());            
+           logger.debug("display rows: "+ view.tableHistoryList.getRowCount());      
+           if (model.getCurrentFirstRow() > 1) {
+               int firstRow = Math.max(model.getCurrentFirstRow()- model.getDisplayRows(), 1);
+               model.processResult(firstRow, model.getDisplayRows()); 
+               if (model.getCurrentFirstRow() > 1){
+               }
+               view.tableHistoryList.setModel(new WholeHistoryTableModel(model));
+               int from = model.getCurrentFirstRow();
+               int to = from + view.tableHistoryList.getRowCount() - 1;
+               view.displayedValueLabel.setText(from + "-" + to);
+           }                           
+       }
+   }
+   
+   /**
+    * 
+    *
+    */
+   class nextButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+    	   //Call processResults only if we don't see the last page
+    	   logger.debug("NEXT");
+           logger.debug("current first row: "+model.getCurrentFirstRow());
+           logger.debug("num rows in the result: "+ model.getResultRows());            
+           logger.debug("display rows: "+ model.getDisplayRows());
+           logger.debug("num rows in table (view) "+ view.tableHistoryList.getRowCount());              
+           if (model.getCurrentFirstRow()+ view.tableHistoryList.getRowCount()<=model.getResultRows()) {
+               model.processResult(model.getCurrentFirstRow()+ model.getDisplayRows(), view.tableHistoryList.getRowCount());
+               view.tableHistoryList.setModel(new WholeHistoryTableModel(model));             
+               int from = model.getCurrentFirstRow();
+               int to = from + view.tableHistoryList.getRowCount() - 1;
+               if (to <= 0){
+            	   view.displayedValueLabel.setText("0-0");
+               }else {
+            	   view.displayedValueLabel.setText(from + "-" + to);
+               }               
+           }                       
+       }
+   }
+   
+      /**
+    * 
+    */
+   class rowSetDisplayChangeListener implements PropertyChangeListener {
+	   public void propertyChange(PropertyChangeEvent e) {
+           // Save old value
+           int oldValue = model.getDisplayRows();           
+           // Check whether new value > 0
+           if (view.getDisplayRows() < 1) {
+               view.setDisplayRows(oldValue);
+               return;
+           }
+           if (view.getDisplayRows() > model.getResultRows()){
+        	   view.setDisplayRows(model.getResultRows());
+           } 
+           
+           // Set new value in the model
+           model.setDisplayRows(view.getDisplayRows());
+           logger.debug("New display rows: "+view.getDisplayRows());
+           // If neccessary reload search results
+           if ((oldValue != view.getDisplayRows()) && (model.getDisplayRows() <= model.getResultRows())) {
+               model.processResult(model.getCurrentFirstRow(), view.getDisplayRows());
+               view.tableHistoryList.setModel(new WholeHistoryTableModel(model));
+               int from = model.getCurrentFirstRow();
+               int to = from + view.tableHistoryList.getRowCount() - 1;
+               view.displayedValueLabel.setText(from + "-" + to);               
+           }
+       }        	   
+   }
+   
+   /**
+    *
+    */  
+    class undoToDateButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+           if (view.tableHistoryList.getSelectedRow() < 0) {    
+               view.messageUndoSelection();
+           } else {
+               logger.debug("Undo to date - id of selected row: "+ view.tableHistoryList.getSelectedRow());
+               int okCancle = view.messageUndo("model.getMessageUndo()");      
+               if (okCancle == 0){
+                       //Button OK was press
+                       logger.debug("Button OK was press.");                       
+               } else {
+                       //Button Cancle was press
+                       //neco jako rollback - bude se volat nebo to bude zarizeno tim, ze se nezavola executeUpdate??
+                       logger.debug("Button Cancle was press.");
+               } 
+           }
+       }
+    }
+}

Added: trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java	2006-04-14 13:30:42 UTC (rev 145)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java	2006-04-15 09:44:04 UTC (rev 146)
@@ -0,0 +1,129 @@
+/*
+ * WholeHistoryTableModel.java
+ *
+ * Created on 14. duben 2006, 15:43
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client.history;
+
+import java.util.ArrayList;
+import javax.swing.table.AbstractTableModel;
+import net.sf.plantlore.common.record.HistoryRecord;
+import net.sf.plantlore.l10n.L10n;
+import org.apache.log4j.Logger;
+
+/**
+ *
+ * @author Lada
+ */
+public class WholeHistoryTableModel extends AbstractTableModel {
+    
+    //Logger
+    private Logger logger;
+    // History model
+    private WholeHistory model; 
+    private ArrayList<HistoryRecord> editHistoryDataList;
+    
+    /** Names of the columns */
+    private String[] columnNames;
+    /** Data values displayed in the table*/
+    private Object[][] data;
+
+    public final static int DATE = 0;
+    public final static int OPERATION = 1; 
+    public final static int USER = 2;
+    public final static int ITEM = 3;
+    public final static int OLD_VALUE = 4;
+    public final static int NEW_VALUE = 5;
+    
+    /** Creates a new instance of WholeHistoryTableModel */
+    public WholeHistoryTableModel(WholeHistory model) {
+        logger = Logger.getLogger(this.getClass().getPackage().getName());
+    	this.model = model;        
+    	initColumns();    	
+    	initData();    	
+    }  
+   
+    private void initColumns() {
+        columnNames = new String[6];                      
+        columnNames[0] = L10n.getString("historyColDate"); 
+        columnNames[1] = L10n.getString("historyColOperation");  
+        columnNames[2] = L10n.getString("historyColUser");        
+        columnNames[3] = L10n.getString("historyColItem");        
+        columnNames[4] = L10n.getString("historyColOldValue");       
+        columnNames[5] = L10n.getString("historyColNewValue");        
+    }       
+    
+    /**
+     * Load data for dislaying 
+     */
+    public void initData() {
+    	
+    	logger.debug("WholeHistory - Init data.");
+    	
+    	editHistoryDataList = model.getEditHistoryDataList();
+    	if (editHistoryDataList.size()==0 ){
+    		this.data = new Object[0][];
+    		return;
+    	}    	  	
+    	int firstRow = model.getCurrentFirstRow();
+    	int countResult = Math.min(editHistoryDataList.size(), firstRow+ model.getDisplayRows()-1);
+    	int countRow = countResult - firstRow + 1;   
+        int ii = 0;
+    	//loud data for view
+        Object[][] editHistoryData = new Object[countRow][6];   
+    	for (int i=firstRow-1; i < countResult; i++) {      	            
+    	    editHistoryData[ii][0] = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getWhen();
+            editHistoryData[ii][1] = L10n.getString( "operation"+((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getOperation());
+    	    editHistoryData[ii][2] = ((HistoryRecord)editHistoryDataList.get(i)).getHistoryChange().getWho().getWholeName();    	   
+    	    editHistoryData[ii][3] = L10n.getString(((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getColumnName());
+    	    editHistoryData[ii][4] = ((HistoryRecord)editHistoryDataList.get(i)).getOldValue();
+    	    editHistoryData[ii][5] = ((HistoryRecord)editHistoryDataList.get(i)).getNewValue();
+    	    ii++;
+    	}      	    	
+    	this.data = editHistoryData;    	
+    }    
+    
+    /**
+     * Gets the value of the given cell.
+     * @param row index of row
+     * @param column index of column
+     */
+    public Object getValueAt(int row, int column)
+    {
+        return data[row][column];
+    }    
+    
+    /** 
+     * Gets number of rows in the actual HistoryTableModel
+     * @return the number of rows in the HistoryTableModel.
+     */
+    public int getRowCount()
+    {
+        return data.length;
+    }        
+
+   /**   
+     * Gets number of columns in the actual HistoryTableModel
+     * @return the number of columns in the HistoryTableModel.
+     */
+    public int getColumnCount()
+    {
+        return columnNames.length;
+    }
+    
+      /**
+     * Gets the name of the specified column
+     * @param column index of column
+     * @return the name of the specified column.
+     */
+    public String getColumnName(int column){
+        return columnNames[column];
+    }
+    
+    
+   
+}

Added: trunk/src/net/sf/plantlore/client/history/WholeHistoryView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryView.form	2006-04-14 13:30:42 UTC (rev 145)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryView.form	2006-04-15 09:44:04 UTC (rev 146)
@@ -0,0 +1,294 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JDialogFormInfo">
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="2"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" attributes="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <EmptySpace min="-2" pref="300" max="-2" attributes="0"/>
+                      <Component id="okButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace min="-2" pref="20" max="-2" attributes="0"/>
+                      <Component id="closeButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace min="-2" pref="27" max="-2" attributes="0"/>
+                      <Component id="helpButton" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <Group type="102" alignment="0" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="jPanel1" max="32767" attributes="0"/>
+                  </Group>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="1" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="jPanel1" min="-2" max="-2" attributes="0"/>
+              <EmptySpace pref="29" max="32767" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="closeButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="okButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="helpButton" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Container class="javax.swing.JPanel" name="jPanel1">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Whole History"/>
+          </Border>
+        </Property>
+      </Properties>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="1" attributes="0">
+                  <Component id="jScrollPane1" pref="767" max="32767" attributes="0"/>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Component id="jPanel2" min="-2" pref="150" max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Component id="jPanel2" alignment="0" max="32767" attributes="1"/>
+              <Component id="jScrollPane1" alignment="0" pref="243" max="32767" attributes="1"/>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Container class="javax.swing.JScrollPane" name="jScrollPane1">
+
+          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+          <SubComponents>
+            <Component class="javax.swing.JTable" name="tableHistoryList">
+              <Properties>
+                <Property name="model" type="javax.swing.table.TableModel" editor="org.netbeans.modules.form.editors2.TableModelEditor">
+                  <Table columnCount="4" rowCount="4">
+                    <Column editable="true" title="Title 1" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 2" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 3" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 4" type="java.lang.Object"/>
+                  </Table>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+          </SubComponents>
+        </Container>
+        <Container class="javax.swing.JPanel" name="jPanel2">
+
+          <Layout>
+            <DimensionLayout dim="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Group type="102" attributes="0">
+                              <Group type="103" groupAlignment="0" attributes="0">
+                                  <Component id="undoToDateButton" alignment="0" min="-2" pref="126" max="-2" attributes="1"/>
+                                  <Group type="102" alignment="0" attributes="0">
+                                      <Component id="totalResultLabel" min="-2" max="-2" attributes="0"/>
+                                      <EmptySpace max="-2" attributes="0"/>
+                                      <Component id="totalResultValueLabel" min="-2" max="-2" attributes="0"/>
+                                  </Group>
+                                  <Group type="102" alignment="0" attributes="0">
+                                      <Group type="103" groupAlignment="0" attributes="0">
+                                          <Component id="displayedLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                                          <Component id="toDisplayLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                                      </Group>
+                                      <EmptySpace max="-2" attributes="0"/>
+                                      <Group type="103" groupAlignment="0" attributes="0">
+                                          <Group type="102" attributes="0">
+                                              <EmptySpace min="10" pref="10" max="10" attributes="0"/>
+                                              <Component id="toDisplayValueTextField" alignment="0" min="-2" pref="31" max="-2" attributes="0"/>
+                                          </Group>
+                                          <Component id="displayedValueLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                                      </Group>
+                                  </Group>
+                              </Group>
+                              <EmptySpace max="-2" attributes="0"/>
+                          </Group>
+                          <Group type="102" alignment="0" attributes="0">
+                              <Group type="103" groupAlignment="1" max="-2" attributes="0">
+                                  <Component id="nextButton" alignment="0" max="32767" attributes="1"/>
+                                  <Component id="previousButton" alignment="0" pref="125" max="32767" attributes="1"/>
+                              </Group>
+                              <EmptySpace pref="15" max="32767" attributes="0"/>
+                          </Group>
+                      </Group>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+            <DimensionLayout dim="1">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="1" attributes="0">
+                      <Component id="undoToDateButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace pref="94" max="32767" attributes="0"/>
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="totalResultLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="totalResultValueLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="displayedLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="displayedValueLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="toDisplayLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="toDisplayValueTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="previousButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace min="-2" pref="4" max="-2" attributes="0"/>
+                      <Component id="nextButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+          </Layout>
+          <SubComponents>
+            <Component class="javax.swing.JButton" name="undoToDateButton">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;undoToDate&quot;)" type="code"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JLabel" name="toDisplayLabel">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;toDisplay&quot;)" type="code"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="displayedLabel">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;displayed&quot;)" type="code"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="totalResultLabel">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;totalResult&quot;)" type="code"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="totalResultValueLabel">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="((Integer)model.getResultRows()).toString()" type="code"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JLabel" name="displayedValueLabel">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="model.getCurrentDisplayRows()" type="code"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JTextField" name="toDisplayValueTextField">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="((Integer)model.getDisplayRows()).toString()" type="code"/>
+                </Property>
+                <Property name="autoscrolls" type="boolean" value="false"/>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JButton" name="nextButton">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;nextButton&quot;)" type="code"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JButton" name="previousButton">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;prevButton&quot;)" type="code"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+          </SubComponents>
+        </Container>
+      </SubComponents>
+    </Container>
+    <Component class="javax.swing.JButton" name="okButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Ok&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Component class="javax.swing.JButton" name="closeButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Close&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Component class="javax.swing.JButton" name="helpButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Help&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+  </SubComponents>
+</Form>

Added: trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java	2006-04-14 13:30:42 UTC (rev 145)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java	2006-04-15 09:44:04 UTC (rev 146)
@@ -0,0 +1,270 @@
+/*
+ * WholeHistoryView.java
+ *
+ * Created on 14. duben 2006, 18:21
+ */
+
+package net.sf.plantlore.client.history;
+
+import java.util.Observable;
+import java.util.Observer;
+import javax.swing.DefaultListSelectionModel;
+import javax.swing.JOptionPane;
+import javax.swing.JTable;
+import net.sf.plantlore.l10n.L10n;
+
+/**
+ *
+ * @author  Lada
+ */
+public class WholeHistoryView extends javax.swing.JDialog implements Observer{
+    
+    //Whole History model
+    private WholeHistory model;  
+    //data
+    private Object[][] data;
+    
+    /** Creates new form WholeHistoryView */
+    public WholeHistoryView(WholeHistory model, java.awt.Frame parent, boolean modal) {
+        
+        super(parent, modal);
+        this.model = model;
+        initComponents();
+        this.tableHistoryList.setRowSelectionAllowed(true);
+        this.tableHistoryList.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
+        this.tableHistoryList.setModel(new WholeHistoryTableModel(model));                
+    }
+    
+    public void update(Observable observable, Object object)
+    {
+    }
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        jPanel1 = new javax.swing.JPanel();
+        jScrollPane1 = new javax.swing.JScrollPane();
+        tableHistoryList = new javax.swing.JTable();
+        jPanel2 = new javax.swing.JPanel();
+        undoToDateButton = new javax.swing.JButton();
+        toDisplayLabel = new javax.swing.JLabel();
+        displayedLabel = new javax.swing.JLabel();
+        totalResultLabel = new javax.swing.JLabel();
+        totalResultValueLabel = new javax.swing.JLabel();
+        displayedValueLabel = new javax.swing.JLabel();
+        toDisplayValueTextField = new javax.swing.JTextField();
+        nextButton = new javax.swing.JButton();
+        previousButton = new javax.swing.JButton();
+        okButton = new javax.swing.JButton();
+        closeButton = new javax.swing.JButton();
+        helpButton = new javax.swing.JButton();
+
+        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
+        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Whole History"));
+        tableHistoryList.setModel(new javax.swing.table.DefaultTableModel(
+            new Object [][] {
+                {null, null, null, null},
+                {null, null, null, null},
+                {null, null, null, null},
+                {null, null, null, null}
+            },
+            new String [] {
+                "Title 1", "Title 2", "Title 3", "Title 4"
+            }
+        ));
+        jScrollPane1.setViewportView(tableHistoryList);
+
+        undoToDateButton.setText(L10n.getString("undoToDate"));
+
+        toDisplayLabel.setText(L10n.getString("toDisplay"));
+
+        displayedLabel.setText(L10n.getString("displayed"));
+
+        totalResultLabel.setText(L10n.getString("totalResult"));
+
+        totalResultValueLabel.setText(((Integer)model.getResultRows()).toString());
+
+        displayedValueLabel.setText(model.getCurrentDisplayRows());
+
+        toDisplayValueTextField.setText(((Integer)model.getDisplayRows()).toString());
+        toDisplayValueTextField.setAutoscrolls(false);
+
+        nextButton.setText(L10n.getString("nextButton"));
+
+        previousButton.setText(L10n.getString("prevButton"));
+
+        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
+        jPanel2.setLayout(jPanel2Layout);
+        jPanel2Layout.setHorizontalGroup(
+            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel2Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel2Layout.createSequentialGroup()
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(undoToDateButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(jPanel2Layout.createSequentialGroup()
+                                .add(totalResultLabel)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                                .add(totalResultValueLabel))
+                            .add(jPanel2Layout.createSequentialGroup()
+                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                                    .add(displayedLabel)
+                                    .add(toDisplayLabel))
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                                    .add(jPanel2Layout.createSequentialGroup()
+                                        .add(10, 10, 10)
+                                        .add(toDisplayValueTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                                    .add(displayedValueLabel))))
+                        .addContainerGap())
+                    .add(jPanel2Layout.createSequentialGroup()
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
+                            .add(org.jdesktop.layout.GroupLayout.LEADING, nextButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                            .add(org.jdesktop.layout.GroupLayout.LEADING, previousButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
+                        .addContainerGap(15, Short.MAX_VALUE))))
+        );
+        jPanel2Layout.setVerticalGroup(
+            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
+                .add(undoToDateButton)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 94, Short.MAX_VALUE)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(totalResultLabel)
+                    .add(totalResultValueLabel))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(displayedLabel)
+                    .add(displayedValueLabel))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(toDisplayLabel)
+                    .add(toDisplayValueTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(previousButton)
+                .add(4, 4, 4)
+                .add(nextButton)
+                .addContainerGap())
+        );
+
+        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
+        jPanel1.setLayout(jPanel1Layout);
+        jPanel1Layout.setHorizontalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
+                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+        );
+        jPanel1Layout.setVerticalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
+        );
+
+        okButton.setText(L10n.getString("Ok"));
+
+        closeButton.setText(L10n.getString("Close"));
+
+        helpButton.setText(L10n.getString("Help"));
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(layout.createSequentialGroup()
+                        .add(300, 300, 300)
+                        .add(okButton)
+                        .add(20, 20, 20)
+                        .add(closeButton)
+                        .add(27, 27, 27)
+                        .add(helpButton))
+                    .add(layout.createSequentialGroup()
+                        .addContainerGap()
+                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 29, Short.MAX_VALUE)
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(closeButton)
+                    .add(okButton)
+                    .add(helpButton))
+                .addContainerGap())
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    /**
+     * @param args the command line arguments
+     */
+    public static void main(String args[]) {
+        java.awt.EventQueue.invokeLater(new Runnable() {
+            public void run() {
+                new WholeHistoryView(null, new javax.swing.JFrame(), true).setVisible(true);
+            }
+        });
+    }
+  
+    /**
+     *
+     */
+    public void close() {
+        dispose();
+    }
+    
+     public int messageUndo(String message) {
+    	int okCancle = JOptionPane.showConfirmDialog(this, message, "Information about selected date for undo", JOptionPane.OK_CANCEL_OPTION);
+    	return okCancle;
+    }
+     
+    public void messageUndoSelection() {
+    	JOptionPane.showMessageDialog(this, "No row was selected.", "Information about selected row", JOptionPane.ERROR_MESSAGE);               
+    } 
+    
+    /**Rows to display */
+    public Integer getDisplayRows() { 
+        Integer countRows;
+        try {
+            countRows = Integer.parseInt(toDisplayValueTextField.getText());
+        }catch (NumberFormatException e){            
+            countRows = 0;
+        }
+        return countRows;
+    }
+    
+    /**Rows to display*/
+    public void setDisplayRows(Integer value) {
+        this.toDisplayValueTextField.setText(value.toString());
+    }  
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    protected javax.swing.JButton closeButton;
+    private javax.swing.JLabel displayedLabel;
+    protected javax.swing.JLabel displayedValueLabel;
+    protected javax.swing.JButton helpButton;
+    private javax.swing.JPanel jPanel1;
+    private javax.swing.JPanel jPanel2;
+    private javax.swing.JScrollPane jScrollPane1;
+    protected javax.swing.JButton nextButton;
+    protected javax.swing.JButton okButton;
+    protected javax.swing.JButton previousButton;
+    protected javax.swing.JTable tableHistoryList;
+    private javax.swing.JLabel toDisplayLabel;
+    protected javax.swing.JTextField toDisplayValueTextField;
+    private javax.swing.JLabel totalResultLabel;
+    protected javax.swing.JLabel totalResultValueLabel;
+    protected javax.swing.JButton undoToDateButton;
+    // End of variables declaration//GEN-END:variables
+    
+}

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-14 13:30:42 UTC (rev 145)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-15 09:44:04 UTC (rev 146)
@@ -85,6 +85,8 @@
 
 #History of the occurrences
 History= History - undo
+#Whole history
+wholeHistory = Whole history - undo
 #History - Details of record
 taxon = Taxon:
 author = Author:
@@ -96,17 +98,24 @@
 selectAll = Select all
 unselectAll = Unselect all
 undoSelected = Undo selected
+undoToDate = Undo to Date
 #History - information about result and displayed rows
 totalResult = Total results:
 displayed = Displayed rows:
 toDisplay = Rows to display:
 #History - Title of table columns
 historyColX = X
-historyColDate = Date
+historyColDate = Date/Time
+historyColOperation = Operation
 historyColUser = User
 historyColItem = Item
 historyColOldValue = Old value
 historyColNewValue = New value
+#History - value of tHistoryChange.cOperation
+operation1 = insert
+operation2 = edit
+operation3 = edit
+operation4 = delete
 #History - value of tHistoryColumn.cColumnName (use as value of table column Item)
 plantId = Taxon
 yearCollected = Year



From fraktalek at gmx.net  Sat Apr 15 15:21:35 2006
From: fraktalek at gmx.net (fraktalek)
Date: Sat, 15 Apr 2006 15:21:35 +0200
Subject: [Plantlore-dev] [Fwd: Re:plantlore]
Message-ID: <1145107295.3474.1.camel@kryton>


-------------- next part --------------
An embedded message was scrubbed...
From: =?iso-8859-2?Q?Michal=20Ba=E8=E1k?= <draudz at seznam.cz>
Subject: Re:plantlore
Date: Thu, 13 Apr 2006 20:42:27 +0200 (CEST)
Size: 1774
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060415/145208df/attachment.mht>

From lada at berlios.de  Tue Apr 18 00:11:29 2006
From: lada at berlios.de (lada at berlios.de)
Date: Tue, 18 Apr 2006 00:11:29 +0200
Subject: [Plantlore-dev] r147 - trunk/src/net/sf/plantlore/client/history
Message-ID: <200604172211.k3HMBTXX001859@sheep.berlios.de>

Author: lada
Date: 2006-04-18 00:11:28 +0200 (Tue, 18 Apr 2006)
New Revision: 147

Modified:
   trunk/src/net/sf/plantlore/client/history/History.java
   trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
   trunk/src/net/sf/plantlore/client/history/WholeHistory.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java
Log:
WholeHistory - add functions for UNDO. Update History -delete from history.

Modified: trunk/src/net/sf/plantlore/client/history/History.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/History.java	2006-04-15 09:44:04 UTC (rev 146)
+++ trunk/src/net/sf/plantlore/client/history/History.java	2006-04-17 22:11:28 UTC (rev 147)
@@ -74,48 +74,49 @@
     private boolean editHabitat;
     //zprava pro uzivatele
     private String messageUndo;
-   
+    //zaznamenani ITEM, jejichz zmena ovlibni vice polozek
+   private ArrayList<String> itemAffectMore = new ArrayList();
     
     //*********************Record of history ***************************************//    
     private Occurrence occurrence;
-	private HistoryRecord historyRecord;
-	private HistoryChange historyChange;
+    private HistoryRecord historyRecord;
+    private HistoryChange historyChange;
 	
     //	**************Informations about HistoryRecord*************//	
-	/** Name of the table where value was changed*/
-	private String tableName;  
-	/** Name of the column where value was changed*/
-	private String columnName;
-	/** Unique value identified occurrence */	
-	private Integer occurrenceId;
-	/**Unique value identified record in table where value was changed */
-	private int recordId;
-	/**Unique value identified record before changed */
-	private int oldRecordId;
-	/** Operation whitch was used*/   
-	private int operation;
-	/** Date and time when the reccord was changed*/
-	private java.util.Date when = new Date();	
-	/** Old value of attribute*/    
-	private String oldValue;
-	/** New value of attribute*/
-	private String newValue;
-   /** Name of user who did changed*/
-	private String nameUser;
+    /** Name of the table where value was changed*/
+    private String tableName;  
+    /** Name of the column where value was changed*/
+    private String columnName;
+    /** Unique value identified occurrence */	
+    private Integer occurrenceId;
+    /**Unique value identified record in table where value was changed */
+    private int recordId;
+    /**Unique value identified record before changed */
+    private int oldRecordId;
+    /** Operation whitch was used*/   
+    private int operation;
+    /** Date and time when the reccord was changed*/
+    private java.util.Date when = new Date();	
+    /** Old value of attribute*/    
+    private String oldValue;
+    /** New value of attribute*/
+    private String newValue;
+    /** Name of user who did changed*/
+    private String nameUser;
 	
-	//**************Informations about occurrences***************//
-	/** Name of plant for specified occurrenc*/
-	private String namePlant;
-	/** Name of author for specified occurrenc*/
-	private String nameAuthor;
-	/** Informaciton about location for specified occurrenc*/
-	private String location;
-	
-	 //********************************************************//
-	 /** Mapping of entities */
-	private Hashtable<String, Integer> publicationHash;
-	private Hashtable<String, Integer> habitatHash;
-	private Hashtable<String, Integer> occurrenceHash;  
+    //**************Informations about occurrences***************//
+    /** Name of plant for specified occurrenc*/
+    private String namePlant;
+    /** Name of author for specified occurrenc*/
+    private String nameAuthor;
+    /** Informaciton about location for specified occurrenc*/
+    private String location;
+
+     //********************************************************//
+     /** Mapping of entities */
+    private Hashtable<String, Integer> publicationHash;
+    private Hashtable<String, Integer> habitatHash;
+    private Hashtable<String, Integer> occurrenceHash;  
     
     /**  
      *  Creates a new instance of History 
@@ -197,7 +198,7 @@
 	   //Searching for information about data editing concerned with specified occurrence
 	   searchEditHistory();
 	   //Process results of a search "edit" query 
-	   processEditResult(1,displayRows);
+	   processResult(1,displayRows);
     }	
 
     /**
@@ -308,7 +309,7 @@
      * @param fromTable number of the first row to show in table. Number of the first row to retraieve is 1.
      * @param count number of rows to retrieve 
      */
-    public void processEditResult(int fromTable, int count) {
+    public void processResult(int fromTable, int count) {
     	
     	if (this.resultId != 0) {
     		int currentRow = getResultRows();
@@ -330,8 +331,8 @@
                  	try {
                  		objectHistory = database.more(this.resultId, 1, to);  
                  	} catch(RemoteException e) {
-                     	System.err.println("RemoteException- processEditResult, more");
-                     	logger.debug("RemoteException- processEditResult, more");
+                     	System.err.println("RemoteException- processResult, more");
+                     	logger.debug("RemoteException- processResult, more");
                      	return;
                      }                   
                     int countResult = objectHistory.length;  
@@ -467,24 +468,24 @@
     		historyChange = historyRecord.getHistoryChange();
     		tableName = historyRecord.getHistoryColumn().getTableName();
     		columnName = historyRecord.getHistoryColumn().getColumnName();    		    			
-			oldRecordId = historyChange.getOldRecordId();
-			recordId = historyChange.getRecordId();
-			occurrenceId = historyChange.getOccurrence().getId();		   
-			operation = historyChange.getOperation();
-			oldValue = historyRecord.getOldValue();
+            oldRecordId = historyChange.getOldRecordId();
+            recordId = historyChange.getRecordId();
+            occurrenceId = historyChange.getOccurrence().getId();		   
+            operation = historyChange.getOperation();
+            oldValue = historyRecord.getOldValue();
 						
     		if (tableName.equals("Occurrence")){  
     			if (occurrenceId != recordId){
     				logger.error("Inccorect information in history tables --> occurrenceId != recordId ... Incorrect identifier of Occurrence.");
     			}
     			
-    			//Get a specified number of columnName from occurrence mapping.
-    			int columnConstant;
-    			if (occurrenceHash.containsKey(columnName)) {
-    				 columnConstant = (Integer)occurrenceHash.get(columnName); 
-    	        } else {
-    	             columnConstant = 0;
-    	        }        	    			
+                        //Get a specified number of columnName from occurrence mapping.
+                        int columnConstant;
+                        if (occurrenceHash.containsKey(columnName)) {
+                                 columnConstant = (Integer)occurrenceHash.get(columnName); 
+                        } else {
+                             columnConstant = 0;
+                        }        	    			
     			  
     			//init Calendar    		
     			Calendar isoDateTime = new GregorianCalendar();
@@ -496,15 +497,15 @@
     			switch (columnConstant) {
 	                case 1: //Taxon  
 	                	if (oldRecordId > 0 ) {
-		                	//Select record Plant where id = oldRocordId 
-		                	Object[] object = searchObject("Plant",oldRecordId);
-		                	Plant plant = (Plant)object[0];
-		                	//Set old value to attribute plantID
-		                	occurrence.setPlant(plant);
-		                	logger.debug("Set selected value for update of attribute Taxon.");	
-		    			}else {
-		    				logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
-		    			}
+                                    //Select record Plant where id = oldRocordId 
+                                    Object[] object = searchObject("Plant",oldRecordId);
+                                    Plant plant = (Plant)object[0];
+                                    //Set old value to attribute plantID
+                                    occurrence.setPlant(plant);
+                                    logger.debug("Set selected value for update of attribute Taxon.");	
+                                    }else {
+                                            logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
+                                    }
 	                    break;
 	                case 2: //Year	
                 	    //Set old value to attribute Year          		
@@ -582,16 +583,16 @@
     		} else if (tableName.equals("Habitat") || tableName.equals("Village")
     				   || tableName.equals("Territory") || tableName.equals("Phytochorion")){
     			
-    			// Get a specified number of columnName from habitat mapping.
-    			int columnConstant;
-    			if (habitatHash.containsKey(columnName)) {
-    				 columnConstant = (Integer)habitatHash.get(columnName); 
+                // Get a specified number of columnName from habitat mapping.
+                int columnConstant;
+                if (habitatHash.containsKey(columnName)) {
+                         columnConstant = (Integer)habitatHash.get(columnName); 
     	        } else {
     	             columnConstant = 0;
     	        }        	    			
     			  
     			//informuje o tom, ze byla editovana tabulka tHabitat 
-    			editHabitat = true;
+    			editHabitat = true;                       
     			
     			logger.debug("ColumnConstant: "+ columnConstant);
     			logger.debug("ColumnName: "+ columnName);
@@ -611,42 +612,42 @@
 	                		// existuji dva edity EDIT (ovlivni jeden nalez) a EDITGROUP (ovlivni vice nalezu)
 	                		// potrebujeme zjistit, zda pro dany nalez je vazeba mezi tHabitats a tOccurrences vzdy 1:N
 	                		// nebo zda editaci nalezu vznikla vazvba 1:1
-	                		relationship = true;
+	                		relationship = true;                                                                            
 	                	} 	                	
  	                    break;
  	                case 2: //Place description 	                	 	                			                		 
                 		occurrence.getHabitat().setDescription(oldValue);		                	
 	                	logger.debug("Set selected value for update of attribute Description.");
 	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;
+	                		relationship = true;                                         
 	                	} 	              	
  	                	break;
  	                case 3:  //Country 	                	 	                			                		 
                 		occurrence.getHabitat().setCountry(oldValue);		                	
 	                	logger.debug("Set selected value for update of attribute Country.");
 	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;
+	                		relationship = true;                                          
 	                	} 	
  	                    break;
  	                case 4: //Altitude 	                	                			                		 
                 		occurrence.getHabitat().setAltitude(Double.parseDouble(oldValue));		                	
 	                	logger.debug("Set selected value for update of attribute Altitude.");
 	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;
+	                		relationship = true;                                          
 	                	} 	
  	                	break;
  	                case 5:  //Latitude   	                		                			                		  
                 		occurrence.getHabitat().setLatitude(Double.parseDouble(oldValue));		                	
 	                	logger.debug("Set selected value for update of attribute Latitude.");
 	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;
+	                		relationship = true;                                        
 	                	} 	
  	                    break;
  	                case 6: //Longitude 	                		                			                		
                 		occurrence.getHabitat().setLongitude(Double.parseDouble(oldValue));		                	
 	                	logger.debug("Set selected value for update of attribute Longitude.");
 	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;
+	                		relationship = true;                                         
 	                	} 	
  	                	break;
  	                case 7: //Nearest bigger seat   	                	 	                			                		 
@@ -660,7 +661,7 @@
             				logger.error("UNDO - Incorrect oldRecordId for Village.");
             			}
 	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;
+	                		relationship = true;                                        
 	                	} 	
  	                    break;
  	                case 8: //Phytochorion or phytochorion code 	                	             			                		 
@@ -674,7 +675,7 @@
             				logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
             			}
 	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;
+	                		relationship = true;                                        
 	                	} 	
  	                    break; 	               
 	                case 9:  //Territory   	                	                			                		  
@@ -688,21 +689,21 @@
             				logger.error("UNDO - Incorrect oldRecordId for Territory.");
             			}	
 	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;
+	                		relationship = true;                                      
 	                	} 	        	
 	                    break;
 	                case 10: //Note habitat	                		                			                		  
                 		occurrence.getHabitat().setNote(oldValue);		                	
 	                	logger.debug("Set selected value for update of attribute Note.");
 	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;
+	                		relationship = true;                                        
 	                	} 	
 	                	break;
  	                default:            
  	                    logger.error("No column defined for name "+ columnName);	                   
      			}  	    		
     		} else {
-    			logger.equals("No table defined");
+    			logger.error("No table defined");
     		}    			    		
     	}
  
@@ -717,7 +718,7 @@
     }
     
     public void generateMessageUndo() {    	
-    	messageUndo = "Budou provedeny n?sleduj?c? zm?ny:\n";
+    	messageUndo = "Budou provedeny n?sleduj?c? zm?ny:\n";      
     	int count = markItem.size();
     	for (int i=0; i<count; i++) {
     		Object[] itemList = (Object[])(markItem.get(i));
@@ -757,7 +758,9 @@
     		if (! markListId.contains(i)) {
     			continue;
     		}    		    		
-    		historyRecord = (HistoryRecord)editHistoryDataList.get(i);     	  	
+    		historyRecord = (HistoryRecord)editHistoryDataList.get(i); 
+    		historyChange = historyRecord.getHistoryChange();    		
+        	
 	    	try {
 				database.executeDelete(historyRecord);
 				logger.debug("Deleting historyRecord successfully. Number of result: "+i);
@@ -766,9 +769,10 @@
 			} catch (DBLayerException e) {
 				logger.error("Deleting historyRecord failed. "+e.toString());
 			}
-			int countResult = searchHistoryChangeId(i);			
-			if (countResult == 1) {
+			int countResult = searchHistoryChangeId(historyChange.getId());			
+			if (countResult == 0) {
 				//samzat zaznam z tabulky tHistoryChange - muzeme protoze neexistuji dalsi FK z tHistory.cChngeId
+				//pokud po smazani zaznamu z tHistory jsme nasli alespon jeden zaznam, ktery ma stejny FK na zaznam z tChangeHistory
 				try {
 					database.executeDelete(historyChange);
 					logger.debug("Deleting historyChange successfully.");
@@ -792,15 +796,17 @@
      * @return
      */
     public int searchHistoryChangeId(int id){
-    	HistoryChange historyChange = ((HistoryRecord)editHistoryDataList.get(id)).getHistoryChange();
+    	
     	SelectQuery query = null;
         try {
         	    query = database.createQuery(HistoryRecord.class);
         } catch(RemoteException e) {
         	    System.err.println("RemoteException- searchHistoryChangeId(), createQuery");       	  
-        }        
+        }     
+        // Create aliases for table tHistoryChange.      
+        query.createAlias("historyChange", "hc");  
         // Add restriction to cChangeId column 
-        query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryRecord.HISTORYCHANGE, null, historyChange , null);
+        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.id", null, id , null);
         
         int resultIdChange = 0;
         try {                   

Modified: trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-15 09:44:04 UTC (rev 146)
+++ trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-17 22:11:28 UTC (rev 147)
@@ -94,7 +94,7 @@
            logger.debug("display rows: "+ view.getTable().getRowCount());      
            if (model.getCurrentFirstRow() > 1) {
                int firstRow = Math.max(model.getCurrentFirstRow()- model.getDisplayRows(), 1);
-               model.processEditResult(firstRow, model.getDisplayRows()); 
+               model.processResult(firstRow, model.getDisplayRows()); 
                if (model.getCurrentFirstRow() > 1){
                }
                view.getTable().setModel(new HistoryTableModel(model));
@@ -119,7 +119,7 @@
            logger.debug("display rows: "+ model.getDisplayRows());
            logger.debug("num rows in table (view) "+ view.getTable().getRowCount());              
            if (model.getCurrentFirstRow()+ view.getTable().getRowCount()<=model.getResultRows()) {
-               model.processEditResult(model.getCurrentFirstRow()+ model.getDisplayRows(), view.getTable().getRowCount());
+               model.processResult(model.getCurrentFirstRow()+ model.getDisplayRows(), view.getTable().getRowCount());
                view.getTable().setModel(new HistoryTableModel(model));             
                int from = model.getCurrentFirstRow();
                int to = from + view.getTable().getRowCount() - 1;
@@ -140,7 +140,7 @@
        public void actionPerformed(ActionEvent actionEvent)
        {    	   
     	   model.setSelectAll(true);
-    	   model.processEditResult(1,model.getResultRows());    	   
+    	   model.processResult(1,model.getResultRows());    	   
     	   view.getTable().setModel(new HistoryTableModel(model));  
        }
    }
@@ -174,7 +174,7 @@
         	   model.commitUpdate();
         	   model.deleteHistoryRecords();
         	   model.searchEditHistory();
-        	   model.processEditResult(1,model.getDisplayRows());
+        	   model.processResult(1,model.getDisplayRows());
         	   view.getTable().setModel(new HistoryTableModel(model));
         	   int resultRows = model.getResultRows();
         	   if (resultRows == 0) {
@@ -184,7 +184,7 @@
                    int to = from + view.getTable().getRowCount() - 1;               
                    view.setCurrentRowsInfo(from + "-" + to);    
         	   }               
-               view.setCountResutl(resultRows);
+                   view.setCountResutl(resultRows);
            } else {
         	   //Button Cancle was press
         	   //neco jako rollback - bude se volat nebo to bude zarizeno tim, ze se nezavola executeUpdate??
@@ -215,7 +215,7 @@
            logger.debug("New display rows: "+view.getDisplayRows());
            // If neccessary reload search results
            if ((oldValue != view.getDisplayRows()) && (model.getDisplayRows() <= model.getResultRows())) {
-               model.processEditResult(model.getCurrentFirstRow(), view.getDisplayRows());
+               model.processResult(model.getCurrentFirstRow(), view.getDisplayRows());
                view.getTable().setModel(new HistoryTableModel(model));
                int from = model.getCurrentFirstRow();
                int to = from + view.getTable().getRowCount() - 1;

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistory.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistory.java	2006-04-15 09:44:04 UTC (rev 146)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistory.java	2006-04-17 22:11:28 UTC (rev 147)
@@ -10,10 +10,24 @@
 package net.sf.plantlore.client.history;
 
 import java.rmi.RemoteException;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.Hashtable;
 import net.sf.plantlore.common.PlantloreConstants;
+import net.sf.plantlore.common.record.Author;
+import net.sf.plantlore.common.record.Habitat;
 import net.sf.plantlore.common.record.HistoryChange;
 import net.sf.plantlore.common.record.HistoryRecord;
+import net.sf.plantlore.common.record.Occurrence;
+import net.sf.plantlore.common.record.Phytochorion;
+import net.sf.plantlore.common.record.Plant;
+import net.sf.plantlore.common.record.Publication;
+import net.sf.plantlore.common.record.Territory;
+import net.sf.plantlore.common.record.Village;
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.middleware.SelectQuery;
 import net.sf.plantlore.server.DBLayerException;
@@ -38,17 +52,61 @@
     /** Index of the first record shown in the table */
     private int currentFirstRow;
     /** Information about current display rows*/
-    private String displayRow;
+    private String displayRow;    
     
     //*******Informations about searching Result from database*****//
     /** Result of the search query */
     private int resultId = 0;
     /** List of data (results of a search query) displayed in the table */
-    private ArrayList<HistoryRecord> editHistoryDataList = new ArrayList(); 
-    // informace pro uzivatele o undo
+    private ArrayList<HistoryRecord> historyDataList = new ArrayList();     
+    // seznam editovanych objektu (potrebny pro hromadne potvrzeni update)
+    private ArrayList<Object> editObjectList = new ArrayList();
+    // informace pro uzivatele o record undo
     private String messageUndo;
     
+    //*********************Record of history, ... ***************************************//    
+    private Occurrence occurrence;
+    private HistoryRecord historyRecord;
+    private HistoryChange historyChange;
+    private Publication publication;
+    private Author author;
+    private Village village;
+    private Territory territory;
+    private Phytochorion phytochorion;
     
+     //	**************Informations about HistoryRecord*************//	
+    /** Name of the table where value was changed*/
+    private String tableName;  
+    /** Name of the column where value was changed*/
+    private String columnName;
+    /** Unique value identified occurrence */	
+    private Integer occurrenceId;
+    /**Unique value identified record in table where value was changed */
+    private int recordId;
+    /**Unique value identified record before changed */
+    private int oldRecordId;
+    /** Operation whitch was used*/   
+    private int operation;
+    /** Date and time when the reccord was changed*/
+    private java.util.Date when = new Date();	
+    /** Old value of attribute*/    
+    private String oldValue;
+    /** New value of attribute*/
+    private String newValue;
+   /** Name of user who did changed*/
+    private String nameUser;
+    
+    //********************************************************//
+    /** Mapping of entities */
+    private Hashtable<String, Integer> publicationHash;
+    private Hashtable<String, Integer> habitatHash;
+    private Hashtable<String, Integer> occurrenceHash;  
+    private Hashtable<String, Integer> villageHash;
+    private Hashtable<String, Integer> territoryHash;
+    private Hashtable<String, Integer> phytochorionHash;
+    private Hashtable<String, Integer> authorHash;
+    
+    
     /** Creates a new instance of WholeHistory */
     public WholeHistory(DBLayer database) {
           
@@ -110,7 +168,7 @@
             // Find out how many rows we can retrieve - it cannot be more than number of rows in the result
             int to = Math.min(currentRow, fromTable+count-1);           
             if (to <= 0) {
-            	editHistoryDataList = new ArrayList<HistoryRecord>(); 
+            	historyDataList = new ArrayList<HistoryRecord>(); 
             	setDisplayRows(0);
             	setCurrentDisplayRows("0-0");
             } else {
@@ -129,11 +187,11 @@
                     int countResult = objectHistory.length;  
                     logger.debug("Results retrieved. Count: "+ countResult);
                     // Create storage for the results
-                    this.editHistoryDataList = new ArrayList<HistoryRecord>();
+                    this.historyDataList = new ArrayList<HistoryRecord>();
                     // Cast the results to the HistoryRecord objects
                     for (int i=0; i<countResult; i++ ) {                    							
 						Object[] objHis = (Object[])objectHistory[i];
-                        this.editHistoryDataList.add((HistoryRecord)objHis[0]);
+                        this.historyDataList.add((HistoryRecord)objHis[0]);
                     }                     
                 } catch (DBLayerException e) {                  
                     logger.error("Processing search results failed: "+e.toString());            
@@ -146,7 +204,845 @@
         }         
     }
     
+    /**
+     *
+     */
+    public void undoToDate(int toResult) {
+        
+        //Inicalization of hashTable
+    	initOccurrenceHash();
+    	initHabitatHash();   
+        initPublicationHash();
+        initAuthorHash();       
+        	
+    	//number of result
+    	//int countResult = this.historyDataList.size();
+    	// Pomocne hodnoty pro zjisteni zda zmena ovlivni vice nalezu
+    	//relationship = false;
+    	//editHabitat = false;
+    	
+    	//take from younger record to older record, undo tu selected row
+    	for( int i=0; i < toResult; i++) {
+    		
+    		//init history data 
+    		historyRecord = (HistoryRecord)historyDataList.get(i);    		
+    		historyChange = historyRecord.getHistoryChange();
+    		tableName = historyRecord.getHistoryColumn().getTableName();
+                recordId = historyChange.getRecordId();
+                operation = historyChange.getOperation();
+    		                                                
+               /** 
+                * Pri insertu a editu nedohledavam column --> prvne rozdelit podle operace a pro edit dale rozdelit podle column
+                */
+                if (operation == historyChange.HISTORYCHANGE_INSERT) {
+                    undoInsertDelete(0);
+                } else if (operation == historyChange.HISTORYCHANGE_EDIT || operation == historyChange.HISTORYCHANGE_EDITGROUP) {
+                    undoEdit();
+                } else if (operation == historyChange.HISTORYCHANGE_DELETE) {
+                    undoInsertDelete(1);
+                } else {
+                    logger.error("Incorrect opreration code: "+ operation);
+                }                
+        }
+    }
+    
+    /**
+     * ??? Habitat - nemuselo by se zaznamenavat cDelete
+     * ??? Phytochorion, Village, Territory - asi bude potreba cDelete, abychom nezobrazovali nektere polozky, co se historii odstrani
+     * delete == 1 ... smazat
+     * delete == 0 ... obnovit
+     */
+    public void undoInsertDelete(int delete) {
+        if (tableName.equals("Occurrence")){
+             Object[] object = searchObject("Occurrence",recordId);             
+             Occurrence occurrence = (Occurrence)object[delete];
+             occurrence.setDeleted(1);
+      //  } else if (tableName.equals("Habitat")) {
+      //       Object[] object = searchObject("v",recordId);  
+      //       Habitat habitat = (Habitat)object[delete];
+      //       habitat.setDeleted(1);
+        } else if (tableName.equals("Publication")) {
+             Object[] object = searchObject("Publication",recordId);  
+             Publication publication = (Publication)object[delete];
+             publication.setDeleted(1);
+        } else if (tableName.equals("Author")) {
+             Object[] object = searchObject("Author",recordId);   
+             Author author = (Author)object[delete];
+             author.setDeleted(1);
+        } else if (tableName.equals("Phytochorion")) {
+             Object[] object = searchObject("Phytochorion",recordId);   
+             Phytochorion phytochorion = (Phytochorion)object[delete];             
+             //phytochorion.setDelete(1);
+        } else if (tableName.equals("Territoriy")) {
+             Object[] object = searchObject("Territory",recordId); 
+             Territory territory = (Territory)object[delete];             
+             //territory.setDelete(1);
+        } else if (tableName.equals("Village")) {
+             Object[] object = searchObject("Village",recordId); 
+             Village village = (Village)object[delete];             
+             //village.setDelete(1);
+        } else {
+            logger.error("No table defined");
+        }
+    }
+    
+    /**
+     *
+     */
+    public void undoEdit() {
+        
+        //init history data about edit of record
+        columnName = historyRecord.getHistoryColumn().getColumnName();    		    			
+        oldRecordId = historyChange.getOldRecordId();                
+        occurrenceId = historyChange.getOccurrence().getId();		           
+        oldValue = historyRecord.getOldValue();
+        
+        if (tableName.equals("Occurrence")){
+                undoOccurrence();
+        } else if (tableName.equals("Habitat")) {
+                undoHabitat();
+        } else if (tableName.equals("Publication")) {
+                undoPublication();
+        } else if (tableName.equals("Author")) {
+                undoAuthor();
+        } else if (tableName.equals("Phytochorion")) {
+                undoPhytochorion();
+        } else if (tableName.equals("Territory")) {
+                undoTerritory();
+        } else if (tableName.equals("Village")) {
+                undoVillage();
+        } else {
+            logger.error("No table defined");
+        }
+    }
+
+    /**
+     *
+     */
+    public void undoOccurrence() {
+        
+        //zaznam v ramci, ktereho doslo k editaci tabulky tOccurrences
+        occurrence = historyChange.getOccurrence();
+        
+        boolean objectList = editObjectList.contains(occurrence);
+        if (!objectList) {
+        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
+            editObjectList.add(occurrence);
+        }
+        logger.debug("editObjectList: "+objectList);
+        logger.debug("OccurrenceID: "+occurrence.getId());
+        logger.debug("columnName: "+columnName);
+                
+        if (occurrenceId != recordId){
+            logger.error("Inccorect information in history tables --> occurrenceId != recordId ... Incorrect identifier of Occurrence.");
+        }
+
+        //Get a specified number of columnName from occurrence mapping.
+        int columnConstant;
+        if (occurrenceHash.containsKey(columnName)) {
+                 columnConstant = (Integer)occurrenceHash.get(columnName); 
+        } else {
+             columnConstant = 0;
+        }        	    			
+
+        //init Calendar    		
+        Calendar isoDateTime = new GregorianCalendar();
+
+        switch (columnConstant) {
+        case 1: //Taxon  
+            if (oldRecordId > 0 ) {
+                //Select record Plant where id = oldRocordId 
+                Object[] object = searchObject("Plant",oldRecordId);
+                Plant plant = (Plant)object[0];
+                //Set old value to attribute plantID
+                occurrence.setPlant(plant);
+                logger.debug("Set selected value for update of attribute Taxon.");	
+            } else {
+                 logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
+            } 
+            break;
+        case 2: //Year	
+            //Set old value to attribute Year          		
+                occurrence.setYearCollected(Integer.parseInt(oldValue));
+                logger.debug("Set selected value for update of attribute Year.");
+                //Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	                		
+                isoDateTime.setTime(occurrence.getTimeCollected());
+                isoDateTime.set(Integer.parseInt(oldValue),occurrence.getMonthCollected(),occurrence.getDayCollected());
+                occurrence.setIsoDateTimeBegin(isoDateTime.getTime());	                	              	            	
+                break;
+        case 3: //Month 
+                // Set old value to attribute Month 
+                occurrence.setMonthCollected(Integer.parseInt(oldValue));
+                logger.debug("Set selected value for update of attribute Month.");
+                // Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
+                isoDateTime.setTime(occurrence.getTimeCollected());
+                isoDateTime.set(occurrence.getYearCollected(), Integer.parseInt(oldValue), occurrence.getDayCollected());
+                occurrence.setIsoDateTimeBegin(isoDateTime.getTime());              		
+            break;
+        case 4: //Day	                	
+                // Set old value to attribute Day            		
+                occurrence.setDayCollected(Integer.parseInt(oldValue));
+                logger.debug("Set selected value for update of attribute Day.");
+                // Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
+                isoDateTime.setTime(occurrence.getTimeCollected());
+                isoDateTime.set(occurrence.getYearCollected(), occurrence.getMonthCollected(), Integer.parseInt(oldValue));
+                occurrence.setIsoDateTimeBegin(isoDateTime.getTime());
+                break;
+        case 5: //Time 	                		                	
+                // Set old value to attribute Time   
+                Date time = new Date();
+                SimpleDateFormat df = new SimpleDateFormat( "HH:mm:ss.S" );
+                try {
+                        time = df.parse( oldValue );
+                } catch (ParseException e) {
+                        logger.error("Parse time failed. "+ e);
+                }
+                occurrence.setTimeCollected(time);
+                logger.debug("Set selected value for update of attribute Time.");
+                // Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
+                isoDateTime.setTime(time);
+                isoDateTime.set(occurrence.getYearCollected(), occurrence.getMonthCollected(), occurrence.getDayCollected());
+                occurrence.setIsoDateTimeBegin(isoDateTime.getTime());
+            break;
+        case 6: //Source	                	
+                // Set old value to attribute Source 
+                occurrence.setDataSource(oldValue);
+                logger.debug("Set selected value for update of attribute DataSource.");		                	            	
+                break;
+        case 7: //Herbarium
+                // Set old value to attribute Herbarium
+                occurrence.setHerbarium(oldValue);
+                logger.debug("Set selected value for update of attribute Herbarium.");	                		          
+            break;
+        case 8: //Note occurrence	
+                // Set old value to attribute Note occurence	                	
+                occurrence.setNote(oldValue);
+                logger.debug("Set selected value for update of attribute NoteOccurrence.");	                		        	
+                break;
+        case 9: //Publication  
+                //Select record Publication where id = oldRocordId 
+                if (oldRecordId > 0){
+                    Object[] objectPubl = searchObject("Publication",oldRecordId);
+                    Publication publication = (Publication)objectPubl[0];
+                    //Set old value to attribute publicationID
+                    occurrence.setPublication(publication);
+                    logger.debug("Set selected value for update of attribute Publication.");
+                }else {
+                    logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
+                }
+            break;
+        default:            
+            logger.error("No column defined for name "+ columnName);	                   
+        }         
+    }
+        
+    /**
+     *
+     */
+    public void undoHabitat() {
+        
+        //zaznam v ramci, ktereho doslo k editaci tabulky tHabitats
+        occurrence = historyChange.getOccurrence();
+      
+        //K editaci tabulky tHabitats dojde jen v pripade editace nejakeho konkretniho nalezu, proto nam staci nacist
+        //data z tHabitats pres tOccurrence.cHabitatId a nasledne staci zavolat update jen na occurrence
+        boolean objectList = editObjectList.contains(occurrence); 
+        if (!objectList) {
+        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan (editace habitat vzdy v ramci occurrence)
+            editObjectList.add(occurrence);
+        }
+        logger.debug("editObjectList: "+objectList);
+        logger.debug("Habitat - OccurrenceID: "+occurrence.getId());
+        logger.debug("columnName: "+columnName);
+        
+        // Get a specified number of columnName from habitat mapping.
+        int columnConstant;
+        if (habitatHash.containsKey(columnName)) {
+                 columnConstant = (Integer)habitatHash.get(columnName); 
+        } else {
+             columnConstant = 0;
+        }        	    			
+
+        //informuje o tom, ze byla editovana tabulka tHabitat 
+//        editHabitat = true;
+
+        // Save new value for the column        		
+        switch (columnConstant) {
+        case 1:  //Quadrant     	                	
+                /* pokud doslo ke zmene vazeb mezi tHabitats a tOccurrences z 1:N na 1:1, tak v tOccurrences.cHabitatId
+                 * bude jiz vzdy ulozeno id nove insertovany zaznamu do tHabitats a nikdy uz nedojde k jeho zmene, tzn.
+                 * vazba mezi tabulkami pro dany nalez jiz bude na vzdy 1:1 
+                 */ 	                		  
+                occurrence.getHabitat().setQuadrant(oldValue);		                	
+                logger.debug("Set selected value for update of attribute Quadrant.");
+                if (operation == historyChange.HISTORYCHANGE_EDIT) {
+                // existuji dva edity EDIT (ovlivni jeden nalez) a EDITGROUP (ovlivni vice nalezu)
+                // potrebujeme zjistit, zda pro dany nalez je vazeba mezi tHabitats a tOccurrences vzdy 1:N
+                // nebo zda editaci nalezu vznikla vazvba 1:1
+//                relationship = true;
+                } 	                	
+            break;
+        case 2: //Place description 	                	 	                			                		 
+                occurrence.getHabitat().setDescription(oldValue);		                	
+                logger.debug("Set selected value for update of attribute Description.");
+                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+//                        relationship = true;
+                } 	              	
+                break;
+        case 3:  //Country 	                	 	                			                		 
+                occurrence.getHabitat().setCountry(oldValue);		                	
+                logger.debug("Set selected value for update of attribute Country.");
+                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+//                        relationship = true;
+                } 	
+            break;
+        case 4: //Altitude 	                	                			                		 
+                occurrence.getHabitat().setAltitude(Double.parseDouble(oldValue));		                	
+                logger.debug("Set selected value for update of attribute Altitude.");
+                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+//                        relationship = true;
+                } 	
+                break;
+        case 5:  //Latitude   	                		                			                		  
+                occurrence.getHabitat().setLatitude(Double.parseDouble(oldValue));		                	
+                logger.debug("Set selected value for update of attribute Latitude.");
+                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+//                        relationship = true;
+                } 	
+            break;
+        case 6: //Longitude 	                		                			                		
+                occurrence.getHabitat().setLongitude(Double.parseDouble(oldValue));		                	
+                logger.debug("Set selected value for update of attribute Longitude.");
+                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+//                        relationship = true;
+                } 	
+                break;
+        case 7: //Nearest bigger seat   	                	 	                			                		 
+                //Nacteni Village pro nasledny update tHabitat.cNearestVillageId
+                if (oldRecordId != 0){
+                        Object[] objectVill = searchObject("Village",oldRecordId);
+                        Village village = (Village)objectVill[0];
+                occurrence.getHabitat().setNearestVillage(village);
+                logger.debug("Set selected value for update of attribute NearesVillage.");
+                } else {
+                        logger.error("UNDO - Incorrect oldRecordId for Village.");
+                }
+                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+//                        relationship = true;
+                } 	
+            break;
+        case 8: //Phytochorion or phytochorion code 	                	             			                		 
+                // Nacteni Phytochorion pro nasledny update tHabitat.cPhytochorionId
+                if (oldRecordId != 0){
+                        Object[] objectPhyt = searchObject("Phytochorion",oldRecordId);
+                        Phytochorion phytochorion = (Phytochorion)objectPhyt[0];
+                        occurrence.getHabitat().setPhytochorion(phytochorion);
+                        logger.debug("Set selected value for update of attribute Phytochorion.");
+                }else {
+                        logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
+                }
+                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+//                        relationship = true;
+                } 	
+            break; 	               
+        case 9:  //Territory   	                	                			                		  
+                // Nacteni Territory pro nasledny update tHabitat.cTerritory
+                if (oldRecordId != 0){
+                        Object[] objectTerr = searchObject("Territory",oldRecordId);
+                        Territory territory = (Territory)objectTerr[0];
+                        occurrence.getHabitat().setTerritory(territory);
+                        logger.debug("Set selected value for update of attribute Territory.");
+                }else {
+                        logger.error("UNDO - Incorrect oldRecordId for Territory.");
+                }	
+                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+//                        relationship = true;
+                } 	        	
+            break;
+        case 10: //Note habitat	                		                			                		  
+                occurrence.getHabitat().setNote(oldValue);		                	
+                logger.debug("Set selected value for update of attribute Note.");
+                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+//                        relationship = true;
+                } 	
+                break;
+        default:            
+            logger.error("Habitat - No column defined for name "+ columnName);	                   
+        }  	          
+    }
+    
+    /**
+     *
+     */
+    public void undoPublication() {
+                
+        Object[] object = searchObject("Publication", recordId);
+        publication = (Publication)object[0];
+        
+        //test, zda jiz dany zaznam byl editovan
+        boolean objectList = editObjectList.contains(publication); 
+        if (!objectList) {
+        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
+            editObjectList.add(publication);
+        }
+        logger.debug("editObjectList.contains: "+objectList);
+        logger.debug("Publication: "+publication.getId());
+        logger.debug("columnName: "+columnName);
+        
+       // Get a specified number of columnName from habitat mapping.
+        int columnConstant;
+        if (publicationHash.containsKey(columnName)) {
+                 columnConstant = (Integer)habitatHash.get(columnName); 
+        } else {
+             columnConstant = 0;
+        }        	    			
+      
+        // Save new value for the column        		
+        switch (columnConstant) {
+        case 1:  //CollectionName     	                	
+                publication.setCollectionName(oldValue);	 
+                publication.setReferenceCitation(publication.getCollectionName()+", "+publication.getCollectionYearPublication()+ ", "+publication.getJournalName()+", "+publication.getJournalAuthorName());
+                logger.debug("Publication - Set selected value for update of attribute collectionName.");                 	
+            break;
+        case 2: //collectionYearPublication	                	 	                			                		 
+                publication.setCollectionYearPublication(Integer.parseInt(oldValue));	          
+                publication.setReferenceCitation(publication.getCollectionName()+", "+publication.getCollectionYearPublication()+ ", "+publication.getJournalName()+", "+publication.getJournalAuthorName());
+                logger.debug("Publication - Set selected value for update of attribute collectionYearPublication.");                 	             	
+                break;
+         case 3: //journalName	                	 	                			                		 
+                publication.setJournalName(oldValue);	       
+                publication.setReferenceCitation(publication.getCollectionName()+", "+publication.getCollectionYearPublication()+ ", "+publication.getJournalName()+", "+publication.getJournalAuthorName());
+                logger.debug("Publication - Set selected value for update of attribute journalName.");                 	             	
+                break;
+        case 4: //journalAuthorName	                	 	                			                		 
+                publication.setJournalAuthorName(oldValue);	 
+                publication.setReferenceCitation(publication.getCollectionName()+", "+publication.getCollectionYearPublication()+ ", "+publication.getJournalName()+", "+publication.getJournalAuthorName());
+                logger.debug("Publication - Set selected value for update of attribute journalAuthorName.");                 	             	
+                break;
+        case 5: //referenceDetail 	                	 	                			                		 
+                publication.setReferenceDetail(oldValue);	                	
+                logger.debug("Publication - Set selected value for update of attribute referenceDeatail.");                 	             	
+                break;
+        case 6: //URL 	                	 	                			                		 
+                publication.setUrl(oldValue);	                	
+                logger.debug("Publication - Set selected value for update of attribute url.");                 	             	
+                break;
+        default:            
+            logger.error("Publication - No column defined for name "+ columnName);	                   
+        } 
+    }
+    
+    /**
+     *
+     */
+    public void undoAuthor() {
+        
+       Object[] object = searchObject("Author", recordId);
+       author = (Author)object[0];
        
+       //test, zda jiz dany zaznam byl editovan
+       boolean objectList = editObjectList.contains(author); 
+       if (!objectList) {
+       	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
+           editObjectList.add(author);
+       }
+       logger.debug("editObjectList.contains: "+objectList);
+       logger.debug("author: "+author.getId());
+       logger.debug("columnName: "+columnName);
+        
+       // Get a specified number of columnName from habitat mapping.
+        int columnConstant;
+        if (authorHash.containsKey(columnName)) {
+                 columnConstant = (Integer)authorHash.get(columnName); 
+        } else {
+             columnConstant = 0;
+        }        	    			
+      
+        // Save new value for the column        		
+        switch (columnConstant) {
+        case 1:  //wholeName     	                	
+                author.setWholeName(oldValue);	                 
+                logger.debug("Author - Set selected value for update of attribute WholeName.");                 	
+            break;
+        case 2: //address	                	 	                			                		 
+                author.setAddress(oldValue);
+                logger.debug("Author - Set selected value for update of attribute Address.");                 	             	
+                break;
+         case 3: //mail	                	 	                			                		 
+                author.setEmail(oldValue);	                      
+                logger.debug("Author - Set selected value for update of attribute Email.");                 	             	
+                break;
+        case 4: //phoneNumber	                	 	                			                		 
+                author.setPhoneNumber(oldValue);	                
+                logger.debug("Author - Set selected value for update of attribute PhoneNumber.");                 	             	
+                break;
+        case 5: //organization 	                	 	                			                		 
+                author.setOrganization(oldValue);                	
+                logger.debug("Author - Set selected value for update of attribute organization.");                 	             	
+                break;
+        case 6: //URL 	                	 	                			                		 
+                author.setUrl(oldValue);	                	
+                logger.debug("Author - Set selected value for update of attribute url.");                 	             	
+                break;
+        case 7: //role	                	 	                			                		 
+                author.setRole(oldValue);	                	
+                logger.debug("Author - Set selected value for update of attribute Role.");                 	             	
+                break;
+        case 8: //note 	                	 	                			                		 
+                author.setNote(oldValue);	                	
+                logger.debug("Author - Set selected value for update of attribute Note.");                 	             	
+                break;
+        default:            
+            logger.error("Author - No column defined for name "+ columnName);	                   
+        } 
+    }
+    
+    /**
+     *
+     */
+    public void undoPhytochorion() {
+        
+        Object[] object = searchObject("Phytochorion", recordId);
+        phytochorion = (Phytochorion)object[0];     
+        
+        //test, zda jiz dany zaznam byl editovan
+        boolean objectList = editObjectList.contains(phytochorion); 
+        if (!objectList) {
+        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
+            editObjectList.add(phytochorion);
+        }
+        logger.debug("editObjectList.contains: "+objectList);
+        logger.debug("phytochorion: "+phytochorion.getId());
+        logger.debug("columnName: "+columnName);
+      
+        if (columnName.equals("namePhytochorion")) {
+            phytochorion.setCode(oldValue);	                 
+            logger.debug("Phytochorion - Set selected value for update of attribute WholeName.");                 	
+        } else if (columnName.equals("code")) {
+             phytochorion.setName(oldValue);
+             logger.debug("Phytochorion - Set selected value for update of attribute Address.");                 	             	
+        } else {
+            logger.error("Phytochorion - No column defined for name "+ columnName);
+        }              
+    }
+    
+    /**
+     *
+     */
+    public void undoVillage() {
+       
+        Object[] object = searchObject("Village", recordId);
+        village = (Village)object[0];
+        
+        // test, zda jiz dany zaznam byl editovan
+        boolean objectList = editObjectList.contains(village); 
+        if (!objectList) {
+        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
+            editObjectList.add(village);
+        }
+        logger.debug("editObjectList.contains: "+objectList);
+        logger.debug("village: "+village.getId());
+        logger.debug("columnName: "+columnName);
+        
+       // Save new value for the column
+        if (columnName.equals("nameVillage")) {
+            village.setName(oldValue);	                 
+            logger.debug("Village - Set selected value for update of attribute Name.");                 	
+        } else {
+            logger.error("Village - No column defined for name "+ columnName);	                   
+        }       
+    }
+    
+    /**
+     *
+     */
+    public void undoTerritory() {
+       
+        Object[] object = searchObject("Territory", recordId);
+        territory = (Territory)object[0];
+        
+        // test, zda jiz dany zaznam byl editovan
+        boolean objectList = editObjectList.contains(territory); 
+        if (!objectList) {
+        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
+            editObjectList.add(territory);
+        }
+        logger.debug("editObjectList.contains: "+objectList);
+        logger.debug("territory: "+territory.getId());
+        logger.debug("columnName: "+columnName);
+        
+       if (columnName.equals("nameTerritory")) {
+           territory.setName(oldValue);	                 
+           logger.debug("Territory - Set selected value for update of attribute Name.");                 	 
+       } else {
+           logger.error("Territory - No column defined for name "+ columnName);	                   
+       }        
+    }
+    
+    /**
+     * 
+     * @param id
+     * @return
+     */
+    public Object[] searchObject(String typeObject, int id) { 
+      
+    	SelectQuery query = null;
+    	if (typeObject.equals("Occurrence")){
+            try {
+            	query = database.createQuery(Occurrence.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject() - Occurrence, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Occurrence.ID, null, id , null);
+    	} else if (typeObject.equals("Habitat")){
+            try {
+            	query = database.createQuery(Habitat.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject() - Habitat, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Habitat.ID, null, id , null);
+    	} else if (typeObject.equals("Plant")){
+            try {
+            	query = database.createQuery(Plant.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject() - Plant, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Plant.ID, null, id , null);
+    	} else if (typeObject.equals("Author")){
+            try {
+            	query = database.createQuery(Author.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject() - Author, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Author.ID, null, id , null);
+    	} else if (typeObject.equals("Publication")){
+            try {
+            	query = database.createQuery(Publication.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject() - Publication, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Publication.ID, null, id , null);
+    	} else if (typeObject.equals("Village")){
+            try {
+            	query = database.createQuery(Village.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject()- Village, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Village.ID, null, id, null);
+    	}  else if  (typeObject.equals("Territory")){
+            try {
+            	query = database.createQuery(Territory.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject()- Territory, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Territory.ID, null, id , null); 
+    	} else if (typeObject.equals("Phytochorion")){
+            try {
+            	query = database.createQuery(Phytochorion.class);	        		        	    
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject()- Phytochorion, createQuery");       	  
+            }            
+            query.addRestriction(PlantloreConstants.RESTR_EQ, Phytochorion.ID, null, id , null);
+    	} else {
+    		logger.error("SearchObject() - Incorrect type of object.");
+    	}
+                        
+        int resultIdPlant = 0;
+        try {                   
+            resultIdPlant = database.executeQuery(query);        
+        } catch (DBLayerException e) {                   
+            logger.error("Searching " +typeObject+ " failed. Unable to execute search query.");
+        } catch (RemoteException e) {		 
+     	   System.err.println("RemoteException- executeQuery " +typeObject);
+ 	} finally {
+     	   logger.debug("Searching " +typeObject+ " ends successfully");
+        }         
+
+       Object[] objects = null;
+       Object[] object = null;
+       try {
+       	    // Retrieve selected row interval         	
+            try {
+                 objects = database.more(resultIdPlant, 1, 1);  
+            } catch(RemoteException e) {            	
+                logger.debug("RemoteException- searchObject, more");            	
+            }   
+        	object = (Object[])objects[0];           
+       } catch (DBLayerException e) {
+           // Log and set error in case of an exception
+           logger.error("Processing search " +typeObject+ " results failed: "+e.toString());            
+       } finally {     	    
+    	   return object; 	       	          	   
+       }     	        
+    }
+    
+    /**
+     *  ..... pri whole history se bude do promennych occurrence, atd. nacitat vice ruznych objektu s jinym ID
+     *  ....Musim si ty jednotlive objekty pamatovat --> pole objektu, kde budou jednotlive editovane objekty
+     */
+    public void commitUpdate() {
+    	
+    	int count = editObjectList.size();
+    	for (int i=0; i< count; i++) {
+    		try {
+    			logger.debug("Object for update: "+editObjectList.get(i));
+                database.executeUpdate(editObjectList.get(i));
+	        } catch (RemoteException e) {
+	                logger.error("CommitUpdate - RemoteException: "+e.toString());
+	        } catch (DBLayerException e) {
+	                logger.error("CommitUpdate - DBLayerException: "+e.toString());
+	        }
+       }    	
+    }
+    
+    /**
+     *  vycisteni seznamu editovany objektu: 
+     */
+    public void clearEditObjectList() {
+    	editObjectList.clear();
+    }
+       
+    /**
+     * Projde oznacene zaznamy a postupne je smaze z tabulek historie.
+     * Pri mazani z tabulky tHistoryChange overi, zda na dany zaznam neni vice vazeb.
+     */
+    public void deleteHistory(int toResult) {
+
+    	//count of selected record
+ //   	int count = historyDataList.size();
+    	
+    	//take from younger record to older record
+    	for( int i=0; i < toResult; i++) {
+//    		if (! markListId.contains(i)) {
+//    			continue;
+//    		}    		    		
+    		historyRecord = (HistoryRecord)historyDataList.get(i); 
+    		historyChange = historyRecord.getHistoryChange(); 
+    		
+	    	try {
+				database.executeDelete(historyRecord);
+				logger.debug("Deleting historyRecord successfully. Number of result: "+i);
+			} catch (RemoteException e) {
+				logger.error("Deleting historyRecord - remoteException. "+e.toString());
+			} catch (DBLayerException e) {
+				logger.error("Deleting historyRecord failed. "+e.toString());
+			}
+			int countResult = searchHistoryChangeId(historyChange.getId());			
+			if (countResult == 0) {
+				//samzat zaznam z tabulky tHistoryChange - muzeme protoze neexistuji dalsi FK z tHistory.cChngeId
+				//pokud po smazani zaznamu z tHistory jsme nasli alespon jeden zaznam, ktery ma stejny FK na zaznam z tChangeHistory
+				try {
+					database.executeDelete(historyChange);
+					logger.debug("Deleting historyChange successfully.");
+				} catch (RemoteException e) {
+					logger.error("Deleting historyChange - remoteException. "+e.toString());
+				} catch (DBLayerException e) {
+					logger.error("Deleting historyChange failed. "+e.toString());
+				}
+			} else {
+				logger.debug("Exist other record in the table tHistory, whitch has the same value of attribute cChangeId.");
+			}
+    	}
+    	//Clear list 
+//    	markListId.clear();
+//    	markItem.clear();
+    } 
+    
+    /**
+     * Zjisteni kolik zaznamu v tabulce tHistory je provazano s konkretnim zaznamem z tHistoryHange 
+     * @param id
+     * @return
+     */
+    public int searchHistoryChangeId(int id){
+    	HistoryChange historyChange = ((HistoryRecord)historyDataList.get(id)).getHistoryChange();
+    	SelectQuery query = null;
+        try {
+        	    query = database.createQuery(HistoryRecord.class);
+        } catch(RemoteException e) {
+        	    System.err.println("RemoteException- searchHistoryChangeId(), createQuery");       	  
+        }        
+        // Create aliases for table tHistoryChange.      
+        query.createAlias("historyChange", "hc");  
+        // Add restriction to cChangeId column 
+        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.id", null, id , null);
+        
+        int resultIdChange = 0;
+        try {                   
+        	resultIdChange = database.executeQuery(query);        
+        } catch (DBLayerException e) {                   
+            logger.error("Searching historyChangeId failed. Unable to execute search query.");
+        } catch (RemoteException e) {		 
+     	   System.err.println("RemoteException- searchHistoryChangeId(), executeQuery");
+ 	    } finally {
+     	   logger.debug("Searching historyChangeId ends successfully.");
+        }         
+ 	    
+ 	    int countResult = 100;
+ 	    try {
+			countResult = database.getNumRows(resultIdChange);
+			logger.debug("SearchHistoryChangeId - Number of result: "+countResult);
+		} catch (RemoteException e) {
+			System.err.println("RemoteException- searchHistoryChangeId(), getNumRows");
+		}		
+		return countResult;
+    }
+    
+     //***************************//
+    //****Init Hashtable*********//
+    //**************************//
+    
+    private void initOccurrenceHash() {
+    	occurrenceHash = new Hashtable<String, Integer>(9); 
+        occurrenceHash.put("plantId",1);
+        occurrenceHash.put("yearCollected",2);
+        occurrenceHash.put("monthCollected",3);
+        occurrenceHash.put("dayCollected",4);
+        occurrenceHash.put("timeCollected",5);           
+        occurrenceHash.put("dataSource",6);
+        occurrenceHash.put("herbarium",7);        
+        occurrenceHash.put("noteOccurrence",8);
+        occurrenceHash.put("publicationId",9);       
+        //occurrenceHash.put("metadataId",10);
+    }    
+    
+    private void initHabitatHash() {
+    	habitatHash = new Hashtable<String, Integer>(11);         
+        habitatHash.put("quadrant",1);
+        habitatHash.put("description",2);
+        habitatHash.put("country",3);
+        habitatHash.put("altitude",4);
+        habitatHash.put("latitude",5);
+        habitatHash.put("longitude",6);      
+        habitatHash.put("nameVillage",7);      
+        habitatHash.put("namePhytochorion",8);
+        habitatHash.put("code",8);
+        habitatHash.put("nameTerritory",9);
+        habitatHash.put("noteHabitat",10);
+    }    
+    
+    private void initPublicationHash() {
+        publicationHash = new Hashtable<String, Integer>(6);
+        publicationHash.put("collectionName",0);
+        publicationHash.put("collectionYearPublication",1);
+        publicationHash.put("journalName",2);
+        publicationHash.put("journalAuthorName",3);
+        publicationHash.put("referenceDetail",4);
+        publicationHash.put("urlPublication",5);      
+    }
+    
+    private void initAuthorHash() {
+        authorHash = new Hashtable<String, Integer>(8);
+        authorHash.put("firstName",0);
+        authorHash.put("surname",1);
+        authorHash.put("organization",2);
+        authorHash.put("role",3);
+        authorHash.put("address",4);
+        authorHash.put("email",5);
+        authorHash.put("urlAuthor",6);
+        authorHash.put("noteAuthor",7);        
+    }              
+    
+       
     //****************************//
     //****Get and set metods*****//
     //**************************//
@@ -170,12 +1066,12 @@
         return resultCount;
     }
 
-    public ArrayList<HistoryRecord> getEditHistoryDataList() {
-              return this.editHistoryDataList;		  
+    public ArrayList<HistoryRecord> getHistoryDataList() {
+              return this.historyDataList;		  
        }
 
-     public void setEditHistoryDataList(ArrayList<HistoryRecord> editHistoryDataList) {
-              this.editHistoryDataList = editHistoryDataList;		  
+     public void setHistoryDataList(ArrayList<HistoryRecord> historyDataList) {
+              this.historyDataList = historyDataList;		  
      } 
     
      public String getCurrentDisplayRows() {

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java	2006-04-15 09:44:04 UTC (rev 146)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java	2006-04-17 22:11:28 UTC (rev 147)
@@ -170,10 +170,27 @@
                view.messageUndoSelection();
            } else {
                logger.debug("Undo to date - id of selected row: "+ view.tableHistoryList.getSelectedRow());
+               int toResult = view.tableHistoryList.getSelectedRow() + model.getCurrentFirstRow();
+               model.clearEditObjectList();
+               model.undoToDate(toResult);
                int okCancle = view.messageUndo("model.getMessageUndo()");      
                if (okCancle == 0){
-                       //Button OK was press
-                       logger.debug("Button OK was press.");                       
+                   //Button OK was press
+                   logger.debug("Button OK was press.");    
+                   model.commitUpdate();
+                   model.deleteHistory(toResult);
+		    	   model.searchWholeHistoryData();        	
+		    	   model.processResult(1,model.getDisplayRows());
+		    	   view.tableHistoryList.setModel(new WholeHistoryTableModel(model));
+		    	   Integer resultRows = model.getResultRows();
+	        	   if (resultRows == 0) {
+	        		   view.displayedValueLabel.setText("0-0"); 
+	        	   } else {
+	        		   int from = model.getCurrentFirstRow();
+	                   int to = from + view.tableHistoryList.getRowCount() - 1;               
+	                   view.displayedValueLabel.setText(from + "-" + to);    
+	        	   }               
+	                   view.totalResultValueLabel.setText(resultRows.toString());
                } else {
                        //Button Cancle was press
                        //neco jako rollback - bude se volat nebo to bude zarizeno tim, ze se nezavola executeUpdate??

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java	2006-04-15 09:44:04 UTC (rev 146)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java	2006-04-17 22:11:28 UTC (rev 147)
@@ -64,7 +64,7 @@
     	
     	logger.debug("WholeHistory - Init data.");
     	
-    	editHistoryDataList = model.getEditHistoryDataList();
+    	editHistoryDataList = model.getHistoryDataList();
     	if (editHistoryDataList.size()==0 ){
     		this.data = new Object[0][];
     		return;



From krater at berlios.de  Tue Apr 18 16:40:48 2006
From: krater at berlios.de (krater at berlios.de)
Date: Tue, 18 Apr 2006 16:40:48 +0200
Subject: [Plantlore-dev] r148 - trunk/src/net/sf/plantlore/common
Message-ID: <200604181440.k3IEemoO025105@sheep.berlios.de>

Author: krater
Date: 2006-04-18 16:40:48 +0200 (Tue, 18 Apr 2006)
New Revision: 148

Modified:
   trunk/src/net/sf/plantlore/common/Assistant.java
Log:
The Visual Assistant of the AutoTextArea has been fixed. It will be placed correctly even if the AutoTextArea is placed within several other components (panes) and some of them are JScrollPanes.

Modified: trunk/src/net/sf/plantlore/common/Assistant.java
===================================================================
--- trunk/src/net/sf/plantlore/common/Assistant.java	2006-04-17 22:11:28 UTC (rev 147)
+++ trunk/src/net/sf/plantlore/common/Assistant.java	2006-04-18 14:40:48 UTC (rev 148)
@@ -29,6 +29,7 @@
 
 	protected JList list;
 	private Point o;
+	private Component father;
 	
 	/**
 	 * Create the Assistant.
@@ -67,7 +68,9 @@
 
 	/** Display the Assistant on the designated coordinates. */
 	public void display(int x, int y) {
-		setLocation(o.x + x, o.y + y); setVisible(true);
+		adjustOffset(father); // determine the offset precisely
+		setLocation(o.x + x, o.y + y); 
+		setVisible(true);
 	}
 
 	/** Display the Assistant on the designated coordinates if it is not already visible. */
@@ -75,21 +78,26 @@
 		display(r.x, r.y);
 	}
 	
-	/** Re-adjust the offset of the Visual Assistant according to the position of the parent components. */
-	public void readjustOffset(Component c) {
+	/** Adjust the offset of the Visual Assistant according to the position of the parent components. */
+	public void adjustOffset(Component c) {
+		father = c;
 		o =  new Point(0, 0); 
 		while(c != null && !(c instanceof JRootPane)) {
 			Point p = c.getLocation();
 			o.translate(p.x, p.y);
+			/* The Visual Assistant must take an extra effort to determine the
+			 * offset where it should appear. A JScrollPane is a very special obstacle 
+			 * as it shows only a part of the decorated component. 
+			 * That's why we must subtract the view position of the viewport 
+			 * from the offset to obtain the correct result.
+			 */
+			if(c instanceof JScrollPane) {
+				Point q = ((JScrollPane)c).getViewport().getViewPosition();
+				p.translate(-q.x, -q.y);
+			}
 			c = c.getParent();			
 		}
 	}
-	
-	/** Adjust the offset of the Visual Assistant according to the position of the parent components. */
-	public void adjustOffset(Component c) {
-		if(o != null) return;
-		readjustOffset(c);
-	}
 
 	/** Set selected index and ensure it is visible. */
 	public void setSelectedIndex(int index) {



From krater at berlios.de  Tue Apr 18 18:56:06 2006
From: krater at berlios.de (krater at berlios.de)
Date: Tue, 18 Apr 2006 18:56:06 +0200
Subject: [Plantlore-dev] r149 - in trunk/src/net/sf/plantlore: client/authors client/history client/login middleware server
Message-ID: <200604181656.k3IGu62l018163@sheep.berlios.de>

Author: krater
Date: 2006-04-18 18:55:51 +0200 (Tue, 18 Apr 2006)
New Revision: 149

Modified:
   trunk/src/net/sf/plantlore/client/authors/AuthorManager.java
   trunk/src/net/sf/plantlore/client/history/History.java
   trunk/src/net/sf/plantlore/client/history/WholeHistory.java
   trunk/src/net/sf/plantlore/client/login/Login.java
   trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java
   trunk/src/net/sf/plantlore/middleware/SelectQuery.java
   trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
   trunk/src/net/sf/plantlore/server/Plantlore.java
   trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java
   trunk/src/net/sf/plantlore/server/RMIServer.java
   trunk/src/net/sf/plantlore/server/SelectQueryImplementation.java
Log:
SelectQuery interface made a valid remote interface: all methods now throw RemoteException (affected classes: AuthoManager, History, WholeHistory - repaired).

Further tuning (correct initialization of the logger, more log output, extended javadoc) of the plantlore/server classes (Plantlore, HibernateDBLayer, RMIRemoteDBLayerFactory, RMIServer, SelectQueryImplementation).


Modified: trunk/src/net/sf/plantlore/client/authors/AuthorManager.java
===================================================================
--- trunk/src/net/sf/plantlore/client/authors/AuthorManager.java	2006-04-18 14:40:48 UTC (rev 148)
+++ trunk/src/net/sf/plantlore/client/authors/AuthorManager.java	2006-04-18 16:55:51 UTC (rev 149)
@@ -187,66 +187,89 @@
                 // Create new Select query
                 SelectQuery query;
                 try {
-                	query = database.createQuery(Author.class);
-                } catch(RemoteException e) {
-                	System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
-                	return null;
-                }
-                if (searchName != null)
-                    query.addRestriction(PlantloreConstants.RESTR_LIKE, Author.WHOLENAME, null, "%"+searchName+"%", null);
-                if (searchOrganization != null) 
-                    query.addRestriction(PlantloreConstants.RESTR_LIKE, Author.ORGANIZATION, null, "%"+searchOrganization+"%", null);
-                if (searchRole != null)
-                    query.addRestriction(PlantloreConstants.RESTR_LIKE, Author.ROLE, null, "%"+searchRole+"%", null);
-                if (searchEmail != null) 
-                    query.addRestriction(PlantloreConstants.RESTR_LIKE, Author.EMAIL, null, "%"+searchEmail+"%", null);                
-                String field;
-                switch (sortField) {
-                    case 1: field = Author.WHOLENAME;
-                            break;
-                    case 2: field = Author.ORGANIZATION;
-                            break;
-                    case 3: field = Author.ROLE;
-                            break;
-                    case 4: field = Author.EMAIL;
-                            break;
-                    case 5: field = Author.PHONENUMBER;
-                            break;                            
-                    case 6: field = Author.URL;
-                            break;          
-                    default:field = Author.WHOLENAME;
-                }
-                
-                if (sortDirection == 0) {
-                    query.addOrder(PlantloreConstants.DIRECT_ASC, field);
-                } else {
-                    query.addOrder(PlantloreConstants.DIRECT_DESC, field);                    
-                }   
-                int resultId = 0;
-                try {
-                    // Execute query                    
-                    resultId = database.executeQuery(query);        
-                } catch (DBLayerException e) {
-                    // Log and set an error                   
-                    logger.error("Searching authors failed. Unable to execute search query.");
-                    setError(e);
-                    // setError("Searching authors failed. Please contact your administrator.");
-                } finally {
-                    // Set operation state to finished
-                    done = true;                    
-                    // Save the results
-                    setResult(resultId);
-                    return resultId;                    
-                } 
+					query = database.createQuery(Author.class);
+
+					if (searchName != null)
+						query.addRestriction(PlantloreConstants.RESTR_LIKE,
+								Author.WHOLENAME, null, "%" + searchName + "%",
+								null);
+					if (searchOrganization != null)
+						query.addRestriction(PlantloreConstants.RESTR_LIKE,
+								Author.ORGANIZATION, null, "%"
+										+ searchOrganization + "%", null);
+					if (searchRole != null)
+						query
+								.addRestriction(PlantloreConstants.RESTR_LIKE,
+										Author.ROLE, null, "%" + searchRole
+												+ "%", null);
+					if (searchEmail != null)
+						query.addRestriction(PlantloreConstants.RESTR_LIKE,
+								Author.EMAIL, null, "%" + searchEmail + "%",
+								null);
+					String field;
+					switch (sortField) {
+					case 1:
+						field = Author.WHOLENAME;
+						break;
+					case 2:
+						field = Author.ORGANIZATION;
+						break;
+					case 3:
+						field = Author.ROLE;
+						break;
+					case 4:
+						field = Author.EMAIL;
+						break;
+					case 5:
+						field = Author.PHONENUMBER;
+						break;
+					case 6:
+						field = Author.URL;
+						break;
+					default:
+						field = Author.WHOLENAME;
+					}
+
+					if (sortDirection == 0) {
+						query.addOrder(PlantloreConstants.DIRECT_ASC, field);
+					} else {
+						query.addOrder(PlantloreConstants.DIRECT_DESC, field);
+					}
+					int resultId = 0;
+					try {
+						// Execute query
+						resultId = database.executeQuery(query);
+					} catch (DBLayerException e) {
+						// Log and set an error
+						logger
+								.error("Searching authors failed. Unable to execute search query.");
+						setError(e);
+						// setError("Searching authors failed. Please contact
+						// your administrator.");
+					} finally {
+						// Set operation state to finished
+						done = true;
+						// Save the results
+						setResult(resultId);
+						return resultId;
+					}
+				} catch (RemoteException e) {
+					System.err
+							.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
+					return null;
+				}
             }
         };
         worker.start();
     }
 
     /**
-     *  Checks whether an error is set. If yes, notifies observers to display it. Finally unsets the error flag.
-     *  @return <code>true</code> if an error was set (and observers were notified), <code>false</code> otherwise
-     */
+	 * Checks whether an error is set. If yes, notifies observers to display it.
+	 * Finally unsets the error flag.
+	 * 
+	 * @return <code>true</code> if an error was set (and observers were
+	 *         notified), <code>false</code> otherwise
+	 */
     public boolean processErrors() {
         if (this.error != null) {
             setChanged();
@@ -258,12 +281,16 @@
     }
 
     /**
-     *  Process results of a search query. Retrieves results using the database management object (DBLayer) and stores them in the data field
-     *  of the class. Notifies observers about the changes. Sets an error in case of an exception.
-     *
-     *  @param from number of the first row to retrieve.
-     *  @param count number of rows to retrieve 
-     */
+	 * Process results of a search query. Retrieves results using the database
+	 * management object (DBLayer) and stores them in the data field of the
+	 * class. Notifies observers about the changes. Sets an error in case of an
+	 * exception.
+	 * 
+	 * @param from
+	 *            number of the first row to retrieve.
+	 * @param count
+	 *            number of rows to retrieve
+	 */
     public void processResults(int from, int count) {
         if (this.resultId != 0) {
             logger.debug("Rows in the result: "+getResultRows());

Modified: trunk/src/net/sf/plantlore/client/history/History.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/History.java	2006-04-18 14:40:48 UTC (rev 148)
+++ trunk/src/net/sf/plantlore/client/history/History.java	2006-04-18 16:55:51 UTC (rev 149)
@@ -138,10 +138,11 @@
        SelectQuery query = null;
        try {
        	    query = database.createQuery(Occurrence.class);
+       	    query.addRestriction(PlantloreConstants.RESTR_EQ, Occurrence.ID, null, idOcc, null);
        } catch(RemoteException e) {
        	    System.err.println("RemoteException - History(), crateQuery");       	  
        }      
-       query.addRestriction(PlantloreConstants.RESTR_EQ, Occurrence.ID, null, idOcc, null);      
+             
        
        int resultId = 0;
        try {
@@ -210,12 +211,12 @@
        SelectQuery query = null;
        try {
        	    query = database.createQuery(HistoryChange.class);
+       	    query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryChange.OCCURRENCE, null, occurrence, null);
+       	    query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryChange.OPERATION, null, HistoryChange.HISTORYCHANGE_INSERT, null);
        } catch(RemoteException e) {
        	    System.err.println("RemoteException- searchInsertInfo(), createQuery");       	  
        }            
-       query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryChange.OCCURRENCE, null, occurrence, null);
-       query.addRestriction(PlantloreConstants.RESTR_EQ, HistoryChange.OPERATION, null, HistoryChange.HISTORYCHANGE_INSERT, null);
-       
+              
        int resultIdInsert = 0;
        try {
            // Execute query                    
@@ -246,15 +247,16 @@
     	//  Select data from tHistory table
         try {
 			query = database.createQuery(HistoryRecord.class);
+			// Create aliases for table tHistoryChange.      
+	        query.createAlias("historyChange", "hc");        
+	        // Add restriction to COPERATION column of tJistoryChange table
+	        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.operation", null, HistoryChange.HISTORYCHANGE_EDIT, null);        
+	        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.occurrence", null, occurrence, null);    	
+	        query.addOrder(PlantloreConstants.DIRECT_DESC, "hc.when");
 		} catch (RemoteException e) {
 			System.err.println("RemoteException- searchEditHistory(), createQuery");
 		}
-        // Create aliases for table tHistoryChange.      
-        query.createAlias("historyChange", "hc");        
-        // Add restriction to COPERATION column of tJistoryChange table
-        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.operation", null, HistoryChange.HISTORYCHANGE_EDIT, null);        
-        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.occurrence", null, occurrence, null);    	
-        query.addOrder(PlantloreConstants.DIRECT_DESC, "hc.when");        
+                
     	
         int resultIdEdit = 0;
         try {
@@ -366,46 +368,51 @@
     	SelectQuery query = null;
     	if (typeObject.equals("Habitat")){
     		try {
-            	query = database.createQuery(Habitat.class);	        		        	    
+            	query = database.createQuery(Habitat.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Habitat.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject() - Habitat, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Habitat.ID, null, id , null);
+            
     	} else if (typeObject.equals("Plant")){
     		try {
-            	query = database.createQuery(Plant.class);	        		        	    
+            	query = database.createQuery(Plant.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Plant.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject() - Plant, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Plant.ID, null, id , null);
     	} else if (typeObject.equals("Publication")){
     		try {
-            	query = database.createQuery(Publication.class);	        		        	    
+            	query = database.createQuery(Publication.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Publication.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject() - Publication, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Publication.ID, null, id , null);
+           
     	} else if (typeObject.equals("Village")){
     		try {
-            	query = database.createQuery(Village.class);	        		        	    
+            	query = database.createQuery(Village.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Village.ID, null, id, null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject()- Village, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Village.ID, null, id, null);
+         
     	}  else if  (typeObject.equals("Territory")){
     		try {
-            	query = database.createQuery(Territory.class);	        		        	    
+            	query = database.createQuery(Territory.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Territory.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject()- Territory, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Territory.ID, null, id , null); 
+             
     	} else if (typeObject.equals("Phytochorion")){
     		try {
-            	query = database.createQuery(Phytochorion.class);	        		        	    
+            	query = database.createQuery(Phytochorion.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Phytochorion.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject()- Phytochorion, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Phytochorion.ID, null, id , null);
+            
     	} else {
     		logger.error("SearchObject() - Incorrect type of object.");
     	}
@@ -800,14 +807,15 @@
     	SelectQuery query = null;
         try {
         	    query = database.createQuery(HistoryRecord.class);
+        	    // Create aliases for table tHistoryChange.      
+                query.createAlias("historyChange", "hc");  
+                // Add restriction to cChangeId column 
+                query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.id", null, id , null);
         } catch(RemoteException e) {
         	    System.err.println("RemoteException- searchHistoryChangeId(), createQuery");       	  
         }     
-        // Create aliases for table tHistoryChange.      
-        query.createAlias("historyChange", "hc");  
-        // Add restriction to cChangeId column 
-        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.id", null, id , null);
         
+        
         int resultIdChange = 0;
         try {                   
         	resultIdChange = database.executeQuery(query);        

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistory.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistory.java	2006-04-18 14:40:48 UTC (rev 148)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistory.java	2006-04-18 16:55:51 UTC (rev 149)
@@ -129,14 +129,15 @@
 
     	//  Select data from tHistory table
         try {
-		query = database.createQuery(HistoryRecord.class);
-        } catch (RemoteException e) {
+			query = database.createQuery(HistoryRecord.class);
+			// Create aliases for table tHistoryChange.
+			query.createAlias("historyChange", "hc");
+			// sort by date/time
+			query.addOrder(PlantloreConstants.DIRECT_DESC, "hc.when");
+		} catch (RemoteException e) {
                 System.err.println("RemoteException- searchWholeHistoryData(), createQuery");
         }
-        // Create aliases for table tHistoryChange.      
-        query.createAlias("historyChange", "hc");
-       //sort by date/time 	
-        query.addOrder(PlantloreConstants.DIRECT_DESC, "hc.when");        
+                
     	
         int resultId = 0;
         try {
@@ -789,60 +790,68 @@
     	SelectQuery query = null;
     	if (typeObject.equals("Occurrence")){
             try {
-            	query = database.createQuery(Occurrence.class);	        		        	    
+            	query = database.createQuery(Occurrence.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Occurrence.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject() - Occurrence, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Occurrence.ID, null, id , null);
+            
     	} else if (typeObject.equals("Habitat")){
             try {
-            	query = database.createQuery(Habitat.class);	        		        	    
+            	query = database.createQuery(Habitat.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Habitat.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject() - Habitat, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Habitat.ID, null, id , null);
+            
     	} else if (typeObject.equals("Plant")){
             try {
-            	query = database.createQuery(Plant.class);	        		        	    
+            	query = database.createQuery(Plant.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Plant.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject() - Plant, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Plant.ID, null, id , null);
+            
     	} else if (typeObject.equals("Author")){
             try {
-            	query = database.createQuery(Author.class);	        		        	    
+            	query = database.createQuery(Author.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Author.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject() - Author, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Author.ID, null, id , null);
+            
     	} else if (typeObject.equals("Publication")){
             try {
-            	query = database.createQuery(Publication.class);	        		        	    
+            	query = database.createQuery(Publication.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Publication.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject() - Publication, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Publication.ID, null, id , null);
+            
     	} else if (typeObject.equals("Village")){
             try {
-            	query = database.createQuery(Village.class);	        		        	    
+            	query = database.createQuery(Village.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Village.ID, null, id, null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject()- Village, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Village.ID, null, id, null);
+            
     	}  else if  (typeObject.equals("Territory")){
             try {
-            	query = database.createQuery(Territory.class);	        		        	    
+            	query = database.createQuery(Territory.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Territory.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject()- Territory, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Territory.ID, null, id , null); 
+             
     	} else if (typeObject.equals("Phytochorion")){
             try {
-            	query = database.createQuery(Phytochorion.class);	        		        	    
+            	query = database.createQuery(Phytochorion.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Phytochorion.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject()- Phytochorion, createQuery");       	  
             }            
-            query.addRestriction(PlantloreConstants.RESTR_EQ, Phytochorion.ID, null, id , null);
+            
     	} else {
     		logger.error("SearchObject() - Incorrect type of object.");
     	}
@@ -958,14 +967,15 @@
     	SelectQuery query = null;
         try {
         	    query = database.createQuery(HistoryRecord.class);
+        	    // Create aliases for table tHistoryChange.      
+                query.createAlias("historyChange", "hc");  
+                // Add restriction to cChangeId column 
+                query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.id", null, id , null);
         } catch(RemoteException e) {
         	    System.err.println("RemoteException- searchHistoryChangeId(), createQuery");       	  
         }        
-        // Create aliases for table tHistoryChange.      
-        query.createAlias("historyChange", "hc");  
-        // Add restriction to cChangeId column 
-        query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.id", null, id , null);
         
+        
         int resultIdChange = 0;
         try {                   
         	resultIdChange = database.executeQuery(query);        

Modified: trunk/src/net/sf/plantlore/client/login/Login.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-18 14:40:48 UTC (rev 148)
+++ trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-18 16:55:51 UTC (rev 149)
@@ -56,8 +56,8 @@
 	protected void load() {
 		logger.debug("Loading the stored list of databases.");
 		// TODO: JAKUB: nacist z XML souboru se jmenem `file` informace o databazich (triplety) do kolekce dbinfo.
-		dbinfo.add(new DBInfo("# Testovac? datab?ze #", "", -1,
-				"jdbc:firebirdsql:natalka.kolej.mff.cuni.cz/3050:/mnt/data/temp/plantloreHIBdata.fdb", 
+		dbinfo.add(new DBInfo("My Home Database", "data.kolej.mff.cuni.cz", -1,
+				"jdbc:firebirdsql:localhost/3050:c:/downloaded/plantloreHIBdata.fdb", 
 				new String[] { "sysdba", null, null, null, null }));
 		
 		this.setChanged(); this.notifyObservers();
@@ -166,12 +166,14 @@
 		selected.promoteUser(name);
 		
 		// Create a new database layer.
-		logger.info("Asking the DBLayerFactory for a new DBLayer @ " + selected.host + ":" + selected.port);
+		logger.debug("Asking the DBLayerFactory for a new DBLayer @ " + selected.host + ":" + selected.port);
 		dblayer = factory.create(selected.host, selected.port);
+		
 		// Initialize the database layer.
-		logger.info("Initializing that DBLayer...");
+		logger.debug("Initializing that DBLayer (" + selected.db + ", " + name + ", " + password + "...");
 		dblayer.initialize(selected.db,name, password);
-		logger.info("DBLayer initialized.");
+		logger.debug("DBLayer initialized.");
+		
 		// Save the current state.
 		save();
 		// Everything went fine.

Modified: trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java
===================================================================
--- trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java	2006-04-18 14:40:48 UTC (rev 148)
+++ trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java	2006-04-18 16:55:51 UTC (rev 149)
@@ -89,13 +89,21 @@
 		if(host == null || host.equals("") || host.equalsIgnoreCase("localhost"))
 			return create();
 		
-		System.out.println("GOING RMI");
+		logger.debug("Creating a new DBLayer using the RMI:");
 		
 		// Connect to the remote server and obtain the RemoteDBLayerFactory
+		logger.debug("  # connecting to the remote registry @ " + host + ":" + port +" ...");
 		Registry registry = LocateRegistry.getRegistry(host, port);
+		logger.debug("    completed");
+		
+		logger.debug("  # obtaining the remote dblayer factory ...");
 		RemoteDBLayerFactory remoteFactory = (RemoteDBLayerFactory) registry.lookup(RemoteDBLayerFactory.ID);
+		logger.debug("    completed");
+		
 		// Get the stub from the remote factory and save the information about the connection
+		logger.debug("  # creating a new dblayer...");
 		DBLayer stub = remoteFactory.create();
+		logger.debug("  completed! :)");
 		ConnectionInfo info = new ConnectionInfo(remoteFactory, null, stub, "localhost -> " + host + ":" + port);
 		client.put(stub, info);
 		

Modified: trunk/src/net/sf/plantlore/middleware/SelectQuery.java
===================================================================
--- trunk/src/net/sf/plantlore/middleware/SelectQuery.java	2006-04-18 14:40:48 UTC (rev 148)
+++ trunk/src/net/sf/plantlore/middleware/SelectQuery.java	2006-04-18 16:55:51 UTC (rev 149)
@@ -2,6 +2,7 @@
 
 import java.io.Serializable;
 import java.rmi.Remote;
+import java.rmi.RemoteException;
 import java.util.Collection;
 
 import net.sf.plantlore.common.PlantloreConstants;
@@ -28,7 +29,7 @@
      *  @param propertyName name of the column for which we want to create an alias (foreign key column)
      *  @param aliasName name of the new alias
      */    
-    void createAlias(String propertyName, String aliasName);
+    void createAlias(String propertyName, String aliasName)  throws RemoteException;
     
     /**
      *  Add restriction to the constructed criteria. Restrictions are parts of the where condition.
@@ -39,7 +40,7 @@
      *  @param value value for restrictions containg values
      *  @param values collection of values for restrictions working with more values (RESTR_IN)
      */
-    void addRestriction(int type, String firstPropertyName, String secondPropertyName, Object value, Collection values);
+    void addRestriction(int type, String firstPropertyName, String secondPropertyName, Object value, Collection values)  throws RemoteException;
     
     /**
      *  Add projection to constructed criteria. Projections are columns we want to select
@@ -48,7 +49,7 @@
      *  @param propertyName name of the column for the projection
      *  @see PlantloreConstants
      */
-    void addProjection(int type, String propertyName);
+    void addProjection(int type, String propertyName)  throws RemoteException;
     
     /**
      *  Set method of fetching the results.
@@ -56,7 +57,7 @@
      *  @param associationPath
      *  @param mode
      */
-    void setFetchMode(String associationPath, int mode);
+    void setFetchMode(String associationPath, int mode)  throws RemoteException;
     
     /**
      *  Add orderby clause to the constructed criteria.
@@ -64,7 +65,7 @@
      *  @param direction direction of ordering (ASC or DESC)
      *  @param propertyName property we want to use for ordering the results
      */
-    void addOrder(int direction, String propertyName);
+    void addOrder(int direction, String propertyName)  throws RemoteException;
     
     /**
      *  Add association to the criteria. Association means that given associated record (from a
@@ -72,6 +73,6 @@
      *
      *  @param associationPath path of associated entities
      */
-    void addAssociation(String associationPath);
+    void addAssociation(String associationPath)  throws RemoteException;
     
 }

Modified: trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-18 14:40:48 UTC (rev 148)
+++ trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-18 16:55:51 UTC (rev 149)
@@ -27,6 +27,8 @@
 
 /**
  *  Implementation of DBLayer using Hibernate OR mapping to access the database.
+ *  
+ *  TODO: Nezapominat generovat stub! (rmic net.sf.plantlore.server.HibernateDBLayer)
  *
  *  @author Tom?? Kova??k (database parts), Erik Kratochv?l (rmi parts)
  *  @version far from ready!
@@ -53,19 +55,26 @@
      */
     public HibernateDBLayer(Undertaker undertaker) {
     	this();
-    	this.undertaker = undertaker; 
+    	this.undertaker = undertaker;
+    	logger.debug("      completely completed.");
     }
     
     /** Creates a new instance of HibernateDBLayer */
     public HibernateDBLayer() {
-        logger = Logger.getLogger(this.getClass().getPackage().getName());        
+        logger = Logger.getLogger(this.getClass().getPackage().getName());
+        
+        
+        logger.debug("      Constructing a new HibernateDBLayer ...");
+        
         // Initialize pool of result sets, initial capacity = 8
         results = new Hashtable<Integer, ScrollableResults>(8); 
         // Initialize maximum result id
         maxResultId = 0;
         
         // Table of all living queries, initial capacity = 8
-        queries = new Hashtable<SelectQuery, SelectQuery>(8); 
+        queries = new Hashtable<SelectQuery, SelectQuery>(8);
+        
+        logger.debug("      completed.");
     }    
     
     /**

Modified: trunk/src/net/sf/plantlore/server/Plantlore.java
===================================================================
--- trunk/src/net/sf/plantlore/server/Plantlore.java	2006-04-18 14:40:48 UTC (rev 148)
+++ trunk/src/net/sf/plantlore/server/Plantlore.java	2006-04-18 16:55:51 UTC (rev 149)
@@ -47,7 +47,11 @@
 		// Take the appropriate action.
 		try {
 			if (command.equalsIgnoreCase("start")) {
-				try { server = new RMIServer(port); } catch (Exception e) { System.err.println(e); server.stop(true); }
+				try { 
+					server = new RMIServer(port);
+					server.start();
+				} 
+				catch (Exception e) { System.err.println(e); server.stop(true); }
 			} 
 			else {
 				Registry registry = LocateRegistry.getRegistry(host, port);

Modified: trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java
===================================================================
--- trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java	2006-04-18 14:40:48 UTC (rev 148)
+++ trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java	2006-04-18 16:55:51 UTC (rev 149)
@@ -103,15 +103,18 @@
 		String clientHost = "unknown";
 		try { clientHost = RemoteServer.getClientHost(); } 
 		catch(Exception e) { logger.warn("Unable to retrieve the client's host name."); }
+		logger.debug("Someone from the " + clientHost + " contacted us.");
 		
 		// Connection policy
 		if( !allowConnection(clientHost) ) {
-			logger.info("Too many connections from " + clientHost + " (or the server is full)!");
+			logger.warn("Too many connections from " + clientHost + " (or the server is full)!");
 			return null;
 		}
 		
 		// Create a new DBLayer, export it, and keep the stub. Also set the Undertaker of this object.
+		logger.debug("  Creating a new HibernateDBLayer ...");
 		DBLayer database = new HibernateDBLayer(this);
+		logger.debug("   completed!");
 		DBLayer stub = (DBLayer) UnicastRemoteObject.exportObject(database);
 		
 		// Save the information about this connection.

Modified: trunk/src/net/sf/plantlore/server/RMIServer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/RMIServer.java	2006-04-18 14:40:48 UTC (rev 148)
+++ trunk/src/net/sf/plantlore/server/RMIServer.java	2006-04-18 16:55:51 UTC (rev 149)
@@ -1,13 +1,17 @@
 package net.sf.plantlore.server;
 
+import java.io.IOException;
+import java.io.InputStream;
 import java.rmi.AlreadyBoundException;
 import java.rmi.RemoteException;
 import java.rmi.registry.LocateRegistry;
 import java.rmi.registry.Registry;
 import java.rmi.server.UnicastRemoteObject;
 import java.util.Collection;
+import java.util.Properties;
 
 import org.apache.log4j.Logger;
+import org.apache.log4j.PropertyConfigurator;
 
 import net.sf.plantlore.middleware.RemoteDBLayerFactory;
 import net.sf.plantlore.server.tools.*;
@@ -29,6 +33,8 @@
 	/** The default port where the rmiregistry listens. To that rmiregistry the RemoteDBLayerFactory will be bound to. */
 	public static final int DEFAULT_PORT = Registry.REGISTRY_PORT;
 	
+	private static final String LOGGER_PROPS = "net/sf/plantlore/config/log4j.properties";
+	
 	private RMIRemoteDBLayerFactory remoteFactory = null;
 	private int port = DEFAULT_PORT;
 	private Guard guard = null;
@@ -41,7 +47,21 @@
 	}
 	
 	/** Create a new instance of RMIServer running on the specified port. */
-	public RMIServer(int port) throws RemoteException, AlreadyBoundException { 
+	public RMIServer(int port) throws RemoteException, AlreadyBoundException {
+		// Load log4j settings
+        ClassLoader cl = this.getClass().getClassLoader();
+        InputStream is = cl.getResourceAsStream(LOGGER_PROPS);
+        Properties props = new Properties();
+        //FIXME:
+        try {
+            props.load(is);
+        } catch (IOException ex) {
+            ex.printStackTrace();
+        }
+        //maybe CHANGE to configureAndWatch()
+        PropertyConfigurator.configure(props);
+        
+        
 		this.port = port;
 		
 		logger = Logger.getLogger(this.getClass().getPackage().getName());

Modified: trunk/src/net/sf/plantlore/server/SelectQueryImplementation.java
===================================================================
--- trunk/src/net/sf/plantlore/server/SelectQueryImplementation.java	2006-04-18 14:40:48 UTC (rev 148)
+++ trunk/src/net/sf/plantlore/server/SelectQueryImplementation.java	2006-04-18 16:55:51 UTC (rev 149)
@@ -25,6 +25,8 @@
  * reference manual.
  *
  *  FIXME: Malo by to hadzat DBLayerException...
+ *  
+ *  TODO: Nezapominat generovat stub! (rmic net.sf.plantlore.server.SelectQueryImplementation)
  *
  * @author Tom?? Kova??k, Erik Kratochv?l
  */



From krater at berlios.de  Wed Apr 19 14:36:40 2006
From: krater at berlios.de (krater at berlios.de)
Date: Wed, 19 Apr 2006 14:36:40 +0200
Subject: [Plantlore-dev] r150 - in trunk/src/net/sf/plantlore/client: . login
Message-ID: <200604191236.k3JCaeBw019415@sheep.berlios.de>

Author: krater
Date: 2006-04-19 14:36:33 +0200 (Wed, 19 Apr 2006)
New Revision: 150

Modified:
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/login/AuthView.java
   trunk/src/net/sf/plantlore/client/login/ItemView.java
   trunk/src/net/sf/plantlore/client/login/Login.java
   trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
   trunk/src/net/sf/plantlore/client/login/LoginView.java
Log:
QuickLogin feature added - when the "select automatically" option is checked, the SelectDB dialog is skipped.

Bugfix: after a wrong dblayer initialization (during login) is that dblayer properly destroyed on the server now.

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-18 16:55:51 UTC (rev 149)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-19 12:36:33 UTC (rev 150)
@@ -77,6 +77,7 @@
     WholeHistoryView wholeHistoryView;
     WholeHistoryCtrl wholeHistoryCtrl;
     
+    // Login
     Login loginModel;
     LoginView loginView;
     LoginCtrl loginCtrl;
@@ -468,13 +469,8 @@
                 }
                 if(loginView == null) loginView = new LoginView(loginModel);
                 if(loginCtrl == null) loginCtrl = new LoginCtrl(loginModel, loginView);
-                loginView.setVisible(true);
-                /*-------------------------------------------------------------------------------------
-                 * The problem here is that the dialog is opened - but another thread
-                 * takes care of its execution. That's why the code below will be executed
-                 * immediately after the dialog becomes visible. Clearly, the database layer
-                 * is not created at this time!
-                 *-------------------------------------------------------------------------------------*/
+                
+                loginCtrl.setVisible(true);
         }
     }
     

Modified: trunk/src/net/sf/plantlore/client/login/AuthView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-18 16:55:51 UTC (rev 149)
+++ trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-19 12:36:33 UTC (rev 150)
@@ -17,7 +17,7 @@
  *
  * @author  yaa
  */
-public class AuthView extends javax.swing.JFrame implements Observer {
+public class AuthView extends javax.swing.JDialog implements Observer {
 	
 	private Login model;
     
@@ -28,6 +28,7 @@
         initComponents();
         setLocationRelativeTo(null); // center of the screen
         setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+        setModal(true);
     }
     
     /** This method is called from within the constructor to
@@ -94,10 +95,12 @@
     
     public void update(Observable arg0, Object arg1) {
 		DBInfo selected = model.getSelected();
-		if(selected == null) return;
-		System.out.println("AuthView [98] :: selected record is " + selected);
+		if(selected == null) return; // FIXME: DIALOG: SAMTIN MUST BE SELECTED
+		//System.out.println("AuthView [98] :: selected record is " + selected);
 		user.removeAllItems();
 		user.addItems(selected.users);
+		
+		setTitle("Connecting to " + selected.toString());
 	}
     
     

Modified: trunk/src/net/sf/plantlore/client/login/ItemView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/ItemView.java	2006-04-18 16:55:51 UTC (rev 149)
+++ trunk/src/net/sf/plantlore/client/login/ItemView.java	2006-04-19 12:36:33 UTC (rev 150)
@@ -15,7 +15,7 @@
  *
  * @author  yaa
  */
-public class ItemView extends javax.swing.JFrame implements Observer {
+public class ItemView extends javax.swing.JDialog implements Observer {
 	
 	private Login model;
     
@@ -27,6 +27,7 @@
 		setResizable(false);
 		setLocationRelativeTo(null);
 		setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+		setModal(true);
     }
     
     /** This method is called from within the constructor to

Modified: trunk/src/net/sf/plantlore/client/login/Login.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-18 16:55:51 UTC (rev 149)
+++ trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-19 12:36:33 UTC (rev 150)
@@ -164,6 +164,8 @@
 			return null;
 		}
 		selected.promoteUser(name);
+		// Save the current state.
+		save();
 		
 		// Create a new database layer.
 		logger.debug("Asking the DBLayerFactory for a new DBLayer @ " + selected.host + ":" + selected.port);
@@ -171,11 +173,19 @@
 		
 		// Initialize the database layer.
 		logger.debug("Initializing that DBLayer (" + selected.db + ", " + name + ", " + password + "...");
-		dblayer.initialize(selected.db,name, password);
+		
+		try {
+			dblayer.initialize(selected.db,name, password);
+		} 
+		catch (DBLayerException exception) {
+			// If the initialization of the DBLayer failed, the uninitialized DBLayer must be destroyed!
+			logger.warn("The initialization of the DBLayer failed. Here's why: " + exception);
+			factory.destroy(dblayer);
+			throw exception; // rethrow that exception
+		}
+
 		logger.debug("DBLayer initialized.");
 		
-		// Save the current state.
-		save();
 		// Everything went fine.
 		this.setChanged(); this.notifyObservers(dblayer);
 		return dblayer;

Modified: trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-18 16:55:51 UTC (rev 149)
+++ trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-19 12:36:33 UTC (rev 150)
@@ -3,6 +3,7 @@
 import java.awt.event.ActionEvent;
 
 import javax.swing.AbstractAction;
+import javax.swing.JDialog;
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
 
@@ -33,8 +34,20 @@
 		view.edit.addActionListener(new EditRecord());
 		view.remove.addActionListener(new RemoveRecord());
 		view.next.addActionListener(new Next());
+		
+		view.choice.setSelectedIndex(0);
 	}
 	
+	
+	public void setVisible(boolean visible) {
+		JDialog dialog = view;
+		if( view.remember.isSelected() && !view.choice.isSelectionEmpty() ) 
+			dialog = authView;
+		
+		dialog.setVisible(visible);
+	}
+	
+	
 	class ChoiceChanged implements ListSelectionListener {
 		public void valueChanged(ListSelectionEvent e) {
 			/*----------------------------------------------------------
@@ -42,6 +55,10 @@
 			 *  framework: for some unknown reason 
 			 *  the ListSelectionEvent is sent twice every time 
 			 *  you select something in the list. Why?
+			 *  
+			 *  The reason will be simple: 
+			 *  mousePressed & mouseReleased 
+			 *  (instead of mouseClicked).  
 			 *----------------------------------------------------------*/
 			model.setSelected( view.choice.getSelectedIndex() );
 		}	

Modified: trunk/src/net/sf/plantlore/client/login/LoginView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-18 16:55:51 UTC (rev 149)
+++ trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-19 12:36:33 UTC (rev 150)
@@ -17,7 +17,7 @@
  *
  * @author  yaa
  */
-public class LoginView extends javax.swing.JFrame implements Observer {
+public class LoginView extends javax.swing.JDialog implements Observer {
 	
 	private Login model;
     
@@ -28,6 +28,7 @@
         initComponents();
         setLocationRelativeTo(null); // center of the screen
         setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+        setModal(true);
         // See what's new.
         update(null, null);
     }
@@ -69,6 +70,7 @@
         remember.setText("select automatically");
         remember.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
         remember.setMargin(new java.awt.Insets(0, 0, 0, 0));
+        remember.setSelected(true);
 
         org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
         getContentPane().setLayout(layout);
@@ -99,7 +101,16 @@
     }// </editor-fold>//GEN-END:initComponents
     
     
+        
+    @Override
+    public void setVisible(boolean visible) {
+    	if(!visible) super.setVisible(false);
+    	else {
+    		
+    	}
+    }
     
+    
     public void update(Observable source, Object parameter) {
     	// Ignore setSelected() event
     	if(parameter == null) {



From krater at berlios.de  Wed Apr 19 14:51:39 2006
From: krater at berlios.de (krater at berlios.de)
Date: Wed, 19 Apr 2006 14:51:39 +0200
Subject: [Plantlore-dev] r151 - trunk/src/net/sf/plantlore/client/login
Message-ID: <200604191251.k3JCpdtB027911@sheep.berlios.de>

Author: krater
Date: 2006-04-19 14:51:16 +0200 (Wed, 19 Apr 2006)
New Revision: 151

Modified:
   trunk/src/net/sf/plantlore/client/login/AuthView.java
Log:
Hyperactive login created. Just for development purposes.

Modified: trunk/src/net/sf/plantlore/client/login/AuthView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-19 12:36:33 UTC (rev 150)
+++ trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-19 12:51:16 UTC (rev 151)
@@ -101,6 +101,12 @@
 		user.addItems(selected.users);
 		
 		setTitle("Connecting to " + selected.toString());
+		
+		//==TEMPORARY CODE=================================================
+					System.out.println("HYPERACTIVE-LOGIN");
+					password.setText("masterkey");
+					next.doClick(); // outrageous!
+		//================================================================
 	}
     
     



From krater at berlios.de  Wed Apr 19 15:12:37 2006
From: krater at berlios.de (krater at berlios.de)
Date: Wed, 19 Apr 2006 15:12:37 +0200
Subject: [Plantlore-dev] r152 - trunk/src/net/sf/plantlore/client/login
Message-ID: <200604191312.k3JDCbMA002756@sheep.berlios.de>

Author: krater
Date: 2006-04-19 15:12:33 +0200 (Wed, 19 Apr 2006)
New Revision: 152

Modified:
   trunk/src/net/sf/plantlore/client/login/AuthCtrl.java
   trunk/src/net/sf/plantlore/client/login/AuthView.java
   trunk/src/net/sf/plantlore/client/login/Login.java
   trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
Log:
The QuickLogin feature implemented properly now.

Modified: trunk/src/net/sf/plantlore/client/login/AuthCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthCtrl.java	2006-04-19 12:51:16 UTC (rev 151)
+++ trunk/src/net/sf/plantlore/client/login/AuthCtrl.java	2006-04-19 13:12:33 UTC (rev 152)
@@ -12,6 +12,7 @@
 	public AuthCtrl(Login login, AuthView authview) {
 		this.model = login; this.view = authview;
 		view.next.addActionListener(new Next());
+
 	}
 	
 	class Next extends AbstractAction {

Modified: trunk/src/net/sf/plantlore/client/login/AuthView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-19 12:51:16 UTC (rev 151)
+++ trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-19 13:12:33 UTC (rev 152)
@@ -101,12 +101,6 @@
 		user.addItems(selected.users);
 		
 		setTitle("Connecting to " + selected.toString());
-		
-		//==TEMPORARY CODE=================================================
-					System.out.println("HYPERACTIVE-LOGIN");
-					password.setText("masterkey");
-					next.doClick(); // outrageous!
-		//================================================================
 	}
     
     

Modified: trunk/src/net/sf/plantlore/client/login/Login.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-19 12:51:16 UTC (rev 151)
+++ trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-19 13:12:33 UTC (rev 152)
@@ -56,8 +56,8 @@
 	protected void load() {
 		logger.debug("Loading the stored list of databases.");
 		// TODO: JAKUB: nacist z XML souboru se jmenem `file` informace o databazich (triplety) do kolekce dbinfo.
-		dbinfo.add(new DBInfo("My Home Database", "data.kolej.mff.cuni.cz", -1,
-				"jdbc:firebirdsql:localhost/3050:c:/downloaded/plantloreHIBdata.fdb", 
+		dbinfo.add(new DBInfo("My Home Database", "localhost", -1,
+				"jdbc:firebirdsql:localhost/3050:c:/Temp/plantloreHIBdata.fdb", 
 				new String[] { "sysdba", null, null, null, null }));
 		
 		this.setChanged(); this.notifyObservers();

Modified: trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-19 12:51:16 UTC (rev 151)
+++ trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-19 13:12:33 UTC (rev 152)
@@ -41,10 +41,17 @@
 	
 	public void setVisible(boolean visible) {
 		JDialog dialog = view;
-		if( view.remember.isSelected() && !view.choice.isSelectionEmpty() ) 
+		if( view.remember.isSelected() && !view.choice.isSelectionEmpty() ) { 
 			dialog = authView;
+		}
 		
-		dialog.setVisible(visible);
+		//UNCOMMENT THIS:      dialog.setVisible(visible);
+		
+		//==TEMPORARY CODE=================================================
+		System.out.println("HYPERACTIVE-LOGIN");
+		authView.password.setText("masterkey");
+		authView.next.doClick(); // outrageous!
+		//================================================================
 	}
 	
 	



From kovo at berlios.de  Wed Apr 19 15:21:04 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Wed, 19 Apr 2006 15:21:04 +0200
Subject: [Plantlore-dev] r153 - trunk/src/net/sf/plantlore/common/record
Message-ID: <200604191321.k3JDL45u004825@sheep.berlios.de>

Author: kovo
Date: 2006-04-19 15:20:41 +0200 (Wed, 19 Apr 2006)
New Revision: 153

Modified:
   trunk/src/net/sf/plantlore/common/record/Occurrence.java
Log:
Fix DATASOURCE constant name

Modified: trunk/src/net/sf/plantlore/common/record/Occurrence.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-04-19 13:12:33 UTC (rev 152)
+++ trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-04-19 13:20:41 UTC (rev 153)
@@ -55,7 +55,7 @@
     public static final String DAYCOLLECTED = "dayCollected";    
     public static final String TIMECOLLECTED = "timeCollected";
     public static final String ISODATETIMEBEGIN = "isoDateTimeBegin";    
-    public static final String DATESOURCE = "dataSource";    
+    public static final String DATASOURCE = "dataSource";    
     public static final String PUBLICATION = "publication";    
     public static final String HERBARIUM = "herbarium";    
     public static final String CREATEDWHEN = "createdWhen";    



From kovo at berlios.de  Wed Apr 19 15:50:45 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Wed, 19 Apr 2006 15:50:45 +0200
Subject: [Plantlore-dev] r154 - trunk/src/net/sf/plantlore/common
Message-ID: <200604191350.k3JDojns020067@sheep.berlios.de>

Author: kovo
Date: 2006-04-19 15:50:39 +0200 (Wed, 19 Apr 2006)
New Revision: 154

Modified:
   trunk/src/net/sf/plantlore/common/PlantloreConstants.java
Log:
Add constant for SELECT DISTINCT projection

Modified: trunk/src/net/sf/plantlore/common/PlantloreConstants.java
===================================================================
--- trunk/src/net/sf/plantlore/common/PlantloreConstants.java	2006-04-19 13:20:41 UTC (rev 153)
+++ trunk/src/net/sf/plantlore/common/PlantloreConstants.java	2006-04-19 13:50:39 UTC (rev 154)
@@ -62,6 +62,7 @@
     public static final int PROJ_PROPERTY       = 46;       
     public static final int PROJ_ROW_COUNT      = 47;
     public static final int PROJ_SUM            = 48;
+    public static final int PROJ_DISTINCT       = 49;
     
     /** Constants for fetch mode of associated entities */
     public static final int FETCH_JOIN            = 50;



From kovo at berlios.de  Wed Apr 19 15:53:53 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Wed, 19 Apr 2006 15:53:53 +0200
Subject: [Plantlore-dev] r155 - trunk/src/net/sf/plantlore/server
Message-ID: <200604191353.k3JDrrdx021588@sheep.berlios.de>

Author: kovo
Date: 2006-04-19 15:53:07 +0200 (Wed, 19 Apr 2006)
New Revision: 155

Modified:
   trunk/src/net/sf/plantlore/server/SelectQueryImplementation.java
Log:
Add projection for SELECT DISTINCT

Modified: trunk/src/net/sf/plantlore/server/SelectQueryImplementation.java
===================================================================
--- trunk/src/net/sf/plantlore/server/SelectQueryImplementation.java	2006-04-19 13:50:39 UTC (rev 154)
+++ trunk/src/net/sf/plantlore/server/SelectQueryImplementation.java	2006-04-19 13:53:07 UTC (rev 155)
@@ -172,6 +172,8 @@
             case PlantloreConstants.PROJ_SUM:
                 criteria.setProjection(Projections.sum(propertyName));
                 break;
+            case PlantloreConstants.PROJ_DISTINCT:
+                criteria.setProjection(Projections.distinct(Projections.property(propertyName)));
             default:
                 
         }



From fraktalek at berlios.de  Wed Apr 19 16:24:20 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Wed, 19 Apr 2006 16:24:20 +0200
Subject: [Plantlore-dev] r156 - trunk/src/net/sf/plantlore/client
Message-ID: <200604191424.k3JEOKZA018930@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-19 16:24:03 +0200 (Wed, 19 Apr 2006)
New Revision: 156

Modified:
   trunk/src/net/sf/plantlore/client/AddEditCtrl.java
   trunk/src/net/sf/plantlore/client/AddEditView.form
   trunk/src/net/sf/plantlore/client/AddEditView.java
   trunk/src/net/sf/plantlore/client/AppCore.java
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/AppCoreView.java
   trunk/src/net/sf/plantlore/client/OverviewTableModel.java
   trunk/src/net/sf/plantlore/client/Plantlore.java
Log:
Improved AddEdit dialog - in edit mode loads currently selected record, changed components a little, AutoComboboxes that should be strict are strict now, ...



Modified: trunk/src/net/sf/plantlore/client/AddEditCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditCtrl.java	2006-04-19 13:53:07 UTC (rev 155)
+++ trunk/src/net/sf/plantlore/client/AddEditCtrl.java	2006-04-19 14:24:03 UTC (rev 156)
@@ -14,9 +14,13 @@
  * @author reimei
  */
 public class AddEditCtrl {
+    private boolean inEditMode = false;
+    private boolean inAddMode = true;
     
     /** Creates a new instance of AddEditCtrl */
-    public AddEditCtrl() {
+    public AddEditCtrl(boolean edit) {
+        this.inEditMode = edit;
+        this.inAddMode = ! edit;
     }
     
 }

Modified: trunk/src/net/sf/plantlore/client/AddEditView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditView.form	2006-04-19 13:53:07 UTC (rev 155)
+++ trunk/src/net/sf/plantlore/client/AddEditView.form	2006-04-19 14:24:03 UTC (rev 156)
@@ -35,6 +35,9 @@
           <Dimension value="[700, 200]"/>
         </Property>
       </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
       <Constraints>
         <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
           <BorderConstraints direction="North"/>
@@ -58,7 +61,7 @@
                           <EmptySpace pref="80" max="32767" attributes="0"/>
                           <Component id="checklistButton" min="-2" max="-2" attributes="0"/>
                       </Group>
-                      <Component id="AuthorComboBox" alignment="0" pref="245" max="32767" attributes="1"/>
+                      <Component id="authorComboBox" alignment="0" pref="245" max="32767" attributes="1"/>
                       <Component id="jScrollPane3" alignment="0" pref="245" max="32767" attributes="1"/>
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
@@ -69,7 +72,7 @@
                   <EmptySpace max="-2" attributes="0"/>
                   <Group type="103" groupAlignment="0" attributes="0">
                       <Component id="jScrollPane2" alignment="0" pref="358" max="32767" attributes="1"/>
-                      <Component id="TownComboBox" alignment="0" pref="358" max="32767" attributes="1"/>
+                      <Component id="townComboBox" alignment="0" pref="358" max="32767" attributes="1"/>
                       <Component id="jToggleButton1" min="-2" max="-2" attributes="0"/>
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
@@ -81,9 +84,9 @@
               <Group type="102" alignment="1" attributes="0">
                   <Group type="103" groupAlignment="3" attributes="0">
                       <Component id="AuthorLabel" alignment="3" min="-2" max="-2" attributes="0"/>
-                      <Component id="AuthorComboBox" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="authorComboBox" alignment="3" min="-2" max="-2" attributes="0"/>
                       <Component id="TownLabel" alignment="3" min="-2" max="-2" attributes="0"/>
-                      <Component id="TownComboBox" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="townComboBox" alignment="3" min="-2" max="-2" attributes="0"/>
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
                   <Group type="103" groupAlignment="0" attributes="0">
@@ -113,27 +116,35 @@
           <Properties>
             <Property name="text" type="java.lang.String" value="Author:"/>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
         </Component>
-        <Component class="javax.swing.JComboBox" name="AuthorComboBox">
+        <Component class="javax.swing.JComboBox" name="authorComboBox">
           <Properties>
             <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
               <StringArray count="0"/>
             </Property>
           </Properties>
           <Events>
-            <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="AuthorComboBoxActionPerformed"/>
+            <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="authorComboBoxActionPerformed"/>
           </Events>
           <AuxValues>
             <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getAuthors());&#xa;"/>
             <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="Object [] items;"/>
+            <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)authorComboBox).setStrict(true);"/>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
           </AuxValues>
         </Component>
         <Component class="javax.swing.JLabel" name="TownLabel">
           <Properties>
             <Property name="text" type="java.lang.String" value="Nearest bigger seat:"/>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
         </Component>
-        <Component class="javax.swing.JComboBox" name="TownComboBox">
+        <Component class="javax.swing.JComboBox" name="townComboBox">
           <Properties>
             <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
               <StringArray count="0"/>
@@ -142,22 +153,33 @@
           <AuxValues>
             <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getVillages());"/>
             <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="items = new Object[] {&quot;Praha&quot;, &quot;Brno&quot;, &quot;Turnov&quot;, &quot;Trebic&quot;};"/>
+            <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)townComboBox).setStrict(true);"/>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
           </AuxValues>
         </Component>
         <Component class="javax.swing.JLabel" name="TaxonLabel">
           <Properties>
             <Property name="text" type="java.lang.String" value="Taxon:"/>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
         </Component>
         <Component class="javax.swing.JLabel" name="YearLabel">
           <Properties>
             <Property name="text" type="java.lang.String" value="Year:"/>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
         </Component>
         <Component class="javax.swing.JLabel" name="jLabel2">
           <Properties>
             <Property name="text" type="java.lang.String" value="Place description:"/>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
         </Component>
         <Container class="javax.swing.JScrollPane" name="jScrollPane2">
           <AuxValues>
@@ -171,6 +193,9 @@
                 <Property name="columns" type="int" value="20"/>
                 <Property name="rows" type="int" value="5"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
           </SubComponents>
         </Container>
@@ -190,6 +215,7 @@
               <AuxValues>
                 <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoTextArea(choices, this);"/>
                 <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="Pair&lt;String, Integer&gt;[] plants = model.getPlants();&#xa;String[] choices = new String[plants.length];&#xa;for (int i = 0; i &lt; plants.length; i++) &#xa;    choices[i] = plants[i].getFirst();&#xa;&#xa;"/>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
           </SubComponents>
@@ -201,11 +227,17 @@
           <Events>
             <EventHandler event="mouseClicked" listener="java.awt.event.MouseListener" parameters="java.awt.event.MouseEvent" handler="jToggleButton1MouseClicked"/>
           </Events>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
         </Component>
         <Component class="javax.swing.JButton" name="checklistButton">
           <Properties>
             <Property name="text" type="java.lang.String" value="Checklist"/>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
         </Component>
         <Component class="javax.swing.JSpinner" name="yearSpinner">
           <Properties>
@@ -213,6 +245,9 @@
               <Connection code="2006" type="code"/>
             </Property>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
         </Component>
       </SubComponents>
     </Container>
@@ -253,7 +288,7 @@
                           <Group type="103" groupAlignment="0" attributes="0">
                               <Group type="102" attributes="0">
                                   <Component id="jPanel1" min="-2" max="-2" attributes="1"/>
-                                  <EmptySpace pref="27" max="32767" attributes="0"/>
+                                  <EmptySpace pref="30" max="32767" attributes="0"/>
                                   <Component id="jPanel6" min="-2" max="-2" attributes="1"/>
                               </Group>
                               <Component id="jPanel5" max="32767" attributes="1"/>
@@ -307,6 +342,9 @@
               </Border>
             </Property>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
 
           <Layout>
             <DimensionLayout dim="0">
@@ -315,15 +353,15 @@
                       <EmptySpace max="-2" attributes="0"/>
                       <Component id="jLabel3" min="-2" max="-2" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
-                      <Component id="MonthSpinner" min="-2" max="-2" attributes="0"/>
+                      <Component id="monthSpinner" min="-2" max="-2" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                       <Component id="jLabel4" min="-2" max="-2" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
-                      <Component id="DaySpinner" min="-2" max="-2" attributes="0"/>
+                      <Component id="daySpinner" min="-2" max="-2" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                       <Component id="jLabel5" min="-2" max="-2" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
-                      <Component id="TimeFormattedTextField" min="-2" pref="60" max="-2" attributes="0"/>
+                      <Component id="timeFormattedTextField" min="-2" pref="60" max="-2" attributes="0"/>
                       <EmptySpace pref="65" max="32767" attributes="0"/>
                   </Group>
               </Group>
@@ -334,11 +372,11 @@
                       <EmptySpace max="-2" attributes="0"/>
                       <Group type="103" groupAlignment="3" attributes="0">
                           <Component id="jLabel3" alignment="3" min="-2" max="-2" attributes="0"/>
-                          <Component id="MonthSpinner" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="monthSpinner" alignment="3" min="-2" max="-2" attributes="0"/>
                           <Component id="jLabel4" alignment="3" min="-2" max="-2" attributes="0"/>
-                          <Component id="DaySpinner" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="daySpinner" alignment="3" min="-2" max="-2" attributes="0"/>
                           <Component id="jLabel5" alignment="3" min="-2" max="-2" attributes="0"/>
-                          <Component id="TimeFormattedTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="timeFormattedTextField" alignment="3" min="-2" max="-2" attributes="0"/>
                       </Group>
                       <EmptySpace max="32767" attributes="0"/>
                   </Group>
@@ -346,29 +384,44 @@
             </DimensionLayout>
           </Layout>
           <SubComponents>
-            <Component class="javax.swing.JSpinner" name="MonthSpinner">
+            <Component class="javax.swing.JSpinner" name="monthSpinner">
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
             <Component class="javax.swing.JLabel" name="jLabel3">
               <Properties>
                 <Property name="text" type="java.lang.String" value="Month:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
             <Component class="javax.swing.JLabel" name="jLabel4">
               <Properties>
                 <Property name="text" type="java.lang.String" value="Day:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
-            <Component class="javax.swing.JSpinner" name="DaySpinner">
+            <Component class="javax.swing.JSpinner" name="daySpinner">
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
             <Component class="javax.swing.JLabel" name="jLabel5">
               <Properties>
                 <Property name="text" type="java.lang.String" value="Time:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
-            <Component class="javax.swing.JFormattedTextField" name="TimeFormattedTextField">
-              <Properties>
-                <Property name="text" type="java.lang.String" value="jFormattedTextField1"/>
-              </Properties>
+            <Component class="javax.swing.JFormattedTextField" name="timeFormattedTextField">
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
           </SubComponents>
         </Container>
@@ -382,6 +435,9 @@
               </Border>
             </Property>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
 
           <Layout>
             <DimensionLayout dim="0">
@@ -407,17 +463,15 @@
                               </Group>
                           </Group>
                       </Group>
-                      <EmptySpace pref="45" max="32767" attributes="0"/>
+                      <EmptySpace pref="31" max="32767" attributes="0"/>
                       <Group type="103" groupAlignment="1" attributes="0">
-                          <Component id="jLabel12" min="-2" max="-2" attributes="0"/>
                           <Component id="jLabel14" min="-2" max="-2" attributes="0"/>
                           <Component id="jLabel9" min="-2" max="-2" attributes="0"/>
                       </Group>
                       <EmptySpace max="-2" attributes="0"/>
                       <Group type="103" groupAlignment="0" max="-2" attributes="0">
-                          <Component id="phytCodeCombo" linkSize="8" alignment="0" max="32767" attributes="1"/>
-                          <Component id="quadrantCombo" linkSize="8" alignment="0" max="32767" attributes="1"/>
-                          <Component id="territoryCodeCombo" linkSize="8" alignment="0" min="-2" pref="94" max="-2" attributes="1"/>
+                          <Component id="quadrantTextField" max="32767" attributes="1"/>
+                          <Component id="phytCodeCombo" alignment="0" pref="111" max="32767" attributes="1"/>
                       </Group>
                       <EmptySpace max="-2" attributes="0"/>
                   </Group>
@@ -429,9 +483,7 @@
                       <EmptySpace max="-2" attributes="0"/>
                       <Group type="103" groupAlignment="3" attributes="0">
                           <Component id="jLabel11" alignment="3" min="-2" max="-2" attributes="0"/>
-                          <Component id="jLabel12" alignment="3" min="-2" max="-2" attributes="0"/>
                           <Component id="territoryNameCombo" alignment="3" min="-2" max="-2" attributes="0"/>
-                          <Component id="territoryCodeCombo" alignment="3" min="-2" max="-2" attributes="0"/>
                       </Group>
                       <EmptySpace max="-2" attributes="0"/>
                       <Group type="103" groupAlignment="0" attributes="0">
@@ -448,12 +500,12 @@
                                   <Component id="jLabel10" alignment="3" min="-2" max="-2" attributes="0"/>
                                   <Component id="jLabel9" alignment="3" min="-2" max="-2" attributes="0"/>
                                   <Component id="phytCountryCombo" alignment="3" min="-2" max="-2" attributes="0"/>
-                                  <Component id="quadrantCombo" alignment="3" min="-2" max="-2" attributes="0"/>
+                                  <Component id="quadrantTextField" alignment="3" min="-2" max="-2" attributes="0"/>
                               </Group>
                           </Group>
                           <Component id="jLabel14" alignment="0" min="-2" max="-2" attributes="0"/>
                       </Group>
-                      <EmptySpace pref="27" max="32767" attributes="0"/>
+                      <EmptySpace pref="17" max="32767" attributes="0"/>
                   </Group>
               </Group>
             </DimensionLayout>
@@ -463,31 +515,41 @@
               <Properties>
                 <Property name="text" type="java.lang.String" value="Quadrant:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
             <Component class="javax.swing.JLabel" name="jLabel10">
               <Properties>
                 <Property name="text" type="java.lang.String" value="Country:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
             <Component class="javax.swing.JLabel" name="jLabel11">
               <Properties>
                 <Property name="text" type="java.lang.String" value="Territory name:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
-            <Component class="javax.swing.JLabel" name="jLabel12">
-              <Properties>
-                <Property name="text" type="java.lang.String" value="Territory code:"/>
-              </Properties>
-            </Component>
             <Component class="javax.swing.JLabel" name="jLabel13">
               <Properties>
                 <Property name="text" type="java.lang.String" value="Phytochoria name:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
             <Component class="javax.swing.JLabel" name="jLabel14">
               <Properties>
                 <Property name="text" type="java.lang.String" value="Phytochoria code:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
             <Component class="javax.swing.JComboBox" name="territoryNameCombo">
               <Properties>
@@ -497,18 +559,10 @@
               </Properties>
               <AuxValues>
                 <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getTerritories()); "/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)territoryNameCombo).setStrict(true);"/>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
-            <Component class="javax.swing.JComboBox" name="territoryCodeCombo">
-              <Properties>
-                <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
-                  <StringArray count="0"/>
-                </Property>
-              </Properties>
-              <AuxValues>
-                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(items); "/>
-              </AuxValues>
-            </Component>
             <Component class="javax.swing.JComboBox" name="phytNameCombo">
               <Properties>
                 <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
@@ -516,7 +570,9 @@
                 </Property>
               </Properties>
               <AuxValues>
-                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(items); "/>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getPhytNames()); "/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)phytNameCombo).setStrict(true);"/>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
             <Component class="javax.swing.JComboBox" name="phytCodeCombo">
@@ -526,27 +582,26 @@
                 </Property>
               </Properties>
               <AuxValues>
-                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(items); "/>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getPhytCodes()); "/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)phytCodeCombo).setStrict(true);"/>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
-            <Component class="javax.swing.JComboBox" name="quadrantCombo">
+            <Component class="javax.swing.JComboBox" name="phytCountryCombo">
               <Properties>
                 <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
                   <StringArray count="0"/>
                 </Property>
               </Properties>
               <AuxValues>
-                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(items); "/>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getCountries()); "/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)phytCountryCombo).setStrict(false);"/>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
-            <Component class="javax.swing.JComboBox" name="phytCountryCombo">
-              <Properties>
-                <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
-                  <StringArray count="0"/>
-                </Property>
-              </Properties>
+            <Component class="javax.swing.JTextField" name="quadrantTextField">
               <AuxValues>
-                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(items); "/>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
           </SubComponents>
@@ -561,6 +616,9 @@
               </Border>
             </Property>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
 
           <Layout>
             <DimensionLayout dim="0">
@@ -568,17 +626,17 @@
                   <Group type="102" alignment="0" attributes="0">
                       <EmptySpace max="-2" attributes="0"/>
                       <Group type="103" groupAlignment="1" attributes="0">
-                          <Component id="jLabel17" alignment="1" min="-2" max="-2" attributes="0"/>
-                          <Component id="jLabel16" alignment="1" min="-2" max="-2" attributes="0"/>
-                          <Component id="jLabel15" alignment="1" min="-2" max="-2" attributes="0"/>
-                          <Component id="jLabel1" min="-2" max="-2" attributes="0"/>
+                          <Component id="projectLabel" alignment="1" min="-2" max="-2" attributes="0"/>
+                          <Component id="herbariumLabel" alignment="1" min="-2" max="-2" attributes="0"/>
+                          <Component id="publicationLabel" alignment="1" min="-2" max="-2" attributes="0"/>
+                          <Component id="sourceLabel" min="-2" max="-2" attributes="0"/>
                       </Group>
                       <EmptySpace max="-2" attributes="0"/>
                       <Group type="103" groupAlignment="0" max="-2" attributes="0">
+                          <Component id="projectCombo" max="32767" attributes="1"/>
+                          <Component id="publicationCombo" max="32767" attributes="1"/>
                           <Component id="sourceCombo" max="32767" attributes="1"/>
-                          <Component id="HerbariumTextField" alignment="0" pref="113" max="32767" attributes="1"/>
-                          <Component id="MetadataTextField" alignment="0" pref="113" max="32767" attributes="1"/>
-                          <Component id="PublicationTextField" alignment="0" max="32767" attributes="1"/>
+                          <Component id="herbariumTextField" alignment="0" pref="113" max="32767" attributes="1"/>
                       </Group>
                       <EmptySpace max="32767" attributes="0"/>
                   </Group>
@@ -588,23 +646,23 @@
               <Group type="103" groupAlignment="0" attributes="0">
                   <Group type="102" alignment="1" attributes="0">
                       <Group type="103" groupAlignment="3" attributes="0">
-                          <Component id="jLabel1" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="sourceLabel" alignment="3" min="-2" max="-2" attributes="0"/>
                           <Component id="sourceCombo" alignment="3" min="-2" max="-2" attributes="0"/>
                       </Group>
                       <EmptySpace max="32767" attributes="0"/>
-                      <Group type="103" groupAlignment="3" attributes="0">
-                          <Component id="jLabel15" alignment="3" min="-2" max="-2" attributes="0"/>
-                          <Component id="PublicationTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="1" attributes="0">
+                          <Component id="publicationLabel" min="-2" max="-2" attributes="0"/>
+                          <Component id="publicationCombo" min="-2" max="-2" attributes="0"/>
                       </Group>
                       <EmptySpace max="-2" attributes="0"/>
                       <Group type="103" groupAlignment="3" attributes="0">
-                          <Component id="jLabel16" alignment="3" min="-2" max="-2" attributes="0"/>
-                          <Component id="HerbariumTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="herbariumLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="herbariumTextField" alignment="3" min="-2" max="-2" attributes="0"/>
                       </Group>
                       <EmptySpace max="-2" attributes="0"/>
                       <Group type="103" groupAlignment="3" attributes="0">
-                          <Component id="jLabel17" alignment="3" min="-2" max="-2" attributes="0"/>
-                          <Component id="MetadataTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="projectLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="projectCombo" alignment="3" min="-2" max="-2" attributes="0"/>
                       </Group>
                       <EmptySpace max="-2" attributes="0"/>
                   </Group>
@@ -612,49 +670,77 @@
             </DimensionLayout>
           </Layout>
           <SubComponents>
-            <Component class="javax.swing.JLabel" name="jLabel15">
+            <Component class="javax.swing.JLabel" name="publicationLabel">
               <Properties>
                 <Property name="text" type="java.lang.String" value="Publication:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
-            <Component class="javax.swing.JLabel" name="jLabel16">
+            <Component class="javax.swing.JLabel" name="herbariumLabel">
               <Properties>
                 <Property name="text" type="java.lang.String" value="Herbarium:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
-            <Component class="javax.swing.JLabel" name="jLabel17">
+            <Component class="javax.swing.JLabel" name="projectLabel">
               <Properties>
-                <Property name="text" type="java.lang.String" value="Metadata:"/>
+                <Property name="text" type="java.lang.String" value="Project:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
-            <Component class="javax.swing.JTextField" name="PublicationTextField">
-              <Properties>
-                <Property name="text" type="java.lang.String" value="jTextField1"/>
-              </Properties>
+            <Component class="javax.swing.JTextField" name="herbariumTextField">
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
-            <Component class="javax.swing.JTextField" name="HerbariumTextField">
+            <Component class="javax.swing.JLabel" name="sourceLabel">
               <Properties>
-                <Property name="text" type="java.lang.String" value="jTextField2"/>
+                <Property name="text" type="java.lang.String" value="Source:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
-            <Component class="javax.swing.JTextField" name="MetadataTextField">
+            <Component class="javax.swing.JComboBox" name="sourceCombo">
               <Properties>
-                <Property name="text" type="java.lang.String" value="jTextField3"/>
+                <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+                  <StringArray count="0"/>
+                </Property>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getSources()); "/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)sourceCombo).setStrict(false);"/>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
-            <Component class="javax.swing.JLabel" name="jLabel1">
+            <Component class="javax.swing.JComboBox" name="publicationCombo">
               <Properties>
-                <Property name="text" type="java.lang.String" value="Source:"/>
+                <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+                  <StringArray count="0"/>
+                </Property>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getPublications());"/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)publicationCombo).setStrict(true);"/>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
-            <Component class="javax.swing.JComboBox" name="sourceCombo">
+            <Component class="javax.swing.JComboBox" name="projectCombo">
               <Properties>
                 <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
                   <StringArray count="0"/>
                 </Property>
               </Properties>
               <AuxValues>
-                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(items); "/>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getProjects());"/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)projectCombo).setStrict(true);"/>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
           </SubComponents>
@@ -669,13 +755,16 @@
               </Border>
             </Property>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
 
           <Layout>
             <DimensionLayout dim="0">
               <Group type="103" groupAlignment="0" attributes="0">
                   <Group type="102" alignment="0" attributes="0">
                       <EmptySpace max="-2" attributes="0"/>
-                      <Component id="jScrollPane4" pref="250" max="32767" attributes="0"/>
+                      <Component id="jScrollPane4" pref="247" max="32767" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                   </Group>
               </Group>
@@ -683,7 +772,7 @@
             <DimensionLayout dim="1">
               <Group type="103" groupAlignment="0" attributes="0">
                   <Group type="102" alignment="0" attributes="0">
-                      <Component id="jScrollPane4" pref="111" max="32767" attributes="0"/>
+                      <Component id="jScrollPane4" pref="101" max="32767" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                   </Group>
               </Group>
@@ -702,6 +791,9 @@
                     <Property name="columns" type="int" value="20"/>
                     <Property name="rows" type="int" value="5"/>
                   </Properties>
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
                 </Component>
               </SubComponents>
             </Container>
@@ -717,6 +809,9 @@
               </Border>
             </Property>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
 
           <Layout>
             <DimensionLayout dim="0">
@@ -732,9 +827,9 @@
                       </Group>
                       <EmptySpace max="-2" attributes="0"/>
                       <Group type="103" groupAlignment="1" max="-2" attributes="0">
-                          <Component id="LongitudeFormattedTextField" alignment="1" max="32767" attributes="1"/>
-                          <Component id="LatitudeFormattedTextField" alignment="1" min="0" pref="0" max="32767" attributes="1"/>
-                          <Component id="AltitudeFormattedTextField" alignment="1" min="-2" pref="63" max="-2" attributes="1"/>
+                          <Component id="longitudeFormattedTextField" alignment="1" max="32767" attributes="1"/>
+                          <Component id="latitudeFormattedTextField" alignment="1" min="0" pref="0" max="32767" attributes="1"/>
+                          <Component id="altitudeFormattedTextField" alignment="1" min="-2" pref="63" max="-2" attributes="1"/>
                       </Group>
                       <EmptySpace min="-2" pref="25" max="-2" attributes="0"/>
                       <Group type="103" groupAlignment="0" attributes="0">
@@ -753,17 +848,17 @@
                       <Group type="103" groupAlignment="0" attributes="0">
                           <Group type="102" alignment="0" attributes="0">
                               <Group type="103" groupAlignment="3" attributes="0">
-                                  <Component id="AltitudeFormattedTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                                  <Component id="altitudeFormattedTextField" alignment="3" min="-2" max="-2" attributes="0"/>
                                   <Component id="jLabel6" alignment="3" min="-2" max="-2" attributes="0"/>
                               </Group>
                               <EmptySpace min="6" pref="6" max="-2" attributes="0"/>
                               <Group type="103" groupAlignment="3" attributes="0">
-                                  <Component id="LatitudeFormattedTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                                  <Component id="latitudeFormattedTextField" alignment="3" min="-2" max="-2" attributes="0"/>
                                   <Component id="jLabel7" alignment="3" min="-2" max="-2" attributes="0"/>
                               </Group>
                               <EmptySpace max="-2" attributes="0"/>
                               <Group type="103" groupAlignment="3" attributes="0">
-                                  <Component id="LongitudeFormattedTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                                  <Component id="longitudeFormattedTextField" alignment="3" min="-2" max="-2" attributes="0"/>
                                   <Component id="jLabel8" alignment="3" min="-2" max="-2" attributes="0"/>
                               </Group>
                           </Group>
@@ -775,7 +870,7 @@
                               <Component id="SJTSKButton" min="-2" max="-2" attributes="0"/>
                           </Group>
                       </Group>
-                      <EmptySpace pref="32" max="32767" attributes="0"/>
+                      <EmptySpace pref="42" max="32767" attributes="0"/>
                   </Group>
               </Group>
             </DimensionLayout>
@@ -785,40 +880,55 @@
               <Properties>
                 <Property name="text" type="java.lang.String" value="Altitude:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
-            <Component class="javax.swing.JFormattedTextField" name="AltitudeFormattedTextField">
+            <Component class="javax.swing.JFormattedTextField" name="altitudeFormattedTextField">
               <Properties>
-                <Property name="text" type="java.lang.String" value="jFormattedTextField1"/>
                 <Property name="nextFocusableComponent" type="java.awt.Component" editor="org.netbeans.modules.form.ComponentChooserEditor">
-                  <ComponentRef name="LatitudeFormattedTextField"/>
+                  <ComponentRef name="latitudeFormattedTextField"/>
                 </Property>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
-            <Component class="javax.swing.JFormattedTextField" name="LatitudeFormattedTextField">
+            <Component class="javax.swing.JFormattedTextField" name="latitudeFormattedTextField">
               <Properties>
-                <Property name="text" type="java.lang.String" value="jFormattedTextField2"/>
                 <Property name="nextFocusableComponent" type="java.awt.Component" editor="org.netbeans.modules.form.ComponentChooserEditor">
-                  <ComponentRef name="LongitudeFormattedTextField"/>
+                  <ComponentRef name="longitudeFormattedTextField"/>
                 </Property>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
             <Component class="javax.swing.JLabel" name="jLabel7">
               <Properties>
                 <Property name="text" type="java.lang.String" value="Latitude:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
             <Component class="javax.swing.JLabel" name="jLabel8">
               <Properties>
                 <Property name="text" type="java.lang.String" value="Longitude:"/>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
-            <Component class="javax.swing.JFormattedTextField" name="LongitudeFormattedTextField">
+            <Component class="javax.swing.JFormattedTextField" name="longitudeFormattedTextField">
               <Properties>
-                <Property name="text" type="java.lang.String" value="nem"/>
                 <Property name="nextFocusableComponent" type="java.awt.Component" editor="org.netbeans.modules.form.ComponentChooserEditor">
                   <ComponentRef name="WGS84Button"/>
                 </Property>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
             <Component class="javax.swing.JRadioButton" name="WGS84Button">
               <Properties>
@@ -841,6 +951,9 @@
               <Events>
                 <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="WGS84ButtonActionPerformed"/>
               </Events>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
             <Component class="javax.swing.JRadioButton" name="S42Button">
               <Properties>
@@ -860,6 +973,9 @@
                   <ComponentRef name="SJTSKButton"/>
                 </Property>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
             <Component class="javax.swing.JRadioButton" name="SJTSKButton">
               <Properties>
@@ -879,6 +995,9 @@
                   <ComponentRef name="sourceCombo"/>
                 </Property>
               </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
             </Component>
           </SubComponents>
         </Container>
@@ -892,13 +1011,16 @@
               </Border>
             </Property>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
 
           <Layout>
             <DimensionLayout dim="0">
               <Group type="103" groupAlignment="0" attributes="0">
                   <Group type="102" alignment="0" attributes="0">
                       <EmptySpace max="-2" attributes="0"/>
-                      <Component id="jScrollPane5" pref="250" max="32767" attributes="0"/>
+                      <Component id="jScrollPane5" pref="247" max="32767" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                   </Group>
               </Group>
@@ -925,6 +1047,9 @@
                     <Property name="columns" type="int" value="20"/>
                     <Property name="rows" type="int" value="5"/>
                   </Properties>
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
                 </Component>
               </SubComponents>
             </Container>
@@ -983,16 +1108,25 @@
           <Properties>
             <Property name="text" type="java.lang.String" value="Ok"/>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
         </Component>
         <Component class="javax.swing.JButton" name="jButton3">
           <Properties>
             <Property name="text" type="java.lang.String" value="Cancel"/>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
         </Component>
         <Component class="javax.swing.JButton" name="jButton4">
           <Properties>
             <Property name="text" type="java.lang.String" value="Help"/>
           </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
         </Component>
       </SubComponents>
     </Container>

Modified: trunk/src/net/sf/plantlore/client/AddEditView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditView.java	2006-04-19 13:53:07 UTC (rev 155)
+++ trunk/src/net/sf/plantlore/client/AddEditView.java	2006-04-19 14:24:03 UTC (rev 156)
@@ -21,11 +21,22 @@
 public class AddEditView extends javax.swing.JDialog {
     private boolean visible=false;
     private AppCore model;
+    private Object[] row;
+    private AuthorOccurrence ao;
+    private boolean inEditMode = false;
+    private boolean inAddMode = true;
+    
     /** Creates new form AddEdit2 */
-    public AddEditView(java.awt.Frame parent, boolean modal, AppCore model) {
+    public AddEditView(java.awt.Frame parent, boolean modal, AppCore model, boolean edit) {
         super(parent, modal);
         this.model = model;
+        this.inEditMode = edit;
+        this.inAddMode = ! edit;
+        row = model.getSelectedRow();
+        ao = (AuthorOccurrence)row[row.length-1];
         initComponents();
+        if (inEditMode)
+            setComponentData();
         jPanel3.setVisible(visible);
         jPanel2.setPreferredSize(new Dimension(720,170));
         jPanel8.setPreferredSize(new Dimension(720,50));
@@ -43,11 +54,11 @@
         jPanel2 = new javax.swing.JPanel();
         AuthorLabel = new javax.swing.JLabel();
         Object [] items;
-        AuthorComboBox = new AutoComboBox(model.getAuthors());
+        authorComboBox = new AutoComboBox(model.getAuthors());
 
         TownLabel = new javax.swing.JLabel();
         items = new Object[] {"Praha", "Brno", "Turnov", "Trebic"};
-        TownComboBox = new AutoComboBox(model.getVillages());
+        townComboBox = new AutoComboBox(model.getVillages());
         TaxonLabel = new javax.swing.JLabel();
         YearLabel = new javax.swing.JLabel();
         jLabel2 = new javax.swing.JLabel();
@@ -65,44 +76,42 @@
         yearSpinner = new javax.swing.JSpinner();
         jPanel3 = new javax.swing.JPanel();
         jPanel4 = new javax.swing.JPanel();
-        MonthSpinner = new javax.swing.JSpinner();
+        monthSpinner = new javax.swing.JSpinner();
         jLabel3 = new javax.swing.JLabel();
         jLabel4 = new javax.swing.JLabel();
-        DaySpinner = new javax.swing.JSpinner();
+        daySpinner = new javax.swing.JSpinner();
         jLabel5 = new javax.swing.JLabel();
-        TimeFormattedTextField = new javax.swing.JFormattedTextField();
+        timeFormattedTextField = new javax.swing.JFormattedTextField();
         jPanel5 = new javax.swing.JPanel();
         jLabel9 = new javax.swing.JLabel();
         jLabel10 = new javax.swing.JLabel();
         jLabel11 = new javax.swing.JLabel();
-        jLabel12 = new javax.swing.JLabel();
         jLabel13 = new javax.swing.JLabel();
         jLabel14 = new javax.swing.JLabel();
         territoryNameCombo = new AutoComboBox(model.getTerritories());
-        territoryCodeCombo = new AutoComboBox(items);
-        phytNameCombo = new AutoComboBox(items);
-        phytCodeCombo = new AutoComboBox(items);
-        quadrantCombo = new AutoComboBox(items);
-        phytCountryCombo = new AutoComboBox(items);
+        phytNameCombo = new AutoComboBox(model.getPhytNames());
+        phytCodeCombo = new AutoComboBox(model.getPhytCodes());
+        phytCountryCombo = new AutoComboBox(model.getCountries());
+        quadrantTextField = new javax.swing.JTextField();
         jPanel6 = new javax.swing.JPanel();
-        jLabel15 = new javax.swing.JLabel();
-        jLabel16 = new javax.swing.JLabel();
-        jLabel17 = new javax.swing.JLabel();
-        PublicationTextField = new javax.swing.JTextField();
-        HerbariumTextField = new javax.swing.JTextField();
-        MetadataTextField = new javax.swing.JTextField();
-        jLabel1 = new javax.swing.JLabel();
-        sourceCombo = new AutoComboBox(items);
+        publicationLabel = new javax.swing.JLabel();
+        herbariumLabel = new javax.swing.JLabel();
+        projectLabel = new javax.swing.JLabel();
+        herbariumTextField = new javax.swing.JTextField();
+        sourceLabel = new javax.swing.JLabel();
+        sourceCombo = new AutoComboBox(model.getSources());
+        publicationCombo = new AutoComboBox(model.getPublications());
+        projectCombo = new AutoComboBox(model.getProjects());
         jPanel7 = new javax.swing.JPanel();
         jScrollPane4 = new javax.swing.JScrollPane();
         jTextArea2 = new javax.swing.JTextArea();
         jPanel1 = new javax.swing.JPanel();
         jLabel6 = new javax.swing.JLabel();
-        AltitudeFormattedTextField = new javax.swing.JFormattedTextField();
-        LatitudeFormattedTextField = new javax.swing.JFormattedTextField();
+        altitudeFormattedTextField = new javax.swing.JFormattedTextField();
+        latitudeFormattedTextField = new javax.swing.JFormattedTextField();
         jLabel7 = new javax.swing.JLabel();
         jLabel8 = new javax.swing.JLabel();
-        LongitudeFormattedTextField = new javax.swing.JFormattedTextField();
+        longitudeFormattedTextField = new javax.swing.JFormattedTextField();
         WGS84Button = new javax.swing.JRadioButton();
         S42Button = new javax.swing.JRadioButton();
         SJTSKButton = new javax.swing.JRadioButton();
@@ -120,14 +129,17 @@
         jPanel2.setPreferredSize(new java.awt.Dimension(700, 200));
         AuthorLabel.setText("Author:");
 
-        AuthorComboBox.addActionListener(new java.awt.event.ActionListener() {
+        ((AutoComboBox)authorComboBox).setStrict(true);
+        authorComboBox.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
-                AuthorComboBoxActionPerformed(evt);
+                authorComboBoxActionPerformed(evt);
             }
         });
 
         TownLabel.setText("Nearest bigger seat:");
 
+        ((AutoComboBox)townComboBox).setStrict(true);
+
         TaxonLabel.setText("Taxon:");
 
         YearLabel.setText("Year:");
@@ -170,7 +182,7 @@
                         .add(yearSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                         .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 80, Short.MAX_VALUE)
                         .add(checklistButton))
-                    .add(AuthorComboBox, 0, 245, Short.MAX_VALUE)
+                    .add(authorComboBox, 0, 245, Short.MAX_VALUE)
                     .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
@@ -179,7 +191,7 @@
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
-                    .add(TownComboBox, 0, 358, Short.MAX_VALUE)
+                    .add(townComboBox, 0, 358, Short.MAX_VALUE)
                     .add(jToggleButton1))
                 .addContainerGap())
         );
@@ -188,9 +200,9 @@
             .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                     .add(AuthorLabel)
-                    .add(AuthorComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(authorComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(TownLabel)
-                    .add(TownComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(townComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jPanel2Layout.createSequentialGroup()
@@ -220,8 +232,6 @@
 
         jLabel5.setText("Time:");
 
-        TimeFormattedTextField.setText("jFormattedTextField1");
-
         org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
         jPanel4.setLayout(jPanel4Layout);
         jPanel4Layout.setHorizontalGroup(
@@ -230,15 +240,15 @@
                 .addContainerGap()
                 .add(jLabel3)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                .add(MonthSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .add(monthSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jLabel4)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                .add(DaySpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .add(daySpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jLabel5)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                .add(TimeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .add(timeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                 .addContainerGap(65, Short.MAX_VALUE))
         );
         jPanel4Layout.setVerticalGroup(
@@ -247,11 +257,11 @@
                 .addContainerGap()
                 .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                     .add(jLabel3)
-                    .add(MonthSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(monthSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(jLabel4)
-                    .add(DaySpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(daySpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(jLabel5)
-                    .add(TimeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(timeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         );
 
@@ -262,12 +272,18 @@
 
         jLabel11.setText("Territory name:");
 
-        jLabel12.setText("Territory code:");
-
         jLabel13.setText("Phytochoria name:");
 
         jLabel14.setText("Phytochoria code:");
 
+        ((AutoComboBox)territoryNameCombo).setStrict(true);
+
+        ((AutoComboBox)phytNameCombo).setStrict(true);
+
+        ((AutoComboBox)phytCodeCombo).setStrict(true);
+
+        ((AutoComboBox)phytCountryCombo).setStrict(false);
+
         org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
         jPanel5.setLayout(jPanel5Layout);
         jPanel5Layout.setHorizontalGroup(
@@ -288,21 +304,17 @@
                         .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                             .add(phytCountryCombo, 0, 99, Short.MAX_VALUE)
                             .add(phytNameCombo, 0, 99, Short.MAX_VALUE))))
-                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 45, Short.MAX_VALUE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 31, Short.MAX_VALUE)
                 .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
-                    .add(jLabel12)
                     .add(jLabel14)
                     .add(jLabel9))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
-                    .add(phytCodeCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
-                    .add(quadrantCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
-                    .add(territoryCodeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(quadrantTextField)
+                    .add(phytCodeCombo, 0, 111, Short.MAX_VALUE))
                 .addContainerGap())
         );
 
-        jPanel5Layout.linkSize(new java.awt.Component[] {phytCodeCombo, quadrantCombo, territoryCodeCombo}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
-
         jPanel5Layout.linkSize(new java.awt.Component[] {phytCountryCombo, phytNameCombo, territoryNameCombo}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
 
         jPanel5Layout.setVerticalGroup(
@@ -311,9 +323,7 @@
                 .addContainerGap()
                 .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                     .add(jLabel11)
-                    .add(jLabel12)
-                    .add(territoryNameCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                    .add(territoryCodeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(territoryNameCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jPanel5Layout.createSequentialGroup()
@@ -327,25 +337,25 @@
                             .add(jLabel10)
                             .add(jLabel9)
                             .add(phytCountryCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                            .add(quadrantCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
+                            .add(quadrantTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                     .add(jLabel14))
-                .addContainerGap(27, Short.MAX_VALUE))
+                .addContainerGap(17, Short.MAX_VALUE))
         );
 
         jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Other", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
-        jLabel15.setText("Publication:");
+        publicationLabel.setText("Publication:");
 
-        jLabel16.setText("Herbarium:");
+        herbariumLabel.setText("Herbarium:");
 
-        jLabel17.setText("Metadata:");
+        projectLabel.setText("Project:");
 
-        PublicationTextField.setText("jTextField1");
+        sourceLabel.setText("Source:");
 
-        HerbariumTextField.setText("jTextField2");
+        ((AutoComboBox)sourceCombo).setStrict(false);
 
-        MetadataTextField.setText("jTextField3");
+        ((AutoComboBox)publicationCombo).setStrict(true);
 
-        jLabel1.setText("Source:");
+        ((AutoComboBox)projectCombo).setStrict(true);
 
         org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
         jPanel6.setLayout(jPanel6Layout);
@@ -354,36 +364,36 @@
             .add(jPanel6Layout.createSequentialGroup()
                 .addContainerGap()
                 .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
-                    .add(jLabel17)
-                    .add(jLabel16)
-                    .add(jLabel15)
-                    .add(jLabel1))
+                    .add(projectLabel)
+                    .add(herbariumLabel)
+                    .add(publicationLabel)
+                    .add(sourceLabel))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
+                    .add(projectCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                    .add(publicationCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .add(sourceCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
-                    .add(HerbariumTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
-                    .add(MetadataTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
-                    .add(PublicationTextField))
+                    .add(herbariumTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                 .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         );
         jPanel6Layout.setVerticalGroup(
             jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                 .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                    .add(jLabel1)
+                    .add(sourceLabel)
                     .add(sourceCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
-                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                    .add(jLabel15)
-                    .add(PublicationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                    .add(publicationLabel)
+                    .add(publicationCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                    .add(jLabel16)
-                    .add(HerbariumTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(herbariumLabel)
+                    .add(herbariumTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                    .add(jLabel17)
-                    .add(MetadataTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(projectLabel)
+                    .add(projectCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addContainerGap())
         );
 
@@ -398,31 +408,28 @@
             jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(jPanel7Layout.createSequentialGroup()
                 .addContainerGap()
-                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
+                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                 .addContainerGap())
         );
         jPanel7Layout.setVerticalGroup(
             jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(jPanel7Layout.createSequentialGroup()
-                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
+                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                 .addContainerGap())
         );
 
         jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "GPS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10)));
         jLabel6.setText("Altitude:");
 
-        AltitudeFormattedTextField.setText("jFormattedTextField1");
-        AltitudeFormattedTextField.setNextFocusableComponent(LatitudeFormattedTextField);
+        altitudeFormattedTextField.setNextFocusableComponent(latitudeFormattedTextField);
 
-        LatitudeFormattedTextField.setText("jFormattedTextField2");
-        LatitudeFormattedTextField.setNextFocusableComponent(LongitudeFormattedTextField);
+        latitudeFormattedTextField.setNextFocusableComponent(longitudeFormattedTextField);
 
         jLabel7.setText("Latitude:");
 
         jLabel8.setText("Longitude:");
 
-        LongitudeFormattedTextField.setText("nem");
-        LongitudeFormattedTextField.setNextFocusableComponent(WGS84Button);
+        longitudeFormattedTextField.setNextFocusableComponent(WGS84Button);
 
         convertCoordinatesGroup.add(WGS84Button);
         WGS84Button.setText("WGS84");
@@ -460,9 +467,9 @@
                     .add(jLabel8))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
-                    .add(LongitudeFormattedTextField)
-                    .add(LatitudeFormattedTextField, 0, 0, Short.MAX_VALUE)
-                    .add(AltitudeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(longitudeFormattedTextField)
+                    .add(latitudeFormattedTextField, 0, 0, Short.MAX_VALUE)
+                    .add(altitudeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .add(25, 25, 25)
                 .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(S42Button)
@@ -477,15 +484,15 @@
                 .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jPanel1Layout.createSequentialGroup()
                         .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                            .add(AltitudeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(altitudeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                             .add(jLabel6))
                         .add(6, 6, 6)
                         .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                            .add(LatitudeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(latitudeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                             .add(jLabel7))
                         .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                         .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                            .add(LongitudeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(longitudeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                             .add(jLabel8)))
                     .add(jPanel1Layout.createSequentialGroup()
                         .add(WGS84Button)
@@ -493,7 +500,7 @@
                         .add(S42Button)
                         .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                         .add(SJTSKButton)))
-                .addContainerGap(32, Short.MAX_VALUE))
+                .addContainerGap(42, Short.MAX_VALUE))
         );
 
         jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ocurrence note", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
@@ -507,7 +514,7 @@
             jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(jPanel9Layout.createSequentialGroup()
                 .addContainerGap()
-                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
+                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                 .addContainerGap())
         );
         jPanel9Layout.setVerticalGroup(
@@ -532,7 +539,7 @@
                         .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                             .add(jPanel3Layout.createSequentialGroup()
                                 .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 27, Short.MAX_VALUE)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 30, Short.MAX_VALUE)
                                 .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                             .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                         .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
@@ -620,88 +627,114 @@
 // TODO add your handling code here:
     }//GEN-LAST:event_jToggleButton1MouseClicked
 
-    private void AuthorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorComboBoxActionPerformed
+    private void authorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorComboBoxActionPerformed
 // TODO add your handling code here:
-    }//GEN-LAST:event_AuthorComboBoxActionPerformed
+    }//GEN-LAST:event_authorComboBoxActionPerformed
     
+    private void setComponentData()
+    {
+        authorComboBox.setSelectedItem(new Pair(ao.getAuthor().getWholeName(),ao.getAuthor().getId()));        
+        townComboBox.setSelectedItem(new Pair(ao.getOccurrence().getHabitat().getNearestVillage().getName(), ao.getOccurrence().getHabitat().getNearestVillage().getId()));
+        taxonTextArea.insert((String)row[2],0);
+        descriptionArea.setText((String)row[5]);
+        yearSpinner.setValue((Integer)row[6]);
+        
+        jTextArea2.setText((String)row[13]);
+        jTextArea3.setText((String)row[12]);
+        territoryNameCombo.setSelectedItem(new Pair(ao.getOccurrence().getHabitat().getTerritory().getName(),ao.getOccurrence().getHabitat().getTerritory().getId()));
+        phytNameCombo.setSelectedItem(new Pair(ao.getOccurrence().getHabitat().getPhytochorion().getName(), ao.getOccurrence().getHabitat().getPhytochorion().getId()));
+        phytCodeCombo.setSelectedItem(new Pair(ao.getOccurrence().getHabitat().getPhytochorion().getCode(), ao.getOccurrence().getHabitat().getPhytochorion().getId()));
+        phytCountryCombo.setSelectedItem(ao.getOccurrence().getHabitat().getCountry());
+        quadrantTextField.setText(ao.getOccurrence().getHabitat().getQuadrant());
+        
+        altitudeFormattedTextField.setText(""+ao.getOccurrence().getHabitat().getAltitude());
+        longitudeFormattedTextField.setText(""+ao.getOccurrence().getHabitat().getLongitude());
+        latitudeFormattedTextField.setText(""+ao.getOccurrence().getHabitat().getLatitude());
+        sourceCombo.setSelectedItem(ao.getOccurrence().getDataSource());
+        publicationCombo.setSelectedItem(new Pair(ao.getOccurrence().getPublication().getReferenceCitation(), ao.getOccurrence().getPublication().getId()));
+        herbariumTextField.setText(ao.getOccurrence().getHerbarium());
+        
+        monthSpinner.setValue(ao.getOccurrence().getMonthCollected());
+        daySpinner.setValue(ao.getOccurrence().getDayCollected());
+        timeFormattedTextField.setValue(ao.getOccurrence().getTimeCollected());
+    }
+    
     /**
      * @param args the command line arguments
      */
     public static void main(String args[]) {
         java.awt.EventQueue.invokeLater(new Runnable() {
             public void run() {
-                new AddEditView(new javax.swing.JFrame(), true, null).setVisible(true);
+                new AddEditView(new javax.swing.JFrame(), true, null, false).setVisible(true);
             }
         });
     }
     
     // Variables declaration - do not modify//GEN-BEGIN:variables
-    private javax.swing.JFormattedTextField AltitudeFormattedTextField;
-    private javax.swing.JComboBox AuthorComboBox;
-    private javax.swing.JLabel AuthorLabel;
-    private javax.swing.JSpinner DaySpinner;
-    private javax.swing.JTextField HerbariumTextField;
-    private javax.swing.JFormattedTextField LatitudeFormattedTextField;
-    private javax.swing.JFormattedTextField LongitudeFormattedTextField;
-    private javax.swing.JTextField MetadataTextField;
-    private javax.swing.JSpinner MonthSpinner;
-    private javax.swing.JTextField PublicationTextField;
-    private javax.swing.JRadioButton S42Button;
-    private javax.swing.JRadioButton SJTSKButton;
-    private javax.swing.JLabel TaxonLabel;
-    private javax.swing.JFormattedTextField TimeFormattedTextField;
-    private javax.swing.JComboBox TownComboBox;
-    private javax.swing.JLabel TownLabel;
-    private javax.swing.JRadioButton WGS84Button;
-    private javax.swing.JLabel YearLabel;
-    private javax.swing.JButton checklistButton;
+    protected javax.swing.JLabel AuthorLabel;
+    protected javax.swing.JRadioButton S42Button;
+    protected javax.swing.JRadioButton SJTSKButton;
+    protected javax.swing.JLabel TaxonLabel;
+    protected javax.swing.JLabel TownLabel;
+    protected javax.swing.JRadioButton WGS84Button;
+    protected javax.swing.JLabel YearLabel;
+    protected javax.swing.JFormattedTextField altitudeFormattedTextField;
+    protected javax.swing.JComboBox authorComboBox;
+    protected javax.swing.JButton checklistButton;
     private javax.swing.ButtonGroup convertCoordinatesGroup;
-    private javax.swing.JTextArea descriptionArea;
-    private javax.swing.JButton jButton2;
-    private javax.swing.JButton jButton3;
-    private javax.swing.JButton jButton4;
-    private javax.swing.JLabel jLabel1;
-    private javax.swing.JLabel jLabel10;
-    private javax.swing.JLabel jLabel11;
-    private javax.swing.JLabel jLabel12;
-    private javax.swing.JLabel jLabel13;
-    private javax.swing.JLabel jLabel14;
-    private javax.swing.JLabel jLabel15;
-    private javax.swing.JLabel jLabel16;
-    private javax.swing.JLabel jLabel17;
-    private javax.swing.JLabel jLabel2;
-    private javax.swing.JLabel jLabel3;
-    private javax.swing.JLabel jLabel4;
-    private javax.swing.JLabel jLabel5;
-    private javax.swing.JLabel jLabel6;
-    private javax.swing.JLabel jLabel7;
-    private javax.swing.JLabel jLabel8;
-    private javax.swing.JLabel jLabel9;
-    private javax.swing.JPanel jPanel1;
-    private javax.swing.JPanel jPanel2;
+    protected javax.swing.JSpinner daySpinner;
+    protected javax.swing.JTextArea descriptionArea;
+    protected javax.swing.JLabel herbariumLabel;
+    protected javax.swing.JTextField herbariumTextField;
+    protected javax.swing.JButton jButton2;
+    protected javax.swing.JButton jButton3;
+    protected javax.swing.JButton jButton4;
+    protected javax.swing.JLabel jLabel10;
+    protected javax.swing.JLabel jLabel11;
+    protected javax.swing.JLabel jLabel13;
+    protected javax.swing.JLabel jLabel14;
+    protected javax.swing.JLabel jLabel2;
+    protected javax.swing.JLabel jLabel3;
+    protected javax.swing.JLabel jLabel4;
+    protected javax.swing.JLabel jLabel5;
+    protected javax.swing.JLabel jLabel6;
+    protected javax.swing.JLabel jLabel7;
+    protected javax.swing.JLabel jLabel8;
+    protected javax.swing.JLabel jLabel9;
+    protected javax.swing.JPanel jPanel1;
+    protected javax.swing.JPanel jPanel2;
     private javax.swing.JPanel jPanel3;
-    private javax.swing.JPanel jPanel4;
-    private javax.swing.JPanel jPanel5;
-    private javax.swing.JPanel jPanel6;
-    private javax.swing.JPanel jPanel7;
+    protected javax.swing.JPanel jPanel4;
+    protected javax.swing.JPanel jPanel5;
+    protected javax.swing.JPanel jPanel6;
+    protected javax.swing.JPanel jPanel7;
     private javax.swing.JPanel jPanel8;
-    private javax.swing.JPanel jPanel9;
+    protected javax.swing.JPanel jPanel9;
     private javax.swing.JScrollPane jScrollPane2;
     private javax.swing.JScrollPane jScrollPane3;
     private javax.swing.JScrollPane jScrollPane4;
     private javax.swing.JScrollPane jScrollPane5;
-    private javax.swing.JTextArea jTextArea2;
-    private javax.swing.JTextArea jTextArea3;
-    private javax.swing.JToggleButton jToggleButton1;
-    private javax.swing.JComboBox phytCodeCombo;
-    private javax.swing.JComboBox phytCountryCombo;
-    private javax.swing.JComboBox phytNameCombo;
-    private javax.swing.JComboBox quadrantCombo;
-    private javax.swing.JComboBox sourceCombo;
-    private javax.swing.JTextArea taxonTextArea;
-    private javax.swing.JComboBox territoryCodeCombo;
-    private javax.swing.JComboBox territoryNameCombo;
-    private javax.swing.JSpinner yearSpinner;
+    protected javax.swing.JTextArea jTextArea2;
+    protected javax.swing.JTextArea jTextArea3;
+    protected javax.swing.JToggleButton jToggleButton1;
+    protected javax.swing.JFormattedTextField latitudeFormattedTextField;
+    protected javax.swing.JFormattedTextField longitudeFormattedTextField;
+    protected javax.swing.JSpinner monthSpinner;
+    protected javax.swing.JComboBox phytCodeCombo;
+    protected javax.swing.JComboBox phytCountryCombo;
+    protected javax.swing.JComboBox phytNameCombo;
+    protected javax.swing.JComboBox projectCombo;
+    protected javax.swing.JLabel projectLabel;
+    protected javax.swing.JComboBox publicationCombo;
+    protected javax.swing.JLabel publicationLabel;
+    protected javax.swing.JTextField quadrantTextField;
+    protected javax.swing.JComboBox sourceCombo;
+    protected javax.swing.JLabel sourceLabel;
+    protected javax.swing.JTextArea taxonTextArea;
+    protected javax.swing.JComboBox territoryNameCombo;
+    protected javax.swing.JFormattedTextField timeFormattedTextField;
+    protected javax.swing.JComboBox townComboBox;
+    protected javax.swing.JSpinner yearSpinner;
     // End of variables declaration//GEN-END:variables
     
 }

Modified: trunk/src/net/sf/plantlore/client/AppCore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-19 13:53:07 UTC (rev 155)
+++ trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-19 14:24:03 UTC (rev 156)
@@ -14,7 +14,12 @@
 import net.sf.plantlore.common.Pair;
 import net.sf.plantlore.common.PlantloreConstants;
 import net.sf.plantlore.common.record.Author;
+import net.sf.plantlore.common.record.Habitat;
+import net.sf.plantlore.common.record.Metadata;
+import net.sf.plantlore.common.record.Occurrence;
+import net.sf.plantlore.common.record.Phytochorion;
 import net.sf.plantlore.common.record.Plant;
+import net.sf.plantlore.common.record.Publication;
 import net.sf.plantlore.common.record.Territory;
 import net.sf.plantlore.common.record.Village;
 
@@ -41,8 +46,14 @@
     private Pair<String, Integer>[] authors = null;
     private Pair<String, Integer>[] villages = null;
     private Pair<String, Integer>[] territories = null;
+    private Pair<String, Integer>[] phytNames = null;
+    private Pair<String, Integer>[] phytCodes = null;
+    private String[] countries = null;
+    private String[] sources = null;
+    private Pair<String, Integer>[] publications = null;
+    private Pair<String, Integer>[] projects = null;
 
-    private int selectedRow;
+    private int selectedRow = 0;
 
     /** Creates a new instance of AppCore */
     public AppCore()
@@ -218,6 +229,16 @@
         logger.debug("Selected row #"+i);
     }
     
+    public int getSelectedRowNumber()
+    {
+        return selectedRow;
+    }
+    
+    public Object[] getSelectedRow()
+    {
+        return tableModel.getRow(selectedRow);
+    }
+    
     public void savePreferences() {
         logger.info("Saving main window preferences.");
         prefs.putInt("recordsPerPage", recordsPerPage);
@@ -238,6 +259,7 @@
                 sq.addOrder(PlantloreConstants.DIRECT_ASC, Plant.TAXON);
                 resultid = database.executeQuery(sq);
                 resultsCount = database.getNumRows(resultid);
+                System.out.println("getPlants(): we got "+resultsCount+" results.");
                 records = database.more(resultid, 1, resultsCount);
                 plants = new Pair[resultsCount];
                 for (int i = 1; i <= resultsCount; i++)
@@ -348,4 +370,216 @@
         } else
             return territories;
     }
+    
+    public Pair<String, Integer>[] getPhytNames() {
+        if (phytNames == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Phytochorion p;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Phytochorion.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Phytochorion.NAME);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                phytNames = new Pair[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    p = (Phytochorion)((Object[])records[i-1])[0];
+                    phytNames[i-1] = new Pair<String,Integer>(p.getName(), p.getId());
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return phytNames;
+        } else
+            return phytNames;
+    }
+    
+    public Pair<String, Integer>[] getPhytCodes() {
+        if (phytCodes == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Phytochorion p;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Phytochorion.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Phytochorion.CODE);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                phytCodes = new Pair[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    p = (Phytochorion)((Object[])records[i-1])[0];
+                    phytCodes[i-1] = new Pair<String,Integer>(p.getCode(), p.getId());
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return phytCodes;
+        } else
+            return phytCodes;
+    }
+    
+    public String[] getCountries() {
+        if (countries == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            int uniqueCount = 0;
+            String[] countriesTemp;
+            Object[] records;
+            Habitat h;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Habitat.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Habitat.COUNTRY);
+                resultid = database.executeQuery(sq); // the values can be doubled, we need to filter them 
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                countriesTemp = new String[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    h = (Habitat)((Object[])records[i-1])[0];
+                    if (h.getCountry() ==  null)
+                        System.out.println("\twas null");
+                    if (i == 1) {
+                        countriesTemp[0] = h.getCountry();
+                        uniqueCount++;
+                        continue;
+                    }
+                        
+                    if (h.getCountry()!=null && !h.getCountry().equals(countriesTemp[uniqueCount-1])) { //filter duplicates and null values
+                        countriesTemp[uniqueCount] = h.getCountry();
+                        uniqueCount++;
+                    }
+                }
+                
+                countries = new String[uniqueCount];
+                for (int i = 0; i < uniqueCount; i++) {
+                    countries[i] = countriesTemp[i];
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return countries;
+        } else
+            return countries;        
+    }
+    
+    public String[] getSources() {
+        if (sources == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Occurrence o;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Occurrence.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Occurrence.DATASOURCE);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                sources = new String[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    o = (Occurrence)((Object[])records[i-1])[0];
+                    sources[i-1] = o.getDataSource();
+                    System.out.println("Sources: \""+o.getDataSource()+"\"");
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return sources;
+        } else
+            return sources;
+    }
+    
+    public Pair<String, Integer>[] getPublications() {
+        if (publications == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Publication p;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Publication.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Publication.REFERENCECITATION);
+                sq.addProjection(PlantloreConstants.PROJ_DISTINCT,Publication.REFERENCECITATION);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                publications = new Pair[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    p = (Publication)((Object[])records[i-1])[0];
+                    publications[i-1] = new Pair(p.getReferenceCitation(), p.getId());
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return publications;
+        } else
+            return publications;
+    }
+
+    public Pair<String, Integer>[] getProjects() {
+        if (projects == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Metadata m;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Metadata.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Metadata.DATASETTITLE);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                projects = new Pair[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    m = (Metadata)((Object[])records[i-1])[0];
+                    projects[i-1] = new Pair(m.getDataSetTitle(), m.getId());
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return projects;
+        } else
+            return projects;
+    }
 }

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-19 13:53:07 UTC (rev 155)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-19 14:24:03 UTC (rev 156)
@@ -263,7 +263,9 @@
         } 
 
         public void actionPerformed(ActionEvent actionEvent) {
-            System.out.println("Add pressed");
+            AddEditView addEdit = new AddEditView(view, true, model, false);
+            addEdit.setTitle("Add a new occurrence");
+            addEdit.setVisible(true);
         }
     }
     
@@ -275,7 +277,8 @@
         } 
 
         public void actionPerformed(ActionEvent actionEvent) {
-            AddEditView addEdit = new AddEditView(view, true, model);
+            AddEditView addEdit = new AddEditView(view, true, model, true);
+            addEdit.setTitle("Edit occurrence");
             addEdit.setVisible(true);
         }
     }

Modified: trunk/src/net/sf/plantlore/client/AppCoreView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-19 13:53:07 UTC (rev 155)
+++ trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-19 14:24:03 UTC (rev 156)
@@ -96,7 +96,7 @@
     private JScrollPane overviewScrollPane;
     private JLabel statusLabel;
     
-    private JTable overview = new JTable();
+    protected JTable overview = new JTable();
     private JToolBar mainToolBar;
     private JToolBar pageToolBar;
     private JFormattedTextField recordsPerPage = new JFormattedTextField(NumberFormat.getIntegerInstance());
@@ -116,6 +116,8 @@
     {
         recordsCount.setText(""+model.getResultsCount());
         pageStatus.setText(""+model.getCurrentPage()+"/"+model.getPagesCount());
+        //FIXME: change selection only if really required
+        overview.changeSelection(model.getSelectedRowNumber(),0,false,false);
     }
     
     /** Calls all the constructing init methods.
@@ -224,7 +226,6 @@
         mainPane.add(overviewScrollPane, BorderLayout.CENTER);
         
         pageToolBar = new JToolBar();
-        recordsPerPage.setValue(new Integer(model.getRecordsPerPage()));
         recordsPerPage.setPreferredSize(new Dimension(40, 10));
         recordsPerPage.setHorizontalAlignment(JTextField.CENTER);
         pageToolBar.setFloatable(false);
@@ -288,6 +289,7 @@
             tc = overview.getColumnModel().getColumn(i);
             tc.setPreferredWidth(otm.getColumnSize(i));
         }
+        recordsPerPage.setValue(new Integer(model.getRecordsPerPage()));        
         pack();
     }
     

Modified: trunk/src/net/sf/plantlore/client/OverviewTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-19 13:53:07 UTC (rev 155)
+++ trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-19 14:24:03 UTC (rev 156)
@@ -168,8 +168,8 @@
                 recordsArray.add(r);
             else 
                 r = recordsArray.get(from+i-2);//array starts from 0 whereas records are numbered from 1
-                
-            row = new Object[COLUMN_COUNT];
+            
+            row = new Object[COLUMN_COUNT + 1]; //we'll store the record id in the last column
             row[0] = r.selected;
             row[1] = r.number;
             row[2] = result.getOccurrence().getPlant().getTaxon();
@@ -194,6 +194,7 @@
             row[21] = result.getOccurrence().getMonthCollected();
             row[22] = result.getOccurrence().getDayCollected();
             row[23] = result.getOccurrence().getTimeCollected();
+            row[24] = result; //won't  be displayed, because in getColumnCount we pretend not to have this column
             data[i-1] = row;
         }//i        
     }
@@ -214,6 +215,10 @@
         return result;
     }
     
+    public Object[] getRow(int i) {
+        return data[i];
+    }
+    
     public int getRowCount() {
         return data.length;
     }

Modified: trunk/src/net/sf/plantlore/client/Plantlore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/Plantlore.java	2006-04-19 13:53:07 UTC (rev 155)
+++ trunk/src/net/sf/plantlore/client/Plantlore.java	2006-04-19 14:24:03 UTC (rev 156)
@@ -79,6 +79,7 @@
      *
      */
     private void run() {
+        try {
         logger.info("Constructing AppCore MVC");
         splashScreen = new SplashScreen("resources/splashscreen.gif");
         splashScreen.splash();
@@ -89,6 +90,9 @@
         view.setVisible(true);
         EventQueue.invokeLater( new SplashScreenCloser() );
         logger.info("AppCore MVC constructed. Plantlore client should be visible now.");
+        } catch(RuntimeException e) {
+            new ExceptionDialog(view,"Some exception was thrown: "+e);
+        }
     }
     
     /**



From lada at berlios.de  Thu Apr 20 01:48:46 2006
From: lada at berlios.de (lada at berlios.de)
Date: Thu, 20 Apr 2006 01:48:46 +0200
Subject: [Plantlore-dev] r157 - trunk/analysis/biocase
Message-ID: <200604192348.k3JNmkDV013602@sheep.berlios.de>

Author: lada
Date: 2006-04-20 01:47:48 +0200 (Thu, 20 Apr 2006)
New Revision: 157

Added:
   trunk/analysis/biocase/installation.odt
Log:
Add actual installation manual for Biocase 2.3.1. New version of Biocase (2.4.0) exist.

Added: trunk/analysis/biocase/installation.odt
===================================================================
(Binary files differ)


Property changes on: trunk/analysis/biocase/installation.odt
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From krater at berlios.de  Thu Apr 20 18:39:49 2006
From: krater at berlios.de (krater at berlios.de)
Date: Thu, 20 Apr 2006 18:39:49 +0200
Subject: [Plantlore-dev] r159 - in trunk/src/net/sf/plantlore: client server server/manager
Message-ID: <200604201639.k3KGdnvu032408@sheep.berlios.de>

Author: krater
Date: 2006-04-20 18:39:31 +0200 (Thu, 20 Apr 2006)
New Revision: 159

Added:
   trunk/src/net/sf/plantlore/server/manager/
   trunk/src/net/sf/plantlore/server/manager/ServerLoginCtrl.java
   trunk/src/net/sf/plantlore/server/manager/ServerLoginView.form
   trunk/src/net/sf/plantlore/server/manager/ServerLoginView.java
   trunk/src/net/sf/plantlore/server/manager/ServerMng.java
   trunk/src/net/sf/plantlore/server/manager/ServerMngCtrl.java
   trunk/src/net/sf/plantlore/server/manager/ServerMngView.form
   trunk/src/net/sf/plantlore/server/manager/ServerMngView.java
Modified:
   trunk/src/net/sf/plantlore/client/Plantlore.java
   trunk/src/net/sf/plantlore/server/Plantlore.java
   trunk/src/net/sf/plantlore/server/RMIServer.java
   trunk/src/net/sf/plantlore/server/RMIServerControl.java
   trunk/src/net/sf/plantlore/server/Server.java
Log:
Server Manager (with GUI).

Modified: trunk/src/net/sf/plantlore/client/Plantlore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/Plantlore.java	2006-04-19 23:51:34 UTC (rev 158)
+++ trunk/src/net/sf/plantlore/client/Plantlore.java	2006-04-20 16:39:31 UTC (rev 159)
@@ -91,7 +91,7 @@
         EventQueue.invokeLater( new SplashScreenCloser() );
         logger.info("AppCore MVC constructed. Plantlore client should be visible now.");
         } catch(RuntimeException e) {
-            new ExceptionDialog(view,"Some exception was thrown: "+e);
+            //new ExceptionDialog(view,"Some exception was thrown: "+e);
         }
     }
     

Modified: trunk/src/net/sf/plantlore/server/Plantlore.java
===================================================================
--- trunk/src/net/sf/plantlore/server/Plantlore.java	2006-04-19 23:51:34 UTC (rev 158)
+++ trunk/src/net/sf/plantlore/server/Plantlore.java	2006-04-20 16:39:31 UTC (rev 159)
@@ -1,11 +1,18 @@
 package net.sf.plantlore.server;
 
 
+import java.io.IOException;
+import java.io.InputStream;
 import java.rmi.registry.LocateRegistry;
 import java.rmi.registry.Registry;
 import java.util.Collection;
+import java.util.Properties;
 
+import org.apache.log4j.PropertyConfigurator;
 
+import net.sf.plantlore.server.manager.*;
+
+
 /**
  * Temporary solution.
  * 
@@ -15,10 +22,30 @@
  */
 public class Plantlore {
 	
-	// Probably some more sophisticated method for obtaining a password from the user :)
-	public static String getPassword() {
-		return "poweroverwhelming";
+	private static final String LOGGER_PROPS = "net/sf/plantlore/config/log4j.properties";
+	
+	
+	public void run() {
+		// Load log4j settings
+        ClassLoader cl = this.getClass().getClassLoader();
+        InputStream is = cl.getResourceAsStream(LOGGER_PROPS);
+        Properties props = new Properties();
+        //FIXME:
+        try {
+            props.load(is);
+        } catch (IOException ex) {
+            ex.printStackTrace();
+        }
+        //maybe CHANGE to configureAndWatch()
+        PropertyConfigurator.configure(props);
+			
+		ServerMng model = new ServerMng();
+        ServerLoginView view = new ServerLoginView(model);
+        /*ServerMngChooseCtrl ctrl = */new ServerLoginCtrl(model, view);
+       	
+        view.setVisible(true);
 	}
+	
 
 	/**
 	 * 
@@ -27,6 +54,9 @@
 	 */
 	public static void main(String[] args) {
 		
+		new Plantlore().run();
+		
+		/*
 		int m = args.length, port = RMIServer.DEFAULT_PORT, id = -1;
 		String command = "start", host = null;
 		
@@ -73,7 +103,7 @@
 					
 			}
 		} catch(Exception e) { System.err.println(e); }
-		
+		*/
 	}
 
 }

Modified: trunk/src/net/sf/plantlore/server/RMIServer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/RMIServer.java	2006-04-19 23:51:34 UTC (rev 158)
+++ trunk/src/net/sf/plantlore/server/RMIServer.java	2006-04-20 16:39:31 UTC (rev 159)
@@ -33,8 +33,8 @@
 	/** The default port where the rmiregistry listens. To that rmiregistry the RemoteDBLayerFactory will be bound to. */
 	public static final int DEFAULT_PORT = Registry.REGISTRY_PORT;
 	
-	private static final String LOGGER_PROPS = "net/sf/plantlore/config/log4j.properties";
 	
+	
 	private RMIRemoteDBLayerFactory remoteFactory = null;
 	private int port = DEFAULT_PORT;
 	private Guard guard = null;
@@ -42,32 +42,18 @@
 	private Logger logger;
 
 	/** Create a new instance of RMIServer running on the default port. */
-	public RMIServer() throws RemoteException, AlreadyBoundException {
-		this(DEFAULT_PORT);
+	public RMIServer(String password) throws RemoteException, AlreadyBoundException {
+		this(DEFAULT_PORT, password);
 	}
 	
 	/** Create a new instance of RMIServer running on the specified port. */
-	public RMIServer(int port) throws RemoteException, AlreadyBoundException {
-		// Load log4j settings
-        ClassLoader cl = this.getClass().getClassLoader();
-        InputStream is = cl.getResourceAsStream(LOGGER_PROPS);
-        Properties props = new Properties();
-        //FIXME:
-        try {
-            props.load(is);
-        } catch (IOException ex) {
-            ex.printStackTrace();
-        }
-        //maybe CHANGE to configureAndWatch()
-        PropertyConfigurator.configure(props);
-        
-        
+	public RMIServer(int port, String password) throws RemoteException, AlreadyBoundException {
 		this.port = port;
 		
 		logger = Logger.getLogger(this.getClass().getPackage().getName());
 		
 		// Control object that will return the server after the client passed a valid certif. information
-		guard = new RMIServerControl(this);
+		guard = new RMIServerControl(this, password);
 		RMI.bind(port, guard, Guard.ID);
 	}
 	
@@ -156,7 +142,7 @@
 		String codebase = "file:/" + ((directory != null) ? directory : System.getProperty("user.dir")) + "/";
 		codebase = codebase.replaceAll(" ", "%20"); // to prevent the MalformedURLException
 		System.setProperty("java.rmi.server.codebase", codebase);
-		System.out.println("java.rmi.server.codebase = " + codebase);
+		//System.out.println("java.rmi.server.codebase = " + codebase);
 		
 		System.setProperty("java.rmi.dgc.leaseValue", "30000"); // 30 seconds, just for DEBUG.REASONS
 	}

Modified: trunk/src/net/sf/plantlore/server/RMIServerControl.java
===================================================================
--- trunk/src/net/sf/plantlore/server/RMIServerControl.java	2006-04-19 23:51:34 UTC (rev 158)
+++ trunk/src/net/sf/plantlore/server/RMIServerControl.java	2006-04-20 16:39:31 UTC (rev 159)
@@ -6,13 +6,15 @@
 public class RMIServerControl extends UnicastRemoteObject implements Guard {
 	
 	private Server server;
+	private String password;
 
-	public RMIServerControl(Server server) throws RemoteException {
+	public RMIServerControl(Server server, String password) throws RemoteException {
 		this.server = server;
+		this.password = password;
 	}
 	
 	public Server certify(String authorizationInfo) throws RemoteException {
-		if(authorizationInfo.equals("poweroverwhelming")) return server;
+		if(authorizationInfo.equals(password)) return server;
 		return null;
 	}
 	

Modified: trunk/src/net/sf/plantlore/server/Server.java
===================================================================
--- trunk/src/net/sf/plantlore/server/Server.java	2006-04-19 23:51:34 UTC (rev 158)
+++ trunk/src/net/sf/plantlore/server/Server.java	2006-04-20 16:39:31 UTC (rev 159)
@@ -23,7 +23,7 @@
 	 * @return Currently connected clients.
 	 * @throws RemoteException	if the RMI encounters an error (network/server).
 	 */
-	Collection<? extends E>	getClients() throws RemoteException;
+	Collection</*? extends */E>	getClients() throws RemoteException;
 	
 	/**
 	 * "Kick" the specified client. The client is disconnected immediately.

Added: trunk/src/net/sf/plantlore/server/manager/ServerLoginCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerLoginCtrl.java	2006-04-19 23:51:34 UTC (rev 158)
+++ trunk/src/net/sf/plantlore/server/manager/ServerLoginCtrl.java	2006-04-20 16:39:31 UTC (rev 159)
@@ -0,0 +1,81 @@
+package net.sf.plantlore.server.manager;
+
+import java.awt.event.ActionEvent;
+import java.rmi.AlreadyBoundException;
+import java.rmi.NotBoundException;
+import java.rmi.RemoteException;
+
+import javax.swing.AbstractAction;
+import javax.swing.JOptionPane;
+
+
+public class ServerLoginCtrl {
+	
+	private ServerMng model;
+	private ServerLoginView view;
+	
+	private ServerMngView serverView;
+	private ServerMngCtrl serverCtrl;
+	
+	
+	
+	
+	public ServerLoginCtrl(ServerMng model, ServerLoginView view) {
+		this.view = view;
+		this.model = model;
+		
+		view.next.addActionListener(new ConnectCreate());
+		view.connectExisting.addActionListener(new SelectExisting());
+		view.createNew.addActionListener(new SelectNew());
+		
+		serverView = new ServerMngView(model);
+		serverCtrl = new ServerMngCtrl(model, serverView);
+	}
+	
+	
+	class ConnectCreate extends AbstractAction {
+		public void actionPerformed(ActionEvent e) {
+			String hp = view.host.getText(), host;
+			int t = hp.indexOf(':'), port = 1099;
+			if(t < 0) host = hp;
+			else { host = hp.substring(0, t); port = Integer.parseInt(hp.substring(t + 1)); }
+			try {
+				model.actAsInstructed(host, port, new String(view.password.getPassword()));
+			} catch(RemoteException re) { 
+				JOptionPane.showMessageDialog(view,
+					    "Unable to connect to the server.\n The server is either not running,\n or there is a network problem.",
+					    "Remoting problem...",
+					    JOptionPane.WARNING_MESSAGE);
+				return;
+			} catch(AlreadyBoundException abe) {
+				JOptionPane.showMessageDialog(view,
+					    "Another server is already running on the selected port (" + abe + "). Didn't you want to connect to it?",
+					    "Server collision problem...",
+					    JOptionPane.WARNING_MESSAGE);
+				return;
+			} catch(NotBoundException nbe) {
+				JOptionPane.showMessageDialog(view,
+					    "There is no server running on the specified host and port (" + nbe + ").",
+					    "Server connection problem...",
+					    JOptionPane.WARNING_MESSAGE);
+				return;
+			}
+			
+			view.setVisible(false);
+			serverView.setVisible(true);
+		}
+	}
+	
+	class SelectNew extends AbstractAction {
+		public void actionPerformed(ActionEvent e) {
+			model.setMode(ServerMng.Mode.CREATE_NEW);
+		}
+	}
+	
+	class SelectExisting extends AbstractAction {
+		public void actionPerformed(ActionEvent e) {
+			model.setMode(ServerMng.Mode.CONNECT_EXISTING);
+		}
+	}
+
+}

Added: trunk/src/net/sf/plantlore/server/manager/ServerLoginView.form
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerLoginView.form	2006-04-19 23:51:34 UTC (rev 158)
+++ trunk/src/net/sf/plantlore/server/manager/ServerLoginView.form	2006-04-20 16:39:31 UTC (rev 159)
@@ -0,0 +1,150 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JDialogFormInfo">
+  <NonVisualComponents>
+    <Component class="javax.swing.ButtonGroup" name="buttonGroup1">
+    </Component>
+  </NonVisualComponents>
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="3"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Component id="imageHere" alignment="0" max="32767" attributes="0"/>
+                  <Component id="createNew" alignment="0" min="-2" max="-2" attributes="0"/>
+                  <Component id="connectExisting" alignment="0" min="-2" max="-2" attributes="0"/>
+                  <Group type="102" alignment="0" attributes="0">
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Component id="jLabel1" alignment="0" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel2" alignment="0" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Component id="host" alignment="0" pref="347" max="32767" attributes="0"/>
+                          <Component id="password" alignment="0" pref="347" max="32767" attributes="0"/>
+                      </Group>
+                  </Group>
+                  <Component id="next" alignment="1" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="imageHere" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="createNew" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="connectExisting" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="jLabel1" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="host" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="jLabel2" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="password" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="next" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="32767" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Component class="javax.swing.JLabel" name="jLabel1">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="Host:port"/>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JLabel" name="jLabel2">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="Password"/>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JTextField" name="host">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="localhost:1099"/>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JPasswordField" name="password">
+    </Component>
+    <Component class="javax.swing.JButton" name="next">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="next"/>
+      </Properties>
+    </Component>
+    <Container class="javax.swing.JPanel" name="imageHere">
+      <Properties>
+        <Property name="background" type="java.awt.Color" editor="org.netbeans.beaninfo.editors.ColorEditor">
+          <Color blue="0" green="0" red="0" type="rgb"/>
+        </Property>
+      </Properties>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <EmptySpace min="0" pref="397" max="32767" attributes="0"/>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <EmptySpace min="0" pref="198" max="32767" attributes="0"/>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+    </Container>
+    <Component class="javax.swing.JRadioButton" name="createNew">
+      <Properties>
+        <Property name="buttonGroup" type="javax.swing.ButtonGroup" editor="org.netbeans.modules.form.RADComponent$ButtonGroupPropertyEditor">
+          <ComponentRef name="buttonGroup1"/>
+        </Property>
+        <Property name="selected" type="boolean" value="true"/>
+        <Property name="text" type="java.lang.String" value="Create and start a new server"/>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.EmptyBorderInfo">
+            <EmptyBorder bottom="0" left="0" right="0" top="0"/>
+          </Border>
+        </Property>
+        <Property name="margin" type="java.awt.Insets" editor="org.netbeans.beaninfo.editors.InsetsEditor">
+          <Insets value="[0, 0, 0, 0]"/>
+        </Property>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JRadioButton" name="connectExisting">
+      <Properties>
+        <Property name="buttonGroup" type="javax.swing.ButtonGroup" editor="org.netbeans.modules.form.RADComponent$ButtonGroupPropertyEditor">
+          <ComponentRef name="buttonGroup1"/>
+        </Property>
+        <Property name="text" type="java.lang.String" value="Connect to a running server"/>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.EmptyBorderInfo">
+            <EmptyBorder bottom="0" left="0" right="0" top="0"/>
+          </Border>
+        </Property>
+        <Property name="margin" type="java.awt.Insets" editor="org.netbeans.beaninfo.editors.InsetsEditor">
+          <Insets value="[0, 0, 0, 0]"/>
+        </Property>
+      </Properties>
+    </Component>
+  </SubComponents>
+</Form>

Added: trunk/src/net/sf/plantlore/server/manager/ServerLoginView.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerLoginView.java	2006-04-19 23:51:34 UTC (rev 158)
+++ trunk/src/net/sf/plantlore/server/manager/ServerLoginView.java	2006-04-20 16:39:31 UTC (rev 159)
@@ -0,0 +1,136 @@
+/*
+ * ServerLoginView.java
+ *
+ * Created on 20. duben 2006, 10:30
+ */
+
+package net.sf.plantlore.server.manager;
+
+import javax.swing.JDialog;
+
+/**
+ *
+ * @author  yaa
+ */
+public class ServerLoginView extends javax.swing.JDialog {
+	
+	ServerMng model;
+    
+    /** Creates new form ServerLoginView */
+    public ServerLoginView(ServerMng model) {
+    	this.model = model;
+        initComponents();
+        setLocationRelativeTo(null); // center of the screen
+        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+        setModal(true);
+    }
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        buttonGroup1 = new javax.swing.ButtonGroup();
+        jLabel1 = new javax.swing.JLabel();
+        jLabel2 = new javax.swing.JLabel();
+        host = new javax.swing.JTextField();
+        password = new javax.swing.JPasswordField();
+        next = new javax.swing.JButton();
+        imageHere = new javax.swing.JPanel();
+        createNew = new javax.swing.JRadioButton();
+        connectExisting = new javax.swing.JRadioButton();
+
+        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
+        jLabel1.setText("Host:port");
+
+        jLabel2.setText("Password");
+
+        host.setText("localhost:1099");
+
+        next.setText("next");
+
+        imageHere.setBackground(new java.awt.Color(0, 0, 0));
+        org.jdesktop.layout.GroupLayout imageHereLayout = new org.jdesktop.layout.GroupLayout(imageHere);
+        imageHere.setLayout(imageHereLayout);
+        imageHereLayout.setHorizontalGroup(
+            imageHereLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(0, 397, Short.MAX_VALUE)
+        );
+        imageHereLayout.setVerticalGroup(
+            imageHereLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(0, 198, Short.MAX_VALUE)
+        );
+
+        buttonGroup1.add(createNew);
+        createNew.setSelected(true);
+        createNew.setText("Create and start a new server");
+        createNew.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
+        createNew.setMargin(new java.awt.Insets(0, 0, 0, 0));
+
+        buttonGroup1.add(connectExisting);
+        connectExisting.setText("Connect to a running server");
+        connectExisting.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
+        connectExisting.setMargin(new java.awt.Insets(0, 0, 0, 0));
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(imageHere, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                    .add(createNew)
+                    .add(connectExisting)
+                    .add(layout.createSequentialGroup()
+                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(jLabel1)
+                            .add(jLabel2))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(host, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
+                            .add(password, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)))
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, next))
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(imageHere, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(createNew)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(connectExisting)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel1)
+                    .add(host, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel2)
+                    .add(password, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(next)
+                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    private javax.swing.ButtonGroup buttonGroup1;
+    protected javax.swing.JRadioButton connectExisting;
+    protected javax.swing.JRadioButton createNew;
+    protected javax.swing.JTextField host;
+    protected javax.swing.JPanel imageHere;
+    private javax.swing.JLabel jLabel1;
+    private javax.swing.JLabel jLabel2;
+    protected javax.swing.JButton next;
+    protected javax.swing.JPasswordField password;
+    // End of variables declaration//GEN-END:variables
+    
+}

Added: trunk/src/net/sf/plantlore/server/manager/ServerMng.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerMng.java	2006-04-19 23:51:34 UTC (rev 158)
+++ trunk/src/net/sf/plantlore/server/manager/ServerMng.java	2006-04-20 16:39:31 UTC (rev 159)
@@ -0,0 +1,102 @@
+package net.sf.plantlore.server.manager;
+
+import java.rmi.AlreadyBoundException;
+import java.rmi.NotBoundException;
+import java.rmi.RemoteException;
+import java.rmi.registry.LocateRegistry;
+import java.rmi.registry.Registry;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Observable;
+
+import org.apache.log4j.Logger;
+
+
+import net.sf.plantlore.server.*;
+
+
+public class ServerMng extends Observable {
+	
+	private Server<ConnectionInfo> server;
+	private Collection<ConnectionInfo> clients, selected;
+	
+	public enum Mode { CREATE_NEW, CONNECT_EXISTING };
+	
+	private Mode mode = Mode.CREATE_NEW;
+	private Logger logger = Logger.getLogger(this.getClass().getPackage().getName());
+		
+	
+	public void startNewServer(int port, String password) throws AlreadyBoundException, RemoteException {
+		logger.info("Creating a new server at localhost:" + port);
+		server = new RMIServer(port, password);
+		logger.info("Starting the server ...");
+		server.start();
+		logger.info("Server up and running");
+	}
+
+	
+	public void connectToRunningServer(String host, int port, String password) throws RemoteException, NotBoundException {
+		logger.info("Connecting to a running server at " +host+":"+port);
+		Registry registry = LocateRegistry.getRegistry(host, port);
+		Guard guard = (Guard) registry.lookup(Guard.ID);
+		server = guard.certify(password);
+	}
+	
+	
+	public void actAsInstructed(String host, int port, String password) throws RemoteException, NotBoundException, AlreadyBoundException {
+		if(mode == Mode.CREATE_NEW) startNewServer(port, password);
+		else connectToRunningServer(host, port, password);
+	}
+	
+	
+	public ConnectionInfo[] getConnectedUsers() {
+		if(server == null) return null;
+		try {
+			clients = /*(Collection<ConnectionInfo>)*/server.getClients();
+			logger.debug("Clients connected to the server received.");
+			setChanged(); notifyObservers("PH");
+		} catch( RemoteException e) { logger.warn("Unable to obtain the list of connected users - network error?"); }
+		return clients.toArray(new ConnectionInfo[0]);
+	}
+	
+	
+	public void setSelectedClients(ConnectionInfo[] selected) {
+		this.selected = new ArrayList<ConnectionInfo>(selected.length + 2);
+		for(ConnectionInfo client : selected) this.selected.add(client);
+		logger.debug("Selected clients stored.");
+	}
+	
+	
+	public void kickSelectedClients() throws RemoteException {
+		if(server == null) return;
+		for(ConnectionInfo client : selected) {
+			logger.info("Kicking " + client);
+			server.disconnect(client);
+		}
+		logger.debug("All selected clients have been kicked.");
+		getConnectedUsers();
+	}
+	
+	
+	public void terminateServer() throws RemoteException {
+		if(server != null) server.stop(true);
+		logger.info("Server terminated - all clients disconnected.");
+	}
+	
+	public void stopServer() throws RemoteException {
+		if(server !=null) server.stop(false);
+		logger.debug("Server stopped - the server will terminate after the last client finishes his work.");
+	}
+	
+	
+	public void setMode(Mode m) {
+		this.mode = m;
+		logger.debug("Server mode " + mode);
+		setChanged(); notifyObservers(this.mode);
+	}
+	
+	public Mode getMode() { 
+		return this.mode; 
+	}
+
+}

Added: trunk/src/net/sf/plantlore/server/manager/ServerMngCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerMngCtrl.java	2006-04-19 23:51:34 UTC (rev 158)
+++ trunk/src/net/sf/plantlore/server/manager/ServerMngCtrl.java	2006-04-20 16:39:31 UTC (rev 159)
@@ -0,0 +1,63 @@
+package net.sf.plantlore.server.manager;
+
+import java.awt.event.ActionEvent;
+import java.rmi.RemoteException;
+
+import javax.swing.AbstractAction;
+import javax.swing.event.ListSelectionEvent;
+import javax.swing.event.ListSelectionListener;
+
+import net.sf.plantlore.server.ConnectionInfo;
+
+public class ServerMngCtrl {
+	
+	private ServerMngView view;
+	private ServerMng model;
+	
+	public ServerMngCtrl(ServerMng model, ServerMngView view) {
+		this.model = model; this. view = view;
+		
+		view.users.addListSelectionListener(new SelectionChange());
+		view.kick.addActionListener(new KickUsers());
+		view.startstop.addActionListener(new StopServer());
+		view.terminate.addActionListener(new TerminateServer());
+	}
+	
+	class SelectionChange implements ListSelectionListener {
+		public void valueChanged(ListSelectionEvent lse) {
+			ConnectionInfo[] selected = (ConnectionInfo[])view.users.getSelectedValues();
+			model.setSelectedClients(selected);			
+		}
+	}
+	
+	class KickUsers extends AbstractAction {
+		public void actionPerformed(ActionEvent ae) {
+			try {
+				model.kickSelectedClients();
+			} catch(RemoteException re) { }
+		}
+	}
+	
+	class StopServer extends AbstractAction {
+		public void actionPerformed(ActionEvent ae) {
+			try {
+				model.stopServer();
+			} catch(RemoteException re) { }
+		}
+	}
+	
+	class TerminateServer extends AbstractAction {
+		public void actionPerformed(ActionEvent ae) {
+			try {
+				model.terminateServer();
+			} catch(RemoteException re) { }
+		}
+	}
+	
+	class Refresh extends AbstractAction {
+		public void actionPerformed(ActionEvent ae) {
+				model.getConnectedUsers();
+		}
+	}
+
+}

Added: trunk/src/net/sf/plantlore/server/manager/ServerMngView.form
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerMngView.form	2006-04-19 23:51:34 UTC (rev 158)
+++ trunk/src/net/sf/plantlore/server/manager/ServerMngView.form	2006-04-20 16:39:31 UTC (rev 159)
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="3"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Component id="jToolBar1" alignment="0" pref="523" max="32767" attributes="0"/>
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace min="10" pref="10" max="10" attributes="0"/>
+              <Component id="jScrollPane1" pref="503" max="32767" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <Component id="jToolBar1" min="-2" pref="25" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="jScrollPane1" pref="258" max="32767" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Container class="javax.swing.JToolBar" name="jToolBar1">
+
+      <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBoxLayout"/>
+      <SubComponents>
+        <Component class="javax.swing.JButton" name="kick">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Kick users"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JButton" name="startstop">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Stop server"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JButton" name="terminate">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Terminate server"/>
+          </Properties>
+        </Component>
+      </SubComponents>
+    </Container>
+    <Container class="javax.swing.JScrollPane" name="jScrollPane1">
+      <AuxValues>
+        <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
+      </AuxValues>
+
+      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+      <SubComponents>
+        <Component class="javax.swing.JList" name="users">
+          <Properties>
+            <Property name="model" type="javax.swing.ListModel" editor="org.netbeans.modules.form.editors2.ListModelEditor">
+              <StringArray count="0"/>
+            </Property>
+          </Properties>
+        </Component>
+      </SubComponents>
+    </Container>
+  </SubComponents>
+</Form>

Added: trunk/src/net/sf/plantlore/server/manager/ServerMngView.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerMngView.java	2006-04-19 23:51:34 UTC (rev 158)
+++ trunk/src/net/sf/plantlore/server/manager/ServerMngView.java	2006-04-20 16:39:31 UTC (rev 159)
@@ -0,0 +1,95 @@
+/*
+ * ServerView2.java
+ *
+ * Created on 20. duben 2006, 10:16
+ */
+
+package net.sf.plantlore.server.manager;
+
+import java.util.Observable;
+import java.util.Observer;
+
+/**
+ *
+ * @author  yaa
+ */
+public class ServerMngView extends javax.swing.JFrame implements Observer {
+	
+	private ServerMng model;
+	
+    
+    /** Creates new form ServerView2 */
+    public ServerMngView(ServerMng model) {
+    	this.model = model;
+    	model.addObserver(this);
+    	
+        initComponents();
+        setLocationRelativeTo(null); // center of the screen
+    }
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        jToolBar1 = new javax.swing.JToolBar();
+        kick = new javax.swing.JButton();
+        startstop = new javax.swing.JButton();
+        terminate = new javax.swing.JButton();
+        jScrollPane1 = new javax.swing.JScrollPane();
+        users = new javax.swing.JList();
+
+        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
+        kick.setText("Kick users");
+        jToolBar1.add(kick);
+
+        startstop.setText("Stop server");
+        jToolBar1.add(startstop);
+
+        terminate.setText("Terminate server");
+        jToolBar1.add(terminate);
+
+        jScrollPane1.setViewportView(users);
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
+            .add(layout.createSequentialGroup()
+                .add(10, 10, 10)
+                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
+                .addContainerGap())
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    private javax.swing.JScrollPane jScrollPane1;
+    private javax.swing.JToolBar jToolBar1;
+    protected javax.swing.JButton kick;
+    protected javax.swing.JButton startstop;
+    protected javax.swing.JButton terminate;
+    protected javax.swing.JList users;
+    // End of variables declaration//GEN-END:variables
+
+
+    
+	public void update(Observable source, Object parameter) {
+		if(parameter != null && parameter.toString().startsWith("PH"))
+			users.setListData(model.getConnectedUsers());
+	}
+    
+}



From krater at berlios.de  Thu Apr 20 20:00:34 2006
From: krater at berlios.de (krater at berlios.de)
Date: Thu, 20 Apr 2006 20:00:34 +0200
Subject: [Plantlore-dev] r160 - in trunk/src/net/sf/plantlore: middleware server server/manager
Message-ID: <200604201800.k3KI0YxI031852@sheep.berlios.de>

Author: krater
Date: 2006-04-20 20:00:15 +0200 (Thu, 20 Apr 2006)
New Revision: 160

Modified:
   trunk/src/net/sf/plantlore/middleware/DBLayerFactory.java
   trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java
   trunk/src/net/sf/plantlore/middleware/RemoteDBLayerFactory.java
   trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java
   trunk/src/net/sf/plantlore/server/RMIServer.java
   trunk/src/net/sf/plantlore/server/manager/ServerMng.java
   trunk/src/net/sf/plantlore/server/manager/ServerMngCtrl.java
   trunk/src/net/sf/plantlore/server/manager/ServerMngView.form
   trunk/src/net/sf/plantlore/server/manager/ServerMngView.java
Log:
The Server Manager (and GUI) was tested and fixed.

Modified: trunk/src/net/sf/plantlore/middleware/DBLayerFactory.java
===================================================================
--- trunk/src/net/sf/plantlore/middleware/DBLayerFactory.java	2006-04-20 16:39:31 UTC (rev 159)
+++ trunk/src/net/sf/plantlore/middleware/DBLayerFactory.java	2006-04-20 18:00:15 UTC (rev 160)
@@ -3,6 +3,8 @@
 import java.rmi.NotBoundException;
 import java.rmi.RemoteException;
 
+import net.sf.plantlore.server.DBLayerException;
+
 /** 
  * Interface for obtaining the (possibly remote) DBLayer object.
  * 
@@ -27,7 +29,7 @@
 	 * @throws RemoteException		If the RMI encounters a problem.
 	 * @throws NotBoundException	If the server is not running on the specified port.
 	 */
-	DBLayer create(String host, int port) throws RemoteException, NotBoundException;
+	DBLayer create(String host, int port) throws RemoteException, NotBoundException, DBLayerException;
 	
 	/** 
 	 * Destroy the DBLayer. This is a special measure, 

Modified: trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java
===================================================================
--- trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java	2006-04-20 16:39:31 UTC (rev 159)
+++ trunk/src/net/sf/plantlore/middleware/RMIDBLayerFactory.java	2006-04-20 18:00:15 UTC (rev 160)
@@ -9,6 +9,7 @@
 import org.apache.log4j.Logger;
 
 import net.sf.plantlore.server.ConnectionInfo;
+import net.sf.plantlore.server.DBLayerException;
 import net.sf.plantlore.server.HibernateDBLayer;
 import net.sf.plantlore.middleware.RemoteDBLayerFactory;
 
@@ -84,7 +85,7 @@
 	 * @return A stub of the remote object that lives on the server and mediates the connection
 	 * with the remote database.
 	 */
-	public synchronized DBLayer create(String host, int port) throws RemoteException, NotBoundException {
+	public synchronized DBLayer create(String host, int port) throws RemoteException, NotBoundException, DBLayerException {
 		// Some exceptional cases are handled specially.
 		if(host == null || host.equals("") || host.equalsIgnoreCase("localhost"))
 			return create();
@@ -92,18 +93,19 @@
 		logger.debug("Creating a new DBLayer using the RMI:");
 		
 		// Connect to the remote server and obtain the RemoteDBLayerFactory
-		logger.debug("  # connecting to the remote registry @ " + host + ":" + port +" ...");
+		logger.debug("  connecting to the remote registry @ " + host + ":" + port +" ...");
 		Registry registry = LocateRegistry.getRegistry(host, port);
-		logger.debug("    completed");
+		logger.debug("  completed");
 		
-		logger.debug("  # obtaining the remote dblayer factory ...");
+		logger.debug("  obtaining the remote dblayer factory ...");
 		RemoteDBLayerFactory remoteFactory = (RemoteDBLayerFactory) registry.lookup(RemoteDBLayerFactory.ID);
-		logger.debug("    completed");
+		logger.debug("  completed");
 		
 		// Get the stub from the remote factory and save the information about the connection
-		logger.debug("  # creating a new dblayer...");
-		DBLayer stub = remoteFactory.create();
+		logger.debug("  creating a new dblayer...");
+		DBLayer stub = remoteFactory.create(); // DBLayerException can spawn here (too many users!)
 		logger.debug("  completed! :)");
+		
 		ConnectionInfo info = new ConnectionInfo(remoteFactory, null, stub, "localhost -> " + host + ":" + port);
 		client.put(stub, info);
 		

Modified: trunk/src/net/sf/plantlore/middleware/RemoteDBLayerFactory.java
===================================================================
--- trunk/src/net/sf/plantlore/middleware/RemoteDBLayerFactory.java	2006-04-20 16:39:31 UTC (rev 159)
+++ trunk/src/net/sf/plantlore/middleware/RemoteDBLayerFactory.java	2006-04-20 18:00:15 UTC (rev 160)
@@ -3,6 +3,8 @@
 import java.rmi.Remote;
 import java.rmi.RemoteException;
 
+import net.sf.plantlore.server.DBLayerException;
+
 /** 
  * Interface for obtaining remote references of the DBLayer objects running on some remote server.
  * 
@@ -27,7 +29,7 @@
 	 * @return The remote reference of the DBLayer (that lives on the server side).
 	 * @throws RemoteException If the RMI encounters a problem.
 	 */
-	DBLayer create() throws RemoteException;
+	DBLayer create() throws RemoteException, DBLayerException;
 	
 	/** 
 	 * Destroy the remote object, i.e. ensure some cleanup. 

Modified: trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java
===================================================================
--- trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java	2006-04-20 16:39:31 UTC (rev 159)
+++ trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java	2006-04-20 18:00:15 UTC (rev 160)
@@ -44,13 +44,13 @@
 	 * Maximum number of connections from one IP = maximum number of DBLayer objects 
 	 * that can be created for users from this IP address.
 	 */
-	private int maxConnectionsPerIP = 1;
+	private int maxConnectionsPerIP = 81; // TODO: Nacitat z nejakyho settings...
 	
 	/** 
 	 * Maximum number of clients = the total maximum number of DBLayer objects 
 	 * that can be created by this factory. 
 	 */
-	private int maxConnectionsTotal = 8;
+	private int maxConnectionsTotal = 81; // TODO: Nacitat z nejakyho settings...
 	
 	/** Keep information about all connected clients. */
 	private Hashtable<DBLayer, ConnectionInfo> client = 
@@ -98,7 +98,7 @@
 	 * (too many connections from this IP or too many clients connected). 
 	 * @throws RemoteException If the RMI encounters an error.
 	 */
-	public synchronized DBLayer create() throws RemoteException {
+	public synchronized DBLayer create() throws RemoteException, DBLayerException {
 		// Apply the connection policy ~ see AllowConnection(host)
 		String clientHost = "unknown";
 		try { clientHost = RemoteServer.getClientHost(); } 
@@ -108,7 +108,7 @@
 		// Connection policy
 		if( !allowConnection(clientHost) ) {
 			logger.warn("Too many connections from " + clientHost + " (or the server is full)!");
-			return null;
+			throw new DBLayerException("There are either too many connections or the server is already full!");
 		}
 		
 		// Create a new DBLayer, export it, and keep the stub. Also set the Undertaker of this object.
@@ -158,8 +158,8 @@
 		ConnectionInfo info = client.remove(stub);
 		if(info != null) disconnect(info.getDatabase());
 		else try {
-			logger.warn(RemoteServer.getClientHost() + "attempts to destroy " +
-						"a database layer that has was not created by this factory!");
+			logger.warn(RemoteServer.getClientHost() + " attempts to destroy " +
+						"a database layer that has was not created by this factory OR attempts to destroy an already destroyed DBLayer!");
 		} catch(ServerNotActiveException e) {}
 	}
 	

Modified: trunk/src/net/sf/plantlore/server/RMIServer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/RMIServer.java	2006-04-20 16:39:31 UTC (rev 159)
+++ trunk/src/net/sf/plantlore/server/RMIServer.java	2006-04-20 18:00:15 UTC (rev 160)
@@ -1,18 +1,17 @@
 package net.sf.plantlore.server;
 
-import java.io.IOException;
-import java.io.InputStream;
+
 import java.rmi.AlreadyBoundException;
 import java.rmi.RemoteException;
 import java.rmi.registry.LocateRegistry;
 import java.rmi.registry.Registry;
 import java.rmi.server.UnicastRemoteObject;
 import java.util.Collection;
-import java.util.Properties;
 
+
 import org.apache.log4j.Logger;
-import org.apache.log4j.PropertyConfigurator;
 
+
 import net.sf.plantlore.middleware.RemoteDBLayerFactory;
 import net.sf.plantlore.server.tools.*;
 

Modified: trunk/src/net/sf/plantlore/server/manager/ServerMng.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerMng.java	2006-04-20 16:39:31 UTC (rev 159)
+++ trunk/src/net/sf/plantlore/server/manager/ServerMng.java	2006-04-20 18:00:15 UTC (rev 160)
@@ -5,7 +5,6 @@
 import java.rmi.RemoteException;
 import java.rmi.registry.LocateRegistry;
 import java.rmi.registry.Registry;
-import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Observable;
 
@@ -18,7 +17,7 @@
 public class ServerMng extends Observable {
 	
 	private Server<ConnectionInfo> server;
-	private Collection<ConnectionInfo> clients, selected;
+	private Collection<ConnectionInfo> clients;
 	
 	public enum Mode { CREATE_NEW, CONNECT_EXISTING };
 	
@@ -49,32 +48,24 @@
 	}
 	
 	
-	public ConnectionInfo[] getConnectedUsers() {
+	public ConnectionInfo[] getConnectedUsers(boolean refresh) {
 		if(server == null) return null;
-		try {
-			clients = /*(Collection<ConnectionInfo>)*/server.getClients();
-			logger.debug("Clients connected to the server received.");
-			setChanged(); notifyObservers("PH");
-		} catch( RemoteException e) { logger.warn("Unable to obtain the list of connected users - network error?"); }
+		if(refresh)
+			try {
+				clients = /*(Collection<ConnectionInfo>)*/server.getClients();
+				logger.debug("Clients connected to the server received.");
+				setChanged(); notifyObservers("PH");
+			} catch( RemoteException e) { logger.warn("Unable to obtain the list of connected users - network error?"); }
 		return clients.toArray(new ConnectionInfo[0]);
 	}
 	
 	
-	public void setSelectedClients(ConnectionInfo[] selected) {
-		this.selected = new ArrayList<ConnectionInfo>(selected.length + 2);
-		for(ConnectionInfo client : selected) this.selected.add(client);
-		logger.debug("Selected clients stored.");
-	}
+	public void kick(ConnectionInfo client) throws RemoteException {
+		if(server == null || clients == null) return;
+		logger.info("Kicking " + client);
+		server.disconnect(client);
 	
-	
-	public void kickSelectedClients() throws RemoteException {
-		if(server == null) return;
-		for(ConnectionInfo client : selected) {
-			logger.info("Kicking " + client);
-			server.disconnect(client);
-		}
-		logger.debug("All selected clients have been kicked.");
-		getConnectedUsers();
+		getConnectedUsers(true);
 	}
 	
 	

Modified: trunk/src/net/sf/plantlore/server/manager/ServerMngCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerMngCtrl.java	2006-04-20 16:39:31 UTC (rev 159)
+++ trunk/src/net/sf/plantlore/server/manager/ServerMngCtrl.java	2006-04-20 18:00:15 UTC (rev 160)
@@ -4,9 +4,8 @@
 import java.rmi.RemoteException;
 
 import javax.swing.AbstractAction;
-import javax.swing.event.ListSelectionEvent;
-import javax.swing.event.ListSelectionListener;
 
+
 import net.sf.plantlore.server.ConnectionInfo;
 
 public class ServerMngCtrl {
@@ -17,23 +16,22 @@
 	public ServerMngCtrl(ServerMng model, ServerMngView view) {
 		this.model = model; this. view = view;
 		
-		view.users.addListSelectionListener(new SelectionChange());
 		view.kick.addActionListener(new KickUsers());
 		view.startstop.addActionListener(new StopServer());
 		view.terminate.addActionListener(new TerminateServer());
+		view.refresh.addActionListener(new Refresh());
 	}
 	
-	class SelectionChange implements ListSelectionListener {
-		public void valueChanged(ListSelectionEvent lse) {
-			ConnectionInfo[] selected = (ConnectionInfo[])view.users.getSelectedValues();
-			model.setSelectedClients(selected);			
-		}
-	}
 	
 	class KickUsers extends AbstractAction {
 		public void actionPerformed(ActionEvent ae) {
 			try {
-				model.kickSelectedClients();
+				Object[] bunch = view.users.getSelectedValues();
+				if(bunch == null || bunch.length == 0) return;
+
+				for(Object client : bunch)
+					if(client instanceof ConnectionInfo) model.kick((ConnectionInfo)client);
+
 			} catch(RemoteException re) { }
 		}
 	}
@@ -56,7 +54,7 @@
 	
 	class Refresh extends AbstractAction {
 		public void actionPerformed(ActionEvent ae) {
-				model.getConnectedUsers();
+				model.getConnectedUsers(true);
 		}
 	}
 

Modified: trunk/src/net/sf/plantlore/server/manager/ServerMngView.form
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerMngView.form	2006-04-20 16:39:31 UTC (rev 159)
+++ trunk/src/net/sf/plantlore/server/manager/ServerMngView.form	2006-04-20 18:00:15 UTC (rev 160)
@@ -41,6 +41,11 @@
 
       <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBoxLayout"/>
       <SubComponents>
+        <Component class="javax.swing.JButton" name="refresh">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="Refresh"/>
+          </Properties>
+        </Component>
         <Component class="javax.swing.JButton" name="kick">
           <Properties>
             <Property name="text" type="java.lang.String" value="Kick users"/>

Modified: trunk/src/net/sf/plantlore/server/manager/ServerMngView.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerMngView.java	2006-04-20 16:39:31 UTC (rev 159)
+++ trunk/src/net/sf/plantlore/server/manager/ServerMngView.java	2006-04-20 18:00:15 UTC (rev 160)
@@ -9,6 +9,8 @@
 import java.util.Observable;
 import java.util.Observer;
 
+import net.sf.plantlore.server.ConnectionInfo;
+
 /**
  *
  * @author  yaa
@@ -35,6 +37,7 @@
     // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
     private void initComponents() {
         jToolBar1 = new javax.swing.JToolBar();
+        refresh = new javax.swing.JButton();
         kick = new javax.swing.JButton();
         startstop = new javax.swing.JButton();
         terminate = new javax.swing.JButton();
@@ -42,6 +45,9 @@
         users = new javax.swing.JList();
 
         setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
+        refresh.setText("Refresh");
+        jToolBar1.add(refresh);
+
         kick.setText("Kick users");
         jToolBar1.add(kick);
 
@@ -80,6 +86,7 @@
     private javax.swing.JScrollPane jScrollPane1;
     private javax.swing.JToolBar jToolBar1;
     protected javax.swing.JButton kick;
+    protected javax.swing.JButton refresh;
     protected javax.swing.JButton startstop;
     protected javax.swing.JButton terminate;
     protected javax.swing.JList users;
@@ -88,8 +95,11 @@
 
     
 	public void update(Observable source, Object parameter) {
-		if(parameter != null && parameter.toString().startsWith("PH"))
-			users.setListData(model.getConnectedUsers());
+		if(parameter != null && parameter.toString().startsWith("PH")){
+			ConnectionInfo[] clients = model.getConnectedUsers(false);
+			if(clients != null) users.setListData(clients);
+			else users.setListData(new String[] {null}); // empty selection. the setListData mustn't be null :/
+		}
 	}
     
 }



From krater at berlios.de  Thu Apr 20 21:51:32 2006
From: krater at berlios.de (krater at berlios.de)
Date: Thu, 20 Apr 2006 21:51:32 +0200
Subject: [Plantlore-dev] r161 - trunk/src/net/sf/plantlore/server
Message-ID: <200604201951.k3KJpWYE018893@sheep.berlios.de>

Author: krater
Date: 2006-04-20 21:51:31 +0200 (Thu, 20 Apr 2006)
New Revision: 161

Removed:
   trunk/src/net/sf/plantlore/server/ServerView.java
Log:
Obsolete ServerView deleted.

Deleted: trunk/src/net/sf/plantlore/server/ServerView.java
===================================================================
--- trunk/src/net/sf/plantlore/server/ServerView.java	2006-04-20 18:00:15 UTC (rev 160)
+++ trunk/src/net/sf/plantlore/server/ServerView.java	2006-04-20 19:51:31 UTC (rev 161)
@@ -1,93 +0,0 @@
-package net.sf.plantlore.server;
-
-import java.awt.*;
-import java.awt.event.*;
-import java.util.Observable;
-import java.util.Observer;
-
-import javax.swing.*;
-
-
-public class ServerView implements Observer {
-	
-	private JList list;
-	private RMIServer model;
-	
-	
-	public ServerView(RMIServer model) {
-		this.model = model;
-	}
-	
-	
-	private class LeftAction extends AbstractAction {
-		
-	    public LeftAction(String text, ImageIcon icon, String desc, Integer mnemonic) {
-	        super(text, icon);
-	        putValue(SHORT_DESCRIPTION, desc);
-	        putValue(MNEMONIC_KEY, mnemonic);
-	    }
-	    
-	    public void actionPerformed(ActionEvent e) {
-	        Object o = list.getSelectedValue();
-	        if(o != null) {
-	        	ConnectionInfo client = (ConnectionInfo) o;
-	        	System.out.println("disconnecting " + client);
-	        	model.disconnect(client);
-	        }
-	    }
-	}
-	
-	private void createGUI() {
-		// Create and set up the window.
-        JFrame frame = new JFrame("Planlore server");
-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-        
-        list = new JList();
-        JScrollPane listScroll = new JScrollPane(list);
-        listScroll.setPreferredSize(new Dimension(350, 80));
-        
-        JPanel panel = new JPanel();
-        panel.setLayout(new FlowLayout(FlowLayout.RIGHT));
-        JButton disconnect = new JButton(new LeftAction("Disconnect", null, "Disconnect selected clients from the server.", KeyEvent.VK_D));
-        panel.add(disconnect);
-        
-        frame.getContentPane().add(listScroll, BorderLayout.CENTER);
-        frame.getContentPane().add(panel, BorderLayout.SOUTH);
-        
-        frame.pack();
-        frame.setVisible(true);
-	}
-
-	
-
-	
-	
-	public void update(Observable observed, Object arg) {
-		list.setListData(model.getClients().toArray());
-	}
-
-
-
-	
-	
-	
-	public static void main(String[] args) {
-		// Set beautiful Windows look & feel.
-        String lookAndFeel = UIManager.getSystemLookAndFeelClassName();
-        try { UIManager.setLookAndFeel(lookAndFeel); }
-        catch (Exception e) { JFrame.setDefaultLookAndFeelDecorated(true); }
-        
-        
-        try{
-        	RMIServer model = new RMIServer();
-        	ServerView view = new ServerView(model);
-        	view.createGUI();
-        	model.start();
-        	
-        } catch(Exception e) { System.err.println(e); }
-        
-        
-        
-	}
-	
-}



From tkovarik at gmail.com  Thu Apr 20 22:24:22 2006
From: tkovarik at gmail.com (Tomas Kovarik)
Date: Thu, 20 Apr 2006 22:24:22 +0200
Subject: [Plantlore-dev] Dnesna schodzka
Message-ID: <ea88f1620604201324k7a83cbc6ic02ba4c442b0d8d8@mail.gmail.com>

Caute,

tu je par zaverov z dnesnej schodzky:

* Dokedy musime Plantlore dokoncit: okolo 20. maja (minuly rok sa
odovzdavaalo 24.5.).
* Stihneme to dovtedy? Ano, stihneme za urcitych podmienok
* Ak nestihneme? (Moze sa stat) Obhajoby budu s najvacsou
pravdepodonostou aj v septembri, posledne dva roky boli. Nejdeme to
ale odovzdavat v septembri, lebo je to nebezpecne (v pripade
neobhajenia).
* Co musime spravit? Fulltime praca, viac ako 8 hodin denne clovek
sice neda, ale to by mohlo stacit. je potreba maximalne obmedzit ine
aktivity (praca, skola, ...) - samozrejme sa to neda uplne, neda sa
ale programovat 24 hodin denne - Plantlore ale MUSI mat prioritu.
* Kde na tom pracovat? Kombinacia spolocnych stretnuti (lab) a prace
doma, kedze nepotrebujeme stale byt spolu.
* Komunikacia - Kazdy den na par minut pokecat napr. cez Skype,
prediskutovat pripadne problemy a priority.

Majte sa

Kovo


From lada at berlios.de  Thu Apr 20 23:40:30 2006
From: lada at berlios.de (lada at berlios.de)
Date: Thu, 20 Apr 2006 23:40:30 +0200
Subject: [Plantlore-dev] r162 - in trunk/src/net/sf/plantlore: client/history l10n
Message-ID: <200604202140.k3KLeUxw000749@sheep.berlios.de>

Author: lada
Date: 2006-04-20 23:40:28 +0200 (Thu, 20 Apr 2006)
New Revision: 162

Added:
   trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.form
   trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java
Modified:
   trunk/src/net/sf/plantlore/client/history/History.java
   trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
   trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java
   trunk/src/net/sf/plantlore/client/history/HistoryView.java
   trunk/src/net/sf/plantlore/client/history/WholeHistory.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryView.form
   trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java
   trunk/src/net/sf/plantlore/l10n/Plantlore.properties
Log:
Whole history - add details dialog. Repair warning and using finally. 

Added: trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.form	2006-04-20 19:51:31 UTC (rev 161)
+++ trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.form	2006-04-20 21:40:28 UTC (rev 162)
@@ -0,0 +1,133 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JDialogFormInfo">
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="2"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" attributes="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="jPanel1" max="32767" attributes="0"/>
+                  </Group>
+                  <Group type="102" alignment="0" attributes="0">
+                      <EmptySpace min="-2" pref="186" max="-2" attributes="0"/>
+                      <Component id="okButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace min="-2" pref="27" max="-2" attributes="0"/>
+                      <Component id="closeButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace min="-2" pref="20" max="-2" attributes="0"/>
+                      <Component id="helpButton" min="-2" max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="jPanel1" min="-2" max="-2" attributes="0"/>
+              <EmptySpace min="-2" pref="22" max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="helpButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="okButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="closeButton" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace pref="21" max="32767" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Container class="javax.swing.JPanel" name="jPanel1">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Details of history record"/>
+          </Border>
+        </Property>
+      </Properties>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Component id="jScrollPane2" alignment="0" pref="642" max="32767" attributes="0"/>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Component id="jScrollPane2" alignment="0" pref="295" max="32767" attributes="0"/>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Container class="javax.swing.JScrollPane" name="jScrollPane2">
+          <AuxValues>
+            <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
+          </AuxValues>
+
+          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+          <SubComponents>
+            <Component class="javax.swing.JTextArea" name="detailsTextArea">
+              <Properties>
+                <Property name="columns" type="int" value="20"/>
+                <Property name="font" type="java.awt.Font" editor="org.netbeans.beaninfo.editors.FontEditor">
+                  <Font name="Arial" size="12" style="0"/>
+                </Property>
+                <Property name="rows" type="int" value="5"/>
+                <Property name="text" type="java.lang.String" value="testovaci nasazeni textu"/>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+          </SubComponents>
+        </Container>
+      </SubComponents>
+    </Container>
+    <Component class="javax.swing.JButton" name="okButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Ok&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Component class="javax.swing.JButton" name="closeButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Close&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Component class="javax.swing.JButton" name="helpButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Help&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+  </SubComponents>
+</Form>

Added: trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java	2006-04-20 19:51:31 UTC (rev 161)
+++ trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java	2006-04-20 21:40:28 UTC (rev 162)
@@ -0,0 +1,119 @@
+/*
+ * DetailsHistoryView.java
+ *
+ * Created on 19. duben 2006, 14:39
+ */
+
+package net.sf.plantlore.client.history;
+
+import javax.swing.JDialog;
+import net.sf.plantlore.l10n.L10n;
+
+/**
+ *
+ * @author  Lada
+ */
+public class DetailsHistoryView extends javax.swing.JDialog {
+    
+    /**
+     * Creates new form DetailsHistoryView
+     */
+    public DetailsHistoryView(WholeHistory model, javax.swing.JDialog parent, boolean modal) {
+        super(parent, modal);
+        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+        initComponents();        
+    }
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        jPanel1 = new javax.swing.JPanel();
+        jScrollPane2 = new javax.swing.JScrollPane();
+        detailsTextArea = new javax.swing.JTextArea();
+        okButton = new javax.swing.JButton();
+        closeButton = new javax.swing.JButton();
+        helpButton = new javax.swing.JButton();
+
+        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
+        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Details of history record"));
+        detailsTextArea.setColumns(20);
+        detailsTextArea.setFont(new java.awt.Font("Arial", 0, 12));
+        detailsTextArea.setRows(5);
+        detailsTextArea.setText("testovaci nasazeni textu");
+        jScrollPane2.setViewportView(detailsTextArea);
+
+        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
+        jPanel1.setLayout(jPanel1Layout);
+        jPanel1Layout.setHorizontalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)
+        );
+        jPanel1Layout.setVerticalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
+        );
+
+        okButton.setText(L10n.getString("Ok"));
+
+        closeButton.setText(L10n.getString("Close"));
+
+        helpButton.setText(L10n.getString("Help"));
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(layout.createSequentialGroup()
+                        .addContainerGap()
+                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                    .add(layout.createSequentialGroup()
+                        .add(186, 186, 186)
+                        .add(okButton)
+                        .add(27, 27, 27)
+                        .add(closeButton)
+                        .add(20, 20, 20)
+                        .add(helpButton)))
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .add(22, 22, 22)
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(helpButton)
+                    .add(okButton)
+                    .add(closeButton))
+                .addContainerGap(21, Short.MAX_VALUE))
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    /**
+     * @param args the command line arguments
+     */
+    public static void main(String args[]) {
+        java.awt.EventQueue.invokeLater(new Runnable() {
+            public void run() {
+                new DetailsHistoryView(null,new javax.swing.JDialog(), true).setVisible(true);
+            }
+        });
+    }
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    protected javax.swing.JButton closeButton;
+    protected javax.swing.JTextArea detailsTextArea;
+    protected javax.swing.JButton helpButton;
+    private javax.swing.JPanel jPanel1;
+    private javax.swing.JScrollPane jScrollPane2;
+    protected javax.swing.JButton okButton;
+    // End of variables declaration//GEN-END:variables
+    
+}

Modified: trunk/src/net/sf/plantlore/client/history/History.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/History.java	2006-04-20 19:51:31 UTC (rev 161)
+++ trunk/src/net/sf/plantlore/client/history/History.java	2006-04-20 21:40:28 UTC (rev 162)
@@ -13,9 +13,7 @@
 import java.util.HashSet;
 import java.util.Hashtable;
 import java.util.Observable;
-import java.util.Set;
 
-import net.sf.plantlore.l10n.L10n;
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.server.DBLayerException;
 import net.sf.plantlore.middleware.SelectQuery;
@@ -26,10 +24,8 @@
 import net.sf.plantlore.common.record.Plant;
 import net.sf.plantlore.common.record.Publication;
 import net.sf.plantlore.common.record.Territory;
-import net.sf.plantlore.common.record.User;
 import net.sf.plantlore.common.record.HistoryRecord;
 import net.sf.plantlore.common.record.HistoryChange;
-import net.sf.plantlore.common.record.HistoryColumn;
 import net.sf.plantlore.common.record.Village;
 
 
@@ -74,8 +70,6 @@
     private boolean editHabitat;
     //zprava pro uzivatele
     private String messageUndo;
-    //zaznamenani ITEM, jejichz zmena ovlibni vice polozek
-   private ArrayList<String> itemAffectMore = new ArrayList();
     
     //*********************Record of history ***************************************//    
     private Occurrence occurrence;
@@ -114,7 +108,6 @@
 
      //********************************************************//
      /** Mapping of entities */
-    private Hashtable<String, Integer> publicationHash;
     private Hashtable<String, Integer> habitatHash;
     private Hashtable<String, Integer> occurrenceHash;  
     
@@ -153,10 +146,8 @@
            logger.error("Searching occurence failed.");          
        } catch (RemoteException e) {
     	   System.err.println("RemoteException- History(), executeQuery");
-	   } finally {
-	    	   logger.debug("Searching occurrence ends successfully");                           
-	       }   
-	   
+	   } 
+       
 	   Object[] objectOccurrence = null;
 	   Object[] objHis = null;
        try {
@@ -170,8 +161,6 @@
        } catch (DBLayerException e) {
            // Log and set error in case of an exception
            logger.error("Processing search occurrence results failed: "+e.toString());            
-       } finally { 
-       	   logger.debug("Sets occurrence data ends successfully.");        	
        } 
               
        occurrence = ((Occurrence)objHis[0]);
@@ -220,17 +209,15 @@
        int resultIdInsert = 0;
        try {
            // Execute query                    
-           resultIdInsert = database.executeQuery(query);        
+           resultIdInsert = database.executeQuery(query); 
+           // Save "insert" history data
+           setInsertResult(resultIdInsert);
        } catch (DBLayerException e) {
            // Log and set an error                   
            logger.error("Searching history data with condition 'operation = insert' failed. Unable to execute search query.");          
        } catch (RemoteException e) {		 
     	   System.err.println("RemoteException- searchInsertInfo(), executeQuery");
-	} finally {
-    	   logger.debug("Searching history data with condition 'operation = insert' ends successfully");
-           // Save "insert" history data
-           setInsertResult(resultIdInsert);                    
-       }              
+	    }             
     }
     
     
@@ -261,17 +248,15 @@
         int resultIdEdit = 0;
         try {
             // Execute query                    
-            resultIdEdit = database.executeQuery(query);        
+            resultIdEdit = database.executeQuery(query); 
+            // Save "edit" history data
+            setEditResult(resultIdEdit);
         } catch (DBLayerException e) {
             // Log and set an error                   
             logger.error("Searching history data with condition 'operation = edit' failed. Unable to execute search query.");           
         } catch (RemoteException e) { 		   
      	   System.err.println("RemoteException- searchEditHistory(), executeQuery");
-	 	} finally {
-	 		logger.debug("Searching history data with condition 'operation = edit' ends successfully");
-        	// Save "edit" history data
-            setEditResult(resultIdEdit);                  
-	 	}              
+	 	}           
     }
     
     
@@ -300,9 +285,7 @@
          	setNameUser(((HistoryChange)objHis[0]).getWho().getWholeName());         	
         } catch (DBLayerException e) {         
             logger.error("Processing search (inserting) results failed: "+e.toString());            
-        } finally { 
-        	logger.debug("Sets 'insert' data ends successfully.");        	
-        }        
+        }       
     }
     
     
@@ -345,14 +328,12 @@
                     for (int i=0; i<countResult; i++ ) {                    							
 						Object[] objHis = (Object[])objectHistory[i];
                         this.editHistoryDataList.add((HistoryRecord)objHis[0]);
-                    }                     
+                    }           
+                    //Update current first displayed row (only if data retrieval was successful)
+                    setCurrentFirstRow(fromTable); 
                 } catch (DBLayerException e) {                  
                     logger.error("Processing search results failed: "+e.toString());            
-                } finally { 
-                	logger.debug("Sets 'edit' data ends successfully");
-                	//Update current first displayed row (only if data retrieval was successful)
-                    setCurrentFirstRow(fromTable);                    
-                }               
+                }             
             }
         }         
     }
@@ -424,9 +405,7 @@
             logger.error("Searching " +typeObject+ " failed. Unable to execute search query.");
         } catch (RemoteException e) {		 
      	   System.err.println("RemoteException- executeQuery " +typeObject);
- 	    } finally {
-     	   logger.debug("Searching " +typeObject+ " ends successfully");
-        }         
+ 	    }        
 
  	   Object[] objects = null;
  	   Object[] object = null;
@@ -440,10 +419,9 @@
         	object = (Object[])objects[0];           
        } catch (DBLayerException e) {
            // Log and set error in case of an exception
-           logger.error("Processing search " +typeObject+ " results failed: "+e.toString());            
-       } finally {     	    
-    	   	return object; 	       	          	   
-       }     	        
+           logger.error("Processing search " +typeObject+ " results failed: "+e.toString());               
+       }     	    
+       return object; 	       	          	          	       
     }
     
  
@@ -615,7 +593,7 @@
                 		 */ 	                		  
                 		occurrence.getHabitat().setQuadrant(oldValue);		                	
 	                	logger.debug("Set selected value for update of attribute Quadrant.");
-	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {
+	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {
 	                		// existuji dva edity EDIT (ovlivni jeden nalez) a EDITGROUP (ovlivni vice nalezu)
 	                		// potrebujeme zjistit, zda pro dany nalez je vazeba mezi tHabitats a tOccurrences vzdy 1:N
 	                		// nebo zda editaci nalezu vznikla vazvba 1:1
@@ -625,35 +603,35 @@
  	                case 2: //Place description 	                	 	                			                		 
                 		occurrence.getHabitat().setDescription(oldValue);		                	
 	                	logger.debug("Set selected value for update of attribute Description.");
-	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 	                		relationship = true;                                         
 	                	} 	              	
  	                	break;
  	                case 3:  //Country 	                	 	                			                		 
                 		occurrence.getHabitat().setCountry(oldValue);		                	
 	                	logger.debug("Set selected value for update of attribute Country.");
-	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 	                		relationship = true;                                          
 	                	} 	
  	                    break;
  	                case 4: //Altitude 	                	                			                		 
                 		occurrence.getHabitat().setAltitude(Double.parseDouble(oldValue));		                	
 	                	logger.debug("Set selected value for update of attribute Altitude.");
-	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 	                		relationship = true;                                          
 	                	} 	
  	                	break;
  	                case 5:  //Latitude   	                		                			                		  
                 		occurrence.getHabitat().setLatitude(Double.parseDouble(oldValue));		                	
 	                	logger.debug("Set selected value for update of attribute Latitude.");
-	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 	                		relationship = true;                                        
 	                	} 	
  	                    break;
  	                case 6: //Longitude 	                		                			                		
                 		occurrence.getHabitat().setLongitude(Double.parseDouble(oldValue));		                	
 	                	logger.debug("Set selected value for update of attribute Longitude.");
-	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 	                		relationship = true;                                         
 	                	} 	
  	                	break;
@@ -667,7 +645,7 @@
             			} else {
             				logger.error("UNDO - Incorrect oldRecordId for Village.");
             			}
-	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 	                		relationship = true;                                        
 	                	} 	
  	                    break;
@@ -681,7 +659,7 @@
  	                	}else {
             				logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
             			}
-	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 	                		relationship = true;                                        
 	                	} 	
  	                    break; 	               
@@ -695,14 +673,14 @@
 	                	}else {
             				logger.error("UNDO - Incorrect oldRecordId for Territory.");
             			}	
-	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 	                		relationship = true;                                      
 	                	} 	        	
 	                    break;
 	                case 10: //Note habitat	                		                			                		  
                 		occurrence.getHabitat().setNote(oldValue);		                	
 	                	logger.debug("Set selected value for update of attribute Note.");
-	                	if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 	                		relationship = true;                                        
 	                	} 	
 	                	break;
@@ -823,9 +801,7 @@
             logger.error("Searching historyChangeId failed. Unable to execute search query.");
         } catch (RemoteException e) {		 
      	   System.err.println("RemoteException- searchHistoryChangeId(), executeQuery");
- 	    } finally {
-     	   logger.debug("Searching historyChangeId ends successfully.");
-        }         
+ 	    }        
  	    
  	    int countResult = 100;
  	    try {

Modified: trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-20 19:51:31 UTC (rev 161)
+++ trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-20 21:40:28 UTC (rev 162)
@@ -5,15 +5,8 @@
 
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
-import java.awt.event.WindowEvent;
-import java.awt.event.WindowListener;
-import java.beans.PropertyChangeEvent;
-import java.beans.PropertyChangeListener;
 import java.util.ArrayList;
 
-import net.sf.plantlore.client.Settings;
-import net.sf.plantlore.client.SettingsView;
-import net.sf.plantlore.common.*;
 
 
 import org.apache.log4j.Logger;
@@ -43,7 +36,7 @@
         view.selectAllButton.addActionListener(new selectAllButtonListener());
         view.unselectAllButton.addActionListener(new unselectAllButtonListener());
         view.undoButton.addActionListener(new undoSelectedButtonListener());
-        view.toDisplayValueTextField.addPropertyChangeListener(new rowSetDisplayChangeListener());        
+        view.toDisplayValueTextField.addActionListener(new rowSetDisplayChangeListener());           
     }
     
         /** 
@@ -197,8 +190,8 @@
    /**
     * 
     */
-   class rowSetDisplayChangeListener implements PropertyChangeListener {
-	   public void propertyChange(PropertyChangeEvent e) {
+    class rowSetDisplayChangeListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent) {
            // Save old value
            int oldValue = model.getDisplayRows();           
            // Check whether new value > 0

Modified: trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java	2006-04-20 19:51:31 UTC (rev 161)
+++ trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java	2006-04-20 21:40:28 UTC (rev 162)
@@ -2,13 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.HashSet;
-import java.util.Set;
-
-import javax.swing.DefaultCellEditor;
-import javax.swing.JCheckBox;
 import javax.swing.table.AbstractTableModel;
-import javax.swing.table.TableColumn;
-import javax.swing.table.TableColumnModel;
 
 import org.apache.log4j.Logger;
 
@@ -262,8 +256,7 @@
      * @param itemId
      * @return
      */
-    public int searchSmaller(String item, int itemId) {    	
-    	int itemNewId = -1;
+    public int searchSmaller(String item, int itemId) {    	    	
     	int firstRow = model.getCurrentFirstRow();
     	for( int i=itemId-firstRow; i >=0 ; i--){
     		if (getValueAt(i,3).equals(item)){

Modified: trunk/src/net/sf/plantlore/client/history/HistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-20 19:51:31 UTC (rev 161)
+++ trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-20 21:40:28 UTC (rev 162)
@@ -8,6 +8,7 @@
 
 import java.util.Observable;
 import java.util.Observer;
+import javax.swing.JDialog;
 import javax.swing.JOptionPane;
 import javax.swing.JTable;
 import net.sf.plantlore.l10n.L10n;
@@ -30,6 +31,7 @@
                 
         super(parent, modal);
         this.model = model;
+        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
         initComponents();
         getTable().setModel(new HistoryTableModel(model));
     }

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistory.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistory.java	2006-04-20 19:51:31 UTC (rev 161)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistory.java	2006-04-20 21:40:28 UTC (rev 162)
@@ -40,9 +40,7 @@
 public class WholeHistory {
     
       /** Instance of a logger */
-    private Logger logger;   
-    /** Exception with details about an error */
-    private DBLayerException error = null;
+    private Logger logger;      
     /** Instance of a database management object */
     private DBLayer database;   
     /** Constant with default number of rows to display */
@@ -88,22 +86,19 @@
     /** Operation whitch was used*/   
     private int operation;
     /** Date and time when the reccord was changed*/
-    private java.util.Date when = new Date();	
+    //private java.util.Date when = new Date();	
     /** Old value of attribute*/    
     private String oldValue;
     /** New value of attribute*/
-    private String newValue;
+    //private String newValue;
    /** Name of user who did changed*/
-    private String nameUser;
+    //private String nameUser;
     
     //********************************************************//
     /** Mapping of entities */
     private Hashtable<String, Integer> publicationHash;
     private Hashtable<String, Integer> habitatHash;
     private Hashtable<String, Integer> occurrenceHash;  
-    private Hashtable<String, Integer> villageHash;
-    private Hashtable<String, Integer> territoryHash;
-    private Hashtable<String, Integer> phytochorionHash;
     private Hashtable<String, Integer> authorHash;
     
     
@@ -142,16 +137,14 @@
         int resultId = 0;
         try {
             // Execute query                    
-            resultId = database.executeQuery(query);        
+            resultId = database.executeQuery(query);
+            // Save "edit" history data
+            setResultId(resultId);    
         } catch (DBLayerException e) {                            
             logger.error("Searching whole history data failed. Unable to execute search query.");           
         } catch (RemoteException e) { 		   
      	   System.err.println("RemoteException- searchWholeHistoryData(), executeQuery");
-        } finally {
-                logger.debug("Searching whole history data ends successfully");
-                // Save "edit" history data
-                setResultId(resultId);                  
-        }              
+        }          
     }
     
    /**
@@ -193,14 +186,12 @@
                     for (int i=0; i<countResult; i++ ) {                    							
 						Object[] objHis = (Object[])objectHistory[i];
                         this.historyDataList.add((HistoryRecord)objHis[0]);
-                    }                     
+                    }           
+                    //Update current first displayed row (only if data retrieval was successful)
+                    setCurrentFirstRow(fromTable); 
                 } catch (DBLayerException e) {                  
                     logger.error("Processing search results failed: "+e.toString());            
-                } finally { 
-                    logger.debug("Sets 'edit' data ends successfully");
-                    //Update current first displayed row (only if data retrieval was successful)
-                    setCurrentFirstRow(fromTable);                    
-                }               
+                }             
             }
         }         
     }
@@ -235,11 +226,11 @@
                /** 
                 * Pri insertu a editu nedohledavam column --> prvne rozdelit podle operace a pro edit dale rozdelit podle column
                 */
-                if (operation == historyChange.HISTORYCHANGE_INSERT) {
+                if (operation == HistoryChange.HISTORYCHANGE_INSERT) {
                     undoInsertDelete(0);
-                } else if (operation == historyChange.HISTORYCHANGE_EDIT || operation == historyChange.HISTORYCHANGE_EDITGROUP) {
+                } else if (operation == HistoryChange.HISTORYCHANGE_EDIT || operation == HistoryChange.HISTORYCHANGE_EDITGROUP) {
                     undoEdit();
-                } else if (operation == historyChange.HISTORYCHANGE_DELETE) {
+                } else if (operation == HistoryChange.HISTORYCHANGE_DELETE) {
                     undoInsertDelete(1);
                 } else {
                     logger.error("Incorrect opreration code: "+ operation);
@@ -476,7 +467,7 @@
                  */ 	                		  
                 occurrence.getHabitat().setQuadrant(oldValue);		                	
                 logger.debug("Set selected value for update of attribute Quadrant.");
-                if (operation == historyChange.HISTORYCHANGE_EDIT) {
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {
                 // existuji dva edity EDIT (ovlivni jeden nalez) a EDITGROUP (ovlivni vice nalezu)
                 // potrebujeme zjistit, zda pro dany nalez je vazeba mezi tHabitats a tOccurrences vzdy 1:N
                 // nebo zda editaci nalezu vznikla vazvba 1:1
@@ -486,35 +477,35 @@
         case 2: //Place description 	                	 	                			                		 
                 occurrence.getHabitat().setDescription(oldValue);		                	
                 logger.debug("Set selected value for update of attribute Description.");
-                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 //                        relationship = true;
                 } 	              	
                 break;
         case 3:  //Country 	                	 	                			                		 
                 occurrence.getHabitat().setCountry(oldValue);		                	
                 logger.debug("Set selected value for update of attribute Country.");
-                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 //                        relationship = true;
                 } 	
             break;
         case 4: //Altitude 	                	                			                		 
                 occurrence.getHabitat().setAltitude(Double.parseDouble(oldValue));		                	
                 logger.debug("Set selected value for update of attribute Altitude.");
-                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 //                        relationship = true;
                 } 	
                 break;
         case 5:  //Latitude   	                		                			                		  
                 occurrence.getHabitat().setLatitude(Double.parseDouble(oldValue));		                	
                 logger.debug("Set selected value for update of attribute Latitude.");
-                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 //                        relationship = true;
                 } 	
             break;
         case 6: //Longitude 	                		                			                		
                 occurrence.getHabitat().setLongitude(Double.parseDouble(oldValue));		                	
                 logger.debug("Set selected value for update of attribute Longitude.");
-                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 //                        relationship = true;
                 } 	
                 break;
@@ -528,7 +519,7 @@
                 } else {
                         logger.error("UNDO - Incorrect oldRecordId for Village.");
                 }
-                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 //                        relationship = true;
                 } 	
             break;
@@ -542,7 +533,7 @@
                 }else {
                         logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
                 }
-                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 //                        relationship = true;
                 } 	
             break; 	               
@@ -556,14 +547,14 @@
                 }else {
                         logger.error("UNDO - Incorrect oldRecordId for Territory.");
                 }	
-                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 //                        relationship = true;
                 } 	        	
             break;
         case 10: //Note habitat	                		                			                		  
                 occurrence.getHabitat().setNote(oldValue);		                	
                 logger.debug("Set selected value for update of attribute Note.");
-                if (operation == historyChange.HISTORYCHANGE_EDIT) {	                		
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
 //                        relationship = true;
                 } 	
                 break;
@@ -863,10 +854,7 @@
             logger.error("Searching " +typeObject+ " failed. Unable to execute search query.");
         } catch (RemoteException e) {		 
      	   System.err.println("RemoteException- executeQuery " +typeObject);
- 	} finally {
-     	   logger.debug("Searching " +typeObject+ " ends successfully");
-        }         
-
+ 	} 
        Object[] objects = null;
        Object[] object = null;
        try {
@@ -880,9 +868,9 @@
        } catch (DBLayerException e) {
            // Log and set error in case of an exception
            logger.error("Processing search " +typeObject+ " results failed: "+e.toString());            
-       } finally {     	    
-    	   return object; 	       	          	   
-       }     	        
+       }     	    
+        return object; 	       	          	   
+           	        
     }
     
     /**
@@ -962,8 +950,7 @@
      * @param id
      * @return
      */
-    public int searchHistoryChangeId(int id){
-    	HistoryChange historyChange = ((HistoryRecord)historyDataList.get(id)).getHistoryChange();
+    public int searchHistoryChangeId(int id){    	
     	SelectQuery query = null;
         try {
         	    query = database.createQuery(HistoryRecord.class);
@@ -983,10 +970,8 @@
             logger.error("Searching historyChangeId failed. Unable to execute search query.");
         } catch (RemoteException e) {		 
      	   System.err.println("RemoteException- searchHistoryChangeId(), executeQuery");
- 	    } finally {
-     	   logger.debug("Searching historyChangeId ends successfully.");
-        }         
- 	    
+ 	    } 
+        
  	    int countResult = 100;
  	    try {
 			countResult = database.getNumRows(resultIdChange);

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java	2006-04-20 19:51:31 UTC (rev 161)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java	2006-04-20 21:40:28 UTC (rev 162)
@@ -11,13 +11,9 @@
 
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
-import java.beans.PropertyChangeEvent;
-import java.beans.PropertyChangeListener;
 import org.apache.log4j.Logger;
 
 
-
-
 /**
  *
  * @author Lada
@@ -41,7 +37,8 @@
         view.previousButton.addActionListener(new previousButtonListener());
         view.nextButton.addActionListener(new nextButtonListener());     
         view.undoToDateButton.addActionListener(new undoToDateButtonListener());
-        view.toDisplayValueTextField.addPropertyChangeListener(new rowSetDisplayChangeListener());        
+        view.detailsButton.addActionListener(new detailsHistoryListener());
+        view.toDisplayValueTextField.addActionListener(new rowSetDisplayChangeListener());       
     }
     
             /** 
@@ -133,8 +130,8 @@
       /**
     * 
     */
-   class rowSetDisplayChangeListener implements PropertyChangeListener {
-	   public void propertyChange(PropertyChangeEvent e) {
+     class rowSetDisplayChangeListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent) {
            // Save old value
            int oldValue = model.getDisplayRows();           
            // Check whether new value > 0
@@ -199,4 +196,21 @@
            }
        }
     }
+    
+    /**
+    *
+    */  
+    class detailsHistoryListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+           if (view.tableHistoryList.getSelectedRow() < 0) {    
+               view.messageUndoSelection();
+           } else {
+               //zobrazi se detailni informace o vybranem zaznamu
+               DetailsHistoryView detailsView = new DetailsHistoryView(model, view, true);
+               detailsView.setVisible(true);
+               //jeste kontroler
+           }          
+       }
+    }
 }

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistoryView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryView.form	2006-04-20 19:51:31 UTC (rev 161)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryView.form	2006-04-20 21:40:28 UTC (rev 162)
@@ -109,39 +109,35 @@
                   <Group type="102" attributes="0">
                       <EmptySpace max="-2" attributes="0"/>
                       <Group type="103" groupAlignment="0" attributes="0">
-                          <Group type="102" attributes="0">
-                              <Group type="103" groupAlignment="0" attributes="0">
-                                  <Component id="undoToDateButton" alignment="0" min="-2" pref="126" max="-2" attributes="1"/>
-                                  <Group type="102" alignment="0" attributes="0">
-                                      <Component id="totalResultLabel" min="-2" max="-2" attributes="0"/>
-                                      <EmptySpace max="-2" attributes="0"/>
-                                      <Component id="totalResultValueLabel" min="-2" max="-2" attributes="0"/>
-                                  </Group>
-                                  <Group type="102" alignment="0" attributes="0">
-                                      <Group type="103" groupAlignment="0" attributes="0">
-                                          <Component id="displayedLabel" alignment="0" min="-2" max="-2" attributes="0"/>
-                                          <Component id="toDisplayLabel" alignment="0" min="-2" max="-2" attributes="0"/>
-                                      </Group>
-                                      <EmptySpace max="-2" attributes="0"/>
-                                      <Group type="103" groupAlignment="0" attributes="0">
-                                          <Group type="102" attributes="0">
-                                              <EmptySpace min="10" pref="10" max="10" attributes="0"/>
-                                              <Component id="toDisplayValueTextField" alignment="0" min="-2" pref="31" max="-2" attributes="0"/>
-                                          </Group>
-                                          <Component id="displayedValueLabel" alignment="0" min="-2" max="-2" attributes="0"/>
-                                      </Group>
-                                  </Group>
-                              </Group>
+                          <Group type="102" alignment="0" attributes="0">
+                              <Component id="totalResultLabel" min="-2" max="-2" attributes="0"/>
                               <EmptySpace max="-2" attributes="0"/>
+                              <Component id="totalResultValueLabel" min="-2" max="-2" attributes="0"/>
                           </Group>
                           <Group type="102" alignment="0" attributes="0">
-                              <Group type="103" groupAlignment="1" max="-2" attributes="0">
-                                  <Component id="nextButton" alignment="0" max="32767" attributes="1"/>
-                                  <Component id="previousButton" alignment="0" pref="125" max="32767" attributes="1"/>
+                              <Group type="103" groupAlignment="0" attributes="0">
+                                  <Component id="displayedLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                                  <Component id="toDisplayLabel" alignment="0" min="-2" max="-2" attributes="0"/>
                               </Group>
-                              <EmptySpace pref="15" max="32767" attributes="0"/>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Group type="103" groupAlignment="0" attributes="0">
+                                  <Group type="102" attributes="0">
+                                      <EmptySpace min="10" pref="10" max="10" attributes="0"/>
+                                      <Component id="toDisplayValueTextField" alignment="0" min="-2" pref="31" max="-2" attributes="0"/>
+                                  </Group>
+                                  <Component id="displayedValueLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                              </Group>
                           </Group>
+                          <Group type="103" alignment="0" groupAlignment="1" max="-2" attributes="0">
+                              <Component id="nextButton" alignment="0" max="32767" attributes="1"/>
+                              <Component id="previousButton" alignment="0" pref="125" max="32767" attributes="1"/>
+                          </Group>
+                          <Group type="103" alignment="0" groupAlignment="1" max="-2" attributes="0">
+                              <Component id="detailsButton" alignment="0" max="32767" attributes="1"/>
+                              <Component id="undoToDateButton" alignment="0" pref="126" max="32767" attributes="1"/>
+                          </Group>
                       </Group>
+                      <EmptySpace max="32767" attributes="0"/>
                   </Group>
               </Group>
             </DimensionLayout>
@@ -149,7 +145,9 @@
               <Group type="103" groupAlignment="0" attributes="0">
                   <Group type="102" alignment="1" attributes="0">
                       <Component id="undoToDateButton" min="-2" max="-2" attributes="0"/>
-                      <EmptySpace pref="94" max="32767" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="detailsButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace pref="65" max="32767" attributes="0"/>
                       <Group type="103" groupAlignment="3" attributes="0">
                           <Component id="totalResultLabel" alignment="3" min="-2" max="-2" attributes="0"/>
                           <Component id="totalResultValueLabel" alignment="3" min="-2" max="-2" attributes="0"/>
@@ -256,6 +254,16 @@
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
+            <Component class="javax.swing.JButton" name="detailsButton">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;detailsHistory&quot;)" type="code"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
           </SubComponents>
         </Container>
       </SubComponents>

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java	2006-04-20 19:51:31 UTC (rev 161)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java	2006-04-20 21:40:28 UTC (rev 162)
@@ -9,8 +9,8 @@
 import java.util.Observable;
 import java.util.Observer;
 import javax.swing.DefaultListSelectionModel;
+import javax.swing.JDialog;
 import javax.swing.JOptionPane;
-import javax.swing.JTable;
 import net.sf.plantlore.l10n.L10n;
 
 /**
@@ -29,6 +29,7 @@
         
         super(parent, modal);
         this.model = model;
+        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
         initComponents();
         this.tableHistoryList.setRowSelectionAllowed(true);
         this.tableHistoryList.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
@@ -59,6 +60,7 @@
         toDisplayValueTextField = new javax.swing.JTextField();
         nextButton = new javax.swing.JButton();
         previousButton = new javax.swing.JButton();
+        detailsButton = new javax.swing.JButton();
         okButton = new javax.swing.JButton();
         closeButton = new javax.swing.JButton();
         helpButton = new javax.swing.JButton();
@@ -97,6 +99,8 @@
 
         previousButton.setText(L10n.getString("prevButton"));
 
+        detailsButton.setText(L10n.getString("detailsHistory"));
+
         org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
         jPanel2.setLayout(jPanel2Layout);
         jPanel2Layout.setHorizontalGroup(
@@ -105,34 +109,34 @@
                 .addContainerGap()
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jPanel2Layout.createSequentialGroup()
+                        .add(totalResultLabel)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(totalResultValueLabel))
+                    .add(jPanel2Layout.createSequentialGroup()
                         .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
-                            .add(undoToDateButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(displayedLabel)
+                            .add(toDisplayLabel))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                             .add(jPanel2Layout.createSequentialGroup()
-                                .add(totalResultLabel)
-                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                                .add(totalResultValueLabel))
-                            .add(jPanel2Layout.createSequentialGroup()
-                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
-                                    .add(displayedLabel)
-                                    .add(toDisplayLabel))
-                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
-                                    .add(jPanel2Layout.createSequentialGroup()
-                                        .add(10, 10, 10)
-                                        .add(toDisplayValueTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
-                                    .add(displayedValueLabel))))
-                        .addContainerGap())
-                    .add(jPanel2Layout.createSequentialGroup()
-                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
-                            .add(org.jdesktop.layout.GroupLayout.LEADING, nextButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
-                            .add(org.jdesktop.layout.GroupLayout.LEADING, previousButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
-                        .addContainerGap(15, Short.MAX_VALUE))))
+                                .add(10, 10, 10)
+                                .add(toDisplayValueTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                            .add(displayedValueLabel)))
+                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
+                        .add(org.jdesktop.layout.GroupLayout.LEADING, nextButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                        .add(org.jdesktop.layout.GroupLayout.LEADING, previousButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
+                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
+                        .add(org.jdesktop.layout.GroupLayout.LEADING, detailsButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                        .add(org.jdesktop.layout.GroupLayout.LEADING, undoToDateButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)))
+                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         );
         jPanel2Layout.setVerticalGroup(
             jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                 .add(undoToDateButton)
-                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 94, Short.MAX_VALUE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(detailsButton)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 65, Short.MAX_VALUE)
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                     .add(totalResultLabel)
                     .add(totalResultValueLabel))
@@ -250,6 +254,7 @@
     
     // Variables declaration - do not modify//GEN-BEGIN:variables
     protected javax.swing.JButton closeButton;
+    protected javax.swing.JButton detailsButton;
     private javax.swing.JLabel displayedLabel;
     protected javax.swing.JLabel displayedValueLabel;
     protected javax.swing.JButton helpButton;

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-20 19:51:31 UTC (rev 161)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-20 21:40:28 UTC (rev 162)
@@ -99,6 +99,7 @@
 unselectAll = Unselect all
 undoSelected = Undo selected
 undoToDate = Undo to Date
+detailsHistory = Details
 #History - information about result and displayed rows
 totalResult = Total results:
 displayed = Displayed rows:



From lada at berlios.de  Thu Apr 20 23:43:15 2006
From: lada at berlios.de (lada at berlios.de)
Date: Thu, 20 Apr 2006 23:43:15 +0200
Subject: [Plantlore-dev] r163 - trunk/analysis/database
Message-ID: <200604202143.k3KLhFW4000954@sheep.berlios.de>

Author: lada
Date: 2006-04-20 23:43:13 +0200 (Thu, 20 Apr 2006)
New Revision: 163

Added:
   trunk/analysis/database/DBmodel_MySQL.sql
   trunk/analysis/database/DBmodel_jinak.jpg
Log:
Database - Add sql code for MySQL. Add DBdiagram generated in DBVisualizer.

Added: trunk/analysis/database/DBmodel_MySQL.sql
===================================================================
--- trunk/analysis/database/DBmodel_MySQL.sql	2006-04-20 21:40:28 UTC (rev 162)
+++ trunk/analysis/database/DBmodel_MySQL.sql	2006-04-20 21:43:13 UTC (rev 163)
@@ -0,0 +1,265 @@
+
+CREATE TABLE TAUTHORS (
+    CID               INTEGER NOT NULL auto_increment,    
+    CWHOLENAME        VARCHAR(50) CHARACTER SET UTF8,
+    CORGANIZATION     VARCHAR(50) CHARACTER SET UTF8,
+    CTELEPHONENUMBER  VARCHAR(20) CHARACTER SET UTF8,
+    CROLE             VARCHAR(30) CHARACTER SET UTF8,
+    CADDRESS          VARCHAR(255) CHARACTER SET UTF8,
+    CEMAIL            VARCHAR(100) CHARACTER SET UTF8,
+    CURL              VARCHAR(255) CHARACTER SET UTF8,
+    CNOTE             VARCHAR(4096) CHARACTER SET UTF8,
+    CDELETE           SMALLINT DEFAULT 0,
+PRIMARY KEY (CID));
+
+CREATE TABLE TMETADATA (
+    CID                       INTEGER NOT NULL auto_increment,
+    CTECHNICALCONTACTNAME     VARCHAR(50) CHARACTER SET UTF8 NOT NULL,
+    CTECHNICALCONTACTEMAIL    VARCHAR(100) CHARACTER SET UTF8,
+    CTECHNICALCONTACTADDRESS  VARCHAR(255) CHARACTER SET UTF8,
+    CCONTENTCONTACTNAME       VARCHAR(50) CHARACTER SET UTF8 NOT NULL,
+    CCONTENTCONTACTEMAIL      VARCHAR(100) CHARACTER SET UTF8,
+    CCONTENTCONTACTADDRESS    VARCHAR(255) CHARACTER SET UTF8,
+    CDATASETTITLE             VARCHAR(50) CHARACTER SET UTF8 NOT NULL,
+    CDATASETDETAILS           VARCHAR(255) CHARACTER SET UTF8,
+    CSOURCEINSTITUTIONID      VARCHAR(50) CHARACTER SET UTF8 NOT NULL,
+    CSOURCEID                 VARCHAR(50) CHARACTER SET UTF8 NOT NULL,
+    COWNERORGANIZATIONABBREV  VARCHAR(50) CHARACTER SET UTF8,
+    CDATECREATE               TIMESTAMP NOT NULL,
+    CDATEMODIFIED             TIMESTAMP NOT NULL,
+    CRECORDBASIS              VARCHAR(15) CHARACTER SET UTF8,
+    CBIOTOPETEXT              VARCHAR(50) CHARACTER SET UTF8,
+    CVERSIONPLANTSFILE        SMALLINT DEFAULT 0,
+PRIMARY KEY (CID));
+
+CREATE TABLE TPLANTS (
+    CID                    INTEGER NOT NULL auto_increment,
+    CSURVEYTAXID           VARCHAR(20) CHARACTER SET UTF8 NOT NULL,
+    CTAXON                 VARCHAR(255) CHARACTER SET UTF8 NOT NULL,
+    CGENUS                 VARCHAR(30) CHARACTER SET UTF8,
+    CSPECIES               VARCHAR(100) CHARACTER SET UTF8,
+    CSCIENTIFICNAMEAUTHOR  VARCHAR(150) CHARACTER SET UTF8 NOT NULL,
+    CCZECHNAME             VARCHAR(50) CHARACTER SET UTF8,
+    CSYNONYMS              VARCHAR(255) CHARACTER SET UTF8,
+    CNOTE                  VARCHAR(255) CHARACTER SET UTF8,
+PRIMARY KEY (CID));
+
+CREATE TABLE TPUBLICATIONS (
+    CID                         INTEGER NOT NULL auto_increment,
+    CCOLLECTIONNAME             VARCHAR(30) CHARACTER SET UTF8,
+    CCOLLECTIONYEARPUBLICATION  SMALLINT,
+    CJOURNALNAME                VARCHAR(60) CHARACTER SET UTF8,
+    CJOURNALAUTHORNAME          VARCHAR(30) CHARACTER SET UTF8,
+    CREFERENCECITATION          VARCHAR(255) NOT NULL,
+    CREFERENCEDETAIL            VARCHAR(20) CHARACTER SET UTF8,
+    CURL                        VARCHAR(100) CHARACTER SET UTF8,
+    CNOTE                       VARCHAR(4096) CHARACTER SET UTF8,
+    CDELETE                     SMALLINT DEFAULT 0,
+PRIMARY KEY (CID));
+
+CREATE TABLE TRIGHT (
+    CID             INTEGER NOT NULL auto_increment,
+    CADMINISTRATOR  SMALLINT,
+    CEDITALL        SMALLINT,
+    CEDITOWN        SMALLINT,
+    CEDITGROUP      VARCHAR(4096) CHARACTER SET UTF8,
+    CSEECOLUMNS     VARCHAR(4096) CHARACTER SET UTF8,
+    CADD            SMALLINT,
+PRIMARY KEY (CID));
+
+CREATE TABLE TTERRITORIES (
+    CID    INTEGER NOT NULL auto_increment,
+    CNAME  VARCHAR(100) CHARACTER SET UTF8 NOT NULL,
+PRIMARY KEY (CID));
+
+CREATE TABLE TVILLAGES (
+    CID    INTEGER NOT NULL auto_increment,
+    CNAME  VARCHAR(50) CHARACTER SET UTF8 NOT NULL,
+PRIMARY KEY (CID)); 
+
+CREATE TABLE TPHYTOCHORIA (
+    CID    INTEGER NOT NULL auto_increment,
+    CCODE  VARCHAR(5) CHARACTER SET UTF8 NOT NULL,
+    CNAME  VARCHAR(50) CHARACTER SET UTF8 NOT NULL,
+PRIMARY KEY (CID));
+
+CREATE TABLE TLASTUPDATE (
+    CID          INTEGER NOT NULL auto_increment,
+    CTABLENAME   VARCHAR(20) CHARACTER SET UTF8 NOT NULL,
+    CLASTUPDATE  TIMESTAMP NOT NULL,
+PRIMARY KEY (CID));
+
+CREATE TABLE TUSER (
+    CID          INTEGER NOT NULL auto_increment,
+    CLOGIN       VARCHAR(20) NOT NULL,
+    CPASSWORD    SMALLINT,
+    CFIRSTNAME   VARCHAR(20) CHARACTER SET UTF8,
+    CSURNAME     VARCHAR(30) CHARACTER SET UTF8,
+    CWHOLENAME   VARCHAR(50) CHARACTER SET UTF8,
+    CEMAIL       VARCHAR(50) CHARACTER SET UTF8,
+    CADDRESS     VARCHAR(255) CHARACTER SET UTF8,
+    CCREATEWHEN  TIMESTAMP NOT NULL,
+    CDROPWHEN    TIMESTAMP,
+    CRIGHTID     INTEGER NOT NULL ,
+    CNOTE        VARCHAR(4096) CHARACTER SET UTF8,
+PRIMARY KEY (CID),
+FOREIGN KEY (CRIGHTID) REFERENCES tright(CID));
+
+CREATE TABLE THABITATS (
+    CID                INTEGER NOT NULL auto_increment,
+    CTERRITORYID       INTEGER NOT NULL,
+    CPHYTOCHORIAID     INTEGER NOT NULL,
+    CQUADRANT          VARCHAR(10) CHARACTER SET UTF8,
+    CDESCRIPTION       VARCHAR(255) CHARACTER SET UTF8,
+    CNEARESTVILLAGEID  INTEGER NOT NULL,
+    CCOUNTRY           VARCHAR(30) CHARACTER SET UTF8,
+    CALTITUDE          DECIMAL(6,2),
+    CLATITUDE          DOUBLE PRECISION,
+    CLONGITUDE         DOUBLE PRECISION,
+    CNOTE              VARCHAR(4096) CHARACTER SET UTF8,
+    CDELETE            SMALLINT DEFAULT 0 ,
+PRIMARY KEY (CID),
+FOREIGN KEY (CTERRITORYID) REFERENCES TTERRITORIES(CID),
+FOREIGN KEY (CPHYTOCHORIAID) REFERENCES TPHYTOCHORIA(CID),
+FOREIGN KEY (CNEARESTVILLAGEID) REFERENCES TVILLAGES(CID));
+
+
+CREATE TABLE TOCCURRENCES (
+    CID                INTEGER NOT NULL auto_increment,
+    CUNITIDDB          VARCHAR(30) CHARACTER SET UTF8 NOT NULL,
+    CUNITVALUE         VARCHAR(30) CHARACTER SET UTF8 NOT NULL,
+    CHABITATID         INTEGER NOT NULL,
+    CPLANTID           INTEGER NOT NULL,
+    CYEARCOLLECTED     SMALLINT DEFAULT 0 NOT NULL,
+    CMONTHCOLLECTED    SMALLINT DEFAULT 0,
+    CDAYCOLLECTED      SMALLINT DEFAULT 0,
+    CTIMECOLLECTED     TIME,
+    CISODATETIMEBEGIN  TIMESTAMP,
+    CDATASOURCE        VARCHAR(50) CHARACTER SET UTF8,
+    CPUBLICATIONSID    INTEGER,
+    CHERBARIUM         VARCHAR(20) CHARACTER SET UTF8,
+    CCREATEWHEN        TIMESTAMP NOT NULL,
+    CCREATEWHO         INTEGER NOT NULL,
+    CUPDATEWHEN        TIMESTAMP NOT NULL,
+    CUPDATEWHO         INTEGER NOT NULL,
+    CNOTE              VARCHAR(4096) CHARACTER SET UTF8,
+    CMETADATAID        INTEGER NOT NULL,
+    CDELETE            SMALLINT DEFAULT 0,
+PRIMARY KEY (CID),
+FOREIGN KEY (CHABITATID) REFERENCES THABITATS(CID),
+FOREIGN KEY (CPLANTID) REFERENCES TPLANTS(CID),
+FOREIGN KEY (CPUBLICATIONSID) REFERENCES TPUBLICATIONS(CID),
+FOREIGN KEY (CCREATEWHO) REFERENCES TUSER(CID),
+FOREIGN KEY (CUPDATEWHO) REFERENCES TUSER(CID),
+FOREIGN KEY (CMETADATAID) REFERENCES TMETADATA(CID));
+
+CREATE TABLE TAUTHORSOCCURRENCES (
+    CAUTHORID          INTEGER NOT NULL auto_increment,
+    COCCURRENCEID      INTEGER NOT NULL,
+    CID                INTEGER NOT NULL,
+    CROLE              VARCHAR(20) CHARACTER SET UTF8,
+    CRESULTREVISION  VARCHAR(30) CHARACTER SET UTF8,
+PRIMARY KEY (CID),
+FOREIGN KEY (CAUTHORID) REFERENCES TAUTHORS(CID),
+FOREIGN KEY (COCCURRENCEID) REFERENCES TOCCURRENCES(CID));
+
+CREATE TABLE THISTORYCOLUMN (
+    CID          INTEGER NOT NULL auto_increment,
+    CTABLENAME   VARCHAR(20) CHARACTER SET UTF8 NOT NULL,
+    CCOLUMNNAME  VARCHAR(20) CHARACTER SET UTF8,
+PRIMARY KEY (CID));
+
+CREATE TABLE THISTORYCHANGE (
+    CID            INTEGER NOT NULL auto_increment,
+    COCCURRENCEID  INTEGER  DEFAULT 0 NOT NULL,
+    CRECORDID      INTEGER  DEFAULT 0 NOT NULL,
+    COLDRECORDID   INTEGER,
+    COPERATION     SMALLINT  DEFAULT 0 NOT NULL,
+    CWHEN          TIMESTAMP NOT NULL,
+    CWHO           INTEGER NOT NULL,
+PRIMARY KEY (CID),
+FOREIGN KEY (COCCURRENCEID) REFERENCES TOCCURRENCES(CID),
+FOREIGN KEY (CWHO) REFERENCES TUSER(CID));
+
+CREATE TABLE THISTORY (
+        CID       INTEGER NOT NULL auto_increment,
+        CCOLUMNID INTEGER NOT NULL,
+        CCHANGEID INTEGER NOT NULL,
+        COLDVALUE VARCHAR(4096) CHARACTER SET UTF8,
+        CNEWVALUE VARCHAR(4096) CHARACTER SET UTF8,
+PRIMARY KEY (CID),
+FOREIGN KEY (CCOLUMNID) REFERENCES THISTORYCOLUMN(CID),
+FOREIGN KEY (CCHANGEID) REFERENCES THISTORYCHANGE(CID));
+
+
+
+/**********************************ZATIM NEUPRAVENO PRO MYSQL*******************/
+/* Grant role for this database */
+
+/* Role: BOTANIK, Owner: SYSDBA */
+CREATE ROLE defaultAdmin;
+CREATE ROLE defaultUser;
+CREATE ROLE WWW;
+
+/* Grant permissions for this database */
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TAUTHORS TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TAUTHORSOCCURRENCES TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON THABITATS TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON THISTORY TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON THISTORYCHANGE TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON THISTORYCOLUMN TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TMETADATA TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TOCCURRENCES TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TPHYTOCHORIA TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TPLANTS TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TTERRITORIES TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TUSER TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TRIGHT TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TVILLAGES TO ROLE defaultAdmin;
+GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON TPUBLICATIONS TO ROLE defaultAdmin;
+GRANT defaultAdmin TO LADA;
+GRANT defaultAdmin TO SYSDBA;
+
+/* View: TAUTHORREVISION */
+CREATE VIEW TAUTHORREVISION(
+    CID,
+    COCCURRENCEID,
+    CWHOLENAME,
+    CEMAIL,
+    CADDRESS,
+    CRESULTREVISION,
+    CDAY,
+    CMONTH,
+    CYEAR)
+AS
+select AO.CID, AO.coccurrenceid, A.cwholename, A.CEMAIL, A.CADDRESS, AO.cresultrevisition, O.cdaycollected, O.cmonthcollected, O.cyearcollected
+from TAUTHORS A JOIN TAUTHORSOCCURRENCES AO JOIN toccurrences O  ON (A.CID = AO.cauthorid) ON (AO.coccurrenceid = O.cid)
+WHERE AO.crole = 'revision'
+;
+
+/* View: TAUTHORCOLLECT */
+CREATE VIEW TAUTHORCOLLECT(
+    CID,    
+    COCCURRENCEID,
+    CWHOLENAME,
+    CORGANIZATION,
+    CEMAIL,
+    CADDRESS)
+AS
+select AO.CID, AO.coccurrenceid, A.CWHOLENAME, A.CORGANIZATION, A.CEMAIL, A.CADDRESS
+from TAUTHORS A JOIN TAUTHORSOCCURRENCES AO ON (A.CID = AO.cauthorid)
+WHERE AO.crole = 'collect'
+;
+
+/* View: TAUTHORIDENTIFY */
+CREATE VIEW TAUTHORIDENTIFY(
+    CID,
+    COCCURRENCEID,
+    CWHOLENAME,
+    CEMAIL,
+    CADDRESS)
+AS
+select AO.CID, AO.coccurrenceid, A.CWHOLENAME, A.CEMAIL, A.CADDRESS
+from TAUTHORS A JOIN TAUTHORSOCCURRENCES AO ON (A.CID = AO.cauthorid)
+WHERE AO.crole = 'identify'
+;

Added: trunk/analysis/database/DBmodel_jinak.jpg
===================================================================
(Binary files differ)


Property changes on: trunk/analysis/database/DBmodel_jinak.jpg
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From krater at berlios.de  Fri Apr 21 00:19:06 2006
From: krater at berlios.de (krater at berlios.de)
Date: Fri, 21 Apr 2006 00:19:06 +0200
Subject: [Plantlore-dev] r164 - in trunk/src/net/sf/plantlore: client/login server server/manager
Message-ID: <200604202219.k3KMJ6mk003346@sheep.berlios.de>

Author: krater
Date: 2006-04-21 00:19:05 +0200 (Fri, 21 Apr 2006)
New Revision: 164

Modified:
   trunk/src/net/sf/plantlore/client/login/AuthCtrl.java
   trunk/src/net/sf/plantlore/client/login/AuthView.java
   trunk/src/net/sf/plantlore/client/login/ItemCtrl.java
   trunk/src/net/sf/plantlore/client/login/ItemView.java
   trunk/src/net/sf/plantlore/client/login/Login.java
   trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
   trunk/src/net/sf/plantlore/client/login/LoginView.java
   trunk/src/net/sf/plantlore/server/Plantlore.java
   trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java
   trunk/src/net/sf/plantlore/server/RMIServer.java
   trunk/src/net/sf/plantlore/server/Server.java
   trunk/src/net/sf/plantlore/server/manager/ServerMng.java
Log:
All classes from the net.sf.plantlore.client.login package now use L10n properties and have extended comments/javadoc. Exception handling added.
Some classes from the net.sf.plantlore.server package have been simplified.

Modified: trunk/src/net/sf/plantlore/client/login/AuthCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthCtrl.java	2006-04-20 21:43:13 UTC (rev 163)
+++ trunk/src/net/sf/plantlore/client/login/AuthCtrl.java	2006-04-20 22:19:05 UTC (rev 164)
@@ -1,34 +1,65 @@
 package net.sf.plantlore.client.login;
 
 import java.awt.event.ActionEvent;
+import java.rmi.NotBoundException;
+import java.rmi.RemoteException;
 
 import javax.swing.AbstractAction;
+import javax.swing.JOptionPane;
 
+import org.apache.log4j.Logger;
+
+import net.sf.plantlore.l10n.L10n;
+import net.sf.plantlore.server.DBLayerException;
+
 public class AuthCtrl {
 	
 	private AuthView view;
 	private Login model;
 	
+	private Logger logger = Logger.getLogger(this.getClass().getPackage().getName());
+	
 	public AuthCtrl(Login login, AuthView authview) {
 		this.model = login; this.view = authview;
 		view.next.addActionListener(new Next());
+	}
 
-	}
 	
 	class Next extends AbstractAction {
 		public void actionPerformed(ActionEvent arg0) {
 			try {
-				// Go very carefully here!
 				String user = (view.user.getSelectedItem() != null) ? view.user.getSelectedItem().toString() : null;
 				if(user != null) {
 					model.connectToSelected(user, new String(view.password.getPassword()));
 					view.setVisible(false);
 				}
-				else ; // TODO: fire something must be selected info!
+				else 
+					JOptionPane.showMessageDialog(view,
+						L10n.getString("warningNoUsername"),
+					    L10n.getString("warningNoUsernameTitle"),
+					    JOptionPane.WARNING_MESSAGE);
 			} 
-			catch(Exception e) { 
-				System.err.println("The connection to the database couldn't be established!\n" + e); 
+			catch(NotBoundException e) {
+				logger.warn("The server is either not running or it is unreachable (java security policy). Details: " + e);
+				JOptionPane.showMessageDialog(view,
+						L10n.getString("errorNotBoundException"),
+					    L10n.getString("errorNotBoundExceptionTitle"),
+					    JOptionPane.WARNING_MESSAGE);
 			}
+			catch(RemoteException e) {
+				logger.warn("Either the network connection has failed or the server has crashed or gone off. Details: " + e);
+				JOptionPane.showMessageDialog(view,
+						L10n.getString("errorRemoteException"),
+					    L10n.getString("errorRemoteExceptionTitle"),
+					    JOptionPane.WARNING_MESSAGE);
+			}
+			catch(DBLayerException e) {
+				logger.warn("Unable to initialize the database layer. Details: " + e);
+				JOptionPane.showMessageDialog(view,
+						L10n.getString("errorDBLayerException") + "\n" + e,
+					    L10n.getString("errorDBLayerExceptionTitle"),
+					    JOptionPane.WARNING_MESSAGE);
+			}
 			finally { view.password.setText(""); }
 		}
 	}

Modified: trunk/src/net/sf/plantlore/client/login/AuthView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-20 21:43:13 UTC (rev 163)
+++ trunk/src/net/sf/plantlore/client/login/AuthView.java	2006-04-20 22:19:05 UTC (rev 164)
@@ -1,5 +1,5 @@
 /*
- * AuthView2.java
+ * AuthView.java
  *
  * Created on 9. duben 2006, 18:04
  */
@@ -9,9 +9,8 @@
 import java.util.Observable;
 import java.util.Observer;
 
-import javax.swing.JDialog;
-
 import net.sf.plantlore.common.AutoComboBox;
+import net.sf.plantlore.l10n.L10n;
 
 /**
  *
@@ -21,13 +20,12 @@
 	
 	private Login model;
     
-    /** Creates new form AuthView2 */
+    /** Creates new form AuthView */
     public AuthView(Login model) {
     	this.model = model;
     	model.addObserver(this);
         initComponents();
         setLocationRelativeTo(null); // center of the screen
-        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
         setModal(true);
     }
     
@@ -44,14 +42,14 @@
         password = new javax.swing.JPasswordField();
         next = new javax.swing.JButton();
 
-        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
-        jLabel1.setText("Username:");
+        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
+        jLabel1.setText(L10n.getString("Username") + ":");
 
-        jLabel2.setText("Password:");
+        jLabel2.setText(L10n.getString("Password") + ":");
         
         user.setStrict(false);
         
-        next.setText("Authorize");
+        next.setText(L10n.getString("Authorize"));
 
         org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
         getContentPane().setLayout(layout);
@@ -92,15 +90,17 @@
     }// </editor-fold>//GEN-END:initComponents
     
     
-    
+    /**
+     * Reload the list of usernames according to the currently selected record.
+     */
     public void update(Observable arg0, Object arg1) {
 		DBInfo selected = model.getSelected();
-		if(selected == null) return; // FIXME: DIALOG: SAMTIN MUST BE SELECTED
-		//System.out.println("AuthView [98] :: selected record is " + selected);
+		if(selected == null) return;
+
 		user.removeAllItems();
 		user.addItems(selected.users);
 		
-		setTitle("Connecting to " + selected.toString());
+		setTitle(L10n.getString("ConnectingTo") + " " + selected.toString());
 	}
     
     

Modified: trunk/src/net/sf/plantlore/client/login/ItemCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/ItemCtrl.java	2006-04-20 21:43:13 UTC (rev 163)
+++ trunk/src/net/sf/plantlore/client/login/ItemCtrl.java	2006-04-20 22:19:05 UTC (rev 164)
@@ -4,6 +4,8 @@
 
 import javax.swing.AbstractAction;
 
+import net.sf.plantlore.l10n.L10n;
+
 public class ItemCtrl {
 	
 	private Login model;
@@ -19,13 +21,13 @@
 		this.mode = m;
 		switch(m) {
 		case ADD:
-			view.setTitle("ADD");
+			view.setTitle(L10n.getString("AddTitle"));
 			view.alias.setText(""); 
 			view.host.setText("");
 			view.db.setText("");
 			break;
 		case EDIT:
-			view.setTitle("EDIT");
+			view.setTitle(L10n.getString("EditTitle"));
 			break;
 		}
 	}

Modified: trunk/src/net/sf/plantlore/client/login/ItemView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/ItemView.java	2006-04-20 21:43:13 UTC (rev 163)
+++ trunk/src/net/sf/plantlore/client/login/ItemView.java	2006-04-20 22:19:05 UTC (rev 164)
@@ -1,5 +1,5 @@
 /*
- * ItemView2.java
+ * ItemView.java
  *
  * Created on 9. duben 2006, 17:55
  */
@@ -9,8 +9,9 @@
 import java.util.Observable;
 import java.util.Observer;
 
-import javax.swing.JDialog;
 
+import net.sf.plantlore.l10n.L10n;
+
 /**
  *
  * @author  yaa
@@ -19,14 +20,13 @@
 	
 	private Login model;
     
-    /** Creates new form ItemView2 */
+    /** Creates new form ItemView */
     public ItemView(Login model) {
 		this.model = model;
 		model.addObserver(this);
 		initComponents();
 		setResizable(false);
 		setLocationRelativeTo(null);
-		setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
 		setModal(true);
     }
     
@@ -45,14 +45,14 @@
         db = new javax.swing.JTextField();
         next = new javax.swing.JButton();
 
-        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
-        jLabel1.setText("Alias:");
+        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
+        jLabel1.setText(L10n.getString("Alias") + ":");
 
-        jLabel2.setText("Hostname:");
+        jLabel2.setText(L10n.getString("Hostname") + ":");
 
-        jLabel3.setText("Database:");
+        jLabel3.setText(L10n.getString("Database") + ":");
 
-        next.setText("Change");
+        next.setText(L10n.getString("Change"));
 
         org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
         getContentPane().setLayout(layout);
@@ -97,7 +97,9 @@
     }// </editor-fold>//GEN-END:initComponents
     
     
-    
+    /**
+     * Fill all fields with information obtained from the currently selected record.
+     */
     public void update(Observable arg0, Object arg1) {
 		DBInfo info = model.getSelected();
 		if(info == null) return;

Modified: trunk/src/net/sf/plantlore/client/login/Login.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-20 21:43:13 UTC (rev 163)
+++ trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-20 22:19:05 UTC (rev 164)
@@ -2,8 +2,8 @@
 
 import java.rmi.NotBoundException;
 import java.rmi.RemoteException;
+import java.util.ArrayList;
 import java.util.Observable;
-import java.util.Vector;
 
 import org.apache.log4j.Logger;
 
@@ -12,22 +12,30 @@
 import net.sf.plantlore.server.DBLayerException;
 
 /**
- * 
- * Preliminary usage: <br/>
+ * Login is responsible for the following:
  * <ul>
- * <li>Login login = new Login(new RMIDBLayerFactory());</li>
- * <li>login.connectToSelected(...)</li>
+ * <li><b>management of the list of databases</b> - 
+ * 			adding, editing, removing records from the list, and the persistent storage of that list,</li>
+ * <li><b>creating and initializing a new dblayer</b> - only one at a time is active,</li>
+ * <li><b>destroying the current dblayer (logout)</b> - so as to make another connection possible</li>
  * </ul>
  * 
  * 
- * @author Erik Kratochv?l, Jakub Kotowski
- * @version 0.9
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @version 1.0
  */
 public class Login extends Observable {
 	
+	/** The maximum number of usernames the System will store for each database record.*/
 	public static final int MAX_NAMES = 5;
 
-	private Vector<DBInfo> dbinfo = new Vector<DBInfo>(10);
+	/** 
+	 * The list of databases the User has accessed. This list is unique for every User
+	 * and is stored in his home directory. 
+	 */
+	private ArrayList<DBInfo> dbinfo = new ArrayList<DBInfo>(10);
+	
+	/** The currently selected record. Null means nothing is selected. */
 	private DBInfo selected = null;
 	
 	//private String  file = System.getProperty("user.home") + "/.plantlore/db.info.xml";
@@ -51,18 +59,26 @@
 	
 	/**
 	 * Load saved information about the database connections.
-	 *
+	 * TODO: -IMPLEMENTATION MISSING-
 	 */
 	protected void load() {
 		logger.debug("Loading the stored list of databases.");
 		// TODO: JAKUB: nacist z XML souboru se jmenem `file` informace o databazich (triplety) do kolekce dbinfo.
-		dbinfo.add(new DBInfo("My Home Database", "localhost", -1,
-				"jdbc:firebirdsql:localhost/3050:c:/Temp/plantloreHIBdata.fdb", 
-				new String[] { "sysdba", null, null, null, null }));
 		
+
+		 // TEMPORARY CODE STARTS HERE
+				dbinfo.add(new DBInfo("My Home Database", "localhost", -1,
+							"jdbc:firebirdsql:localhost/3050:c:/Temp/plantloreHIBdata.fdb", 
+							new String[] { "sysdba", null, null, null, null }));
+		 // TEMPORARY CODE ENDS HERE
+		
 		this.setChanged(); this.notifyObservers();
 	}
 	
+	/**
+	 * Save the list of database connections for further usage.
+	 * TODO: -IMPLEMENTATION MISSING-
+	 */
 	protected void save() {
 		logger.debug("Saving the list of databases.");
 		// TODO: JAKUB: ulozit kolekci dbinfo zpatky do XML souboru se jmenem `file`.
@@ -72,7 +88,7 @@
 
 	/**
 	 * Create a new record, add it to the list of connections and save that information for
-	 * future use.
+	 * the future use.
 	 * 
 	 * @param alias	Alias of the database.
 	 * @param host	Hostname of the computer where the server dwells.
@@ -80,7 +96,7 @@
 	 * @param db		Identifier of the database to which the User wants to connect.
 	 */
 	public void createRecord(String alias, String host, int port, String db) {
-		DBInfo r = new DBInfo(alias, host, port, db, new String[5]);
+		DBInfo r = new DBInfo(alias, host, port, db, new String[MAX_NAMES]);
 		dbinfo.add(r);
 		logger.debug("New database record has been created " + r);
 		save();
@@ -88,10 +104,11 @@
 	}
 	
 	/**
-	 * Delete the selected record.
+	 * Delete the selected record from the list.
 	 *
 	 */
 	public void deleteSelectedRecord() {
+		if(selected == null) return;
 		dbinfo.remove(selected);
 		logger.debug("The selected record has been removed " + selected);
 		selected = null;
@@ -108,20 +125,16 @@
 	 * @param db		Identifier of the database to which the User wants to connect.
 	 */
 	public void updateSelectedRecord(String alias, String host, int port, String db) {
-		selected.alias = alias;
-		selected.host = host;
-		selected.port = port;
-		selected.db = db;
+		if(selected == null) return;
+		selected.alias = alias; selected.host = host; selected.port = port; selected.db = db;
 		logger.debug("The selected record has been updated " + selected);
 		this.setChanged(); this.notifyObservers();
 	}
 	
 	/**
-	 * 
-	 * @return
+	 * @return the list of all records.
 	 */
 	public DBInfo[] getRecords() {
-		// Well, this sucks! The ugliest way to do things... is to have a Cloneable interface and don't use it.
 		// Seeing is believing: http://java.sun.com/j2se/1.5.0/docs/api/java/util/Collection.html#toArray(T[])
 		return dbinfo.toArray(new DBInfo[0]);
 	}
@@ -129,14 +142,16 @@
 	/**
 	 * Set the selected record.
 	 * 
-	 * @param index	The index of the selected record. Zero means first. Negative means nothing gets selected.
+	 * @param index	The index of the selected record. Zero means first. 
+	 * Negative means nothing gets selected (deselect).
 	 */
 	public void setSelected(int index) {
-		if(index >= 0) selected = dbinfo.elementAt(index); else selected = null;
+		if(index >= 0) selected = dbinfo.get(index); 
+		else selected = null;
+		
 		logger.debug("Selected database is " + selected);
 		this.setChanged(); 
 		/*------------------------------------------------------------
-		 * This here is a particularly mystique code.
 		 * The reason why a parameter is used here is simple:
 		 * 1. you select something in the choice list in the LoginView ->
 		 * 2. ListSelectionEvent is fired ->
@@ -158,11 +173,33 @@
 	}
 	
 	
+	/**
+	 * Connect to the selected database. 
+	 * First, a new database layer is created,
+	 * and second, that database layer is initialized.
+	 * <br/>
+	 * <b>Warning:</b>If there is a previously created DBLayer, 
+	 * it will be destroyed using the <code>logout()</code> method. 
+	 * 	  
+	 * @param name The account name (used to access the database).  
+	 * @param password The password to the account.
+	 * @return The created and initialized DBLayer.
+	 * @throws NotBoundException if the server is unreachable (most likely because it is not running). 
+	 * @throws RemoteException if the RMI encounters an error.  
+	 * @throws DBLayerException if the initialization of the DBLayer failed - most common reasons are:
+	 * 		wrong username or password, or incorrect database model (server and client have different versions).
+	 */
 	public DBLayer connectToSelected(String name, String password) throws NotBoundException, RemoteException, DBLayerException {
 		if(selected == null) {
 			logger.debug("The System cannot create a connection when nothing was selected!");
 			return null;
 		}
+		
+		try {
+			logout();
+		} catch (RemoteException e) { logger.info("Unable to disconnect from the server. " + e); }
+		
+		// The current username is moved to the top of the list of names :) Nice feature.
 		selected.promoteUser(name);
 		// Save the current state.
 		save();
@@ -173,15 +210,15 @@
 		
 		// Initialize the database layer.
 		logger.debug("Initializing that DBLayer (" + selected.db + ", " + name + ", " + password + "...");
-		
 		try {
 			dblayer.initialize(selected.db,name, password);
 		} 
 		catch (DBLayerException exception) {
+			logger.warn("The initialization of the DBLayer failed! Here's why: " + exception);
 			// If the initialization of the DBLayer failed, the uninitialized DBLayer must be destroyed!
-			logger.warn("The initialization of the DBLayer failed. Here's why: " + exception);
+			// If it is not, the server's policy may not allow another connection from this client!
 			factory.destroy(dblayer);
-			throw exception; // rethrow that exception
+			throw exception; // rethrow that exception [so that the User also knows what happened]
 		}
 
 		logger.debug("DBLayer initialized.");
@@ -191,12 +228,25 @@
 		return dblayer;
 	}
 	
-	public void reconnect() {
-		
+	
+	/**
+	 * Disconnect from the current database. 
+	 * The database connection is lost, any operation in progress will cause an exception.
+	 * 
+	 * @throws RemoteException if the RMI encounters an error.
+	 */
+	public void logout() throws RemoteException {
+		if(dblayer != null) {
+			factory.destroy(dblayer);
+			dblayer = null;
+			logger.info("The client disconnected itself from the server. The communication may no longer be possible.");
+			this.setChanged(); this.notifyObservers();
+		}
 	}
 	
+		
 	/**
-	 * @return The last DBLayer that was created.  
+	 * @return The last DBLayer that has been created.  
 	 */	
 	public DBLayer getDBLayer() { 
 		return dblayer; 

Modified: trunk/src/net/sf/plantlore/client/login/LoginCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-20 21:43:13 UTC (rev 163)
+++ trunk/src/net/sf/plantlore/client/login/LoginCtrl.java	2006-04-20 22:19:05 UTC (rev 164)
@@ -4,10 +4,13 @@
 
 import javax.swing.AbstractAction;
 import javax.swing.JDialog;
+import javax.swing.JOptionPane;
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
 
+import net.sf.plantlore.l10n.L10n;
 
+
 public class LoginCtrl {
 	
 	private Login model;
@@ -35,6 +38,7 @@
 		view.remove.addActionListener(new RemoveRecord());
 		view.next.addActionListener(new Next());
 		
+		// Select something.
 		view.choice.setSelectedIndex(0);
 	}
 	
@@ -45,13 +49,14 @@
 			dialog = authView;
 		}
 		
-		//UNCOMMENT THIS:      dialog.setVisible(visible);
+		//UNCOMMENT THIS:      
+		//dialog.setVisible(visible);
 		
-		//==TEMPORARY CODE=================================================
-		System.out.println("HYPERACTIVE-LOGIN");
-		authView.password.setText("masterkey");
-		authView.next.doClick(); // outrageous!
-		//================================================================
+		// TEMPORARY CODE STARTS HERE
+			System.out.println("HYPERACTIVE-LOGIN");
+			authView.password.setText("masterkey");
+			authView.next.doClick(); 
+		// TEMPORARY CODE ENDS HERE
 	}
 	
 	
@@ -86,15 +91,26 @@
 	
 	class EditRecord extends AbstractAction {
 		public void actionPerformed(ActionEvent arg0) {
-			if(model.getSelected() == null) return;
-			itemCtrl.setMode(ItemCtrl.Mode.EDIT);
-			itemView.setVisible(true);
+			if(model.getSelected() == null)
+				JOptionPane.showMessageDialog(view,
+						L10n.getString("warningEmptySelection"),
+					    L10n.getString("warningEmptySelectionTitle"),
+					    JOptionPane.WARNING_MESSAGE);
+			else {
+				itemCtrl.setMode(ItemCtrl.Mode.EDIT);
+				itemView.setVisible(true);
+			}
 		}
 	}
 	
 	class Next extends AbstractAction {
 		public void actionPerformed(ActionEvent arg0) {
-			if(model.getSelected() != null)
+			if(model.getSelected() == null)
+				JOptionPane.showMessageDialog(view,
+						L10n.getString("warningEmptySelection"),
+					    L10n.getString("warningEmptySelectionTitle"),
+					    JOptionPane.WARNING_MESSAGE);
+			else
 				authView.setVisible(true);
 		}
 	}

Modified: trunk/src/net/sf/plantlore/client/login/LoginView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-20 21:43:13 UTC (rev 163)
+++ trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-20 22:19:05 UTC (rev 164)
@@ -1,5 +1,5 @@
 /*
- * LoginView2.java
+ * LoginView.java
  *
  * Created on 9. duben 2006, 16:35
  */
@@ -9,8 +9,7 @@
 import java.util.Observable;
 import java.util.Observer;
 
-import javax.swing.JDialog;
-
+import net.sf.plantlore.l10n.L10n;
 import net.sf.plantlore.middleware.DBLayer;
 
 /**
@@ -21,13 +20,13 @@
 	
 	private Login model;
     
-    /** Creates new form LoginView2 */
+    /** Creates new form LoginView */
     public LoginView(Login model) {
 		this.model = model;
 		model.addObserver(this);
         initComponents();
         setLocationRelativeTo(null); // center of the screen
-        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
+        
         setModal(true);
         // See what's new.
         update(null, null);
@@ -49,25 +48,25 @@
         choice = new javax.swing.JList();
         remember = new javax.swing.JCheckBox();
 
-        popup.setName("popup");
-        add.setText("Add");
+        
+        add.setText(L10n.getString("loginAdd"));
         popup.add(add);
 
-        edit.setText("Edit");
+        edit.setText(L10n.getString("loginEdit"));
         popup.add(edit);
 
-        remove.setText("Remove");
+        remove.setText(L10n.getString("loginRemove"));
         popup.add(remove);
 
-        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
-        next.setText("Continue");
-        next.setName("next");
+        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
+        next.setText(L10n.getString("Continue"));
+        
 
         choice.setComponentPopupMenu(popup);
         choice.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
         jScrollPane1.setViewportView(choice);
 
-        remember.setText("select automatically");
+        remember.setText(L10n.getString("AutoSelect"));
         remember.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
         remember.setMargin(new java.awt.Insets(0, 0, 0, 0));
         remember.setSelected(true);
@@ -100,17 +99,11 @@
         pack();
     }// </editor-fold>//GEN-END:initComponents
     
+ 
     
-        
-    @Override
-    public void setVisible(boolean visible) {
-    	if(!visible) super.setVisible(false);
-    	else {
-    		
-    	}
-    }
-    
-    
+    /**
+     * Update the list of records (in case there were some changes).
+     */
     public void update(Observable source, Object parameter) {
     	// Ignore setSelected() event
     	if(parameter == null) {
@@ -119,7 +112,6 @@
     		// This is probably because every time an item is inserted 
     		// into the list, it is also selected!
     		choice.setListData(model.getRecords());
-    		
     	}
     	else if(parameter != null && parameter instanceof DBLayer)
     		this.setVisible(false); // the database layer has been created, we are no longer neccessary

Modified: trunk/src/net/sf/plantlore/server/Plantlore.java
===================================================================
--- trunk/src/net/sf/plantlore/server/Plantlore.java	2006-04-20 21:43:13 UTC (rev 163)
+++ trunk/src/net/sf/plantlore/server/Plantlore.java	2006-04-20 22:19:05 UTC (rev 164)
@@ -3,9 +3,10 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+/*
 import java.rmi.registry.LocateRegistry;
 import java.rmi.registry.Registry;
-import java.util.Collection;
+*/
 import java.util.Properties;
 
 import org.apache.log4j.PropertyConfigurator;
@@ -56,7 +57,9 @@
 		
 		new Plantlore().run();
 		
-		/*
+		/* ============================================================
+		 *  THIS HERE MAY COME IN HANDY...
+		 * ============================================================
 		int m = args.length, port = RMIServer.DEFAULT_PORT, id = -1;
 		String command = "start", host = null;
 		
@@ -103,7 +106,7 @@
 					
 			}
 		} catch(Exception e) { System.err.println(e); }
-		*/
+		============================================================ */
 	}
 
 }

Modified: trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java
===================================================================
--- trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java	2006-04-20 21:43:13 UTC (rev 163)
+++ trunk/src/net/sf/plantlore/server/RMIRemoteDBLayerFactory.java	2006-04-20 22:19:05 UTC (rev 164)
@@ -6,7 +6,6 @@
 import java.rmi.server.UnicastRemoteObject;
 import java.util.Collection;
 import java.util.Hashtable;
-import java.util.Vector;
 
 import org.apache.log4j.Logger;
 
@@ -69,8 +68,10 @@
 	 * 
 	 *  @return Collection holding information about currently connected clients.
 	 */
-	protected synchronized Collection<ConnectionInfo> getClients() { 
-		return new Vector<ConnectionInfo>(client.values()); 
+	protected synchronized ConnectionInfo[] getClients() {
+		Collection<ConnectionInfo> clients = client.values();
+		if(clients != null) return clients.toArray(new ConnectionInfo[0]);
+		else return null;
 	}
 	
 	/**

Modified: trunk/src/net/sf/plantlore/server/RMIServer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/RMIServer.java	2006-04-20 21:43:13 UTC (rev 163)
+++ trunk/src/net/sf/plantlore/server/RMIServer.java	2006-04-20 22:19:05 UTC (rev 164)
@@ -6,7 +6,6 @@
 import java.rmi.registry.LocateRegistry;
 import java.rmi.registry.Registry;
 import java.rmi.server.UnicastRemoteObject;
-import java.util.Collection;
 
 
 import org.apache.log4j.Logger;
@@ -27,7 +26,7 @@
  * @since 2006-03-11
  * @version 1.0
  */
-public class RMIServer extends UnicastRemoteObject implements Server<ConnectionInfo> {
+public class RMIServer extends UnicastRemoteObject implements Server {
 	
 	/** The default port where the rmiregistry listens. To that rmiregistry the RemoteDBLayerFactory will be bound to. */
 	public static final int DEFAULT_PORT = Registry.REGISTRY_PORT;
@@ -57,7 +56,10 @@
 	}
 	
 	/** Get the information about the connected clients. */
-	public synchronized Collection<ConnectionInfo> getClients() { return remoteFactory.getClients(); }
+	public synchronized ConnectionInfo[] getClients() {
+		if(remoteFactory == null) return null;
+		else return remoteFactory.getClients(); 
+	}
 
 	/**
 	 * Disconnect the selected client.

Modified: trunk/src/net/sf/plantlore/server/Server.java
===================================================================
--- trunk/src/net/sf/plantlore/server/Server.java	2006-04-20 21:43:13 UTC (rev 163)
+++ trunk/src/net/sf/plantlore/server/Server.java	2006-04-20 22:19:05 UTC (rev 164)
@@ -4,18 +4,15 @@
 import java.rmi.AlreadyBoundException;
 import java.rmi.Remote;
 import java.rmi.RemoteException;
-import java.util.Collection;
 
 /**
  * Server management.
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
- * @since 29.3.2006
+ * @since 2006-03-29
  * @version 1.0 final
- *
- * @param <E>	The class storing information about currently connected clients.
  */
-public interface Server<E> extends Remote, Serializable {
+public interface Server extends Remote, Serializable {
 	
 	/**
 	 * Return a collection of currently connected clients.
@@ -23,7 +20,7 @@
 	 * @return Currently connected clients.
 	 * @throws RemoteException	if the RMI encounters an error (network/server).
 	 */
-	Collection</*? extends */E>	getClients() throws RemoteException;
+	ConnectionInfo[]	getClients() throws RemoteException;
 	
 	/**
 	 * "Kick" the specified client. The client is disconnected immediately.
@@ -31,7 +28,7 @@
 	 * @param client The client to be kicked from the server.
 	 * @throws RemoteException if the RMI encounters an error (network/server).
 	 */
-	void disconnect(E client) throws RemoteException;
+	void disconnect(ConnectionInfo client) throws RemoteException;
 	
 	/**
 	 * Run the server on the specified port.

Modified: trunk/src/net/sf/plantlore/server/manager/ServerMng.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerMng.java	2006-04-20 21:43:13 UTC (rev 163)
+++ trunk/src/net/sf/plantlore/server/manager/ServerMng.java	2006-04-20 22:19:05 UTC (rev 164)
@@ -5,7 +5,6 @@
 import java.rmi.RemoteException;
 import java.rmi.registry.LocateRegistry;
 import java.rmi.registry.Registry;
-import java.util.Collection;
 import java.util.Observable;
 
 import org.apache.log4j.Logger;
@@ -16,8 +15,8 @@
 
 public class ServerMng extends Observable {
 	
-	private Server<ConnectionInfo> server;
-	private Collection<ConnectionInfo> clients;
+	private Server server;
+	private ConnectionInfo[] clients;
 	
 	public enum Mode { CREATE_NEW, CONNECT_EXISTING };
 	
@@ -52,11 +51,11 @@
 		if(server == null) return null;
 		if(refresh)
 			try {
-				clients = /*(Collection<ConnectionInfo>)*/server.getClients();
+				clients = server.getClients();
 				logger.debug("Clients connected to the server received.");
-				setChanged(); notifyObservers("PH");
+				setChanged(); notifyObservers("PHear me!");
 			} catch( RemoteException e) { logger.warn("Unable to obtain the list of connected users - network error?"); }
-		return clients.toArray(new ConnectionInfo[0]);
+		return clients;
 	}
 	
 	



From krater at berlios.de  Fri Apr 21 00:22:42 2006
From: krater at berlios.de (krater at berlios.de)
Date: Fri, 21 Apr 2006 00:22:42 +0200
Subject: [Plantlore-dev] r165 - trunk/src/net/sf/plantlore/l10n
Message-ID: <200604202222.k3KMMgFG003542@sheep.berlios.de>

Author: krater
Date: 2006-04-21 00:22:41 +0200 (Fri, 21 Apr 2006)
New Revision: 165

Modified:
   trunk/src/net/sf/plantlore/l10n/Plantlore.properties
Log:
Plantlore.properties merged with previous changes (made by Lada).

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-20 22:19:05 UTC (rev 164)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-20 22:22:41 UTC (rev 165)
@@ -11,6 +11,8 @@
 Languages = &Languages
 Other = &Other
 Ok = &Ok
+# Continue stands for Ok on some dialogs
+Continue = C&ontinue 
 Cancel = &Cancel
 Close = Close
 Help = &Help
@@ -151,3 +153,43 @@
 updatedWho = updatedWho
 metadata = metadata
 note = note
+
+# LOGIN
+loginAdd = &Add
+loginRemove = &Remove
+loginEdit = &Edit
+# LOGIN - AUTHORIZE
+Username = Username
+Password = Password
+Authorize = Authorize
+ConnectingTo = Connecting to
+# LOGIN - RECORDS
+AddTitle = Add a record
+EditTitle = Edit the record 
+Alias = Alias
+Hostname = Hostname
+Database = Database
+Change = Change
+
+AutoSelect = select automatically 
+
+
+# LIST OF WARNINGS
+warningEmptySelection = No record has been selected.\n Please select some record and try again.
+warningEmptySelectionTitle = Empty selection
+
+warningNoUsername = No username has been entered.\n Please select or type a username and try again.
+warningNoUsernameTitle = Missing username
+
+# LIST OF ERRORS AND EXCEPTIONS
+errorDBLayerException = The connection to the database could not be established.\n Please make sure you entered valid authentication information (misspelled username, incorrect password)\n and try again.
+errorDBLayerExceptionTitle = Database connection error 
+
+errorNotBoundException = The server is either unreachable or not running.\n Please make sure you entered valid connection information.\n Study the log for further details. 
+errorNotBoundExceptionTitle = Server unreachable
+
+errorRemoteException = Either the network connection has failed or the server has crashed or gone off.\n Please make sure the network connection is working.\n Study the log for further details.  
+errorRemoteExceptionTitle = Network problem
+
+errorAlreadyBoundException = Another server is already running on the specified port.\n Please choose another port and try again.
+errorAlreadyBoundExceptionTitle = Server collision 
\ No newline at end of file



From tkovarik at gmail.com  Fri Apr 21 06:00:09 2006
From: tkovarik at gmail.com (Tomas Kovarik)
Date: Fri, 21 Apr 2006 06:00:09 +0200
Subject: [Plantlore-dev] Upravy v spracovani vysledkov SELECTu tak by to fungovalu s RMI
Message-ID: <ea88f1620604202100w7cea7191lc04ce25542827c96@mail.gmail.com>

Caute,

pozeral som sa na ten problem s Hibernate lazy fetching a RMI. Vyzera
to nakoniec celkom dobre, nemalo by byt potreba nic upravovat v kode.
Jediny rozdiel je v tom, ze ak nacitate nejake data z tabulky ktora
obashuje cudzie kluce (asociacie) do inych tabuliek, nacitaju sa
vsetky tieto data pomocou JOINov.
Nemal som zatial sancu to otestovat ked bezi server oddelene od
klienta ale myslim ze by to malo fungovat. Erik, vyskusaj to prosim (s
 tymi upravami v konfiguracii hibernatu ktore som commitol) a keby
daco tak mi daj vediet.

Co sa tyka zmensenia objemu prenasanych dat (v pripade, ze viete, ze
niektore asociovane tabulky nebudete potrebovat), este si niesom uplne
isty.

Erik, ked to budes skusat, skus tam pri konstrukcii toho dotazu dat bud toto:

query.setFetchMode("habitat", PlantloreConstants.FETCH_SELECT);

alebo toto:

query.setFetchMode("habitat", PlantloreConstants.FETCH_JOIN);

ten "habitat" mozes nahradit niecim inym, je to oznacenie toho, co
nechces eagerly nacitat do vysledku (mozes pouzit bodkovu notaciu,
teda napr. ak nacitas z tabulky AuthorOccurrences a nechcs habitat,
das tam "occurrence.habitat").

FETCH_SELECT by malo byt lazy nacitanie, FETCH_JOIN by malo byt eager.

To je zatial vsetko, majte sa

Kovo


From kovo at berlios.de  Fri Apr 21 06:33:07 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Fri, 21 Apr 2006 06:33:07 +0200
Subject: [Plantlore-dev] r166 - trunk/src/net/sf/plantlore/config/hibernate
Message-ID: <200604210433.k3L4X7Bn004910@sheep.berlios.de>

Author: kovo
Date: 2006-04-21 06:32:40 +0200 (Fri, 21 Apr 2006)
New Revision: 166

Modified:
   trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Habitats.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/History.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/HistoryColumn.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Metadata.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Phytochoria.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Plants.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Right.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Territories.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/User.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Villages.hbm.xml
Log:
Modify fetching strategy from lazy to eager for all tables

Modified: trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Author" table="TAUTHORS">
+   <class name="net.sf.plantlore.common.record.Author" table="TAUTHORS" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.AuthorOccurrence" table="TAUTHORSOCCURRENCES">
+   <class name="net.sf.plantlore.common.record.AuthorOccurrence" table="TAUTHORSOCCURRENCES" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Habitats.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Habitats.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/Habitats.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Habitat" table="THABITATS">
+   <class name="net.sf.plantlore.common.record.Habitat" table="THABITATS" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/History.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/History.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/History.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.HistoryRecord" table="THISTORY">
+   <class name="net.sf.plantlore.common.record.HistoryRecord" table="THISTORY" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.HistoryChange" table="THISTORYCHANGE">
+   <class name="net.sf.plantlore.common.record.HistoryChange" table="THISTORYCHANGE" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/HistoryColumn.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/HistoryColumn.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/HistoryColumn.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.HistoryColumn" table="THISTORYCOLUMN">
+   <class name="net.sf.plantlore.common.record.HistoryColumn" table="THISTORYCOLUMN" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.LastUpdate" table="TLASTUPDATE">
+   <class name="net.sf.plantlore.common.record.LastUpdate" table="TLASTUPDATE" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Metadata.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Metadata.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/Metadata.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Metadata" table="TMETADATA">
+   <class name="net.sf.plantlore.common.record.Metadata" table="TMETADATA" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Occurrence" table="TOCCURRENCES">
+   <class name="net.sf.plantlore.common.record.Occurrence" table="TOCCURRENCES" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Phytochoria.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Phytochoria.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/Phytochoria.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Phytochorion" table="TPHYTOCHORIA">
+   <class name="net.sf.plantlore.common.record.Phytochorion" table="TPHYTOCHORIA" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Plants.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Plants.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/Plants.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Plant" table="TPLANTS">
+   <class name="net.sf.plantlore.common.record.Plant" table="TPLANTS" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Publication" table="TPUBLICATIONS">
+   <class name="net.sf.plantlore.common.record.Publication" table="TPUBLICATIONS" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Right.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Right.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/Right.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Right" table="TRIGHT">
+   <class name="net.sf.plantlore.common.record.Right" table="TRIGHT" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Territories.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Territories.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/Territories.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Territory" table="TTERRITORIES">
+   <class name="net.sf.plantlore.common.record.Territory" table="TTERRITORIES" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/User.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/User.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/User.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.User" table="TUSER">
+   <class name="net.sf.plantlore.common.record.User" table="TUSER" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Villages.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Villages.hbm.xml	2006-04-20 22:22:41 UTC (rev 165)
+++ trunk/src/net/sf/plantlore/config/hibernate/Villages.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Village" table="TVILLAGES">
+   <class name="net.sf.plantlore.common.record.Village" table="TVILLAGES" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>



From discontinuum at gmail.com  Fri Apr 21 11:02:31 2006
From: discontinuum at gmail.com (Erik Kratochvil)
Date: Fri, 21 Apr 2006 11:02:31 +0200
Subject: [Plantlore-dev] Upravy v spracovani vysledkov SELECTu tak by to fungovalu s RMI
In-Reply-To: <ea88f1620604202100w7cea7191lc04ce25542827c96@mail.gmail.com>
References: <ea88f1620604202100w7cea7191lc04ce25542827c96@mail.gmail.com>
Message-ID: <f4dc39b90604210202q2a42902cxd87e3ac6ba54ef24@mail.gmail.com>

Zdar Kovo.

Erik, vyskusaj to prosim (s
> tymi upravami v konfiguracii hibernatu ktore som commitol) a keby
> daco tak mi daj vediet.


Davam vedet:
Problem je(?) v HibernateDBLayer.executeQuery().

try {
   tx = session.beginTransaction();
   res = sq.getCriteria().scroll();
   tx.commit();
}
catch (HibernateException e) { ..........

Kod, ktery tohle zavolal, je:

public OverviewTableModel(DBLayer db, int pageSize) throws ... {
        init();

        this.pageSize = pageSize;
        resultsCount = 0;
        this.db = db;
        SelectQuery sq = db.createQuery(AuthorOccurrence.class );

        try {
            setResultid(db.executeQuery(sq));

Vystup:

10:37:05,492  WARN JDBCExceptionReporter:71 - SQL Error: 335544569,
SQLState: HY000
10:37:05,502 ERROR JDBCExceptionReporter:72 - GDS Exception. 335544569.
Dynamic SQL Error
SQL error code = -206
Column unknown
AUTHOR2_.CDELETE
At line 1, column 453.
10:37:05,522  WARN JDBCExceptionReporter:71 - SQL Error: 335544569,
SQLState: HY000
10:37:05,532 ERROR JDBCExceptionReporter:72 - GDS Exception. 335544569.
Dynamic SQL Error
SQL error code = -206
Column unknown
AUTHOR2_.CDELETE
At line 1, column 453.



Krom toho se mi stala jeste jedna divna vec (ale to fakt nechapu, s
predchozim to moc nesouvisi):

1.  SelectQuery selectQuery = queries.remove(query);
2.  if(selectQuery == null)
       throw new DBLayerException("...");

3.  assert(selectQuery instanceof SelectQueryImplementation);
4.  SelectQueryImplementation sq = (SelectQueryImplementation) selectQuery;



1. selectQuery se nasel
2. prosla (selectQuery != null)
3. prosla (selectQuery is an instance of SelQuerImpl)
4. sq z uplne nevim proc je najednou null....
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060421/8c64f6dd/attachment.html>

From discontinuum at gmail.com  Fri Apr 21 11:37:26 2006
From: discontinuum at gmail.com (Erik Kratochvil)
Date: Fri, 21 Apr 2006 11:37:26 +0200
Subject: [Plantlore-dev] Upravy v spracovani vysledkov SELECTu tak by to fungovalu s RMI
In-Reply-To: <f4dc39b90604210202q2a42902cxd87e3ac6ba54ef24@mail.gmail.com>
References: <ea88f1620604202100w7cea7191lc04ce25542827c96@mail.gmail.com>
	 <f4dc39b90604210202q2a42902cxd87e3ac6ba54ef24@mail.gmail.com>
Message-ID: <f4dc39b90604210237y6680ad3ci886bb21e5c302378@mail.gmail.com>

Super, tak Lada me upozornila, ze to byl problem s mapovanim.

Testovaci podminky:

   - Revision 166 (hibernate eager fetching),
   - plantloreHIBdataUTF.fdb z 19.4.2006 18:03 (nevim o novejsi).


Chyba:

11:31:52,378  WARN JDBCExceptionReporter:71 - SQL Error: 335544343,
SQLState: HY000
11:31:52,378 ERROR JDBCExceptionReporter:72 - GDS Exception. 335544343.
invalid request BLR at offset 665
Implementation limit exceeded
block size exceeds implementation restriction
11:31:52,719  WARN JDBCExceptionReporter:71 - SQL Error: 335544343,
SQLState: HY000
11:31:52,719 ERROR JDBCExceptionReporter:72 - GDS Exception. 335544343.
invalid request BLR at offset 665
Implementation limit exceeded
block size exceeds implementation restriction
11:31:52,749 FATAL server:349 - Selecting records from the database failed.
Details: could not execute query using scroll
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060421/54ba042b/attachment.html>

From LadaOb at seznam.cz  Fri Apr 21 14:07:57 2006
From: LadaOb at seznam.cz (=?us-ascii?Q?Lada=20Oberreiterova?=)
Date: Fri, 21 Apr 2006 14:07:57 +0200 (CEST)
Subject: [Plantlore-dev] =?us-ascii?Q?BioCASE=20=2D=20mail=2C=20kodovani?=
Message-ID: <2187.4208-30700-1887259535-1145621277@seznam.cz>

Ahoj Kovo,

v priloze posilam navrh milu pro vyvojare BioCASE.

Rikals, ze mas k tomu neco pripraveno, tak to prosim dej do kupy a 
posli jim to, dik. Omlouvam se, ze to neni v anglictine, ale s mou 
aj by preklad trval hodne dlouho a ty to budes mit behem chvilky. 
Chtelo by to poslat co nejdrive, tak pokud se na to behem vikendu 
nedostanes, tak dej vedet at se domluvim s nekym jinym.

Jinak jsem testovala BioCASE i pro mysql, ale pravdepodobne pri 
prekopirovani insertu do skripu SQLdeveloperu doslo k zmene 
kodovani, takze BioCASE s mysql nevypise ani ten blby seznam kytek. 
Budeme muset uz napsat ten IMPORT do databaze, at se zajisti pomoci 
Javy, ze ty data budou v UTF8. V Jave se bude muset vzdy 
kontrolovat, zda ukladana data jsou v UTF8 jinak pokud nebudou, tak 
to muze vest k spatnemu chovani BioCASE (nevypise seznam kytek).

Co se tyka kodovani, tak je tu jeste jeden problem. Jak jsme do db 
ve stredu naimportovali nove data s kodovanimUTF8, tak se jiz 
Jakubovi v plantlore zacali zobrazovat spravna (linux). Bohuzel v te
chvili se zacali zobrazovat spatne na windowsech.

Kontaktni adresy na vyvojare:
support at biocase.org
"Hahn, Andrea" <a.hahn at bgbm.org>
"D?ring, Markus" m.doering at bgbm.org
"Holetschek, J?rg" <j.holetschek at bgbm.org>
(http://email.seznam.cz/readMessageScreen?sessionId=oP6ZLwS7eNhc&folderId=user2&messageId=1464&messagePos=127#)


Lada


 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060421/fd966397/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: BioCASE2_4 error Scan request.pdf
Type: application/pdf
Size: 107071 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060421/fd966397/attachment.pdf>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: BioCASE mail.odt
Type: application/vnd.oasis.opendocument.text
Size: 252579 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060421/fd966397/attachment.odt>

From tkovarik at gmail.com  Fri Apr 21 14:41:51 2006
From: tkovarik at gmail.com (Tomas Kovarik)
Date: Fri, 21 Apr 2006 14:41:51 +0200
Subject: [Plantlore-dev] Upravy v spracovani vysledkov SELECTu tak by to fungovalu s RMI
In-Reply-To: <f4dc39b90604210237y6680ad3ci886bb21e5c302378@mail.gmail.com>
References: <ea88f1620604202100w7cea7191lc04ce25542827c96@mail.gmail.com>
	 <f4dc39b90604210202q2a42902cxd87e3ac6ba54ef24@mail.gmail.com>
	 <f4dc39b90604210237y6680ad3ci886bb21e5c302378@mail.gmail.com>
Message-ID: <ea88f1620604210541k5a610694pc6cdb6174c589a6e@mail.gmail.com>

Cau Erik,

dik za bugreport. Pozeral som sa na to, podarilo sa mi to
zreprodukovat, nasiel som asi aj dovod - uplne dole na tejto stranke:
http://www.ibphoenix.com/main.nfs?a=ibphoenix&page=ibp_fb1_faq

U mna sa to neprejavilo pretoze som pracoval s PostgreSQL, je to teda
problem databaze. To ze "expression exceeds maximum size of column"
som zatial uplne nepochopil.

Pracujem na tom, mam ale strach ze to dnes nestihnem. Revertni si to
na revision 165 aby sa s tym dalo pracovat. Ak by si to predsalen
chcel velmi vyskusat, mozes to skusit rozbehat na Postgre ale to asi
chvilku zaberie.

Budem priebezne informovat.

Kovo

On 4/21/06, Erik Kratochvil <discontinuum at gmail.com> wrote:
> Super, tak Lada me upozornila, ze to byl problem s mapovanim.
>
> Testovaci podminky:
>
> Revision 166 (hibernate eager fetching),
> plantloreHIBdataUTF.fdb z 19.4.2006 18:03 (nevim o novejsi).
> Chyba:
>
> 11:31:52,378  WARN JDBCExceptionReporter:71 - SQL Error: 335544343,
> SQLState: HY000
> 11:31:52,378 ERROR JDBCExceptionReporter:72 - GDS Exception. 335544343.
> invalid request BLR at offset 665
>  Implementation limit exceeded
> block size exceeds implementation restriction
> 11:31:52,719  WARN JDBCExceptionReporter:71 - SQL Error: 335544343,
> SQLState: HY000
>  11:31:52,719 ERROR JDBCExceptionReporter:72 - GDS Exception. 335544343.
> invalid request BLR at offset 665
>  Implementation limit exceeded
> block size exceeds implementation restriction
>  11:31:52,749 FATAL server:349 - Selecting records from the database failed.
> Details: could not execute query using scroll
>
>


From kovo at berlios.de  Fri Apr 21 14:46:21 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Fri, 21 Apr 2006 14:46:21 +0200
Subject: [Plantlore-dev] r167 - trunk/src/net/sf/plantlore/config/hibernate
Message-ID: <200604211246.k3LCkLeU011160@sheep.berlios.de>

Author: kovo
Date: 2006-04-21 14:46:17 +0200 (Fri, 21 Apr 2006)
New Revision: 167

Modified:
   trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Habitats.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/History.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/HistoryColumn.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Metadata.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Phytochoria.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Plants.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Right.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Territories.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/User.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Villages.hbm.xml
Log:
Revert changes in configuration due to the problems with Firebird database.

Modified: trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Author" table="TAUTHORS" lazy="false">
+   <class name="net.sf.plantlore.common.record.Author" table="TAUTHORS">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.AuthorOccurrence" table="TAUTHORSOCCURRENCES" lazy="false">
+   <class name="net.sf.plantlore.common.record.AuthorOccurrence" table="TAUTHORSOCCURRENCES">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Habitats.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Habitats.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/Habitats.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Habitat" table="THABITATS" lazy="false">
+   <class name="net.sf.plantlore.common.record.Habitat" table="THABITATS">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/History.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/History.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/History.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.HistoryRecord" table="THISTORY" lazy="false">
+   <class name="net.sf.plantlore.common.record.HistoryRecord" table="THISTORY">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.HistoryChange" table="THISTORYCHANGE" lazy="false">
+   <class name="net.sf.plantlore.common.record.HistoryChange" table="THISTORYCHANGE">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/HistoryColumn.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/HistoryColumn.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/HistoryColumn.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.HistoryColumn" table="THISTORYCOLUMN" lazy="false">
+   <class name="net.sf.plantlore.common.record.HistoryColumn" table="THISTORYCOLUMN">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.LastUpdate" table="TLASTUPDATE" lazy="false">
+   <class name="net.sf.plantlore.common.record.LastUpdate" table="TLASTUPDATE">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Metadata.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Metadata.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/Metadata.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Metadata" table="TMETADATA" lazy="false">
+   <class name="net.sf.plantlore.common.record.Metadata" table="TMETADATA">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Occurrence" table="TOCCURRENCES" lazy="false">
+   <class name="net.sf.plantlore.common.record.Occurrence" table="TOCCURRENCES">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Phytochoria.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Phytochoria.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/Phytochoria.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Phytochorion" table="TPHYTOCHORIA" lazy="false">
+   <class name="net.sf.plantlore.common.record.Phytochorion" table="TPHYTOCHORIA">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Plants.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Plants.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/Plants.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Plant" table="TPLANTS" lazy="false">
+   <class name="net.sf.plantlore.common.record.Plant" table="TPLANTS">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Publication" table="TPUBLICATIONS" lazy="false">
+   <class name="net.sf.plantlore.common.record.Publication" table="TPUBLICATIONS">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Right.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Right.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/Right.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Right" table="TRIGHT" lazy="false">
+   <class name="net.sf.plantlore.common.record.Right" table="TRIGHT">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Territories.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Territories.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/Territories.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Territory" table="TTERRITORIES" lazy="false">
+   <class name="net.sf.plantlore.common.record.Territory" table="TTERRITORIES">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/User.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/User.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/User.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.User" table="TUSER" lazy="false">
+   <class name="net.sf.plantlore.common.record.User" table="TUSER">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Villages.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Villages.hbm.xml	2006-04-21 04:32:40 UTC (rev 166)
+++ trunk/src/net/sf/plantlore/config/hibernate/Villages.hbm.xml	2006-04-21 12:46:17 UTC (rev 167)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Village" table="TVILLAGES" lazy="false">
+   <class name="net.sf.plantlore.common.record.Village" table="TVILLAGES">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>



From tkovarik at gmail.com  Fri Apr 21 14:48:23 2006
From: tkovarik at gmail.com (Tomas Kovarik)
Date: Fri, 21 Apr 2006 14:48:23 +0200
Subject: [Plantlore-dev] Upravy mapovania
Message-ID: <ea88f1620604210548j4b1dd594s68705a70ea25c6e@mail.gmail.com>

Caute,

prte istotu som vratil tie upraavy mapovaania kedze to s Firebirdom
nefunguje aby s tym neboli zatial problemy. Ked vyriesim ten problem
tak upravim mapovanie naspat.

Kovo


From LadaOb at seznam.cz  Fri Apr 21 15:01:23 2006
From: LadaOb at seznam.cz (=?us-ascii?Q?Lada=20Oberreiterova?=)
Date: Fri, 21 Apr 2006 15:01:23 +0200 (CEST)
Subject: [Plantlore-dev] =?us-ascii?Q?Re=3A=5BPlantlore=2Ddev=5D=20Upravy=20mapovania?=
In-Reply-To: <ea88f1620604210548j4b1dd594s68705a70ea25c6e@mail.gmail.com>
Message-ID: <2187.4213-3744-1029372618-1145624483@seznam.cz>

An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060421/412a9da8/attachment.html>
-------------- next part --------------
Co si myslim o tom problemu je:

Zjistila jsem, ze kdyz v tom commitu od Kova udelas upravu v souboru
User.hdm.xml ... a to :
<class name="net.sf.plantlore.common.record.User" table="TUSER" lazy
="false">

na 

<class name="net.sf.plantlore.common.record.User" table="TUSER">

tak je to uz v poradku.

Domnivam se tedy, ze tomu bude vadit provazani v databazi:
tHistoryChange --> tOccurrences --> tUser
tHistoryChange --> tUser

Bude tedy na zvazeni zda zrusit nekterou z vazeb (asi tHistoryChange
-->tOccurrences nebo tHistoryChange-->tUser).

Kovo napis v kolik dnes vidis tu schuzku.
A na to ze jsme se domluvili, ze denne stravime nad plantlore 8-10 
hod, tak nevim jak to dneska stihnes. Snaz se to prosim dodrzovat. 
Dik.

Lada

> ------------ P?vodn? zpr?va ------------
> Od: Tomas Kovarik <tkovarik at gmail.com>
> P?edm?t: [Plantlore-dev] Upravy mapovania
> Datum: 21.4.2006 14:49:17
> ---------------------------------------------
> Caute, 

prte istotu som vratil tie upraavy mapovaania kedze to s > 
Firebirdom 
nefunguje aby s tym neboli zatial problemy. Ked vyriesim ten > 
problem 
tak upravim mapovanie naspat. 

Kovo 
/>_______________________________________________ 
Plantlore-dev mailing > list 
Plantlore-dev at lists.berlios.de 
/>http://lists.berlios.de/mailman/listinfo/plantlore-dev 
> 

From krater at berlios.de  Fri Apr 21 15:18:45 2006
From: krater at berlios.de (krater at berlios.de)
Date: Fri, 21 Apr 2006 15:18:45 +0200
Subject: [Plantlore-dev] r168 - in trunk/src/net/sf/plantlore: client/login l10n server server/manager
Message-ID: <200604211318.k3LDIjkS023490@sheep.berlios.de>

Author: krater
Date: 2006-04-21 15:18:23 +0200 (Fri, 21 Apr 2006)
New Revision: 168

Added:
   trunk/src/net/sf/plantlore/server/CertificationException.java
Modified:
   trunk/src/net/sf/plantlore/client/login/Login.java
   trunk/src/net/sf/plantlore/client/login/LoginView.java
   trunk/src/net/sf/plantlore/l10n/L10n.java
   trunk/src/net/sf/plantlore/l10n/Plantlore.properties
   trunk/src/net/sf/plantlore/l10n/Plantlore_cs_CZ.properties
   trunk/src/net/sf/plantlore/server/Guard.java
   trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
   trunk/src/net/sf/plantlore/server/Plantlore.java
   trunk/src/net/sf/plantlore/server/RMIServerControl.java
   trunk/src/net/sf/plantlore/server/manager/ServerLoginCtrl.java
   trunk/src/net/sf/plantlore/server/manager/ServerLoginView.java
   trunk/src/net/sf/plantlore/server/manager/ServerMng.java
   trunk/src/net/sf/plantlore/server/manager/ServerMngCtrl.java
   trunk/src/net/sf/plantlore/server/manager/ServerMngView.java
Log:
Added: L10n, logger, comments.

Modified: trunk/src/net/sf/plantlore/client/login/Login.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/client/login/Login.java	2006-04-21 13:18:23 UTC (rev 168)
@@ -67,9 +67,17 @@
 		
 
 		 // TEMPORARY CODE STARTS HERE
-				dbinfo.add(new DBInfo("My Home Database", "localhost", -1,
-							"jdbc:firebirdsql:localhost/3050:c:/Temp/plantloreHIBdata.fdb", 
+				dbinfo.add(new DBInfo("Local Database in UTF-8", "localhost", -1,
+						"jdbc:firebirdsql:localhost/3050:c:/downloaded/plantloreHIBdataUTF.fdb", 
+						new String[] { "sysdba", null, null, null, null }));
+		
+				dbinfo.add(new DBInfo("Local Database", "localhost", -1,
+							"jdbc:firebirdsql:localhost/3050:c:/downloaded/plantloreHIBdata.fdb", 
 							new String[] { "sysdba", null, null, null, null }));
+				
+				dbinfo.add(new DBInfo("Local Database But Via RMI", "data.kolej.mff.cuni.cz", -1,
+						"jdbc:firebirdsql:localhost/3050:c:/downloaded/plantloreHIBdata.fdb", 
+						new String[] { "sysdba", null, null, null, null }));
 		 // TEMPORARY CODE ENDS HERE
 		
 		this.setChanged(); this.notifyObservers();

Modified: trunk/src/net/sf/plantlore/client/login/LoginView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/client/login/LoginView.java	2006-04-21 13:18:23 UTC (rev 168)
@@ -69,7 +69,7 @@
         remember.setText(L10n.getString("AutoSelect"));
         remember.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
         remember.setMargin(new java.awt.Insets(0, 0, 0, 0));
-        remember.setSelected(true);
+        //remember.setSelected(true);
 
         org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
         getContentPane().setLayout(layout);

Modified: trunk/src/net/sf/plantlore/l10n/L10n.java
===================================================================
--- trunk/src/net/sf/plantlore/l10n/L10n.java	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/l10n/L10n.java	2006-04-21 13:18:23 UTC (rev 168)
@@ -8,9 +8,7 @@
 package net.sf.plantlore.l10n;
 
 import java.io.IOException;
-import java.io.InputStream;
 import java.util.Locale;
-import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
 import java.util.prefs.Preferences;
 import org.apache.log4j.Logger;
@@ -107,6 +105,6 @@
         if (i>=0)
             sb.deleteCharAt(i);
         
-        return c.toUpperCase(c);
+        return Character.toUpperCase(c);
     }
 }

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-21 13:18:23 UTC (rev 168)
@@ -12,7 +12,8 @@
 Other = &Other
 Ok = &Ok
 # Continue stands for Ok on some dialogs
-Continue = C&ontinue 
+Continue = C&ontinue
+ContinueTT = Continue with the operation 
 Cancel = &Cancel
 Close = Close
 Help = &Help
@@ -168,28 +169,50 @@
 EditTitle = Edit the record 
 Alias = Alias
 Hostname = Hostname
+HostPort = Hostname:Port
 Database = Database
 Change = Change
 
+Next = &Next
+Refresh = &Refresh
+RefreshTT = Reload the list of the connected clients.
+Kick = &Kick users
+KickTT = Disconnect the selected clients from the server.
+StopServer = Stop server
+TerminateServer = Terminate server
+TerminateServerTT = Switch off the server.
+SelectNew = Create and start &new server.
+SelectNewTT = Run a new server on the specified port\n protected by the given password.
+SelectExisting = Connect to an existing server.
+SelectExistingTT = Connect to an existing server on the host:port\n.  
+
+
 AutoSelect = select automatically 
 
 
 # LIST OF WARNINGS
 warningEmptySelection = No record has been selected.\n Please select some record and try again.
-warningEmptySelectionTitle = Empty selection
+warningEmptySelectionTitle = Empty selection...
 
 warningNoUsername = No username has been entered.\n Please select or type a username and try again.
-warningNoUsernameTitle = Missing username
+warningNoUsernameTitle = Missing username...
 
 # LIST OF ERRORS AND EXCEPTIONS
 errorDBLayerException = The connection to the database could not be established.\n Please make sure you entered valid authentication information (misspelled username, incorrect password)\n and try again.
-errorDBLayerExceptionTitle = Database connection error 
+errorDBLayerExceptionTitle = Database connection error! 
 
 errorNotBoundException = The server is either unreachable or not running.\n Please make sure you entered valid connection information.\n Study the log for further details. 
-errorNotBoundExceptionTitle = Server unreachable
+errorNotBoundExceptionTitle = Server unreachable!
 
 errorRemoteException = Either the network connection has failed or the server has crashed or gone off.\n Please make sure the network connection is working.\n Study the log for further details.  
-errorRemoteExceptionTitle = Network problem
+errorRemoteExceptionTitle = Network problem!
 
 errorAlreadyBoundException = Another server is already running on the specified port.\n Please choose another port and try again.
-errorAlreadyBoundExceptionTitle = Server collision 
\ No newline at end of file
+errorAlreadyBoundExceptionTitle = Server collision!
+
+errorCertificationException = The certification failed - the password is incorrect.\n Please type the password again.
+errorCertificationExceptionTitle = Certification failure!
+
+
+questionAlreadyBoundException = Another server is already running on the selected port.\n Maybe you wanted to connect to it. Shall I do it for you?
+questionAlreadyBoundExceptionTitle = Server collision!

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore_cs_CZ.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore_cs_CZ.properties	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore_cs_CZ.properties	2006-04-21 13:18:23 UTC (rev 168)
@@ -16,3 +16,33 @@
 dataExportTooltip=Exportuje ozna\u010den\u00e9 z\u00e1znamy
 dataSearch=&Hled\u00e1n\u00ed
 dataSearchTooltip=Vyvol\u00e1 vyhled\u00e1vac\u00ed dialog
+
+
+Next = &Pokracovat
+Refresh = &Obnovit
+Kick = &Vykopnout uzivatele
+StopServer = Stopnout server
+TerminateServer = Ukoncit server
+SelectNew = Vytvor a spust novy server.
+SelectExisting = Pripoj se k existujicimu serveru.
+
+
+# Seznam varov?n? syst?mu
+warningEmptySelection = Nen? vybr?n ??dn? z?znam.\n Zvolte nejprve n?jak? z?znam a zkuste to znovu. 
+warningEmptySelectionTitle = Nic nen? vybr?no
+
+warningNoUsername = Nen? zad?no ??dn? u?ivatelsk? m?no.\n Vyberte nejprve n?jak? jm?no ze seznamu nebo zadejte nov? a zkuste to znovu. 
+warningNoUsernameTitle = Nen? vybr?no u?. jm?no
+
+# LIST OF ERRORS AND EXCEPTIONS
+errorDBLayerException = P?ipojen? k datab?zi se nezda?ilo nebo selhalo.\n Ujist?te se, ?e jste zadali spr?vn? p?ihla?ovac? ?daje (spr?vn? u?iv. jm?no i heslo)\n a zkuste to znovu. 
+errorDBLayerExceptionTitle = Probl?m s p?ipojen?m k DB 
+
+errorNotBoundException = Server je nedostupn? nebo neb???.\n Ujist?te se, ?e jste zadali spr?vn? informace o p?ipojen?.\n  V?ce detail? o probl?mu lze naj?t v logu.
+errorNotBoundExceptionTitle = Server neb???
+
+errorRemoteException = Pravd?podobn? spadlo s??ov? p?ipojen? nebo byl vypnut server.\n Ujist?te se, ?e s??ov? p?ipojen? je aktivn?.\n V?ce detail? o probl?mu lze naj?t v logu. 
+errorRemoteExceptionTitle = Probl?m se s?t?
+
+errorAlreadyBoundException = Na zadan?m portu ji? b??? jin? server.\n Vyberte pros?m jin? port a zkuste to znovu. 
+errorAlreadyBoundExceptionTitle = Kolize serveru
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/server/CertificationException.java
===================================================================
--- trunk/src/net/sf/plantlore/server/CertificationException.java	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/server/CertificationException.java	2006-04-21 13:18:23 UTC (rev 168)
@@ -0,0 +1,11 @@
+package net.sf.plantlore.server;
+
+
+public class CertificationException extends Exception {
+	
+	public CertificationException() { super(); }
+	
+	public CertificationException(String msg) { super(msg); }
+	
+
+}

Modified: trunk/src/net/sf/plantlore/server/Guard.java
===================================================================
--- trunk/src/net/sf/plantlore/server/Guard.java	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/server/Guard.java	2006-04-21 13:18:23 UTC (rev 168)
@@ -7,6 +7,6 @@
 	
 	final static String ID = "PlantloreRMIServerGuard";
 
-	Server certify(String authorizationInfo) throws RemoteException;
+	Server certify(String authorizationInfo) throws RemoteException, CertificationException;
 	
 }

Modified: trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-21 13:18:23 UTC (rev 168)
@@ -321,7 +321,7 @@
     public int executeQuery(SelectQuery query) throws DBLayerException {
     	
     	SelectQuery selectQuery = queries.remove(query);
-    	if(selectQuery == null) return -1;
+    	if(selectQuery == null) throw new DBLayerException("You can only pass queries created by this DBLayer!");
     	
     	if(undertaker != null) 
     		try { UnicastRemoteObject.unexportObject(selectQuery, true); }
@@ -330,6 +330,7 @@
     	assert(selectQuery instanceof SelectQueryImplementation);
     	SelectQueryImplementation sq = (SelectQueryImplementation) selectQuery;
     	
+    	if(sq == null) logger.fatal("Class cast failed. Why the fuck?!");
     	
         Transaction tx = null;        
         ScrollableResults res;

Modified: trunk/src/net/sf/plantlore/server/Plantlore.java
===================================================================
--- trunk/src/net/sf/plantlore/server/Plantlore.java	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/server/Plantlore.java	2006-04-21 13:18:23 UTC (rev 168)
@@ -11,6 +11,7 @@
 
 import org.apache.log4j.PropertyConfigurator;
 
+import net.sf.plantlore.l10n.L10n;
 import net.sf.plantlore.server.manager.*;
 
 
@@ -39,6 +40,12 @@
         }
         //maybe CHANGE to configureAndWatch()
         PropertyConfigurator.configure(props);
+        
+        try {
+            L10n.load();
+        } catch (IOException ex) {
+            ex.printStackTrace();
+        }
 			
 		ServerMng model = new ServerMng();
         ServerLoginView view = new ServerLoginView(model);

Modified: trunk/src/net/sf/plantlore/server/RMIServerControl.java
===================================================================
--- trunk/src/net/sf/plantlore/server/RMIServerControl.java	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/server/RMIServerControl.java	2006-04-21 13:18:23 UTC (rev 168)
@@ -13,9 +13,10 @@
 		this.password = password;
 	}
 	
-	public Server certify(String authorizationInfo) throws RemoteException {
+	public Server certify(String authorizationInfo) throws RemoteException, CertificationException {
 		if(authorizationInfo.equals(password)) return server;
-		return null;
+		throw new CertificationException("Wrong password.");
+		//return null;
 	}
 	
 }

Modified: trunk/src/net/sf/plantlore/server/manager/ServerLoginCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerLoginCtrl.java	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/server/manager/ServerLoginCtrl.java	2006-04-21 13:18:23 UTC (rev 168)
@@ -9,6 +9,15 @@
 import javax.swing.JOptionPane;
 
 
+import net.sf.plantlore.l10n.L10n;
+import net.sf.plantlore.server.CertificationException;
+
+/**
+ * 
+ * @author Erik Kratochv??l (discontinuum at gmail.com)
+ * @since 2006-04-21
+ *
+ */
 public class ServerLoginCtrl {
 	
 	private ServerMng model;
@@ -19,7 +28,6 @@
 	
 	
 	
-	
 	public ServerLoginCtrl(ServerMng model, ServerLoginView view) {
 		this.view = view;
 		this.model = model;
@@ -34,45 +42,80 @@
 	
 	
 	class ConnectCreate extends AbstractAction {
+		public ConnectCreate() {
+            putValue(NAME, L10n.getString("Continue"));
+            putValue(SHORT_DESCRIPTION, L10n.getString("ContinueTT"));
+            putValue(MNEMONIC_KEY, L10n.getMnemonic("Continue"));            
+        }
+		
 		public void actionPerformed(ActionEvent e) {
 			String hp = view.host.getText(), host;
-			int t = hp.indexOf(':'), port = 1099;
+			int t = hp.indexOf(':'), port = net.sf.plantlore.server.RMIServer.DEFAULT_PORT;
 			if(t < 0) host = hp;
 			else { host = hp.substring(0, t); port = Integer.parseInt(hp.substring(t + 1)); }
 			try {
+				
 				model.actAsInstructed(host, port, new String(view.password.getPassword()));
+				
 			} catch(RemoteException re) { 
 				JOptionPane.showMessageDialog(view,
-					    "Unable to connect to the server.\n The server is either not running,\n or there is a network problem.",
-					    "Remoting problem...",
+						L10n.getString("errorRemoteException"),
+					    L10n.getString("errorRemoteExceptionTitle"),
 					    JOptionPane.WARNING_MESSAGE);
 				return;
 			} catch(AlreadyBoundException abe) {
+				int response =
+				JOptionPane.showOptionDialog(view,
+					    L10n.getString("questionAlreadyBoundException"),
+					    L10n.getString("questionAlreadyBoundExceptionTitle"),
+					    JOptionPane.OK_CANCEL_OPTION,
+					    JOptionPane.WARNING_MESSAGE,
+					    null,
+					    null,
+					    null);
+				if(response == JOptionPane.OK_OPTION) {
+					view.connectExisting.doClick();
+					view.next.doClick();
+				}
+				return;
+			} catch(NotBoundException nbe) {
 				JOptionPane.showMessageDialog(view,
-					    "Another server is already running on the selected port (" + abe + "). Didn't you want to connect to it?",
-					    "Server collision problem...",
+					    L10n.getString("errorNotBoundException"),
+					    L10n.getString("errorNotBoundExceptionTitle"),
 					    JOptionPane.WARNING_MESSAGE);
 				return;
-			} catch(NotBoundException nbe) {
+			}
+			catch(CertificationException ce) {
 				JOptionPane.showMessageDialog(view,
-					    "There is no server running on the specified host and port (" + nbe + ").",
-					    "Server connection problem...",
+					    L10n.getString("errorCertificationException"),
+					    L10n.getString("errorCertificationExceptionTitle"),
 					    JOptionPane.WARNING_MESSAGE);
 				return;
 			}
 			
+			// Everything's fine in here.
 			view.setVisible(false);
 			serverView.setVisible(true);
 		}
 	}
 	
 	class SelectNew extends AbstractAction {
+		public SelectNew() {
+            putValue(NAME, L10n.getString("SelectNew"));
+            putValue(SHORT_DESCRIPTION, L10n.getString("SelectNewTT"));
+            putValue(MNEMONIC_KEY, L10n.getMnemonic("SelectNew"));            
+        }
 		public void actionPerformed(ActionEvent e) {
 			model.setMode(ServerMng.Mode.CREATE_NEW);
 		}
 	}
 	
 	class SelectExisting extends AbstractAction {
+		public SelectExisting() {
+            putValue(NAME, L10n.getString("SelectExisting"));
+            putValue(SHORT_DESCRIPTION, L10n.getString("SelectExistingTT"));
+            putValue(MNEMONIC_KEY, L10n.getMnemonic("SelectExisting"));            
+        }
 		public void actionPerformed(ActionEvent e) {
 			model.setMode(ServerMng.Mode.CONNECT_EXISTING);
 		}

Modified: trunk/src/net/sf/plantlore/server/manager/ServerLoginView.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerLoginView.java	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/server/manager/ServerLoginView.java	2006-04-21 13:18:23 UTC (rev 168)
@@ -1,18 +1,14 @@
-/*
- * ServerLoginView.java
- *
- * Created on 20. duben 2006, 10:30
- */
-
 package net.sf.plantlore.server.manager;
 
-import javax.swing.JDialog;
+import net.sf.plantlore.l10n.L10n;
 
+
 /**
+ * The server connection/creation dialog.
  *
- * @author  yaa
+ * @author  Erik Kratochv??l (discontinuum at gmail.com)
  */
-public class ServerLoginView extends javax.swing.JDialog {
+public class ServerLoginView extends javax.swing.JFrame {
 	
 	ServerMng model;
     
@@ -21,8 +17,6 @@
     	this.model = model;
         initComponents();
         setLocationRelativeTo(null); // center of the screen
-        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
-        setModal(true);
     }
     
     /** This method is called from within the constructor to
@@ -43,13 +37,13 @@
         connectExisting = new javax.swing.JRadioButton();
 
         setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
-        jLabel1.setText("Host:port");
+        jLabel1.setText(L10n.getString("HostPort"));
 
-        jLabel2.setText("Password");
+        jLabel2.setText(L10n.getString("Password"));
 
         host.setText("localhost:1099");
 
-        next.setText("next");
+        next.setText("Next");
 
         imageHere.setBackground(new java.awt.Color(0, 0, 0));
         org.jdesktop.layout.GroupLayout imageHereLayout = new org.jdesktop.layout.GroupLayout(imageHere);

Modified: trunk/src/net/sf/plantlore/server/manager/ServerMng.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerMng.java	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/server/manager/ServerMng.java	2006-04-21 13:18:23 UTC (rev 168)
@@ -12,81 +12,208 @@
 
 import net.sf.plantlore.server.*;
 
-
+/**
+ * The server manager can
+ * either create a new server or connect to an existing server.
+ * <br/>
+ * After the Server Administrator is logged in, he can control the server:
+ * <ul>
+ * <li>see the connected clients,</li>
+ * <li>kick some of the connected clients,</li>
+ * <li>terminate the server.</li>
+ * </ul>
+ * 
+ * @author Erik Kratochv??l (discontinuum at gmail.com)
+ * @since 2006-04-21
+ * @version 1.0 final
+ */
 public class ServerMng extends Observable {
 	
+	/** The server control interface. */
 	private Server server;
+	
+	/** List of connected clients. */
 	private ConnectionInfo[] clients;
 	
+	/**
+	 * CREATE_NEW will create a and start a new server
+	 * CONNECT_EXISTING will try connect to an existing server  
+	 * 
+	 * @author Erik Kratochv??l (discontinuum at gmail.com)
+	 * @since 21.4.2006
+	 */
 	public enum Mode { CREATE_NEW, CONNECT_EXISTING };
 	
+	/** The current mode. */
 	private Mode mode = Mode.CREATE_NEW;
+	
 	private Logger logger = Logger.getLogger(this.getClass().getPackage().getName());
 		
 	
-	public void startNewServer(int port, String password) throws AlreadyBoundException, RemoteException {
-		logger.info("Creating a new server at localhost:" + port);
+	/**
+	 * Try to create and start a new server on the specified <code>port</code>.
+	 * The server will be protected with a <code>password</code> so that 
+	 * anyone who will try to connect to the server will have use that password.
+	 * <br/>
+	 * It is <b>not</b> possible to create a server on a remote machine
+	 * (because of security reasons).
+	 * 
+	 * @param port The port where the server should listen.
+	 * @param password	The password protecting the access to the server.
+	 * @throws AlreadyBoundException if another server is already running on the specified port.
+	 * @throws RemoteException if the RMI encounters an error.
+	 */
+	public void startNewServer(int port, String password) 
+	throws AlreadyBoundException, RemoteException {
+		logger.debug("Creating a new server at localhost:" + port);
 		server = new RMIServer(port, password);
-		logger.info("Starting the server ...");
+		logger.debug("Starting the server ...");
 		server.start();
-		logger.info("Server up and running");
+		logger.info("Server up and running (port " + port + ").");
 	}
 
-	
-	public void connectToRunningServer(String host, int port, String password) throws RemoteException, NotBoundException {
+	/**
+	 * Connect to an existing server on the selected <code>host</code>
+	 * listening on the selected <code>port</code> using the <code>password</code>.
+	 * 
+	 * @param host The hostname of the computer where the server is running.
+	 * @param port The port where the server is listening.
+	 * @param password The password to gain the access to the server.
+	 * @throws RemoteException if the RMI encounters an error.
+	 * @throws NotBoundException if there is no server running on the specified host:port. 
+	 * @throws CertificationException if the password is incorrect.
+	 */
+	public void connectToRunningServer(String host, int port, String password) 
+	throws RemoteException, NotBoundException, CertificationException {
 		logger.info("Connecting to a running server at " +host+":"+port);
 		Registry registry = LocateRegistry.getRegistry(host, port);
 		Guard guard = (Guard) registry.lookup(Guard.ID);
 		server = guard.certify(password);
+		
+		if(server == null) 
+			logger.warn("The connection to the server was NOT successful - certification didn't succeed!");
 	}
 	
 	
-	public void actAsInstructed(String host, int port, String password) throws RemoteException, NotBoundException, AlreadyBoundException {
+	/**
+	 * Start a new server or connect to an existing one accordingly to the current mode.
+	 * 
+	 * @param host The hostname of the computer where the server is running. 
+	 * (ignored when starting a new server). 
+	 * @param port The port where a server is listening or shall listen.
+	 * @param password The password that protects the server or shall protect the server.
+	 * @throws RemoteException if the RMI encounters an error.
+	 * @throws NotBoundException if there is no server running on the specified host:port
+	 * @throws AlreadyBoundException if there is another server already running on the specified port
+	 * @throws CertificationException if the password is incorrect and the certification failed.
+	 * 
+	 * @see connectToRunningServer
+	 * @see startNewServer
+	 * @see mode
+	 */
+	public void actAsInstructed(String host, int port, String password) 
+	throws RemoteException, NotBoundException, AlreadyBoundException, CertificationException {
 		if(mode == Mode.CREATE_NEW) startNewServer(port, password);
 		else connectToRunningServer(host, port, password);
 	}
 	
-	
+	/**
+	 * Get the list of connected clients.
+	 * If <code>refresh</code> is true, the server is asked and the list of clients is refreshed.
+	 * If it is false, the stored list of connected clients is returned. 
+	 * 
+	 * @param refresh true means get the list from the server, false means get it from the local cache. 
+	 * @return The (possibly not updated) list of connected clients so that you can see whom you can kick, 
+	 * 	or null if noone is connected or we are not connected (or running) to some server.   
+	 */
 	public ConnectionInfo[] getConnectedUsers(boolean refresh) {
 		if(server == null) return null;
 		if(refresh)
 			try {
+				// Get the list of clients directly from the server.
 				clients = server.getClients();
 				logger.debug("Clients connected to the server received.");
 				setChanged(); notifyObservers("PHear me!");
-			} catch( RemoteException e) { logger.warn("Unable to obtain the list of connected users - network error?"); }
+			} catch( RemoteException e) { 
+				serverIsDead();
+				logger.warn("Unable to obtain the list of connected users - network error? " + e); 
+			}
 		return clients;
 	}
 	
-	
+	/**
+	 * Disconnect the selected client from the server.
+	 * 
+	 * @param client The client to be kicked out of the server.
+	 * @throws RemoteException if the RMI has problems with this drastic task.
+	 */
 	public void kick(ConnectionInfo client) throws RemoteException {
-		if(server == null || clients == null) return;
-		logger.info("Kicking " + client);
-		server.disconnect(client);
-	
+		if(server == null || client == null) return;
+		try {
+			server.disconnect(client);
+		} catch(RemoteException re) { serverIsDead(); throw re; }
+		
+		logger.info(client + " was kicked out of the server. Muhehee.");
+		// Reload the list of connected users.
 		getConnectedUsers(true);
 	}
 	
-	
+	/**
+	 * Terminate the server.
+	 * <b>Warning:</b> This will also kick all users as well.
+	 * 
+	 * @throws RemoteException if the RMI has personal feelings for the server.
+	 */
 	public void terminateServer() throws RemoteException {
-		if(server != null) server.stop(true);
+		if(server != null)
+			try {
+				server.stop(true);
+			}catch(RemoteException re) { serverIsDead(); throw re; }
 		logger.info("Server terminated - all clients disconnected.");
 	}
 	
+	/**
+	 * Stop the server. The server will be terminated after the last client disconnects from it.
+	 * 
+	 * @throws RemoteException if the RMI encounters an error.
+	 */
+	@Deprecated
 	public void stopServer() throws RemoteException {
-		if(server !=null) server.stop(false);
+		if(server !=null) 
+			try {
+				server.stop(false);
+			}catch(RemoteException re) { serverIsDead(); throw re; }
 		logger.debug("Server stopped - the server will terminate after the last client finishes his work.");
 	}
 	
-	
+	/**
+	 * Set a new mode.
+	 *  
+	 * @param m The new mode.
+	 * @see Mode
+	 */
 	public void setMode(Mode m) {
 		this.mode = m;
 		logger.debug("Server mode " + mode);
 		setChanged(); notifyObservers(this.mode);
 	}
 	
+	/** 
+	 * Get the current mode.
+	 * @return The current mode.
+	 * @see Mode
+	 */
 	public Mode getMode() { 
 		return this.mode; 
 	}
+	
+	/**
+	 * Notify this model, that the server is no longer accessible. 
+	 *
+	 */
+	protected void serverIsDead() {
+		server = null; clients = null;
+		logger.warn("Connection to the server has failed.");
+	}
 
 }

Modified: trunk/src/net/sf/plantlore/server/manager/ServerMngCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerMngCtrl.java	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/server/manager/ServerMngCtrl.java	2006-04-21 13:18:23 UTC (rev 168)
@@ -4,15 +4,22 @@
 import java.rmi.RemoteException;
 
 import javax.swing.AbstractAction;
+import javax.swing.JOptionPane;
 
-
+import net.sf.plantlore.l10n.L10n;
 import net.sf.plantlore.server.ConnectionInfo;
 
+/**
+ * 
+ * @author Erik Kratochv??l (discontinuum at gmail.com)
+ * @since 2006-04-21
+ */
 public class ServerMngCtrl {
 	
 	private ServerMngView view;
 	private ServerMng model;
 	
+	
 	public ServerMngCtrl(ServerMng model, ServerMngView view) {
 		this.model = model; this. view = view;
 		
@@ -24,6 +31,12 @@
 	
 	
 	class KickUsers extends AbstractAction {
+		public KickUsers() {
+            putValue(NAME, L10n.getString("Kick"));
+            putValue(SHORT_DESCRIPTION, L10n.getString("KickTT"));
+            putValue(MNEMONIC_KEY, L10n.getMnemonic("Kick"));            
+        }
+		
 		public void actionPerformed(ActionEvent ae) {
 			try {
 				Object[] bunch = view.users.getSelectedValues();
@@ -32,7 +45,13 @@
 				for(Object client : bunch)
 					if(client instanceof ConnectionInfo) model.kick((ConnectionInfo)client);
 
-			} catch(RemoteException re) { }
+			} catch(RemoteException re) { 
+				JOptionPane.showMessageDialog(view,
+						L10n.getString("errorRemoteException"),
+					    L10n.getString("errorRemoteExceptionTitle"),
+					    JOptionPane.WARNING_MESSAGE);
+				return;
+			}
 		}
 	}
 	
@@ -40,19 +59,43 @@
 		public void actionPerformed(ActionEvent ae) {
 			try {
 				model.stopServer();
-			} catch(RemoteException re) { }
+			} catch(RemoteException re) { 
+				JOptionPane.showMessageDialog(view,
+						L10n.getString("errorRemoteException"),
+					    L10n.getString("errorRemoteExceptionTitle"),
+					    JOptionPane.WARNING_MESSAGE);
+				return;
+			}
 		}
 	}
 	
 	class TerminateServer extends AbstractAction {
+		public TerminateServer() {
+            putValue(NAME, L10n.getString("TerminateServer"));
+            putValue(SHORT_DESCRIPTION, L10n.getString("TerminateServerTT"));
+            putValue(MNEMONIC_KEY, L10n.getMnemonic("TerminateServer"));            
+        }
+		
 		public void actionPerformed(ActionEvent ae) {
 			try {
 				model.terminateServer();
-			} catch(RemoteException re) { }
+			} catch(RemoteException re) { 
+				JOptionPane.showMessageDialog(view,
+						L10n.getString("errorRemoteException"),
+					    L10n.getString("errorRemoteExceptionTitle"),
+					    JOptionPane.WARNING_MESSAGE);
+				return;
+			}
 		}
 	}
 	
 	class Refresh extends AbstractAction {
+		public Refresh() {
+            putValue(NAME, L10n.getString("Refresh"));
+            putValue(SHORT_DESCRIPTION, L10n.getString("RefreshTT"));
+            putValue(MNEMONIC_KEY, L10n.getMnemonic("Refresh"));            
+        }
+		
 		public void actionPerformed(ActionEvent ae) {
 				model.getConnectedUsers(true);
 		}

Modified: trunk/src/net/sf/plantlore/server/manager/ServerMngView.java
===================================================================
--- trunk/src/net/sf/plantlore/server/manager/ServerMngView.java	2006-04-21 12:46:17 UTC (rev 167)
+++ trunk/src/net/sf/plantlore/server/manager/ServerMngView.java	2006-04-21 13:18:23 UTC (rev 168)
@@ -9,18 +9,20 @@
 import java.util.Observable;
 import java.util.Observer;
 
+
 import net.sf.plantlore.server.ConnectionInfo;
 
 /**
+ * Server control dialog.
  *
- * @author  yaa
+ * @author  Erik Kratochv??l
  */
 public class ServerMngView extends javax.swing.JFrame implements Observer {
 	
 	private ServerMng model;
 	
-    
-    /** Creates new form ServerView2 */
+	
+    /** Creates new form ServerView */
     public ServerMngView(ServerMng model) {
     	this.model = model;
     	model.addObserver(this);
@@ -93,7 +95,9 @@
     // End of variables declaration//GEN-END:variables
 
 
-    
+    /**
+     * Reload the list of the connected clients.
+     */
 	public void update(Observable source, Object parameter) {
 		if(parameter != null && parameter.toString().startsWith("PH")){
 			ConnectionInfo[] clients = model.getConnectedUsers(false);



From lada at berlios.de  Fri Apr 21 17:30:59 2006
From: lada at berlios.de (lada at berlios.de)
Date: Fri, 21 Apr 2006 17:30:59 +0200
Subject: [Plantlore-dev] r169 - in trunk/src/net/sf/plantlore/client: . history
Message-ID: <200604211530.k3LFUxcT017854@sheep.berlios.de>

Author: lada
Date: 2006-04-21 17:30:58 +0200 (Fri, 21 Apr 2006)
New Revision: 169

Removed:
   trunk/src/net/sf/plantlore/client/history/WholeHistory.java
Modified:
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java
   trunk/src/net/sf/plantlore/client/history/History.java
   trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
   trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java
Log:
Integrate of the models of both history (History + WholeHistory = History).

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-21 13:18:23 UTC (rev 168)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-21 15:30:58 UTC (rev 169)
@@ -24,7 +24,7 @@
 import javax.swing.ListSelectionModel;
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
-import net.sf.plantlore.client.history.WholeHistory;
+import net.sf.plantlore.client.history.History;
 import net.sf.plantlore.client.history.WholeHistoryCtrl;
 import net.sf.plantlore.client.history.WholeHistoryView;
 import net.sf.plantlore.common.record.Author;
@@ -35,7 +35,6 @@
 import net.sf.plantlore.client.authors.AuthorManager;
 import net.sf.plantlore.client.authors.AuthorManagerCtrl;
 import net.sf.plantlore.client.authors.AuthorManagerView;
-import net.sf.plantlore.client.history.History;
 import net.sf.plantlore.client.history.HistoryCtrl;
 import net.sf.plantlore.client.history.HistoryView;
 import net.sf.plantlore.client.login.Login;
@@ -73,7 +72,7 @@
     HistoryCtrl historyCtrl;
     
     //History of "database" 
-    WholeHistory wholeHistoryModel;
+    History wholeHistoryModel;
     WholeHistoryView wholeHistoryView;
     WholeHistoryCtrl wholeHistoryCtrl;
     
@@ -401,7 +400,7 @@
             //toto volani historie nebude v menu, ale jako tlacitko pro vybrany zaznam        
             //o vybranem zaznamu predame informace, ktere chceme o nem v historii zobrazit
             //jmeno rosliny, jmeno autora a lokaci a idOccurrences
-            
+                                   
             historyModel = new History(model.getDatabase(),"Adis Abeba", "Lada", "Praha v?chod", 1);
             historyView = new HistoryView(historyModel, view, true);
             historyCtrl = new HistoryCtrl(historyModel, historyView);
@@ -414,7 +413,7 @@
         {
             System.out.println("Whole history - Undo selected");
             
-            wholeHistoryModel = new WholeHistory(model.getDatabase());
+            wholeHistoryModel = new History(model.getDatabase());
             wholeHistoryView = new WholeHistoryView(wholeHistoryModel, view, true);
             wholeHistoryCtrl = new WholeHistoryCtrl(wholeHistoryModel, wholeHistoryView);
             wholeHistoryView.setVisible(true); 

Modified: trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java	2006-04-21 13:18:23 UTC (rev 168)
+++ trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java	2006-04-21 15:30:58 UTC (rev 169)
@@ -18,7 +18,7 @@
     /**
      * Creates new form DetailsHistoryView
      */
-    public DetailsHistoryView(WholeHistory model, javax.swing.JDialog parent, boolean modal) {
+    public DetailsHistoryView(History model, javax.swing.JDialog parent, boolean modal) {
         super(parent, modal);
         setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
         initComponents();        

Modified: trunk/src/net/sf/plantlore/client/history/History.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/History.java	2006-04-21 13:18:23 UTC (rev 168)
+++ trunk/src/net/sf/plantlore/client/history/History.java	2006-04-21 15:30:58 UTC (rev 169)
@@ -1,6 +1,12 @@
-/**
- * 
+/*
+ * History.java
+ *
+ * Created on 14. duben 2006, 15:43
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
  */
+
 package net.sf.plantlore.client.history;
 
 import java.rmi.RemoteException;
@@ -12,36 +18,30 @@
 import java.util.GregorianCalendar;
 import java.util.HashSet;
 import java.util.Hashtable;
-import java.util.Observable;
-
-import net.sf.plantlore.middleware.DBLayer;
-import net.sf.plantlore.server.DBLayerException;
-import net.sf.plantlore.middleware.SelectQuery;
 import net.sf.plantlore.common.PlantloreConstants;
+import net.sf.plantlore.common.record.Author;
 import net.sf.plantlore.common.record.Habitat;
+import net.sf.plantlore.common.record.HistoryChange;
+import net.sf.plantlore.common.record.HistoryRecord;
 import net.sf.plantlore.common.record.Occurrence;
 import net.sf.plantlore.common.record.Phytochorion;
 import net.sf.plantlore.common.record.Plant;
 import net.sf.plantlore.common.record.Publication;
 import net.sf.plantlore.common.record.Territory;
-import net.sf.plantlore.common.record.HistoryRecord;
-import net.sf.plantlore.common.record.HistoryChange;
 import net.sf.plantlore.common.record.Village;
-
-
+import net.sf.plantlore.middleware.DBLayer;
+import net.sf.plantlore.middleware.SelectQuery;
+import net.sf.plantlore.server.DBLayerException;
 import org.apache.log4j.Logger;
 
-
 /**
- * @author Lada Oberreiterova
  *
+ * @author Lada
  */
-public class History extends Observable {
-
-    /** Instance of a logger */
-    private Logger logger;   
-    /** Exception with details about an error */
-    private DBLayerException error = null;
+public class History {
+    
+      /** Instance of a logger */
+    private Logger logger;      
     /** Instance of a database management object */
     private DBLayer database;   
     /** Constant with default number of rows to display */
@@ -51,13 +51,19 @@
     /** Index of the first record shown in the table */
     private int currentFirstRow;
     /** Information about current display rows*/
-    private String displayRow;
+    private String displayRow;    
     
     //*******Informations about searching Result from database*****//
     /** Result of the search query */
     private int resultId = 0;
     /** List of data (results of a search query) displayed in the table */
-    private ArrayList<HistoryRecord> editHistoryDataList = new ArrayList();    
+    private ArrayList<HistoryRecord> historyDataList = new ArrayList();     
+    // seznam editovanych objektu (potrebny pro hromadne potvrzeni update)
+    private ArrayList<Object> editObjectList = new ArrayList();
+    // informace pro uzivatele o record undo
+    private String messageUndo;
+
+    //************************************pro historii jednoho nalezu*********************/
     //seznam id vsech oznacenych polozek
     private HashSet markListId = new HashSet();
     //Seznam Item + maxIdItem (nejstarsi oznacene id pro dany Item=sloupec)
@@ -68,15 +74,18 @@
     private boolean relationship;
     //Informuje o tom zda doslo k editaci polozky z tabulky tHabitat
     private boolean editHabitat;
-    //zprava pro uzivatele
-    private String messageUndo;
     
-    //*********************Record of history ***************************************//    
+    //*********************Record of history, ... ***************************************//    
     private Occurrence occurrence;
     private HistoryRecord historyRecord;
     private HistoryChange historyChange;
-	
-    //	**************Informations about HistoryRecord*************//	
+    private Publication publication;
+    private Author author;
+    private Village village;
+    private Territory territory;
+    private Phytochorion phytochorion;
+    
+     //	**************Informations about HistoryRecord*************//	
     /** Name of the table where value was changed*/
     private String tableName;  
     /** Name of the column where value was changed*/
@@ -94,10 +103,10 @@
     /** Old value of attribute*/    
     private String oldValue;
     /** New value of attribute*/
-    private String newValue;
-    /** Name of user who did changed*/
+    //private String newValue;
+   /** Name of user who did changed*/
     private String nameUser;
-	
+    
     //**************Informations about occurrences***************//
     /** Name of plant for specified occurrenc*/
     private String namePlant;
@@ -105,14 +114,31 @@
     private String nameAuthor;
     /** Informaciton about location for specified occurrenc*/
     private String location;
-
-     //********************************************************//
-     /** Mapping of entities */
+    
+    //********************************************************//
+    /** Mapping of entities */
+    private Hashtable<String, Integer> publicationHash;
     private Hashtable<String, Integer> habitatHash;
     private Hashtable<String, Integer> occurrenceHash;  
+    private Hashtable<String, Integer> authorHash;
     
+    
+    /**
+     * Creates a new instance of History - history of whole database
+     */
+    public History(DBLayer database) {
+          
+       logger = Logger.getLogger(this.getClass().getPackage().getName());	 
+       this.database = database;
+       
+       //nacist vsechny data z historie -->bez podminky, jen je seradit podle casu
+       searchWholeHistoryData();
+       //opet funkci pro vyzadani si dat postupne
+       processResult(1, displayRows);
+    }
+    
     /**  
-     *  Creates a new instance of History 
+     *  Creates a new instance of History - history of specific occurrence 
      *  @param database Instance of a database management object
      *  @param namePlant Name of plant for specified occurrence
      *  @param nameAuthor Name of author for specified occurrence
@@ -190,7 +216,8 @@
 	   //Process results of a search "edit" query 
 	   processResult(1,displayRows);
     }	
-
+    
+    
     /**
      *  Searches for information about data entries concerned with specified occurrence.   
      */
@@ -250,7 +277,7 @@
             // Execute query                    
             resultIdEdit = database.executeQuery(query); 
             // Save "edit" history data
-            setEditResult(resultIdEdit);
+            setResultId(resultIdEdit);
         } catch (DBLayerException e) {
             // Log and set an error                   
             logger.error("Searching history data with condition 'operation = edit' failed. Unable to execute search query.");           
@@ -288,23 +315,55 @@
         }       
     }
     
+    /**
+     *
+     */
+    public void searchWholeHistoryData() {
+        
+        //Create new Select query
+        SelectQuery query = null;       
+
+    	//  Select data from tHistory table
+        try {
+			query = database.createQuery(HistoryRecord.class);
+			// Create aliases for table tHistoryChange.
+			query.createAlias("historyChange", "hc");
+			// sort by date/time
+			query.addOrder(PlantloreConstants.DIRECT_DESC, "hc.when");
+		} catch (RemoteException e) {
+                System.err.println("RemoteException- searchWholeHistoryData(), createQuery");
+        }
+                
+    	
+        int resultId = 0;
+        try {
+            // Execute query                    
+            resultId = database.executeQuery(query);
+            // Save "edit" history data
+            setResultId(resultId);    
+        } catch (DBLayerException e) {                            
+            logger.error("Searching whole history data failed. Unable to execute search query.");           
+        } catch (RemoteException e) { 		   
+     	   System.err.println("RemoteException- searchWholeHistoryData(), executeQuery");
+        }          
+    }
     
-    /**
+   /**
      * Process results of a search query. Retrieves results using the database management object (DBLayer) and stores them in the data field of the class. 
      * @param fromTable number of the first row to show in table. Number of the first row to retraieve is 1.
      * @param count number of rows to retrieve 
      */
     public void processResult(int fromTable, int count) {
-    	
-    	if (this.resultId != 0) {
-    		int currentRow = getResultRows();
+        
+        if (this.resultId != 0) {
+            int currentRow = getResultRows();
             logger.debug("Rows in the result: "+currentRow);
             logger.debug("Max available rows: "+(fromTable+count-1));
            
             // Find out how many rows we can retrieve - it cannot be more than number of rows in the result
             int to = Math.min(currentRow, fromTable+count-1);           
             if (to <= 0) {
-            	editHistoryDataList = new ArrayList<HistoryRecord>(); 
+            	historyDataList = new ArrayList<HistoryRecord>(); 
             	setDisplayRows(0);
             	setCurrentDisplayRows("0-0");
             } else {
@@ -316,18 +375,18 @@
                  	try {
                  		objectHistory = database.more(this.resultId, 1, to);  
                  	} catch(RemoteException e) {
-                     	System.err.println("RemoteException- processResult, more");
-                     	logger.debug("RemoteException- processResult, more");
+                     	System.err.println("RemoteException- processEditResult, more");
+                     	logger.debug("RemoteException- processEditResult, more");
                      	return;
                      }                   
                     int countResult = objectHistory.length;  
                     logger.debug("Results retrieved. Count: "+ countResult);
                     // Create storage for the results
-                    this.editHistoryDataList = new ArrayList<HistoryRecord>();
+                    this.historyDataList = new ArrayList<HistoryRecord>();
                     // Cast the results to the HistoryRecord objects
                     for (int i=0; i<countResult; i++ ) {                    							
 						Object[] objHis = (Object[])objectHistory[i];
-                        this.editHistoryDataList.add((HistoryRecord)objHis[0]);
+                        this.historyDataList.add((HistoryRecord)objHis[0]);
                     }           
                     //Update current first displayed row (only if data retrieval was successful)
                     setCurrentFirstRow(fromTable); 
@@ -337,18 +396,636 @@
             }
         }         
     }
+    
+    /**
+     *
+     */
+    public void undoToDate(int toResult) {
+        
+        //Inicalization of hashTable
+    	initOccurrenceHash();
+    	initHabitatHash();   
+        initPublicationHash();
+        initAuthorHash();       
+        	
+    	//number of result
+    	//int countResult = this.historyDataList.size();
+    	// Pomocne hodnoty pro zjisteni zda zmena ovlivni vice nalezu
+    	//relationship = false;
+    	//editHabitat = false;
+    	
+    	//take from younger record to older record, undo tu selected row
+    	for( int i=0; i < toResult; i++) {
+    		
+    		//init history data 
+    		historyRecord = (HistoryRecord)historyDataList.get(i);    		
+    		historyChange = historyRecord.getHistoryChange();
+    		tableName = historyRecord.getHistoryColumn().getTableName();
+                recordId = historyChange.getRecordId();
+                operation = historyChange.getOperation();
+    		                                                
+               /** 
+                * Pri insertu a editu nedohledavam column --> prvne rozdelit podle operace a pro edit dale rozdelit podle column
+                */
+                if (operation == HistoryChange.HISTORYCHANGE_INSERT) {
+                    undoInsertDelete(0);
+                } else if (operation == HistoryChange.HISTORYCHANGE_EDIT || operation == HistoryChange.HISTORYCHANGE_EDITGROUP) {
+                    undoEdit();
+                } else if (operation == HistoryChange.HISTORYCHANGE_DELETE) {
+                    undoInsertDelete(1);
+                } else {
+                    logger.error("Incorrect opreration code: "+ operation);
+                }                
+        }
+    }
+    
+    /**
+     *  Volani UNDO z historie pro jeden nalez
+     */
+    public void undoSelected() {
+    	
+    	// Inicalization of hashTable
+    	initOccurrenceHash();
+    	initHabitatHash();    	  
+        	
+    	//number of result
+    	int countResult = getResultRows();
+    	// Pomocne hodnoty pro zjisteni zda zmena ovlivni vice nalezu
+    	relationship = false;
+    	editHabitat = false;
+    	
+    	//take from younger record to older record
+    	for( int i=0; i < countResult; i++) {
+    		if (! markListId.contains(i)) {
+    			continue;
+    		}
+    		
+    		// init history data about edit of record
+    		historyRecord = (HistoryRecord)historyDataList.get(i);    		
+    		historyChange = historyRecord.getHistoryChange();
+    		tableName = historyRecord.getHistoryColumn().getTableName();    		  		    			           
+            recordId = historyChange.getRecordId();           	   
+            operation = historyChange.getOperation();
        
+            
+            //zavolani funkce, ktera undo pro operaci edit
+            undoEdit();    		
+    	}
+    	//generated information form user
+    	generateMessageUndo();
+    }
+    
+    /**
+     * ??? Habitat - nemuselo by se zaznamenavat cDelete
+     * ??? Phytochorion, Village, Territory - asi bude potreba cDelete, abychom nezobrazovali nektere polozky, co se historii odstrani
+     * delete == 1 ... smazat
+     * delete == 0 ... obnovit
+     */
+    public void undoInsertDelete(int delete) {
+        if (tableName.equals("Occurrence")){
+             Object[] object = searchObject("Occurrence",recordId);             
+             Occurrence occurrence = (Occurrence)object[delete];
+             occurrence.setDeleted(1);
+      //  } else if (tableName.equals("Habitat")) {
+      //       Object[] object = searchObject("v",recordId);  
+      //       Habitat habitat = (Habitat)object[delete];
+      //       habitat.setDeleted(1);
+        } else if (tableName.equals("Publication")) {
+             Object[] object = searchObject("Publication",recordId);  
+             Publication publication = (Publication)object[delete];
+             publication.setDeleted(1);
+        } else if (tableName.equals("Author")) {
+             Object[] object = searchObject("Author",recordId);   
+             Author author = (Author)object[delete];
+             author.setDeleted(1);
+        } else if (tableName.equals("Phytochorion")) {
+             Object[] object = searchObject("Phytochorion",recordId);   
+             Phytochorion phytochorion = (Phytochorion)object[delete];             
+             //phytochorion.setDelete(1);
+        } else if (tableName.equals("Territoriy")) {
+             Object[] object = searchObject("Territory",recordId); 
+             Territory territory = (Territory)object[delete];             
+             //territory.setDelete(1);
+        } else if (tableName.equals("Village")) {
+             Object[] object = searchObject("Village",recordId); 
+             Village village = (Village)object[delete];             
+             //village.setDelete(1);
+        } else {
+            logger.error("No table defined");
+        }
+    }
+    
+    /**
+     *
+     */
+    public void undoEdit() {
+        
+        //init history data about edit of record
+        columnName = historyRecord.getHistoryColumn().getColumnName();    		    			
+        oldRecordId = historyChange.getOldRecordId();                
+        occurrenceId = historyChange.getOccurrence().getId();		           
+        oldValue = historyRecord.getOldValue();
+        
+        if (tableName.equals("Occurrence")){
+                undoOccurrence();
+        } else if (tableName.equals("Habitat")) {
+                undoHabitat();
+        } else if (tableName.equals("Publication")) {
+                undoPublication();
+        } else if (tableName.equals("Author")) {
+                undoAuthor();
+        } else if (tableName.equals("Phytochorion")) {
+                undoPhytochorion();
+        } else if (tableName.equals("Territory")) {
+                undoTerritory();
+        } else if (tableName.equals("Village")) {
+                undoVillage();
+        } else {
+            logger.error("No table defined");
+        }
+    }
 
     /**
+     *
+     */
+    public void undoOccurrence() {
+        
+        //zaznam v ramci, ktereho doslo k editaci tabulky tOccurrences
+        occurrence = historyChange.getOccurrence();
+        
+        boolean objectList = editObjectList.contains(occurrence);
+        if (!objectList) {
+        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
+            editObjectList.add(occurrence);
+        }
+        logger.debug("editObjectList: "+objectList);
+        logger.debug("OccurrenceID: "+occurrence.getId());
+        logger.debug("columnName: "+columnName);
+                
+        if (occurrenceId != recordId){
+            logger.error("Inccorect information in history tables --> occurrenceId != recordId ... Incorrect identifier of Occurrence.");
+        }
+
+        //Get a specified number of columnName from occurrence mapping.
+        int columnConstant;
+        if (occurrenceHash.containsKey(columnName)) {
+                 columnConstant = (Integer)occurrenceHash.get(columnName); 
+        } else {
+             columnConstant = 0;
+        }        	    			
+
+        //init Calendar    		
+        Calendar isoDateTime = new GregorianCalendar();
+
+        switch (columnConstant) {
+        case 1: //Taxon  
+            if (oldRecordId > 0 ) {
+                //Select record Plant where id = oldRocordId 
+                Object[] object = searchObject("Plant",oldRecordId);
+                Plant plant = (Plant)object[0];
+                //Set old value to attribute plantID
+                occurrence.setPlant(plant);
+                logger.debug("Set selected value for update of attribute Taxon.");	
+            } else {
+                 logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
+            } 
+            break;
+        case 2: //Year	
+            //Set old value to attribute Year          		
+                occurrence.setYearCollected(Integer.parseInt(oldValue));
+                logger.debug("Set selected value for update of attribute Year.");
+                //Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	                		
+                isoDateTime.setTime(occurrence.getTimeCollected());
+                isoDateTime.set(Integer.parseInt(oldValue),occurrence.getMonthCollected(),occurrence.getDayCollected());
+                occurrence.setIsoDateTimeBegin(isoDateTime.getTime());	                	              	            	
+                break;
+        case 3: //Month 
+                // Set old value to attribute Month 
+                occurrence.setMonthCollected(Integer.parseInt(oldValue));
+                logger.debug("Set selected value for update of attribute Month.");
+                // Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
+                isoDateTime.setTime(occurrence.getTimeCollected());
+                isoDateTime.set(occurrence.getYearCollected(), Integer.parseInt(oldValue), occurrence.getDayCollected());
+                occurrence.setIsoDateTimeBegin(isoDateTime.getTime());              		
+            break;
+        case 4: //Day	                	
+                // Set old value to attribute Day            		
+                occurrence.setDayCollected(Integer.parseInt(oldValue));
+                logger.debug("Set selected value for update of attribute Day.");
+                // Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
+                isoDateTime.setTime(occurrence.getTimeCollected());
+                isoDateTime.set(occurrence.getYearCollected(), occurrence.getMonthCollected(), Integer.parseInt(oldValue));
+                occurrence.setIsoDateTimeBegin(isoDateTime.getTime());
+                break;
+        case 5: //Time 	                		                	
+                // Set old value to attribute Time   
+                Date time = new Date();
+                SimpleDateFormat df = new SimpleDateFormat( "HH:mm:ss.S" );
+                try {
+                        time = df.parse( oldValue );
+                } catch (ParseException e) {
+                        logger.error("Parse time failed. "+ e);
+                }
+                occurrence.setTimeCollected(time);
+                logger.debug("Set selected value for update of attribute Time.");
+                // Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
+                isoDateTime.setTime(time);
+                isoDateTime.set(occurrence.getYearCollected(), occurrence.getMonthCollected(), occurrence.getDayCollected());
+                occurrence.setIsoDateTimeBegin(isoDateTime.getTime());
+            break;
+        case 6: //Source	                	
+                // Set old value to attribute Source 
+                occurrence.setDataSource(oldValue);
+                logger.debug("Set selected value for update of attribute DataSource.");		                	            	
+                break;
+        case 7: //Herbarium
+                // Set old value to attribute Herbarium
+                occurrence.setHerbarium(oldValue);
+                logger.debug("Set selected value for update of attribute Herbarium.");	                		          
+            break;
+        case 8: //Note occurrence	
+                // Set old value to attribute Note occurence	                	
+                occurrence.setNote(oldValue);
+                logger.debug("Set selected value for update of attribute NoteOccurrence.");	                		        	
+                break;
+        case 9: //Publication  
+                //Select record Publication where id = oldRocordId 
+                if (oldRecordId > 0){
+                    Object[] objectPubl = searchObject("Publication",oldRecordId);
+                    Publication publication = (Publication)objectPubl[0];
+                    //Set old value to attribute publicationID
+                    occurrence.setPublication(publication);
+                    logger.debug("Set selected value for update of attribute Publication.");
+                }else {
+                    logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
+                }
+            break;
+        default:            
+            logger.error("No column defined for name "+ columnName);	                   
+        }         
+    }
+        
+    /**
+     *
+     */
+    public void undoHabitat() {
+        
+        //zaznam v ramci, ktereho doslo k editaci tabulky tHabitats
+        occurrence = historyChange.getOccurrence();
+      
+        //K editaci tabulky tHabitats dojde jen v pripade editace nejakeho konkretniho nalezu, proto nam staci nacist
+        //data z tHabitats pres tOccurrence.cHabitatId a nasledne staci zavolat update jen na occurrence
+        boolean objectList = editObjectList.contains(occurrence); 
+        if (!objectList) {
+        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan (editace habitat vzdy v ramci occurrence)
+            editObjectList.add(occurrence);
+        }
+        logger.debug("editObjectList: "+objectList);
+        logger.debug("Habitat - OccurrenceID: "+occurrence.getId());
+        logger.debug("columnName: "+columnName);
+        
+        // Get a specified number of columnName from habitat mapping.
+        int columnConstant;
+        if (habitatHash.containsKey(columnName)) {
+                 columnConstant = (Integer)habitatHash.get(columnName); 
+        } else {
+             columnConstant = 0;
+        }        	    			
+
+        //informuje o tom, ze byla editovana tabulka tHabitat 
+        editHabitat = true;
+
+        // Save new value for the column        		
+        switch (columnConstant) {
+        case 1:  //Quadrant     	                	
+                /* pokud doslo ke zmene vazeb mezi tHabitats a tOccurrences z 1:N na 1:1, tak v tOccurrences.cHabitatId
+                 * bude jiz vzdy ulozeno id nove insertovany zaznamu do tHabitats a nikdy uz nedojde k jeho zmene, tzn.
+                 * vazba mezi tabulkami pro dany nalez jiz bude na vzdy 1:1 
+                 */ 	                		  
+                occurrence.getHabitat().setQuadrant(oldValue);		                	
+                logger.debug("Set selected value for update of attribute Quadrant.");
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {
+	                // existuji dva edity EDIT (ovlivni jeden nalez) a EDITGROUP (ovlivni vice nalezu)
+	                // potrebujeme zjistit, zda pro dany nalez je vazeba mezi tHabitats a tOccurrences vzdy 1:N
+	                // nebo zda editaci nalezu vznikla vazvba 1:1
+	                relationship = true;
+                } 	                	
+            break;
+        case 2: //Place description 	                	 	                			                		 
+                occurrence.getHabitat().setDescription(oldValue);		                	
+                logger.debug("Set selected value for update of attribute Description.");
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
+                        relationship = true;
+                } 	              	
+                break;
+        case 3:  //Country 	                	 	                			                		 
+                occurrence.getHabitat().setCountry(oldValue);		                	
+                logger.debug("Set selected value for update of attribute Country.");
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
+                        relationship = true;
+                } 	
+            break;
+        case 4: //Altitude 	                	                			                		 
+                occurrence.getHabitat().setAltitude(Double.parseDouble(oldValue));		                	
+                logger.debug("Set selected value for update of attribute Altitude.");
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
+                        relationship = true;
+                } 	
+                break;
+        case 5:  //Latitude   	                		                			                		  
+                occurrence.getHabitat().setLatitude(Double.parseDouble(oldValue));		                	
+                logger.debug("Set selected value for update of attribute Latitude.");
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
+                        relationship = true;
+                } 	
+            break;
+        case 6: //Longitude 	                		                			                		
+                occurrence.getHabitat().setLongitude(Double.parseDouble(oldValue));		                	
+                logger.debug("Set selected value for update of attribute Longitude.");
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
+                        relationship = true;
+                } 	
+                break;
+        case 7: //Nearest bigger seat   	                	 	                			                		 
+                //Nacteni Village pro nasledny update tHabitat.cNearestVillageId
+                if (oldRecordId != 0){
+                        Object[] objectVill = searchObject("Village",oldRecordId);
+                        Village village = (Village)objectVill[0];
+                occurrence.getHabitat().setNearestVillage(village);
+                logger.debug("Set selected value for update of attribute NearesVillage.");
+                } else {
+                        logger.error("UNDO - Incorrect oldRecordId for Village.");
+                }
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
+                       relationship = true;
+                } 	
+            break;
+        case 8: //Phytochorion or phytochorion code 	                	             			                		 
+                // Nacteni Phytochorion pro nasledny update tHabitat.cPhytochorionId
+                if (oldRecordId != 0){
+                        Object[] objectPhyt = searchObject("Phytochorion",oldRecordId);
+                        Phytochorion phytochorion = (Phytochorion)objectPhyt[0];
+                        occurrence.getHabitat().setPhytochorion(phytochorion);
+                        logger.debug("Set selected value for update of attribute Phytochorion.");
+                }else {
+                        logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
+                }
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
+                        relationship = true;
+                } 	
+            break; 	               
+        case 9:  //Territory   	                	                			                		  
+                // Nacteni Territory pro nasledny update tHabitat.cTerritory
+                if (oldRecordId != 0){
+                        Object[] objectTerr = searchObject("Territory",oldRecordId);
+                        Territory territory = (Territory)objectTerr[0];
+                        occurrence.getHabitat().setTerritory(territory);
+                        logger.debug("Set selected value for update of attribute Territory.");
+                }else {
+                        logger.error("UNDO - Incorrect oldRecordId for Territory.");
+                }	
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
+                        relationship = true;
+                } 	        	
+            break;
+        case 10: //Note habitat	                		                			                		  
+                occurrence.getHabitat().setNote(oldValue);		                	
+                logger.debug("Set selected value for update of attribute Note.");
+                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
+                       relationship = true;
+                } 	
+                break;
+        default:            
+            logger.error("Habitat - No column defined for name "+ columnName);	                   
+        }  	          
+    }
+    
+    /**
+     *
+     */
+    public void undoPublication() {
+                
+        Object[] object = searchObject("Publication", recordId);
+        publication = (Publication)object[0];
+        
+        //test, zda jiz dany zaznam byl editovan
+        boolean objectList = editObjectList.contains(publication); 
+        if (!objectList) {
+        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
+            editObjectList.add(publication);
+        }
+        logger.debug("editObjectList.contains: "+objectList);
+        logger.debug("Publication: "+publication.getId());
+        logger.debug("columnName: "+columnName);
+        
+       // Get a specified number of columnName from habitat mapping.
+        int columnConstant;
+        if (publicationHash.containsKey(columnName)) {
+                 columnConstant = (Integer)habitatHash.get(columnName); 
+        } else {
+             columnConstant = 0;
+        }        	    			
+      
+        // Save new value for the column        		
+        switch (columnConstant) {
+        case 1:  //CollectionName     	                	
+                publication.setCollectionName(oldValue);	 
+                publication.setReferenceCitation(publication.getCollectionName()+", "+publication.getCollectionYearPublication()+ ", "+publication.getJournalName()+", "+publication.getJournalAuthorName());
+                logger.debug("Publication - Set selected value for update of attribute collectionName.");                 	
+            break;
+        case 2: //collectionYearPublication	                	 	                			                		 
+                publication.setCollectionYearPublication(Integer.parseInt(oldValue));	          
+                publication.setReferenceCitation(publication.getCollectionName()+", "+publication.getCollectionYearPublication()+ ", "+publication.getJournalName()+", "+publication.getJournalAuthorName());
+                logger.debug("Publication - Set selected value for update of attribute collectionYearPublication.");                 	             	
+                break;
+         case 3: //journalName	                	 	                			                		 
+                publication.setJournalName(oldValue);	       
+                publication.setReferenceCitation(publication.getCollectionName()+", "+publication.getCollectionYearPublication()+ ", "+publication.getJournalName()+", "+publication.getJournalAuthorName());
+                logger.debug("Publication - Set selected value for update of attribute journalName.");                 	             	
+                break;
+        case 4: //journalAuthorName	                	 	                			                		 
+                publication.setJournalAuthorName(oldValue);	 
+                publication.setReferenceCitation(publication.getCollectionName()+", "+publication.getCollectionYearPublication()+ ", "+publication.getJournalName()+", "+publication.getJournalAuthorName());
+                logger.debug("Publication - Set selected value for update of attribute journalAuthorName.");                 	             	
+                break;
+        case 5: //referenceDetail 	                	 	                			                		 
+                publication.setReferenceDetail(oldValue);	                	
+                logger.debug("Publication - Set selected value for update of attribute referenceDeatail.");                 	             	
+                break;
+        case 6: //URL 	                	 	                			                		 
+                publication.setUrl(oldValue);	                	
+                logger.debug("Publication - Set selected value for update of attribute url.");                 	             	
+                break;
+        default:            
+            logger.error("Publication - No column defined for name "+ columnName);	                   
+        } 
+    }
+    
+    /**
+     *
+     */
+    public void undoAuthor() {
+        
+       Object[] object = searchObject("Author", recordId);
+       author = (Author)object[0];
+       
+       //test, zda jiz dany zaznam byl editovan
+       boolean objectList = editObjectList.contains(author); 
+       if (!objectList) {
+       	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
+           editObjectList.add(author);
+       }
+       logger.debug("editObjectList.contains: "+objectList);
+       logger.debug("author: "+author.getId());
+       logger.debug("columnName: "+columnName);
+        
+       // Get a specified number of columnName from habitat mapping.
+        int columnConstant;
+        if (authorHash.containsKey(columnName)) {
+                 columnConstant = (Integer)authorHash.get(columnName); 
+        } else {
+             columnConstant = 0;
+        }        	    			
+      
+        // Save new value for the column        		
+        switch (columnConstant) {
+        case 1:  //wholeName     	                	
+                author.setWholeName(oldValue);	                 
+                logger.debug("Author - Set selected value for update of attribute WholeName.");                 	
+            break;
+        case 2: //address	                	 	                			                		 
+                author.setAddress(oldValue);
+                logger.debug("Author - Set selected value for update of attribute Address.");                 	             	
+                break;
+         case 3: //mail	                	 	                			                		 
+                author.setEmail(oldValue);	                      
+                logger.debug("Author - Set selected value for update of attribute Email.");                 	             	
+                break;
+        case 4: //phoneNumber	                	 	                			                		 
+                author.setPhoneNumber(oldValue);	                
+                logger.debug("Author - Set selected value for update of attribute PhoneNumber.");                 	             	
+                break;
+        case 5: //organization 	                	 	                			                		 
+                author.setOrganization(oldValue);                	
+                logger.debug("Author - Set selected value for update of attribute organization.");                 	             	
+                break;
+        case 6: //URL 	                	 	                			                		 
+                author.setUrl(oldValue);	                	
+                logger.debug("Author - Set selected value for update of attribute url.");                 	             	
+                break;
+        case 7: //role	                	 	                			                		 
+                author.setRole(oldValue);	                	
+                logger.debug("Author - Set selected value for update of attribute Role.");                 	             	
+                break;
+        case 8: //note 	                	 	                			                		 
+                author.setNote(oldValue);	                	
+                logger.debug("Author - Set selected value for update of attribute Note.");                 	             	
+                break;
+        default:            
+            logger.error("Author - No column defined for name "+ columnName);	                   
+        } 
+    }
+    
+    /**
+     *
+     */
+    public void undoPhytochorion() {
+        
+        Object[] object = searchObject("Phytochorion", recordId);
+        phytochorion = (Phytochorion)object[0];     
+        
+        //test, zda jiz dany zaznam byl editovan
+        boolean objectList = editObjectList.contains(phytochorion); 
+        if (!objectList) {
+        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
+            editObjectList.add(phytochorion);
+        }
+        logger.debug("editObjectList.contains: "+objectList);
+        logger.debug("phytochorion: "+phytochorion.getId());
+        logger.debug("columnName: "+columnName);
+      
+        if (columnName.equals("namePhytochorion")) {
+            phytochorion.setCode(oldValue);	                 
+            logger.debug("Phytochorion - Set selected value for update of attribute WholeName.");                 	
+        } else if (columnName.equals("code")) {
+             phytochorion.setName(oldValue);
+             logger.debug("Phytochorion - Set selected value for update of attribute Address.");                 	             	
+        } else {
+            logger.error("Phytochorion - No column defined for name "+ columnName);
+        }              
+    }
+    
+    /**
+     *
+     */
+    public void undoVillage() {
+       
+        Object[] object = searchObject("Village", recordId);
+        village = (Village)object[0];
+        
+        // test, zda jiz dany zaznam byl editovan
+        boolean objectList = editObjectList.contains(village); 
+        if (!objectList) {
+        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
+            editObjectList.add(village);
+        }
+        logger.debug("editObjectList.contains: "+objectList);
+        logger.debug("village: "+village.getId());
+        logger.debug("columnName: "+columnName);
+        
+       // Save new value for the column
+        if (columnName.equals("nameVillage")) {
+            village.setName(oldValue);	                 
+            logger.debug("Village - Set selected value for update of attribute Name.");                 	
+        } else {
+            logger.error("Village - No column defined for name "+ columnName);	                   
+        }       
+    }
+    
+    /**
+     *
+     */
+    public void undoTerritory() {
+       
+        Object[] object = searchObject("Territory", recordId);
+        territory = (Territory)object[0];
+        
+        // test, zda jiz dany zaznam byl editovan
+        boolean objectList = editObjectList.contains(territory); 
+        if (!objectList) {
+        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
+            editObjectList.add(territory);
+        }
+        logger.debug("editObjectList.contains: "+objectList);
+        logger.debug("territory: "+territory.getId());
+        logger.debug("columnName: "+columnName);
+        
+       if (columnName.equals("nameTerritory")) {
+           territory.setName(oldValue);	                 
+           logger.debug("Territory - Set selected value for update of attribute Name.");                 	 
+       } else {
+           logger.error("Territory - No column defined for name "+ columnName);	                   
+       }        
+    }
+    
+    /**
      * 
      * @param id
      * @return
      */
     public Object[] searchObject(String typeObject, int id) { 
-    	
+      
     	SelectQuery query = null;
-    	if (typeObject.equals("Habitat")){
-    		try {
+    	if (typeObject.equals("Occurrence")){
+            try {
+            	query = database.createQuery(Occurrence.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Occurrence.ID, null, id , null);
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject() - Occurrence, createQuery");       	  
+            }            
+            
+    	} else if (typeObject.equals("Habitat")){
+            try {
             	query = database.createQuery(Habitat.class);
             	query.addRestriction(PlantloreConstants.RESTR_EQ, Habitat.ID, null, id , null);
             } catch(RemoteException e) {
@@ -356,30 +1033,39 @@
             }            
             
     	} else if (typeObject.equals("Plant")){
-    		try {
+            try {
             	query = database.createQuery(Plant.class);
             	query.addRestriction(PlantloreConstants.RESTR_EQ, Plant.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject() - Plant, createQuery");       	  
             }            
+            
+    	} else if (typeObject.equals("Author")){
+            try {
+            	query = database.createQuery(Author.class);
+            	query.addRestriction(PlantloreConstants.RESTR_EQ, Author.ID, null, id , null);
+            } catch(RemoteException e) {
+            	    System.err.println("RemoteException, searchObject() - Author, createQuery");       	  
+            }            
+            
     	} else if (typeObject.equals("Publication")){
-    		try {
+            try {
             	query = database.createQuery(Publication.class);
             	query.addRestriction(PlantloreConstants.RESTR_EQ, Publication.ID, null, id , null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject() - Publication, createQuery");       	  
             }            
-           
+            
     	} else if (typeObject.equals("Village")){
-    		try {
+            try {
             	query = database.createQuery(Village.class);
             	query.addRestriction(PlantloreConstants.RESTR_EQ, Village.ID, null, id, null);
             } catch(RemoteException e) {
             	    System.err.println("RemoteException, searchObject()- Village, createQuery");       	  
             }            
-         
+            
     	}  else if  (typeObject.equals("Territory")){
-    		try {
+            try {
             	query = database.createQuery(Territory.class);
             	query.addRestriction(PlantloreConstants.RESTR_EQ, Territory.ID, null, id , null);
             } catch(RemoteException e) {
@@ -387,7 +1073,7 @@
             }            
              
     	} else if (typeObject.equals("Phytochorion")){
-    		try {
+            try {
             	query = database.createQuery(Phytochorion.class);
             	query.addRestriction(PlantloreConstants.RESTR_EQ, Phytochorion.ID, null, id , null);
             } catch(RemoteException e) {
@@ -405,347 +1091,66 @@
             logger.error("Searching " +typeObject+ " failed. Unable to execute search query.");
         } catch (RemoteException e) {		 
      	   System.err.println("RemoteException- executeQuery " +typeObject);
- 	    }        
-
- 	   Object[] objects = null;
- 	   Object[] object = null;
+ 	} 
+       Object[] objects = null;
+       Object[] object = null;
        try {
        	    // Retrieve selected row interval         	
-        	try {
-        		objects = database.more(resultIdPlant, 1, 1);  
-        	} catch(RemoteException e) {            	
-            	logger.debug("RemoteException- searchObject, more");            	
+            try {
+                 objects = database.more(resultIdPlant, 1, 1);  
+            } catch(RemoteException e) {            	
+                logger.debug("RemoteException- searchObject, more");            	
             }   
         	object = (Object[])objects[0];           
        } catch (DBLayerException e) {
            // Log and set error in case of an exception
-           logger.error("Processing search " +typeObject+ " results failed: "+e.toString());               
+           logger.error("Processing search " +typeObject+ " results failed: "+e.toString());            
        }     	    
-       return object; 	       	          	          	       
+        return object; 	       	          	   
+           	        
     }
     
- 
     /**
-     * UNDO - funce projde oznacene zaznamy a nastavi stare hodnoty
-     * Pokud dojde zmenou k ovlivneni vice nalezu, tak o tom informuje uzivatele
+     *  ..... pri whole history se bude do promennych occurrence, atd. nacitat vice ruznych objektu s jinym ID
+     *  ....Musim si ty jednotlive objekty pamatovat --> pole objektu, kde budou jednotlive editovane objekty
      */
-    public void updateOlderChanges()
-    {    	
-    	    	
-    	//Inicalization of hashTable
-    	initOccurrenceHash();
-    	initHabitatHash();    	  
-        	
-    	//number of result
-    	int countResult = getEditResult();
-    	// Pomocne hodnoty pro zjisteni zda zmena ovlivni vice nalezu
-    	relationship = false;
-    	editHabitat = false;
+    public void commitUpdate() {
     	
-    	//take from younger record to older record
-    	for( int i=0; i < countResult; i++) {
-    		if (! markListId.contains(i)) {
-    			continue;
-    		}
-    		
-    		//init history data about edit of record
-    		historyRecord = (HistoryRecord)editHistoryDataList.get(i);    		
-    		historyChange = historyRecord.getHistoryChange();
-    		tableName = historyRecord.getHistoryColumn().getTableName();
-    		columnName = historyRecord.getHistoryColumn().getColumnName();    		    			
-            oldRecordId = historyChange.getOldRecordId();
-            recordId = historyChange.getRecordId();
-            occurrenceId = historyChange.getOccurrence().getId();		   
-            operation = historyChange.getOperation();
-            oldValue = historyRecord.getOldValue();
-						
-    		if (tableName.equals("Occurrence")){  
-    			if (occurrenceId != recordId){
-    				logger.error("Inccorect information in history tables --> occurrenceId != recordId ... Incorrect identifier of Occurrence.");
-    			}
-    			
-                        //Get a specified number of columnName from occurrence mapping.
-                        int columnConstant;
-                        if (occurrenceHash.containsKey(columnName)) {
-                                 columnConstant = (Integer)occurrenceHash.get(columnName); 
-                        } else {
-                             columnConstant = 0;
-                        }        	    			
-    			  
-    			//init Calendar    		
-    			Calendar isoDateTime = new GregorianCalendar();
-    			
-    			logger.debug("ColumnConstant: "+ columnConstant);
-    			logger.debug("ColumnName: "+ columnName);
-    			logger.debug("OldValue: "+ oldValue);    			     			
-    			
-    			switch (columnConstant) {
-	                case 1: //Taxon  
-	                	if (oldRecordId > 0 ) {
-                                    //Select record Plant where id = oldRocordId 
-                                    Object[] object = searchObject("Plant",oldRecordId);
-                                    Plant plant = (Plant)object[0];
-                                    //Set old value to attribute plantID
-                                    occurrence.setPlant(plant);
-                                    logger.debug("Set selected value for update of attribute Taxon.");	
-                                    }else {
-                                            logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
-                                    }
-	                    break;
-	                case 2: //Year	
-                	    //Set old value to attribute Year          		
-	                	occurrence.setYearCollected(Integer.parseInt(oldValue));
-	                	logger.debug("Set selected value for update of attribute Year.");
-	                	//Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	                		
-                		isoDateTime.setTime(occurrence.getTimeCollected());
-                		isoDateTime.set(Integer.parseInt(oldValue),occurrence.getMonthCollected(),occurrence.getDayCollected());
-                		occurrence.setIsoDateTimeBegin(isoDateTime.getTime());	                	              	            	
-	                	break;
-	                case 3: //Month 
-	                	// Set old value to attribute Month 
-                		occurrence.setMonthCollected(Integer.parseInt(oldValue));
-                		logger.debug("Set selected value for update of attribute Month.");
-                		// Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
-                		isoDateTime.setTime(occurrence.getTimeCollected());
-                		isoDateTime.set(occurrence.getYearCollected(), Integer.parseInt(oldValue), occurrence.getDayCollected());
-                		occurrence.setIsoDateTimeBegin(isoDateTime.getTime());              		
-	                    break;
-	                case 4: //Day	                	
-                		// Set old value to attribute Day            		
-	                	occurrence.setDayCollected(Integer.parseInt(oldValue));
-	                	logger.debug("Set selected value for update of attribute Day.");
-	                	// Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
-	                	isoDateTime.setTime(occurrence.getTimeCollected());
-                		isoDateTime.set(occurrence.getYearCollected(), occurrence.getMonthCollected(), Integer.parseInt(oldValue));
-                		occurrence.setIsoDateTimeBegin(isoDateTime.getTime());
-	                	break;
-	                case 5: //Time 	                		                	
-                		// Set old value to attribute Time   
-	                	Date time = new Date();
-	                	SimpleDateFormat df = new SimpleDateFormat( "HH:mm:ss.S" );
-	                	try {
-							time = df.parse( oldValue );
-						} catch (ParseException e) {
-							logger.error("Parse time failed. "+ e);
-						}
-						occurrence.setTimeCollected(time);
-                		logger.debug("Set selected value for update of attribute Time.");
-                		// Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
-	                	isoDateTime.setTime(time);
-                		isoDateTime.set(occurrence.getYearCollected(), occurrence.getMonthCollected(), occurrence.getDayCollected());
-                		occurrence.setIsoDateTimeBegin(isoDateTime.getTime());
-	                    break;
-	                case 6: //Source	                	
-	                	// Set old value to attribute Source 
-	                	occurrence.setDataSource(oldValue);
-	                	logger.debug("Set selected value for update of attribute DataSource.");		                	            	
-	                	break;
-	                case 7: //Herbarium
-	                	// Set old value to attribute Herbarium
-                		occurrence.setHerbarium(oldValue);
-                		logger.debug("Set selected value for update of attribute Herbarium.");	                		          
-	                    break;
-	                case 8: //Note occurrence	
-	                	// Set old value to attribute Note occurence	                	
-                		occurrence.setNote(oldValue);
-                		logger.debug("Set selected value for update of attribute NoteOccurrence.");	                		        	
-	                	break;
-	                case 9: //Publication  
-	                	//Select record Publication where id = oldRocordId 
-	                	if (oldRecordId > 0){
-		                	Object[] objectPubl = searchObject("Publication",oldRecordId);
-		                	Publication publication = (Publication)objectPubl[0];
-		                	//Set old value to attribute publicationID
-		                	occurrence.setPublication(publication);
-		                	logger.debug("Set selected value for update of attribute Publication.");
-		    			}else {
-		    				logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
-		    			}
-	                    break;
-	                default:            
-	                    logger.error("No column defined for name "+ columnName);	                   
-    			}  	
-    		} else if (tableName.equals("Habitat") || tableName.equals("Village")
-    				   || tableName.equals("Territory") || tableName.equals("Phytochorion")){
-    			
-                // Get a specified number of columnName from habitat mapping.
-                int columnConstant;
-                if (habitatHash.containsKey(columnName)) {
-                         columnConstant = (Integer)habitatHash.get(columnName); 
-    	        } else {
-    	             columnConstant = 0;
-    	        }        	    			
-    			  
-    			//informuje o tom, ze byla editovana tabulka tHabitat 
-    			editHabitat = true;                       
-    			
-    			logger.debug("ColumnConstant: "+ columnConstant);
-    			logger.debug("ColumnName: "+ columnName);
-    			logger.debug("OldValue: "+ oldValue);  
-    			
-    			
-    			// Save new value for the column        		
-     			switch (columnConstant) {
- 	                case 1:  //Quadrant     	                	
-                		/* pokud doslo ke zmene vazeb mezi tHabitats a tOccurrences z 1:N na 1:1, tak v tOccurrences.cHabitatId
-                		 * bude jiz vzdy ulozeno id nove insertovany zaznamu do tHabitats a nikdy uz nedojde k jeho zmene, tzn.
-                		 * vazba mezi tabulkami pro dany nalez jiz bude na vzdy 1:1 
-                		 */ 	                		  
-                		occurrence.getHabitat().setQuadrant(oldValue);		                	
-	                	logger.debug("Set selected value for update of attribute Quadrant.");
-	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {
-	                		// existuji dva edity EDIT (ovlivni jeden nalez) a EDITGROUP (ovlivni vice nalezu)
-	                		// potrebujeme zjistit, zda pro dany nalez je vazeba mezi tHabitats a tOccurrences vzdy 1:N
-	                		// nebo zda editaci nalezu vznikla vazvba 1:1
-	                		relationship = true;                                                                            
-	                	} 	                	
- 	                    break;
- 	                case 2: //Place description 	                	 	                			                		 
-                		occurrence.getHabitat().setDescription(oldValue);		                	
-	                	logger.debug("Set selected value for update of attribute Description.");
-	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;                                         
-	                	} 	              	
- 	                	break;
- 	                case 3:  //Country 	                	 	                			                		 
-                		occurrence.getHabitat().setCountry(oldValue);		                	
-	                	logger.debug("Set selected value for update of attribute Country.");
-	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;                                          
-	                	} 	
- 	                    break;
- 	                case 4: //Altitude 	                	                			                		 
-                		occurrence.getHabitat().setAltitude(Double.parseDouble(oldValue));		                	
-	                	logger.debug("Set selected value for update of attribute Altitude.");
-	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;                                          
-	                	} 	
- 	                	break;
- 	                case 5:  //Latitude   	                		                			                		  
-                		occurrence.getHabitat().setLatitude(Double.parseDouble(oldValue));		                	
-	                	logger.debug("Set selected value for update of attribute Latitude.");
-	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;                                        
-	                	} 	
- 	                    break;
- 	                case 6: //Longitude 	                		                			                		
-                		occurrence.getHabitat().setLongitude(Double.parseDouble(oldValue));		                	
-	                	logger.debug("Set selected value for update of attribute Longitude.");
-	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;                                         
-	                	} 	
- 	                	break;
- 	                case 7: //Nearest bigger seat   	                	 	                			                		 
-                		//Nacteni Village pro nasledny update tHabitat.cNearestVillageId
-            			if (oldRecordId != 0){
-            				Object[] objectVill = searchObject("Village",oldRecordId);
-                			Village village = (Village)objectVill[0];
-    	                	occurrence.getHabitat().setNearestVillage(village);
-    	                	logger.debug("Set selected value for update of attribute NearesVillage.");
-            			} else {
-            				logger.error("UNDO - Incorrect oldRecordId for Village.");
-            			}
-	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;                                        
-	                	} 	
- 	                    break;
- 	                case 8: //Phytochorion or phytochorion code 	                	             			                		 
-                		// Nacteni Phytochorion pro nasledny update tHabitat.cPhytochorionId
- 	                	if (oldRecordId != 0){
-	            			Object[] objectPhyt = searchObject("Phytochorion",oldRecordId);
-	            			Phytochorion phytochorion = (Phytochorion)objectPhyt[0];
-		                	occurrence.getHabitat().setPhytochorion(phytochorion);
-		                	logger.debug("Set selected value for update of attribute Phytochorion.");
- 	                	}else {
-            				logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
-            			}
-	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;                                        
-	                	} 	
- 	                    break; 	               
-	                case 9:  //Territory   	                	                			                		  
-                		// Nacteni Territory pro nasledny update tHabitat.cTerritory
-	                	if (oldRecordId != 0){
-	            			Object[] objectTerr = searchObject("Territory",oldRecordId);
-	            			Territory territory = (Territory)objectTerr[0];
-		                	occurrence.getHabitat().setTerritory(territory);
-		                	logger.debug("Set selected value for update of attribute Territory.");
-	                	}else {
-            				logger.error("UNDO - Incorrect oldRecordId for Territory.");
-            			}	
-	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;                                      
-	                	} 	        	
-	                    break;
-	                case 10: //Note habitat	                		                			                		  
-                		occurrence.getHabitat().setNote(oldValue);		                	
-	                	logger.debug("Set selected value for update of attribute Note.");
-	                	if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-	                		relationship = true;                                        
-	                	} 	
-	                	break;
- 	                default:            
- 	                    logger.error("No column defined for name "+ columnName);	                   
-     			}  	    		
-    		} else {
-    			logger.error("No table defined");
-    		}    			    		
-    	}
- 
-    	//informovat uzivatele, co bude provedeno (viz seznam markLIstId, markItem) a dat mu volbu, zda ano ci ne... zde je nutne, aby fungovalo spravne 
-    	//executeUpdate, aby k update doslo az po jeho zavolani....!!!!
-    	//zavolat delete na vsechny vracene polozky Historiie - projit seznam s ID
-    	//v tabulce tOccurrences by se meli aktualizovat polozky cUpdateWhen a cUpdatewho na uzivatele a cas, ktery zavolal undo
-    	//zavolat znovu dotaz do db, aby se aktualizovaly vysledky ... createQuery, atd.
-    	
-    	//vygenerovani zpravy pro uzivatele    	
-    	generateMessageUndo();
+    	int count = editObjectList.size();
+    	for (int i=0; i< count; i++) {
+    		try {
+    			logger.debug("Object for update: "+editObjectList.get(i));
+                database.executeUpdate(editObjectList.get(i));
+	        } catch (RemoteException e) {
+	                logger.error("CommitUpdate - RemoteException: "+e.toString());
+	        } catch (DBLayerException e) {
+	                logger.error("CommitUpdate - DBLayerException: "+e.toString());
+	        }
+       }    	
     }
     
-    public void generateMessageUndo() {    	
-    	messageUndo = "Budou provedeny n?sleduj?c? zm?ny:\n";      
-    	int count = markItem.size();
-    	for (int i=0; i<count; i++) {
-    		Object[] itemList = (Object[])(markItem.get(i));
-    		String item = (String)itemList[0];
-    		Integer maxId = (Integer)itemList[1];      		
-    		oldValue = ((HistoryRecord)editHistoryDataList.get(maxId)).getOldValue(); 
-    		messageUndo = messageUndo + item + " --> " + oldValue + "\n";
-    	}
-    	if (!relationship && editHabitat) {
-    		logger.debug(relationship);
-    		logger.debug(editHabitat);
-    		messageUndo = "\n" + messageUndo + "Tyto zm?ny ovlivn? v?ce n?lez?.\n";
-    	}
+    /**
+     *  vycisteni seznamu editovany objektu: 
+     */
+    public void clearEditObjectList() {
+    	editObjectList.clear();
     }
-    
-    public void commitUpdate() {
-    	try {
-			database.executeUpdate(occurrence);
-		} catch (RemoteException e) {
-			logger.error("CommitUpdate - RemoteException: "+e.toString());
-		} catch (DBLayerException e) {
-			logger.error("CommitUpdate - DBLayerException: "+e.toString());
-		}
-    }
-  
+       
     /**
      * Projde oznacene zaznamy a postupne je smaze z tabulek historie.
      * Pri mazani z tabulky tHistoryChange overi, zda na dany zaznam neni vice vazeb.
      */
-    public void deleteHistoryRecords() {
-
-    	//count of selected record
-    	int count = editHistoryDataList.size();
-    	
+    public void deleteHistory(int toResult, boolean typeHistory) {
+   	
     	//take from younger record to older record
-    	for( int i=0; i < count; i++) {
-    		if (! markListId.contains(i)) {
-    			continue;
+    	for( int i=0; i < toResult; i++) {
+    		if (typeHistory && !markListId.contains(i)) {
+    			logger.debug("History of one occurence: "+markListId.contains(i));
+    			continue;    			
     		}    		    		
-    		historyRecord = (HistoryRecord)editHistoryDataList.get(i); 
-    		historyChange = historyRecord.getHistoryChange();    		
-        	
+    		historyRecord = (HistoryRecord)historyDataList.get(i); 
+    		historyChange = historyRecord.getHistoryChange(); 
+    		
 	    	try {
 				database.executeDelete(historyRecord);
 				logger.debug("Deleting historyRecord successfully. Number of result: "+i);
@@ -769,10 +1174,10 @@
 			} else {
 				logger.debug("Exist other record in the table tHistory, whitch has the same value of attribute cChangeId.");
 			}
-    	}
-    	//Clear list 
+    	}    	
+		//Clear list 
     	markListId.clear();
-    	markItem.clear();
+    	markItem.clear();    		
     } 
     
     /**
@@ -780,8 +1185,7 @@
      * @param id
      * @return
      */
-    public int searchHistoryChangeId(int id){
-    	
+    public int searchHistoryChangeId(int id){    	
     	SelectQuery query = null;
         try {
         	    query = database.createQuery(HistoryRecord.class);
@@ -791,7 +1195,7 @@
                 query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.id", null, id , null);
         } catch(RemoteException e) {
         	    System.err.println("RemoteException- searchHistoryChangeId(), createQuery");       	  
-        }     
+        }        
         
         
         int resultIdChange = 0;
@@ -801,8 +1205,8 @@
             logger.error("Searching historyChangeId failed. Unable to execute search query.");
         } catch (RemoteException e) {		 
      	   System.err.println("RemoteException- searchHistoryChangeId(), executeQuery");
- 	    }        
- 	    
+ 	    } 
+        
  	    int countResult = 100;
  	    try {
 			countResult = database.getNumRows(resultIdChange);
@@ -813,6 +1217,22 @@
 		return countResult;
     }
     
+    public void generateMessageUndo() {    	
+    	messageUndo = "Budou provedeny n?sleduj?c? zm?ny:\n";      
+    	int count = markItem.size();
+    	for (int i=0; i<count; i++) {
+    		Object[] itemList = (Object[])(markItem.get(i));
+    		String item = (String)itemList[0];
+    		Integer maxId = (Integer)itemList[1];      		
+    		oldValue = ((HistoryRecord)historyDataList.get(maxId)).getOldValue(); 
+    		messageUndo = messageUndo + item + " --> " + oldValue + "\n";
+    	}
+    	if (!relationship && editHabitat) {
+    		logger.debug(relationship);
+    		logger.debug(editHabitat);
+    		messageUndo = "\n" + messageUndo + "Tyto zm?ny ovlivn? v?ce n?lez?.\n";
+    	}
+    }
     
      //***************************//
     //****Init Hashtable*********//
@@ -847,7 +1267,29 @@
         habitatHash.put("noteHabitat",10);
     }    
     
-   
+    private void initPublicationHash() {
+        publicationHash = new Hashtable<String, Integer>(6);
+        publicationHash.put("collectionName",0);
+        publicationHash.put("collectionYearPublication",1);
+        publicationHash.put("journalName",2);
+        publicationHash.put("journalAuthorName",3);
+        publicationHash.put("referenceDetail",4);
+        publicationHash.put("urlPublication",5);      
+    }
+    
+    private void initAuthorHash() {
+        authorHash = new Hashtable<String, Integer>(8);
+        authorHash.put("firstName",0);
+        authorHash.put("surname",1);
+        authorHash.put("organization",2);
+        authorHash.put("role",3);
+        authorHash.put("address",4);
+        authorHash.put("email",5);
+        authorHash.put("urlAuthor",6);
+        authorHash.put("noteAuthor",7);        
+    }              
+    
+       
     //****************************//
     //****Get and set metods*****//
     //**************************//
@@ -883,85 +1325,51 @@
 		  this.markItem = markItem;		  
 	 } 
     
-    public ArrayList<HistoryRecord> getEditHistoryDataList() {
-		  return this.editHistoryDataList;		  
-	   }
-
-	 public void setEditHistoryDataList(ArrayList<HistoryRecord> editHistoryDataList) {
-		  this.editHistoryDataList = editHistoryDataList;		  
-	 } 
     
-     public String getCurrentDisplayRows() {
-		  return this.displayRow;		  
-	   }
-
-	 public void setCurrentDisplayRows(String displayRow) {
-		  this.displayRow = displayRow;		  
-	 } 
-     
-     public String getMessageUndo() {
-		  return this.messageUndo;		  
-	   }
-
-	 public void setMessageUndo(String messageUndo) {
-		  this.messageUndo = messageUndo;		  
-	 } 
-    
-    /**
-     *  Set result of a database operation. This is used only for search operations.
-     *  @param int 
-     */
-    public void setEditResult(int resultIdEdit) {
-        this.resultId = resultIdEdit;
+    //id vysledku po vyhledavani v db
+    public void setResultId(int resultId) {
+        this.resultId = resultId;
     }
     
-    /**
-     *  Get results of last database operation. This is used only for search operations.
-     *  @return 
-     */
-    public int getEditResult() {
+    public int getResultId() {
         return this.resultId;
     }
-       
+    
     public int getResultRows() {
-    	int resultCount = 0;
+        int resultCount = 0;
         if (resultId != 0) try {
-        	resultCount = database.getNumRows(resultId);        	
+                resultCount = database.getNumRows(resultId);        	
         } catch(RemoteException e) {
-        	System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
+                System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
         }
         return resultCount;
     }
+
+    public ArrayList<HistoryRecord> getHistoryDataList() {
+              return this.historyDataList;		  
+       }
+
+     public void setHistoryDataList(ArrayList<HistoryRecord> historyDataList) {
+              this.historyDataList = historyDataList;		  
+     } 
     
-    /**
-     *  Set an error flag (message).
-     *  @param msg  message explaining the error which occured
-     */
-    public void setError(DBLayerException e) {
-        this.error = e;
-    }
-    
-    /**
-     *  Checks whether an error flag is set.
-     *  return true if an error occured and error message is available, false otherwise
-     */
-    public boolean isError() {
-        if (this.error != null) {
-            return true;
-        } else {
-            return false;
-        }
-    }
-    
-    /**
-     *  Get error message for the error which occured
-     *  @return message explaining the error which occured
-     */
-    public DBLayerException getError() {
-        return this.error;
-    }
-    
-    /**
+     public String getCurrentDisplayRows() {
+		  return this.displayRow;		  
+	   }
+
+     public void setCurrentDisplayRows(String displayRow) {
+              this.displayRow = displayRow;		  
+     } 
+     
+     public String getMessageUndo() {
+		  return this.messageUndo;		  
+	   }
+
+     public void setMessageUndo(String messageUndo) {
+              this.messageUndo = messageUndo;		  
+     } 
+     
+         /**
      *  Get index of the first row currently displayed in the list of record changes. This is an index in the results returned by a search query.
      *  @return index of the first row currently displayed in the list of history
      */
@@ -993,111 +1401,31 @@
         this.displayRows = rows;
     }
     
-   public String getNamePlant() {
+    public String getNamePlant() {
 		  return this.namePlant;
 	   }
 
-   public void setNamePlant(String namePlant) {
+    public void setNamePlant(String namePlant) {
 		  this.namePlant = namePlant;
-	}    
-   
-   public String getNameAuthor() {
+	}   
+    
+    public String getNameAuthor() {
 		  return this.nameAuthor;
 	   }
 
-   public void setNameAuthor(String nameAuthor) {
-	  this.nameAuthor = nameAuthor;
-   } 
-   
-   public String getLocation() {
+	 public void setNameAuthor(String nameAuthor) {
+		  this.nameAuthor = nameAuthor;
+	 } 
+	 
+	 public String getLocation() {
 		  return this.location;
 	   }
-
-   public void setLocation(String location) {
+	
+	 public void setLocation(String location) {
 		  this.location = location;
 	}    
-   
-    /**
-	*   Get name of the table where value was changed
-	*   @return of the table where value was changed	
-	*/
-   public String getTableName() {
-	  return this.tableName;
-   }
 
-   /**
-	*   Set name of the table where value was changed
-	*   @param tableName string containing of the table where value was changed
-	*/
-   public void setTableName(String tableName) {
-	  this.tableName = tableName;
-   }
-
-   /**
-   *   Get name of the column where value was changed
-   *   @return  name of the column where value was changed
-   */
-  public String getColumnName() {
-	 return this.columnName;
-  }
-
-  /**
-   *   Set  name of the column where value was changed
-   *   @param columnName string containing  name of the column where value was changed
-   */
-  public void setColumnName(String columnName) {
-	 this.columnName = columnName;
-  }
 	/**
-	 *   Get identifier of the occurrence whitch was changed
-	 *   @return foreign identifier of the occurrence whitch was changed
-	 */
-	public int getOccurrenceId() {
-	   return this.occurrenceId;
-	}
-
-	/**
-	 *   Set identifier of the occurrence whitch was changed
-	 *   @param occurrenceId identifier of the occurrence whitch was changed
-	 */
-	public void setOccurrenceId(int occurrenceId) {
-	   this.occurrenceId= occurrenceId;
-	}	
-	
-   /**
-	 *   Get identifier of the record whitch was changed
-	 *   @return identifier of the record whitch was changed
-	 */
-	public int getId() {
-	   return this.recordId;
-	}
-
-	/**
-	 *   Set identifier of the record whitch was changed
-	 *   @param recordId string containing identifier of the record whitch was changed
-	 */
-	public void setId(int recordId) {
-	   this.recordId = recordId;
-	}
-	  
-	/**
-	*   Get operation whitch was used
-	*   @return operation whitch was used
-	*/
-	public int getOperation() {
-	  return this.operation;
-	}
-
-	/**
-	*   Set operation whitch was used
-	*   @param operation string containing operation whitch was used 
-	*/
-	public void setOperation(int operation) {
-	  this.operation = operation;
-	}
-	 
-	   
-	/**
 	*   Get date and time when the reccord was changed
 	*   @return date and time when the reccord was changed
 	*/         
@@ -1129,35 +1457,4 @@
 	  this.nameUser = nameUser;
     }  
     
-	/**
-	*   Get old value of atribute whitch was changed
-	*   @return old value of atribute whitch was changed
-	*/
-    public String getOldValue() {
-	  return this.oldValue;
-    }
-
-    /**
-	*   Set old value of atribute whitch was changed
-	*   @param oldValue string containing old value of atribute whitch was changed
-	*/
-    public void setOldValue(String oldValue) {
-	  this.oldValue = oldValue;
-    }
-	   
-	 /**
-	*   Get new value of atribute whitch was changed
-	*   @return new value of atribute whitch was changed 
-	*/
-    public String getNewValue() {
-	  return this.newValue;
-    }
-
-    /**
-	*   Set new value of atribute whitch was changed
-	*   @param newValue string containing new value of atribute whitch was changed
-	*/
-    public void setNewValue(String newValue) {
-	  this.newValue = newValue;
-    }    
 }

Modified: trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-21 13:18:23 UTC (rev 168)
+++ trunk/src/net/sf/plantlore/client/history/HistoryCtrl.java	2006-04-21 15:30:58 UTC (rev 169)
@@ -158,14 +158,14 @@
    class undoSelectedButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent)
        {    	   
-           model.updateOlderChanges();            
+           model.undoSelected();            
            int okCancle = view.messageUndo(model.getMessageUndo());
            logger.debug("button "+okCancle);
            if (okCancle == 0){
         	   //Button OK was press
         	   logger.debug("Button OK was press.");
         	   model.commitUpdate();
-        	   model.deleteHistoryRecords();
+        	   model.deleteHistory(model.getResultRows(), true);
         	   model.searchEditHistory();
         	   model.processResult(1,model.getDisplayRows());
         	   view.getTable().setModel(new HistoryTableModel(model));

Modified: trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java	2006-04-21 13:18:23 UTC (rev 168)
+++ trunk/src/net/sf/plantlore/client/history/HistoryTableModel.java	2006-04-21 15:30:58 UTC (rev 169)
@@ -65,7 +65,7 @@
     	
     	logger.debug("Init data.");
     	
-    	editHistoryDataList = model.getEditHistoryDataList();
+    	editHistoryDataList = model.getHistoryDataList();
     	if (editHistoryDataList.size()==0 ){
     		this.data = new Object[0][];
     		return;
@@ -183,7 +183,7 @@
      *
      */
     public void initMarkAllItem() {    	
-    	editHistoryDataList = model.getEditHistoryDataList();    	
+    	editHistoryDataList = model.getHistoryDataList();    	
     	int countResult = editHistoryDataList.size();    	
     	for (int i=0; i < countResult; i++) {      		    		    	
     		String item = L10n.getString(((HistoryRecord)editHistoryDataList.get(i)).getHistoryColumn().getColumnName());
@@ -200,7 +200,7 @@
      */
     public void updateMarkListId() {
     	markListId = new HashSet();
-    	editHistoryDataList = model.getEditHistoryDataList();
+    	editHistoryDataList = model.getHistoryDataList();
     	markItem = model.getMarkItem();
     	int countResult = editHistoryDataList.size();    	
     	for (int i=0; i < countResult; i++) {  

Deleted: trunk/src/net/sf/plantlore/client/history/WholeHistory.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistory.java	2006-04-21 13:18:23 UTC (rev 168)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistory.java	2006-04-21 15:30:58 UTC (rev 169)
@@ -1,1120 +0,0 @@
-/*
- * WholeHistory.java
- *
- * Created on 14. duben 2006, 15:43
- *
- * To change this template, choose Tools | Template Manager
- * and open the template in the editor.
- */
-
-package net.sf.plantlore.client.history;
-
-import java.rmi.RemoteException;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-import java.util.Hashtable;
-import net.sf.plantlore.common.PlantloreConstants;
-import net.sf.plantlore.common.record.Author;
-import net.sf.plantlore.common.record.Habitat;
-import net.sf.plantlore.common.record.HistoryChange;
-import net.sf.plantlore.common.record.HistoryRecord;
-import net.sf.plantlore.common.record.Occurrence;
-import net.sf.plantlore.common.record.Phytochorion;
-import net.sf.plantlore.common.record.Plant;
-import net.sf.plantlore.common.record.Publication;
-import net.sf.plantlore.common.record.Territory;
-import net.sf.plantlore.common.record.Village;
-import net.sf.plantlore.middleware.DBLayer;
-import net.sf.plantlore.middleware.SelectQuery;
-import net.sf.plantlore.server.DBLayerException;
-import org.apache.log4j.Logger;
-
-/**
- *
- * @author Lada
- */
-public class WholeHistory {
-    
-      /** Instance of a logger */
-    private Logger logger;      
-    /** Instance of a database management object */
-    private DBLayer database;   
-    /** Constant with default number of rows to display */
-    private static final int DEFAULT_DISPLAY_ROWS = 6;    
-    /** Actual number of rows to display */
-    private int displayRows = DEFAULT_DISPLAY_ROWS;   
-    /** Index of the first record shown in the table */
-    private int currentFirstRow;
-    /** Information about current display rows*/
-    private String displayRow;    
-    
-    //*******Informations about searching Result from database*****//
-    /** Result of the search query */
-    private int resultId = 0;
-    /** List of data (results of a search query) displayed in the table */
-    private ArrayList<HistoryRecord> historyDataList = new ArrayList();     
-    // seznam editovanych objektu (potrebny pro hromadne potvrzeni update)
-    private ArrayList<Object> editObjectList = new ArrayList();
-    // informace pro uzivatele o record undo
-    private String messageUndo;
-    
-    //*********************Record of history, ... ***************************************//    
-    private Occurrence occurrence;
-    private HistoryRecord historyRecord;
-    private HistoryChange historyChange;
-    private Publication publication;
-    private Author author;
-    private Village village;
-    private Territory territory;
-    private Phytochorion phytochorion;
-    
-     //	**************Informations about HistoryRecord*************//	
-    /** Name of the table where value was changed*/
-    private String tableName;  
-    /** Name of the column where value was changed*/
-    private String columnName;
-    /** Unique value identified occurrence */	
-    private Integer occurrenceId;
-    /**Unique value identified record in table where value was changed */
-    private int recordId;
-    /**Unique value identified record before changed */
-    private int oldRecordId;
-    /** Operation whitch was used*/   
-    private int operation;
-    /** Date and time when the reccord was changed*/
-    //private java.util.Date when = new Date();	
-    /** Old value of attribute*/    
-    private String oldValue;
-    /** New value of attribute*/
-    //private String newValue;
-   /** Name of user who did changed*/
-    //private String nameUser;
-    
-    //********************************************************//
-    /** Mapping of entities */
-    private Hashtable<String, Integer> publicationHash;
-    private Hashtable<String, Integer> habitatHash;
-    private Hashtable<String, Integer> occurrenceHash;  
-    private Hashtable<String, Integer> authorHash;
-    
-    
-    /** Creates a new instance of WholeHistory */
-    public WholeHistory(DBLayer database) {
-          
-       logger = Logger.getLogger(this.getClass().getPackage().getName());	 
-       this.database = database;
-       
-       //nacist vsechny data z historie -->bez podminky, jen je seradit podle casu
-       searchWholeHistoryData();
-       //opet funkci pro vyzadani si dat postupne
-       processResult(1, displayRows);
-    }
-    
-    /**
-     *
-     */
-    public void searchWholeHistoryData() {
-        
-        //Create new Select query
-        SelectQuery query = null;       
-
-    	//  Select data from tHistory table
-        try {
-			query = database.createQuery(HistoryRecord.class);
-			// Create aliases for table tHistoryChange.
-			query.createAlias("historyChange", "hc");
-			// sort by date/time
-			query.addOrder(PlantloreConstants.DIRECT_DESC, "hc.when");
-		} catch (RemoteException e) {
-                System.err.println("RemoteException- searchWholeHistoryData(), createQuery");
-        }
-                
-    	
-        int resultId = 0;
-        try {
-            // Execute query                    
-            resultId = database.executeQuery(query);
-            // Save "edit" history data
-            setResultId(resultId);    
-        } catch (DBLayerException e) {                            
-            logger.error("Searching whole history data failed. Unable to execute search query.");           
-        } catch (RemoteException e) { 		   
-     	   System.err.println("RemoteException- searchWholeHistoryData(), executeQuery");
-        }          
-    }
-    
-   /**
-     * Process results of a search query. Retrieves results using the database management object (DBLayer) and stores them in the data field of the class. 
-     * @param fromTable number of the first row to show in table. Number of the first row to retraieve is 1.
-     * @param count number of rows to retrieve 
-     */
-    public void processResult(int fromTable, int count) {
-        
-        if (this.resultId != 0) {
-            int currentRow = getResultRows();
-            logger.debug("Rows in the result: "+currentRow);
-            logger.debug("Max available rows: "+(fromTable+count-1));
-           
-            // Find out how many rows we can retrieve - it cannot be more than number of rows in the result
-            int to = Math.min(currentRow, fromTable+count-1);           
-            if (to <= 0) {
-            	historyDataList = new ArrayList<HistoryRecord>(); 
-            	setDisplayRows(0);
-            	setCurrentDisplayRows("0-0");
-            } else {
-                logger.debug("Retrieving query results: 1 - "+to);
-                setCurrentDisplayRows(fromTable+ "-" + to);
-                try {                	 
-                     // Retrieve selected row interval 
-                	Object[] objectHistory;
-                 	try {
-                 		objectHistory = database.more(this.resultId, 1, to);  
-                 	} catch(RemoteException e) {
-                     	System.err.println("RemoteException- processEditResult, more");
-                     	logger.debug("RemoteException- processEditResult, more");
-                     	return;
-                     }                   
-                    int countResult = objectHistory.length;  
-                    logger.debug("Results retrieved. Count: "+ countResult);
-                    // Create storage for the results
-                    this.historyDataList = new ArrayList<HistoryRecord>();
-                    // Cast the results to the HistoryRecord objects
-                    for (int i=0; i<countResult; i++ ) {                    							
-						Object[] objHis = (Object[])objectHistory[i];
-                        this.historyDataList.add((HistoryRecord)objHis[0]);
-                    }           
-                    //Update current first displayed row (only if data retrieval was successful)
-                    setCurrentFirstRow(fromTable); 
-                } catch (DBLayerException e) {                  
-                    logger.error("Processing search results failed: "+e.toString());            
-                }             
-            }
-        }         
-    }
-    
-    /**
-     *
-     */
-    public void undoToDate(int toResult) {
-        
-        //Inicalization of hashTable
-    	initOccurrenceHash();
-    	initHabitatHash();   
-        initPublicationHash();
-        initAuthorHash();       
-        	
-    	//number of result
-    	//int countResult = this.historyDataList.size();
-    	// Pomocne hodnoty pro zjisteni zda zmena ovlivni vice nalezu
-    	//relationship = false;
-    	//editHabitat = false;
-    	
-    	//take from younger record to older record, undo tu selected row
-    	for( int i=0; i < toResult; i++) {
-    		
-    		//init history data 
-    		historyRecord = (HistoryRecord)historyDataList.get(i);    		
-    		historyChange = historyRecord.getHistoryChange();
-    		tableName = historyRecord.getHistoryColumn().getTableName();
-                recordId = historyChange.getRecordId();
-                operation = historyChange.getOperation();
-    		                                                
-               /** 
-                * Pri insertu a editu nedohledavam column --> prvne rozdelit podle operace a pro edit dale rozdelit podle column
-                */
-                if (operation == HistoryChange.HISTORYCHANGE_INSERT) {
-                    undoInsertDelete(0);
-                } else if (operation == HistoryChange.HISTORYCHANGE_EDIT || operation == HistoryChange.HISTORYCHANGE_EDITGROUP) {
-                    undoEdit();
-                } else if (operation == HistoryChange.HISTORYCHANGE_DELETE) {
-                    undoInsertDelete(1);
-                } else {
-                    logger.error("Incorrect opreration code: "+ operation);
-                }                
-        }
-    }
-    
-    /**
-     * ??? Habitat - nemuselo by se zaznamenavat cDelete
-     * ??? Phytochorion, Village, Territory - asi bude potreba cDelete, abychom nezobrazovali nektere polozky, co se historii odstrani
-     * delete == 1 ... smazat
-     * delete == 0 ... obnovit
-     */
-    public void undoInsertDelete(int delete) {
-        if (tableName.equals("Occurrence")){
-             Object[] object = searchObject("Occurrence",recordId);             
-             Occurrence occurrence = (Occurrence)object[delete];
-             occurrence.setDeleted(1);
-      //  } else if (tableName.equals("Habitat")) {
-      //       Object[] object = searchObject("v",recordId);  
-      //       Habitat habitat = (Habitat)object[delete];
-      //       habitat.setDeleted(1);
-        } else if (tableName.equals("Publication")) {
-             Object[] object = searchObject("Publication",recordId);  
-             Publication publication = (Publication)object[delete];
-             publication.setDeleted(1);
-        } else if (tableName.equals("Author")) {
-             Object[] object = searchObject("Author",recordId);   
-             Author author = (Author)object[delete];
-             author.setDeleted(1);
-        } else if (tableName.equals("Phytochorion")) {
-             Object[] object = searchObject("Phytochorion",recordId);   
-             Phytochorion phytochorion = (Phytochorion)object[delete];             
-             //phytochorion.setDelete(1);
-        } else if (tableName.equals("Territoriy")) {
-             Object[] object = searchObject("Territory",recordId); 
-             Territory territory = (Territory)object[delete];             
-             //territory.setDelete(1);
-        } else if (tableName.equals("Village")) {
-             Object[] object = searchObject("Village",recordId); 
-             Village village = (Village)object[delete];             
-             //village.setDelete(1);
-        } else {
-            logger.error("No table defined");
-        }
-    }
-    
-    /**
-     *
-     */
-    public void undoEdit() {
-        
-        //init history data about edit of record
-        columnName = historyRecord.getHistoryColumn().getColumnName();    		    			
-        oldRecordId = historyChange.getOldRecordId();                
-        occurrenceId = historyChange.getOccurrence().getId();		           
-        oldValue = historyRecord.getOldValue();
-        
-        if (tableName.equals("Occurrence")){
-                undoOccurrence();
-        } else if (tableName.equals("Habitat")) {
-                undoHabitat();
-        } else if (tableName.equals("Publication")) {
-                undoPublication();
-        } else if (tableName.equals("Author")) {
-                undoAuthor();
-        } else if (tableName.equals("Phytochorion")) {
-                undoPhytochorion();
-        } else if (tableName.equals("Territory")) {
-                undoTerritory();
-        } else if (tableName.equals("Village")) {
-                undoVillage();
-        } else {
-            logger.error("No table defined");
-        }
-    }
-
-    /**
-     *
-     */
-    public void undoOccurrence() {
-        
-        //zaznam v ramci, ktereho doslo k editaci tabulky tOccurrences
-        occurrence = historyChange.getOccurrence();
-        
-        boolean objectList = editObjectList.contains(occurrence);
-        if (!objectList) {
-        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
-            editObjectList.add(occurrence);
-        }
-        logger.debug("editObjectList: "+objectList);
-        logger.debug("OccurrenceID: "+occurrence.getId());
-        logger.debug("columnName: "+columnName);
-                
-        if (occurrenceId != recordId){
-            logger.error("Inccorect information in history tables --> occurrenceId != recordId ... Incorrect identifier of Occurrence.");
-        }
-
-        //Get a specified number of columnName from occurrence mapping.
-        int columnConstant;
-        if (occurrenceHash.containsKey(columnName)) {
-                 columnConstant = (Integer)occurrenceHash.get(columnName); 
-        } else {
-             columnConstant = 0;
-        }        	    			
-
-        //init Calendar    		
-        Calendar isoDateTime = new GregorianCalendar();
-
-        switch (columnConstant) {
-        case 1: //Taxon  
-            if (oldRecordId > 0 ) {
-                //Select record Plant where id = oldRocordId 
-                Object[] object = searchObject("Plant",oldRecordId);
-                Plant plant = (Plant)object[0];
-                //Set old value to attribute plantID
-                occurrence.setPlant(plant);
-                logger.debug("Set selected value for update of attribute Taxon.");	
-            } else {
-                 logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
-            } 
-            break;
-        case 2: //Year	
-            //Set old value to attribute Year          		
-                occurrence.setYearCollected(Integer.parseInt(oldValue));
-                logger.debug("Set selected value for update of attribute Year.");
-                //Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	                		
-                isoDateTime.setTime(occurrence.getTimeCollected());
-                isoDateTime.set(Integer.parseInt(oldValue),occurrence.getMonthCollected(),occurrence.getDayCollected());
-                occurrence.setIsoDateTimeBegin(isoDateTime.getTime());	                	              	            	
-                break;
-        case 3: //Month 
-                // Set old value to attribute Month 
-                occurrence.setMonthCollected(Integer.parseInt(oldValue));
-                logger.debug("Set selected value for update of attribute Month.");
-                // Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
-                isoDateTime.setTime(occurrence.getTimeCollected());
-                isoDateTime.set(occurrence.getYearCollected(), Integer.parseInt(oldValue), occurrence.getDayCollected());
-                occurrence.setIsoDateTimeBegin(isoDateTime.getTime());              		
-            break;
-        case 4: //Day	                	
-                // Set old value to attribute Day            		
-                occurrence.setDayCollected(Integer.parseInt(oldValue));
-                logger.debug("Set selected value for update of attribute Day.");
-                // Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
-                isoDateTime.setTime(occurrence.getTimeCollected());
-                isoDateTime.set(occurrence.getYearCollected(), occurrence.getMonthCollected(), Integer.parseInt(oldValue));
-                occurrence.setIsoDateTimeBegin(isoDateTime.getTime());
-                break;
-        case 5: //Time 	                		                	
-                // Set old value to attribute Time   
-                Date time = new Date();
-                SimpleDateFormat df = new SimpleDateFormat( "HH:mm:ss.S" );
-                try {
-                        time = df.parse( oldValue );
-                } catch (ParseException e) {
-                        logger.error("Parse time failed. "+ e);
-                }
-                occurrence.setTimeCollected(time);
-                logger.debug("Set selected value for update of attribute Time.");
-                // Update attribute isoDateTimeBegin (Year + Mont + Day + Time)		                	
-                isoDateTime.setTime(time);
-                isoDateTime.set(occurrence.getYearCollected(), occurrence.getMonthCollected(), occurrence.getDayCollected());
-                occurrence.setIsoDateTimeBegin(isoDateTime.getTime());
-            break;
-        case 6: //Source	                	
-                // Set old value to attribute Source 
-                occurrence.setDataSource(oldValue);
-                logger.debug("Set selected value for update of attribute DataSource.");		                	            	
-                break;
-        case 7: //Herbarium
-                // Set old value to attribute Herbarium
-                occurrence.setHerbarium(oldValue);
-                logger.debug("Set selected value for update of attribute Herbarium.");	                		          
-            break;
-        case 8: //Note occurrence	
-                // Set old value to attribute Note occurence	                	
-                occurrence.setNote(oldValue);
-                logger.debug("Set selected value for update of attribute NoteOccurrence.");	                		        	
-                break;
-        case 9: //Publication  
-                //Select record Publication where id = oldRocordId 
-                if (oldRecordId > 0){
-                    Object[] objectPubl = searchObject("Publication",oldRecordId);
-                    Publication publication = (Publication)objectPubl[0];
-                    //Set old value to attribute publicationID
-                    occurrence.setPublication(publication);
-                    logger.debug("Set selected value for update of attribute Publication.");
-                }else {
-                    logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
-                }
-            break;
-        default:            
-            logger.error("No column defined for name "+ columnName);	                   
-        }         
-    }
-        
-    /**
-     *
-     */
-    public void undoHabitat() {
-        
-        //zaznam v ramci, ktereho doslo k editaci tabulky tHabitats
-        occurrence = historyChange.getOccurrence();
-      
-        //K editaci tabulky tHabitats dojde jen v pripade editace nejakeho konkretniho nalezu, proto nam staci nacist
-        //data z tHabitats pres tOccurrence.cHabitatId a nasledne staci zavolat update jen na occurrence
-        boolean objectList = editObjectList.contains(occurrence); 
-        if (!objectList) {
-        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan (editace habitat vzdy v ramci occurrence)
-            editObjectList.add(occurrence);
-        }
-        logger.debug("editObjectList: "+objectList);
-        logger.debug("Habitat - OccurrenceID: "+occurrence.getId());
-        logger.debug("columnName: "+columnName);
-        
-        // Get a specified number of columnName from habitat mapping.
-        int columnConstant;
-        if (habitatHash.containsKey(columnName)) {
-                 columnConstant = (Integer)habitatHash.get(columnName); 
-        } else {
-             columnConstant = 0;
-        }        	    			
-
-        //informuje o tom, ze byla editovana tabulka tHabitat 
-//        editHabitat = true;
-
-        // Save new value for the column        		
-        switch (columnConstant) {
-        case 1:  //Quadrant     	                	
-                /* pokud doslo ke zmene vazeb mezi tHabitats a tOccurrences z 1:N na 1:1, tak v tOccurrences.cHabitatId
-                 * bude jiz vzdy ulozeno id nove insertovany zaznamu do tHabitats a nikdy uz nedojde k jeho zmene, tzn.
-                 * vazba mezi tabulkami pro dany nalez jiz bude na vzdy 1:1 
-                 */ 	                		  
-                occurrence.getHabitat().setQuadrant(oldValue);		                	
-                logger.debug("Set selected value for update of attribute Quadrant.");
-                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {
-                // existuji dva edity EDIT (ovlivni jeden nalez) a EDITGROUP (ovlivni vice nalezu)
-                // potrebujeme zjistit, zda pro dany nalez je vazeba mezi tHabitats a tOccurrences vzdy 1:N
-                // nebo zda editaci nalezu vznikla vazvba 1:1
-//                relationship = true;
-                } 	                	
-            break;
-        case 2: //Place description 	                	 	                			                		 
-                occurrence.getHabitat().setDescription(oldValue);		                	
-                logger.debug("Set selected value for update of attribute Description.");
-                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-//                        relationship = true;
-                } 	              	
-                break;
-        case 3:  //Country 	                	 	                			                		 
-                occurrence.getHabitat().setCountry(oldValue);		                	
-                logger.debug("Set selected value for update of attribute Country.");
-                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-//                        relationship = true;
-                } 	
-            break;
-        case 4: //Altitude 	                	                			                		 
-                occurrence.getHabitat().setAltitude(Double.parseDouble(oldValue));		                	
-                logger.debug("Set selected value for update of attribute Altitude.");
-                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-//                        relationship = true;
-                } 	
-                break;
-        case 5:  //Latitude   	                		                			                		  
-                occurrence.getHabitat().setLatitude(Double.parseDouble(oldValue));		                	
-                logger.debug("Set selected value for update of attribute Latitude.");
-                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-//                        relationship = true;
-                } 	
-            break;
-        case 6: //Longitude 	                		                			                		
-                occurrence.getHabitat().setLongitude(Double.parseDouble(oldValue));		                	
-                logger.debug("Set selected value for update of attribute Longitude.");
-                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-//                        relationship = true;
-                } 	
-                break;
-        case 7: //Nearest bigger seat   	                	 	                			                		 
-                //Nacteni Village pro nasledny update tHabitat.cNearestVillageId
-                if (oldRecordId != 0){
-                        Object[] objectVill = searchObject("Village",oldRecordId);
-                        Village village = (Village)objectVill[0];
-                occurrence.getHabitat().setNearestVillage(village);
-                logger.debug("Set selected value for update of attribute NearesVillage.");
-                } else {
-                        logger.error("UNDO - Incorrect oldRecordId for Village.");
-                }
-                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-//                        relationship = true;
-                } 	
-            break;
-        case 8: //Phytochorion or phytochorion code 	                	             			                		 
-                // Nacteni Phytochorion pro nasledny update tHabitat.cPhytochorionId
-                if (oldRecordId != 0){
-                        Object[] objectPhyt = searchObject("Phytochorion",oldRecordId);
-                        Phytochorion phytochorion = (Phytochorion)objectPhyt[0];
-                        occurrence.getHabitat().setPhytochorion(phytochorion);
-                        logger.debug("Set selected value for update of attribute Phytochorion.");
-                }else {
-                        logger.error("UNDO - Incorrect oldRecordId for Phytochoria.");
-                }
-                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-//                        relationship = true;
-                } 	
-            break; 	               
-        case 9:  //Territory   	                	                			                		  
-                // Nacteni Territory pro nasledny update tHabitat.cTerritory
-                if (oldRecordId != 0){
-                        Object[] objectTerr = searchObject("Territory",oldRecordId);
-                        Territory territory = (Territory)objectTerr[0];
-                        occurrence.getHabitat().setTerritory(territory);
-                        logger.debug("Set selected value for update of attribute Territory.");
-                }else {
-                        logger.error("UNDO - Incorrect oldRecordId for Territory.");
-                }	
-                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-//                        relationship = true;
-                } 	        	
-            break;
-        case 10: //Note habitat	                		                			                		  
-                occurrence.getHabitat().setNote(oldValue);		                	
-                logger.debug("Set selected value for update of attribute Note.");
-                if (operation == HistoryChange.HISTORYCHANGE_EDIT) {	                		
-//                        relationship = true;
-                } 	
-                break;
-        default:            
-            logger.error("Habitat - No column defined for name "+ columnName);	                   
-        }  	          
-    }
-    
-    /**
-     *
-     */
-    public void undoPublication() {
-                
-        Object[] object = searchObject("Publication", recordId);
-        publication = (Publication)object[0];
-        
-        //test, zda jiz dany zaznam byl editovan
-        boolean objectList = editObjectList.contains(publication); 
-        if (!objectList) {
-        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
-            editObjectList.add(publication);
-        }
-        logger.debug("editObjectList.contains: "+objectList);
-        logger.debug("Publication: "+publication.getId());
-        logger.debug("columnName: "+columnName);
-        
-       // Get a specified number of columnName from habitat mapping.
-        int columnConstant;
-        if (publicationHash.containsKey(columnName)) {
-                 columnConstant = (Integer)habitatHash.get(columnName); 
-        } else {
-             columnConstant = 0;
-        }        	    			
-      
-        // Save new value for the column        		
-        switch (columnConstant) {
-        case 1:  //CollectionName     	                	
-                publication.setCollectionName(oldValue);	 
-                publication.setReferenceCitation(publication.getCollectionName()+", "+publication.getCollectionYearPublication()+ ", "+publication.getJournalName()+", "+publication.getJournalAuthorName());
-                logger.debug("Publication - Set selected value for update of attribute collectionName.");                 	
-            break;
-        case 2: //collectionYearPublication	                	 	                			                		 
-                publication.setCollectionYearPublication(Integer.parseInt(oldValue));	          
-                publication.setReferenceCitation(publication.getCollectionName()+", "+publication.getCollectionYearPublication()+ ", "+publication.getJournalName()+", "+publication.getJournalAuthorName());
-                logger.debug("Publication - Set selected value for update of attribute collectionYearPublication.");                 	             	
-                break;
-         case 3: //journalName	                	 	                			                		 
-                publication.setJournalName(oldValue);	       
-                publication.setReferenceCitation(publication.getCollectionName()+", "+publication.getCollectionYearPublication()+ ", "+publication.getJournalName()+", "+publication.getJournalAuthorName());
-                logger.debug("Publication - Set selected value for update of attribute journalName.");                 	             	
-                break;
-        case 4: //journalAuthorName	                	 	                			                		 
-                publication.setJournalAuthorName(oldValue);	 
-                publication.setReferenceCitation(publication.getCollectionName()+", "+publication.getCollectionYearPublication()+ ", "+publication.getJournalName()+", "+publication.getJournalAuthorName());
-                logger.debug("Publication - Set selected value for update of attribute journalAuthorName.");                 	             	
-                break;
-        case 5: //referenceDetail 	                	 	                			                		 
-                publication.setReferenceDetail(oldValue);	                	
-                logger.debug("Publication - Set selected value for update of attribute referenceDeatail.");                 	             	
-                break;
-        case 6: //URL 	                	 	                			                		 
-                publication.setUrl(oldValue);	                	
-                logger.debug("Publication - Set selected value for update of attribute url.");                 	             	
-                break;
-        default:            
-            logger.error("Publication - No column defined for name "+ columnName);	                   
-        } 
-    }
-    
-    /**
-     *
-     */
-    public void undoAuthor() {
-        
-       Object[] object = searchObject("Author", recordId);
-       author = (Author)object[0];
-       
-       //test, zda jiz dany zaznam byl editovan
-       boolean objectList = editObjectList.contains(author); 
-       if (!objectList) {
-       	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
-           editObjectList.add(author);
-       }
-       logger.debug("editObjectList.contains: "+objectList);
-       logger.debug("author: "+author.getId());
-       logger.debug("columnName: "+columnName);
-        
-       // Get a specified number of columnName from habitat mapping.
-        int columnConstant;
-        if (authorHash.containsKey(columnName)) {
-                 columnConstant = (Integer)authorHash.get(columnName); 
-        } else {
-             columnConstant = 0;
-        }        	    			
-      
-        // Save new value for the column        		
-        switch (columnConstant) {
-        case 1:  //wholeName     	                	
-                author.setWholeName(oldValue);	                 
-                logger.debug("Author - Set selected value for update of attribute WholeName.");                 	
-            break;
-        case 2: //address	                	 	                			                		 
-                author.setAddress(oldValue);
-                logger.debug("Author - Set selected value for update of attribute Address.");                 	             	
-                break;
-         case 3: //mail	                	 	                			                		 
-                author.setEmail(oldValue);	                      
-                logger.debug("Author - Set selected value for update of attribute Email.");                 	             	
-                break;
-        case 4: //phoneNumber	                	 	                			                		 
-                author.setPhoneNumber(oldValue);	                
-                logger.debug("Author - Set selected value for update of attribute PhoneNumber.");                 	             	
-                break;
-        case 5: //organization 	                	 	                			                		 
-                author.setOrganization(oldValue);                	
-                logger.debug("Author - Set selected value for update of attribute organization.");                 	             	
-                break;
-        case 6: //URL 	                	 	                			                		 
-                author.setUrl(oldValue);	                	
-                logger.debug("Author - Set selected value for update of attribute url.");                 	             	
-                break;
-        case 7: //role	                	 	                			                		 
-                author.setRole(oldValue);	                	
-                logger.debug("Author - Set selected value for update of attribute Role.");                 	             	
-                break;
-        case 8: //note 	                	 	                			                		 
-                author.setNote(oldValue);	                	
-                logger.debug("Author - Set selected value for update of attribute Note.");                 	             	
-                break;
-        default:            
-            logger.error("Author - No column defined for name "+ columnName);	                   
-        } 
-    }
-    
-    /**
-     *
-     */
-    public void undoPhytochorion() {
-        
-        Object[] object = searchObject("Phytochorion", recordId);
-        phytochorion = (Phytochorion)object[0];     
-        
-        //test, zda jiz dany zaznam byl editovan
-        boolean objectList = editObjectList.contains(phytochorion); 
-        if (!objectList) {
-        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
-            editObjectList.add(phytochorion);
-        }
-        logger.debug("editObjectList.contains: "+objectList);
-        logger.debug("phytochorion: "+phytochorion.getId());
-        logger.debug("columnName: "+columnName);
-      
-        if (columnName.equals("namePhytochorion")) {
-            phytochorion.setCode(oldValue);	                 
-            logger.debug("Phytochorion - Set selected value for update of attribute WholeName.");                 	
-        } else if (columnName.equals("code")) {
-             phytochorion.setName(oldValue);
-             logger.debug("Phytochorion - Set selected value for update of attribute Address.");                 	             	
-        } else {
-            logger.error("Phytochorion - No column defined for name "+ columnName);
-        }              
-    }
-    
-    /**
-     *
-     */
-    public void undoVillage() {
-       
-        Object[] object = searchObject("Village", recordId);
-        village = (Village)object[0];
-        
-        // test, zda jiz dany zaznam byl editovan
-        boolean objectList = editObjectList.contains(village); 
-        if (!objectList) {
-        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
-            editObjectList.add(village);
-        }
-        logger.debug("editObjectList.contains: "+objectList);
-        logger.debug("village: "+village.getId());
-        logger.debug("columnName: "+columnName);
-        
-       // Save new value for the column
-        if (columnName.equals("nameVillage")) {
-            village.setName(oldValue);	                 
-            logger.debug("Village - Set selected value for update of attribute Name.");                 	
-        } else {
-            logger.error("Village - No column defined for name "+ columnName);	                   
-        }       
-    }
-    
-    /**
-     *
-     */
-    public void undoTerritory() {
-       
-        Object[] object = searchObject("Territory", recordId);
-        territory = (Territory)object[0];
-        
-        // test, zda jiz dany zaznam byl editovan
-        boolean objectList = editObjectList.contains(territory); 
-        if (!objectList) {
-        	//pridani objektu do listu - informace o tom, ze byl dany objekt editovan
-            editObjectList.add(territory);
-        }
-        logger.debug("editObjectList.contains: "+objectList);
-        logger.debug("territory: "+territory.getId());
-        logger.debug("columnName: "+columnName);
-        
-       if (columnName.equals("nameTerritory")) {
-           territory.setName(oldValue);	                 
-           logger.debug("Territory - Set selected value for update of attribute Name.");                 	 
-       } else {
-           logger.error("Territory - No column defined for name "+ columnName);	                   
-       }        
-    }
-    
-    /**
-     * 
-     * @param id
-     * @return
-     */
-    public Object[] searchObject(String typeObject, int id) { 
-      
-    	SelectQuery query = null;
-    	if (typeObject.equals("Occurrence")){
-            try {
-            	query = database.createQuery(Occurrence.class);
-            	query.addRestriction(PlantloreConstants.RESTR_EQ, Occurrence.ID, null, id , null);
-            } catch(RemoteException e) {
-            	    System.err.println("RemoteException, searchObject() - Occurrence, createQuery");       	  
-            }            
-            
-    	} else if (typeObject.equals("Habitat")){
-            try {
-            	query = database.createQuery(Habitat.class);
-            	query.addRestriction(PlantloreConstants.RESTR_EQ, Habitat.ID, null, id , null);
-            } catch(RemoteException e) {
-            	    System.err.println("RemoteException, searchObject() - Habitat, createQuery");       	  
-            }            
-            
-    	} else if (typeObject.equals("Plant")){
-            try {
-            	query = database.createQuery(Plant.class);
-            	query.addRestriction(PlantloreConstants.RESTR_EQ, Plant.ID, null, id , null);
-            } catch(RemoteException e) {
-            	    System.err.println("RemoteException, searchObject() - Plant, createQuery");       	  
-            }            
-            
-    	} else if (typeObject.equals("Author")){
-            try {
-            	query = database.createQuery(Author.class);
-            	query.addRestriction(PlantloreConstants.RESTR_EQ, Author.ID, null, id , null);
-            } catch(RemoteException e) {
-            	    System.err.println("RemoteException, searchObject() - Author, createQuery");       	  
-            }            
-            
-    	} else if (typeObject.equals("Publication")){
-            try {
-            	query = database.createQuery(Publication.class);
-            	query.addRestriction(PlantloreConstants.RESTR_EQ, Publication.ID, null, id , null);
-            } catch(RemoteException e) {
-            	    System.err.println("RemoteException, searchObject() - Publication, createQuery");       	  
-            }            
-            
-    	} else if (typeObject.equals("Village")){
-            try {
-            	query = database.createQuery(Village.class);
-            	query.addRestriction(PlantloreConstants.RESTR_EQ, Village.ID, null, id, null);
-            } catch(RemoteException e) {
-            	    System.err.println("RemoteException, searchObject()- Village, createQuery");       	  
-            }            
-            
-    	}  else if  (typeObject.equals("Territory")){
-            try {
-            	query = database.createQuery(Territory.class);
-            	query.addRestriction(PlantloreConstants.RESTR_EQ, Territory.ID, null, id , null);
-            } catch(RemoteException e) {
-            	    System.err.println("RemoteException, searchObject()- Territory, createQuery");       	  
-            }            
-             
-    	} else if (typeObject.equals("Phytochorion")){
-            try {
-            	query = database.createQuery(Phytochorion.class);
-            	query.addRestriction(PlantloreConstants.RESTR_EQ, Phytochorion.ID, null, id , null);
-            } catch(RemoteException e) {
-            	    System.err.println("RemoteException, searchObject()- Phytochorion, createQuery");       	  
-            }            
-            
-    	} else {
-    		logger.error("SearchObject() - Incorrect type of object.");
-    	}
-                        
-        int resultIdPlant = 0;
-        try {                   
-            resultIdPlant = database.executeQuery(query);        
-        } catch (DBLayerException e) {                   
-            logger.error("Searching " +typeObject+ " failed. Unable to execute search query.");
-        } catch (RemoteException e) {		 
-     	   System.err.println("RemoteException- executeQuery " +typeObject);
- 	} 
-       Object[] objects = null;
-       Object[] object = null;
-       try {
-       	    // Retrieve selected row interval         	
-            try {
-                 objects = database.more(resultIdPlant, 1, 1);  
-            } catch(RemoteException e) {            	
-                logger.debug("RemoteException- searchObject, more");            	
-            }   
-        	object = (Object[])objects[0];           
-       } catch (DBLayerException e) {
-           // Log and set error in case of an exception
-           logger.error("Processing search " +typeObject+ " results failed: "+e.toString());            
-       }     	    
-        return object; 	       	          	   
-           	        
-    }
-    
-    /**
-     *  ..... pri whole history se bude do promennych occurrence, atd. nacitat vice ruznych objektu s jinym ID
-     *  ....Musim si ty jednotlive objekty pamatovat --> pole objektu, kde budou jednotlive editovane objekty
-     */
-    public void commitUpdate() {
-    	
-    	int count = editObjectList.size();
-    	for (int i=0; i< count; i++) {
-    		try {
-    			logger.debug("Object for update: "+editObjectList.get(i));
-                database.executeUpdate(editObjectList.get(i));
-	        } catch (RemoteException e) {
-	                logger.error("CommitUpdate - RemoteException: "+e.toString());
-	        } catch (DBLayerException e) {
-	                logger.error("CommitUpdate - DBLayerException: "+e.toString());
-	        }
-       }    	
-    }
-    
-    /**
-     *  vycisteni seznamu editovany objektu: 
-     */
-    public void clearEditObjectList() {
-    	editObjectList.clear();
-    }
-       
-    /**
-     * Projde oznacene zaznamy a postupne je smaze z tabulek historie.
-     * Pri mazani z tabulky tHistoryChange overi, zda na dany zaznam neni vice vazeb.
-     */
-    public void deleteHistory(int toResult) {
-
-    	//count of selected record
- //   	int count = historyDataList.size();
-    	
-    	//take from younger record to older record
-    	for( int i=0; i < toResult; i++) {
-//    		if (! markListId.contains(i)) {
-//    			continue;
-//    		}    		    		
-    		historyRecord = (HistoryRecord)historyDataList.get(i); 
-    		historyChange = historyRecord.getHistoryChange(); 
-    		
-	    	try {
-				database.executeDelete(historyRecord);
-				logger.debug("Deleting historyRecord successfully. Number of result: "+i);
-			} catch (RemoteException e) {
-				logger.error("Deleting historyRecord - remoteException. "+e.toString());
-			} catch (DBLayerException e) {
-				logger.error("Deleting historyRecord failed. "+e.toString());
-			}
-			int countResult = searchHistoryChangeId(historyChange.getId());			
-			if (countResult == 0) {
-				//samzat zaznam z tabulky tHistoryChange - muzeme protoze neexistuji dalsi FK z tHistory.cChngeId
-				//pokud po smazani zaznamu z tHistory jsme nasli alespon jeden zaznam, ktery ma stejny FK na zaznam z tChangeHistory
-				try {
-					database.executeDelete(historyChange);
-					logger.debug("Deleting historyChange successfully.");
-				} catch (RemoteException e) {
-					logger.error("Deleting historyChange - remoteException. "+e.toString());
-				} catch (DBLayerException e) {
-					logger.error("Deleting historyChange failed. "+e.toString());
-				}
-			} else {
-				logger.debug("Exist other record in the table tHistory, whitch has the same value of attribute cChangeId.");
-			}
-    	}
-    	//Clear list 
-//    	markListId.clear();
-//    	markItem.clear();
-    } 
-    
-    /**
-     * Zjisteni kolik zaznamu v tabulce tHistory je provazano s konkretnim zaznamem z tHistoryHange 
-     * @param id
-     * @return
-     */
-    public int searchHistoryChangeId(int id){    	
-    	SelectQuery query = null;
-        try {
-        	    query = database.createQuery(HistoryRecord.class);
-        	    // Create aliases for table tHistoryChange.      
-                query.createAlias("historyChange", "hc");  
-                // Add restriction to cChangeId column 
-                query.addRestriction(PlantloreConstants.RESTR_EQ, "hc.id", null, id , null);
-        } catch(RemoteException e) {
-        	    System.err.println("RemoteException- searchHistoryChangeId(), createQuery");       	  
-        }        
-        
-        
-        int resultIdChange = 0;
-        try {                   
-        	resultIdChange = database.executeQuery(query);        
-        } catch (DBLayerException e) {                   
-            logger.error("Searching historyChangeId failed. Unable to execute search query.");
-        } catch (RemoteException e) {		 
-     	   System.err.println("RemoteException- searchHistoryChangeId(), executeQuery");
- 	    } 
-        
- 	    int countResult = 100;
- 	    try {
-			countResult = database.getNumRows(resultIdChange);
-			logger.debug("SearchHistoryChangeId - Number of result: "+countResult);
-		} catch (RemoteException e) {
-			System.err.println("RemoteException- searchHistoryChangeId(), getNumRows");
-		}		
-		return countResult;
-    }
-    
-     //***************************//
-    //****Init Hashtable*********//
-    //**************************//
-    
-    private void initOccurrenceHash() {
-    	occurrenceHash = new Hashtable<String, Integer>(9); 
-        occurrenceHash.put("plantId",1);
-        occurrenceHash.put("yearCollected",2);
-        occurrenceHash.put("monthCollected",3);
-        occurrenceHash.put("dayCollected",4);
-        occurrenceHash.put("timeCollected",5);           
-        occurrenceHash.put("dataSource",6);
-        occurrenceHash.put("herbarium",7);        
-        occurrenceHash.put("noteOccurrence",8);
-        occurrenceHash.put("publicationId",9);       
-        //occurrenceHash.put("metadataId",10);
-    }    
-    
-    private void initHabitatHash() {
-    	habitatHash = new Hashtable<String, Integer>(11);         
-        habitatHash.put("quadrant",1);
-        habitatHash.put("description",2);
-        habitatHash.put("country",3);
-        habitatHash.put("altitude",4);
-        habitatHash.put("latitude",5);
-        habitatHash.put("longitude",6);      
-        habitatHash.put("nameVillage",7);      
-        habitatHash.put("namePhytochorion",8);
-        habitatHash.put("code",8);
-        habitatHash.put("nameTerritory",9);
-        habitatHash.put("noteHabitat",10);
-    }    
-    
-    private void initPublicationHash() {
-        publicationHash = new Hashtable<String, Integer>(6);
-        publicationHash.put("collectionName",0);
-        publicationHash.put("collectionYearPublication",1);
-        publicationHash.put("journalName",2);
-        publicationHash.put("journalAuthorName",3);
-        publicationHash.put("referenceDetail",4);
-        publicationHash.put("urlPublication",5);      
-    }
-    
-    private void initAuthorHash() {
-        authorHash = new Hashtable<String, Integer>(8);
-        authorHash.put("firstName",0);
-        authorHash.put("surname",1);
-        authorHash.put("organization",2);
-        authorHash.put("role",3);
-        authorHash.put("address",4);
-        authorHash.put("email",5);
-        authorHash.put("urlAuthor",6);
-        authorHash.put("noteAuthor",7);        
-    }              
-    
-       
-    //****************************//
-    //****Get and set metods*****//
-    //**************************//
-    
-    //id vysledku po vyhledavani v db
-    public void setResultId(int resultId) {
-        this.resultId = resultId;
-    }
-    
-    public int getResultId() {
-        return this.resultId;
-    }
-    
-    public int getResultRows() {
-        int resultCount = 0;
-        if (resultId != 0) try {
-                resultCount = database.getNumRows(resultId);        	
-        } catch(RemoteException e) {
-                System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
-        }
-        return resultCount;
-    }
-
-    public ArrayList<HistoryRecord> getHistoryDataList() {
-              return this.historyDataList;		  
-       }
-
-     public void setHistoryDataList(ArrayList<HistoryRecord> historyDataList) {
-              this.historyDataList = historyDataList;		  
-     } 
-    
-     public String getCurrentDisplayRows() {
-		  return this.displayRow;		  
-	   }
-
-     public void setCurrentDisplayRows(String displayRow) {
-              this.displayRow = displayRow;		  
-     } 
-     
-     public String getMessageUndo() {
-		  return this.messageUndo;		  
-	   }
-
-     public void setMessageUndo(String messageUndo) {
-              this.messageUndo = messageUndo;		  
-     } 
-     
-         /**
-     *  Get index of the first row currently displayed in the list of record changes. This is an index in the results returned by a search query.
-     *  @return index of the first row currently displayed in the list of history
-     */
-    public int getCurrentFirstRow() {
-        return this.currentFirstRow;
-    }
-    
-    /**
-     *  Set index of the forst row currently displayed in the list of record changes. This is an index in the results returned by a search query.
-     *  @param row index of the first row currently displayed in the list of history
-     */
-    public void setCurrentFirstRow(int row) {
-        this.currentFirstRow = row;
-    }    
-
-    /**
-     *  Get number of rows to be displayed on one page.
-     *  @return number of rows to be displayed per page
-     */
-    public int getDisplayRows() {
-        return this.displayRows;
-    }
-    
-    /**
-     *  Set number of rows to be displayed on one page
-     *  @param rows number of rows ro be displayed per page
-     */
-    public void setDisplayRows(int rows) {
-        this.displayRows = rows;
-    }
-    
-}

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java	2006-04-21 13:18:23 UTC (rev 168)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java	2006-04-21 15:30:58 UTC (rev 169)
@@ -21,11 +21,11 @@
 public class WholeHistoryCtrl {
    
     private Logger logger;
-    private WholeHistory model;
+    private History model;
     private WholeHistoryView view;
     
     /** Creates a new instance of WholeHistoryCtrl */
-    public WholeHistoryCtrl(WholeHistory model, WholeHistoryView view) {
+    public WholeHistoryCtrl(History model, WholeHistoryView view) {
       
         logger = Logger.getLogger(this.getClass().getPackage().getName());        
         this.model = model;
@@ -175,7 +175,7 @@
                    //Button OK was press
                    logger.debug("Button OK was press.");    
                    model.commitUpdate();
-                   model.deleteHistory(toResult);
+                   model.deleteHistory(toResult, false);
 		    	   model.searchWholeHistoryData();        	
 		    	   model.processResult(1,model.getDisplayRows());
 		    	   view.tableHistoryList.setModel(new WholeHistoryTableModel(model));

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java	2006-04-21 13:18:23 UTC (rev 168)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java	2006-04-21 15:30:58 UTC (rev 169)
@@ -24,7 +24,7 @@
     //Logger
     private Logger logger;
     // History model
-    private WholeHistory model; 
+    private History model; 
     private ArrayList<HistoryRecord> editHistoryDataList;
     
     /** Names of the columns */
@@ -40,7 +40,7 @@
     public final static int NEW_VALUE = 5;
     
     /** Creates a new instance of WholeHistoryTableModel */
-    public WholeHistoryTableModel(WholeHistory model) {
+    public WholeHistoryTableModel(History model) {
         logger = Logger.getLogger(this.getClass().getPackage().getName());
     	this.model = model;        
     	initColumns();    	

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java	2006-04-21 13:18:23 UTC (rev 168)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java	2006-04-21 15:30:58 UTC (rev 169)
@@ -20,12 +20,12 @@
 public class WholeHistoryView extends javax.swing.JDialog implements Observer{
     
     //Whole History model
-    private WholeHistory model;  
+    private History model;  
     //data
     private Object[][] data;
     
     /** Creates new form WholeHistoryView */
-    public WholeHistoryView(WholeHistory model, java.awt.Frame parent, boolean modal) {
+    public WholeHistoryView(History model, java.awt.Frame parent, boolean modal) {
         
         super(parent, modal);
         this.model = model;



From LadaOb at seznam.cz  Fri Apr 21 18:39:04 2006
From: LadaOb at seznam.cz (=?us-ascii?Q?Lada=20Oberreiterova?=)
Date: Fri, 21 Apr 2006 18:39:04 +0200 (CEST)
Subject: [Plantlore-dev] =?us-ascii?Q?Fwd=3ARe=3Adata=20=2D=20export=2Fimport=20=2D=20aktualizace=20tPlants?=
Message-ID: <2197.4239-30544-2067368313-1145637544@seznam.cz>

An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060421/3f8619a7/attachment.html>
-------------- next part --------------
Ahojte,

preposilam starsi mail z komunikace s Hansem.
Je tam navrh jak resit import jejich dat do nasi db (byla zvolena 
varianta c.1).
Dale se zde par slov k exportu do tabulky tPlants ze Surveye + v 
priloze navhy, jak ma vypada prislusny XML soubor (ano,byla zvolena 
a i Hansem odsouhlasena varian s XML souborem).Na otazku, zda jsou 
schopni poznat zmeny v Survey bylo odpovezeno: "K tomu checklistu - 
m? ho spravovat AOPK a zat?m je to ve v?voji, jako cel? Survey. 
Tak?e v sou?asn? dob? toto nejsem schopen zjistit.". Takze je 
otazkou, zda udelame navrh, ktery rozlisi add a edit + addEdit (tag 
pro nejz se bude muset zjistit, zda dany taxon je v db apokud tam 
je, tak ho editovat).

Lada

# ------------ P?vodn? zpr?va ------------
# Od: Lada Oberreiterova <LadaOb at seznam.cz>
# P?edm?t: Re:data - export/import - aktualizace tPlants
# Datum: 08.2.2006 12:58:04
# ---------------------------------------------
# Ahoj, 

diky za poslana data. 

Vygenerovala jsem si # diagramy stavajiciho modelu databaze JBS 
(kdyz uz jsem je mam, tak je posilam v # priloze ;-) ). 
Databaze s daty obsahuje ctyri tabulky, kde je vzajemne # provazani 
tabulek Lokality + Rostliny, tblCheckList + tblPrijJm. Chtela bych 
se # zeptat, kdybych chtela tyto dve dvojice provazat, tak na co by 
slo navazat # polozku Kytka z tabulky Rostliny? Co jsem tak koukala,
tak to vypada, ze v teto # polozce (Rostliny.Kytka) muze byt hodnota
odpovidajici nektere z polozek # tblPrijJm.PrijateJmeno, tblPrijJm.
CeskeJmeno, tblPrijJm.PublikovaneJmeno ... je # to tak? Muze byt v 
teto polozce i hodnota odpovidajici polozce # tblCheckList.Rostlina?
Myslim, ze jsme se jiz bavili, ze polozka # tblCheckList.Rostlina 
odpovida synonymum, ze? 

Premyslela jsem nad # importem vasich dat do nove db a napadaji me 
dve varianty: 
1. 
- # Nejdirve naplnit tabulku tPlants daty ziskanymi z checklistu 
Survey 
- # Napojit se na accessovskou databazi (dbjc2000_data.mdb) a data z
tabulek # Lokality a Rostliny preulozit do nasi db. Zde bude potreba
jednoznacne # identifikovat "Kytku", abychom byly schopni ji 
dohledat v tabulce tPlants. 
2. 
- Nejdirve naplnit tabulku tPlants daty ziskanymi z checklistu 
Survey # 
- Jak uz jsme psala minule - vyuzit vyhledavani a exportu (napr. do 
xls) # dat v aktualni aplikaci JBS. Pak importovat data ze ziskaneho
souboru. Uz jsme # se zminovala, ze pri exportu chybi u nekterych 
zaznamu hodnota v polozce kytka # (stahla jsem si nove Dbjc2000ap.
exe a ted uz to vypada, ze je jedno zda zvolim v # nastaveni pro 
vyhledavani zapsane jmeno, prijate jmeno ci publikovane jmeno) 

Ve vysledku jsem na 99% naklonena prvni variante (pro tuto variantu 
# potrebuji znat odpovedi uvedene vyse, dik). 

Dale je v reseni format # souboru se seznamem rostlin (checklist). 
Navrhy jsou nasledujici. 
- # Ukazkovy checklist poslals v .dbf (FoxPro), koukala jsem na 
poznosti exportu a # nejzajimavejsi jsou dva a to .xls a "delimited 
text". Takze nejjednodusi pro # uzivatele bude, kdyz soubor se 
seznamem rostlin bude v jednom z techto formatu. # S .xls se dobre 
pracuje, tak bych preferovala jej. Uzivatele, kteri nemaji # 
dostupne excel by pracovali s OpenOfficem, ktery zakladni praci s 
xls zvlada. V # priloze prikladam .xls soubor s navrhem polozek, 
ktere bude obsahovat (aby bylo # mozno do budoucna prejit i najiny 
checklist, tak xls soubor nebude totozny s # vyexportovanym survey.
xls z .dbf). Dale je tam naznaceno navrh jak se budou # resit 
aktualizace (viz. nize) 
- Dalsi varianta je vygenerovani XML. XML by # bylo zajimavejsi pri 
aktualizacich seznamu kytek (viz. nize). Opet prikladam # navrh v 
priloze. 

Aktualizace seznamu (tPlants). 
Trochu se # toto tema tyka toho, zda jste schopni po vydani noveho 
checklistu poznat, jake # jsou v nem zmeny vzhledem ke staremu 
checklistu (uz jsem drive podobnou otazku # polozila a psals, ze se 
zkusis optat). 
1. navrh aktualizace tPlants pro # xls. (txt) - Existovali by dva 
soubory- v jednom by byly rostliny, ktere se # budou do tabulky 
tPlants nove pridavat a v druhem by byly informace o # editovanych 
roslitnach. System by sam poznal o ktery soubor se jedna (napr. # 
podle zahlavi) a podle toho ho zpracoval. (Navrhy souboru viz. 
priloha). 
2. navrh aktualizace tPlants pro XML - zde by exitovaly tagy ADD a 
EDIT a # podle nich by aplikace provedla vybranou operaci. (Navrh 
XML viz. priloha) 

Co se tyka pohledu uzivatele, co by pro nej bylo lepsi ci 
pohodlnejsi - # xsl, txt, XML? S tim, ze by pro vytvoreni add 
polozek v XML existoval skript, # ktery by je vygeneroval. Takze se 
pak jedna hlavne o zapisovani zaznamu # edit. 

Zatim predem dik. 

S pozdravem 
Lada :-) 


> ------------ P?vodn? zpr?va ------------ 
> Od: Vladim?r # Hans <vladimir_hans at nature.cz> 
> P?edm?t: data 
> Datum: 08.2.2006 # 08:36:23 
> ---------------------------------------- 
> Ahoj Lado, 
> zat?m pos?l?m data, zbytek po?lu, a? se domluv?m s Martinem. 
> # Vl??a 
> 
> -- 
> Vladim?r Hans 
> Agentura ochrany # p??rody a krajiny ?R, 
> st?edisko ?esk? Bud?jovice 
> 
> 
> 
> 
> 
> 
> ______________________ Upozorneni od # NOD32 _____________________
_ 
> Pozor, tuto zpravu nebylo mozne proverit # antivirovym systemem 
NOD32 
> data.zip -> ZIP -> dbjc2000_data.mdb - # decompression could not 
complete 
> (possible reasons: low amount of free # memory / disk space, or a 
problem with 
> temp folders) 
> data.zip # -> ZIP -> dbjc2000_data_vltavot?nsko.mdb - 
decompression could not 
> # complete (possible reasons: low amount of free memory / disk 
space, or a # problem 
> with temp folders) 
> http://www.nod32.cz 
> 
> 
> 
> 
> 
> # 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: aktualizaceXML.doc
Type: application/x-msword
Size: 25088 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060421/3f8619a7/attachment.bin>

From lada at berlios.de  Fri Apr 21 19:44:33 2006
From: lada at berlios.de (lada at berlios.de)
Date: Fri, 21 Apr 2006 19:44:33 +0200
Subject: [Plantlore-dev] r170 - trunk/src/net/sf/plantlore/client/history
Message-ID: <200604211744.k3LHiX0E031162@sheep.berlios.de>

Author: lada
Date: 2006-04-21 19:44:30 +0200 (Fri, 21 Apr 2006)
New Revision: 170

Added:
   trunk/src/net/sf/plantlore/client/history/DetailsHistoryCtrl.java
Modified:
   trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.form
   trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java
   trunk/src/net/sf/plantlore/client/history/History.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java
Log:
Whole History - details for rows in table.

Added: trunk/src/net/sf/plantlore/client/history/DetailsHistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/DetailsHistoryCtrl.java	2006-04-21 15:30:58 UTC (rev 169)
+++ trunk/src/net/sf/plantlore/client/history/DetailsHistoryCtrl.java	2006-04-21 17:44:30 UTC (rev 170)
@@ -0,0 +1,69 @@
+/*
+ * DetailsHistoryCtrl.java
+ *
+ * Created on 21. duben 2006, 17:53
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client.history;
+
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import org.apache.log4j.Logger;
+
+/**
+ *
+ * @author Lada
+ */
+public class DetailsHistoryCtrl {
+    
+    private Logger logger;   
+    private DetailsHistoryView view;
+    
+    /** Creates a new instance of DetailsHistoryCtrl */
+    public DetailsHistoryCtrl(DetailsHistoryView view) {
+        
+        logger = Logger.getLogger(this.getClass().getPackage().getName());              
+        this.view = view;
+        
+        view.okButton.addActionListener(new okButtonListener());
+        view.closeButton.addActionListener(new closeButtonListener());
+        view.helpButton.addActionListener(new helpButtonListener());
+    }
+    
+               /** 
+    * On Ok makes the model store() the preferences and hides the view.
+    * 
+    */
+   class okButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {       
+           view.close();           
+       }
+   }
+  
+   /**
+    * On Cancel just hides the view.
+    *
+    */
+   class closeButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+    	   view.close();
+       }
+   }
+   
+   /**
+    * On Help should call help.
+    *
+    */
+   class helpButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {    	  
+    	   // Display help viewer            
+    	   System.out.println("Tady se bude volat Help!");
+       }
+   }
+}

Modified: trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.form	2006-04-21 15:30:58 UTC (rev 169)
+++ trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.form	2006-04-21 17:44:30 UTC (rev 170)
@@ -89,7 +89,6 @@
                   <Font name="Arial" size="12" style="0"/>
                 </Property>
                 <Property name="rows" type="int" value="5"/>
-                <Property name="text" type="java.lang.String" value="testovaci nasazeni textu"/>
               </Properties>
               <AuxValues>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>

Modified: trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java	2006-04-21 15:30:58 UTC (rev 169)
+++ trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java	2006-04-21 17:44:30 UTC (rev 170)
@@ -6,6 +6,8 @@
 
 package net.sf.plantlore.client.history;
 
+import java.util.Observable;
+import java.util.Observer;
 import javax.swing.JDialog;
 import net.sf.plantlore.l10n.L10n;
 
@@ -13,17 +15,29 @@
  *
  * @author  Lada
  */
-public class DetailsHistoryView extends javax.swing.JDialog {
+public class DetailsHistoryView extends javax.swing.JDialog implements Observer {
     
     /**
      * Creates new form DetailsHistoryView
      */
-    public DetailsHistoryView(History model, javax.swing.JDialog parent, boolean modal) {
+    public DetailsHistoryView(javax.swing.JDialog parent, boolean modal) {
         super(parent, modal);
         setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
-        initComponents();        
+        initComponents(); 
+        this.detailsTextArea.setEditable(false);
     }
     
+    public void update(Observable observable, Object object) {
+    } 
+    
+    public void setDetailsMessage(String detailsMessage) {
+        this.detailsTextArea.setText(detailsMessage);
+    }
+    
+    public void close() {
+        dispose();
+    }
+    
     /** This method is called from within the constructor to
      * initialize the form.
      * WARNING: Do NOT modify this code. The content of this method is
@@ -43,7 +57,6 @@
         detailsTextArea.setColumns(20);
         detailsTextArea.setFont(new java.awt.Font("Arial", 0, 12));
         detailsTextArea.setRows(5);
-        detailsTextArea.setText("testovaci nasazeni textu");
         jScrollPane2.setViewportView(detailsTextArea);
 
         org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
@@ -102,7 +115,7 @@
     public static void main(String args[]) {
         java.awt.EventQueue.invokeLater(new Runnable() {
             public void run() {
-                new DetailsHistoryView(null,new javax.swing.JDialog(), true).setVisible(true);
+                new DetailsHistoryView(new javax.swing.JDialog(), true).setVisible(true);
             }
         });
     }

Modified: trunk/src/net/sf/plantlore/client/history/History.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/History.java	2006-04-21 15:30:58 UTC (rev 169)
+++ trunk/src/net/sf/plantlore/client/history/History.java	2006-04-21 17:44:30 UTC (rev 170)
@@ -1234,6 +1234,57 @@
     	}
     }
     
+    /*
+     * Funkce ktera zjisti podrobne informace o polozce, ktera byla editovana
+     */
+    public String getDetailsMessage(int resultNumber) {
+        
+        //details about object
+        String detailsMessage = "";
+       
+        //data z historie pro konktetni radek tabulky
+        historyRecord = (HistoryRecord)historyDataList.get(resultNumber);    		
+        historyChange = historyRecord.getHistoryChange();
+        tableName = historyRecord.getHistoryColumn().getTableName();
+        recordId = historyChange.getRecordId();
+                
+        
+        //podle tableName najdeme podrobnosti o konkretnim objektu (autor, publikace, nalez,...)
+         if (tableName.equals("Occurrence") || tableName.equals("Habitat")){           
+              Occurrence occurrence = historyChange.getOccurrence();
+              //bud tu rovnou napsat kod nebo tu volat funkci a v ni napsat ten kot
+              //occurrenceMessage(); 
+              detailsMessage = "Details of Occurrences \n\n";
+              detailsMessage = detailsMessage + "Taxon: "+ occurrence.getPlant().getTaxon()+"\n";
+              detailsMessage = detailsMessage + "Author: ???";
+              
+        } else if (tableName.equals("Publication")) {
+              Object[] object = searchObject("Publication",recordId); 
+              Publication publication = (Publication)object[0];
+              detailsMessage = "Details of Publications \n\n";
+        } else if (tableName.equals("Author")) {
+              Object[] object = searchObject("Author",recordId);   
+              Author author = (Author)object[0];
+              detailsMessage = "Details of Author \n\n";
+        } else if (tableName.equals("Phytochorion")) {
+              Object[] object = searchObject("Phytochorion",recordId); 
+              Phytochorion  phytochorion = (Phytochorion)object[0];
+              detailsMessage = "Details of Phytochorion \n\n";
+        } else if (tableName.equals("Territory")) {
+              Object[] object = searchObject("Territory",recordId); 
+              Territory territory = (Territory)object[0];
+        } else if (tableName.equals("Village")) {
+              Object[] object = searchObject("Village",recordId);  
+              Village village = (Village)object[0];
+              detailsMessage = "Details of Village \n\n";
+        } else {
+            logger.error("No table defined");
+        }        
+        
+        logger.debug("detailsMessage: "+ detailsMessage);
+        return detailsMessage;
+    }
+    
      //***************************//
     //****Init Hashtable*********//
     //**************************//

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java	2006-04-21 15:30:58 UTC (rev 169)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java	2006-04-21 17:44:30 UTC (rev 170)
@@ -207,9 +207,15 @@
                view.messageUndoSelection();
            } else {
                //zobrazi se detailni informace o vybranem zaznamu
-               DetailsHistoryView detailsView = new DetailsHistoryView(model, view, true);
-               detailsView.setVisible(true);
-               //jeste kontroler
+               int resultNumber = view.tableHistoryList.getSelectedRow() + model.getCurrentFirstRow()-1;
+                
+               logger.debug("Result number: "+ resultNumber);
+        
+               String detailsMessage = model.getDetailsMessage(resultNumber);
+               DetailsHistoryView detailsView = new DetailsHistoryView(view, true);
+               DetailsHistoryCtrl detailsCtrl = new DetailsHistoryCtrl(detailsView);
+               detailsView.setDetailsMessage(detailsMessage);
+               detailsView.setVisible(true);               
            }          
        }
     }



From LadaOb at seznam.cz  Fri Apr 21 22:09:18 2006
From: LadaOb at seznam.cz (=?us-ascii?Q?Lada=20Oberreiterova?=)
Date: Fri, 21 Apr 2006 22:09:18 +0200 (CEST)
Subject: [Plantlore-dev] =?us-ascii?Q?Schuzka=20=2D=20par=20poznamek?=
Message-ID: <2197.4243-23947-1645312815-1145650158@seznam.cz>

Prece jen par poznamek z dnesni schuzky :-)

Export
- v podstate budou tri druhy exportu
1. specialni export pro nasledny import
2. export jednotlivych tabulek (napr. seznam mest)
3. export nalezu (uzivatel si muze vyprat jake chce sloupecky 
tykajici se nalezu - v podstate to co je zobrazeno v overview, 
export do ABCD, DarwinCore, XML, cvs)

- ABCD, DarwinCore - export jen do XML
- zakladni export do XML, CSV, (casem mozna do HISPID)
- technicka stranka: predavat dotaz + seznam id vybranych zaznamu. 
Navrhnou obecny export a od nej oddedit konkretni exporty.

SwingWorker
- je korektni jeho pouziti - bezi dve vlakna a otazkou je, ktere 
vlakno bude chytat vyjimku

Vlakna
- jak vyresit komunikaci mezi vlakny?

Stridani panelu - uz pouzito v settings 

Zitra se domluvime behem dne na dalsi pokec.

Lada

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060421/1ea8d467/attachment.html>

From discontinuum at gmail.com  Sat Apr 22 13:15:27 2006
From: discontinuum at gmail.com (Erik Kratochvil)
Date: Sat, 22 Apr 2006 13:15:27 +0200
Subject: [Plantlore-dev] Metoda reseni exportu
Message-ID: <f4dc39b90604220415w6d3814d1idbc0e0d629443b27@mail.gmail.com>

Zakladni navrh (kostra) toho, jak by mohl vypadat export. Docela rad bych
slysel nejaky vyjadreni - treba co se vam tam nezda z hlediska technicky
proveditelnosti, ale klidne se to muze vztahovat i k navrhu samotnymu (neco
sem opomnel, neco je tam zbytecny)...

Podle toho kdyztak teda jeste doupravim zbytek toho navrhu (hlavne veci s
????). Mezitim zrejme budu pracovat na kostre v jave a pridam ji do
projektu.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060422/fd33a0ca/attachment.html>
-------------- next part --------------
???
  =======-===============================================
	ExPORT
  =======-===============================================


  A. ZAKLADNI POZADAVKY
 ~~~~~~~~~~~~~~~~~~~~~~~


  typ                |  format               |  exportuje se
---------------------+-----------------------+---------------------------------------------------------------------------------
1. export pro import | PlantloreNative (XML) | vsechny vybrane zaznamy z Overview;
                     |                       | -> minimalne NN polozky ze Zakladnich Tabulek
                     |                       |    
---------------------+-----------------------+---------------------------------------------------------------------------------
2. export nalezovych | XML, CSV, ABCD,       | vsechny vybrane zaznamy z Overview; 
   dat               | DarwinCore            | ABCD, DC: exportovano je primo do techto formatu
                     |                       | XML, CSV: uzivatel si muze vybrat sloupce, ktere chce exportovat
---------------------+-----------------------+---------------------------------------------------------------------------------
3. export "tabulek"  | XML, CSV              | vsechny zaznamy ze Zakladnich Tabulek
                     |                       | (muze jit i o JOIN nekolika zakladnich tabulek)
                     |                       |


 NN polozky = not null sloupce databaze

 DC = DarwinCore

 Zakladni Tabulky = TOCCURENCES, TAUTHORSOCCURENCES, TAUTHORS, 
                    THABITATS, TTERITORIES, TPHYTOCHORIA, TVILLAGES, 
                    TPUBLICATIONS, TPLANTS, TMETADATA

 Names of the columns are available as constants stored in the respective holder objects.



  B. HRUBY NACRT
 ~~~~~~~~~~~~~~~~


Celkem 3 objekty
----------------

 Client   ~ pozaduje export, doda vsechny potrebne informace
 Exporter ~ ridi export podle zadanych informaci
 Builder  ~ stavi vystup do konkretniho formatu

Diagram spoluprace
------------------

 Client                                Builder
 ======                                =======
  |                                     |
  # new Builder()                       |
  #------------------------------------>#
  #                                     #
  #<------------------------------------#
  |                                     |
  .                                     .
  .                                     .
  |                      Exporter       |
  |                      ========       |
  |                       |             |
  # new Exporter(Builder) |             |
  #---------------------->#             |
  #                       #             |
  #<----------------------#             |
  |                       |             |
  |                       |             |
  # Exporter.run()        |             |
  #---------------------->#             |
  #                       # writeRec()  |
  #                       #------------>#
  #                       #<------------#
  #                       #             |
  #                       # writeRec()  |
  #                       #------------>#
  #                       #<------------#
  .                       .             .
  .                       .             .
  .                       .             .
  .                       .             .
  #                       # writeRec()  |
  #                       #------------>#
  #                       #<------------#
  #                       #             |
  #<----------------------#             |
  #                       |             |
  |                       |             |



Co potrebuje kdo vedet ( "<-" ) a co dela ( "*" )
-------------------------------------------------
 
 1. Builder (konkretni implementace pro format souboru XML | CVS | ABCD | DC | PlNative)
	<- java.io.Writer 
		muze to byt soubor, pajpa, socket, ...


	* makeHeader()
		vytvori zahlavi specificke pro tento format
		(napr. XML definice, CSV popis sloupcu, ...)

	* makeFooter()
		vytvori zapati specificke pro tento format

 	* startNewRecord()
		zacatek noveho zaznamu
		(obsahuje napr. XML otviraci tagy, CSV prechod na novy radek, ...)

	* finishRecord()
		konec zaznamu
		(obsahuje napr. XML zaviraci tagy, CSV prechod na novy radek, ...)

	* writePartialRecord(Table part, Template temp)
		part = cast zaznamu odpovidajiciho jedne tabulce v databazi (treba Tplants)
		temp = obsahuje informaci, ktere sloupecky teto tabulky se maji vypisovat (treba CSpecies, CSynonyms, CCzechName)
		vypise cast zaznamu podle sablony odpovidajici dane tabulce
		[pravdepodobne se udela pretizenim teto metody pres vsechny zakladni tabulky]


 2. Exporter (Director)
	<- Builder : builder
	<- Query : query
	<- DBLayer : database
	<- "kolekce oznacenych zaznamu" : selected
	<- "popis dotazu" : description

	* run()
		// vyrizeni celeho exportu zhruba nasledovne 

		result = database.executeQuery( query );
		builder.makeHeader();

		for (int i = 0; i < database.getNumRows( result ); i++) {
		  Object[] record = database.next( result );
		  if ( !selected.contains( record ) ) continue;

		  builder.startNewRecord();

		  for (Partial p : record) {
		    // na zaklade introspekce volej prislusnou metodu builderu
		    // treba: p instanceof Author
		    builder.writePartialRecord( (Author)p, description.getTemplate(Author) );
			..
		  }

		  builder.finishRecord();
		}

		builder.makeFooter();



Priklad konkretniho pouziti
---------------------------

	Client

	  java.io.Writer w = new java.io.FileWriter(filename);
	  Builder builder = new XMLBuilder( w );                 // [*]
	  
	  SelectQuery query = ...; // podle aktualnich pozadavku
	  Collection<????> selected = ...; // seznam vybranych zaznamu, asi jejich ID

	  DescriptionData description = ????; // popis dotazu pro Exporter

	  Exporter director = new Exporter( builder, query, database, selected, description )

	  director.run();

	  w.close();



Proc se neco dela tak, jak se to dela?
--------------------------------------

1. Proc posilat Query i kolekci vybranych zaznamu?

	Protoze na klientovi mohlo dojit k oznaceni velkeho mnozstvi zaznamu (invert, selectAll)
	a tudiz klient sam nemusi mit vsechny oznacene zaznamy k dispozici. Krom toho diky tomu
	bude mozne provadet export jinym vlaknem - v Overview uz mohou byt nacteny jine zaznamy.

2. Proc si Exporter (Director) nevytvori Builder sam?

	Odpovida to navrhovemu vzoru Builder, je to zrejme k zajisteni vetsi flexibility 
	(builder se muze lehko zmenit).

3. Co obsahuje "kolekce oznacenych zaznamu"?

	Musi se jeste doresit (ve spolupraci s Jakubem ~ Overview...).

4. Co ma obsahovat "popis dotazu"?

	Neni jeste uplne jasne, minimalne by se v nem mely uchovavat sablonky pro jednotlive tabulky.
	Sablonka bude nejaka informace o tom, ktere sloupecky se maji exportovat a kterych si
	ten builder nema vsimat. Vice viz Builder.

5. Na co je mi startRecord() a finishRecord()?
	
	Pokud se bude jednat o nejaky exoticky format, muzou metody writePartialRecord() ukladat
	poslane parametry jenom do svoji cache a po zavolani finishRecord()
	teprve ze vsech dodanych zaznamu vytvorit to, co se bude zapisovat.

6. Jak se budou osetrovat ...?

	Nedostatek mista na disku, spadnuti databaze, jine vlakno, progress bar



  C. ZPETNA VERIFIKACE VUCI POZADAVKUM
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


  typ                |  Builder              |  Query, DescriptionData, Selected
---------------------+-----------------------+---------------------------------------------------------------------------------
1. export pro import | XMLBuilder            | vsechny vybrane zaznamy z Overview;  | Query a Selected podle Overview
                     |                       | -> NN polozky ze Zakladnich Tabulek  | defaultni DescriptionData
                     |                       |                                      |
---------------------+-----------------------+---------------------------------------------------------------------------------
2. export nalezovych | XMLBuilder, DCBuilder | vsechny vybrane zaznamy z Overview;  | Query a Selected podle Overview
   dat               | ABCDBuilder,          | ABCD, DC: exportovano je primo       | DescriptionData ??? (asi zadna, format je natvrdo)
                     | CSVBuilder            | XML, CSV: muze vybrat sloupce        | DescriptionData podle toho, co si uzivatel vybral
---------------------+-----------------------+---------------------------------------------------------------------------------
3. export "tabulek"  | XMLBuilder,           | vsechny zaznamy ze Zakl. Tabulek     | Query podle potreby tabulek, Selected = ALL
                     | CSVBuilder            | (JOIN nekolika zakladnich tabulek)   | DescriptionData podle toho, co si uzivatel vybral


 Pridani noveho formatu exportu = napsani noveho builderu (XLSBuilder) a uprava bodu [*].



From krater at berlios.de  Sat Apr 22 17:18:41 2006
From: krater at berlios.de (krater at berlios.de)
Date: Sat, 22 Apr 2006 17:18:41 +0200
Subject: [Plantlore-dev] r171 - in trunk/src/net/sf/plantlore: client client/authors client/export common
Message-ID: <200604221518.k3MFIfJc010929@sheep.berlios.de>

Author: krater
Date: 2006-04-22 17:18:40 +0200 (Sat, 22 Apr 2006)
New Revision: 171

Added:
   trunk/src/net/sf/plantlore/client/export/
   trunk/src/net/sf/plantlore/client/export/Builder.java
   trunk/src/net/sf/plantlore/client/export/Export.java
   trunk/src/net/sf/plantlore/client/export/MetaBuilder.java
   trunk/src/net/sf/plantlore/client/export/builders/
   trunk/src/net/sf/plantlore/common/Selection.java
Modified:
   trunk/src/net/sf/plantlore/client/authors/AuthorManager.java
Log:
A new framework for EXPORT.

Modified: trunk/src/net/sf/plantlore/client/authors/AuthorManager.java
===================================================================
--- trunk/src/net/sf/plantlore/client/authors/AuthorManager.java	2006-04-21 17:44:30 UTC (rev 170)
+++ trunk/src/net/sf/plantlore/client/authors/AuthorManager.java	2006-04-22 15:18:40 UTC (rev 171)
@@ -15,12 +15,8 @@
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.middleware.SelectQuery;
 import net.sf.plantlore.server.DBLayerException;
-//import net.sf.plantlore.client.dblayer.query.DeleteQuery;
-//import net.sf.plantlore.client.dblayer.query.InsertQuery;
-//import net.sf.plantlore.client.dblayer.query.Query;
-//import net.sf.plantlore.client.dblayer.result.Result;
+
 import net.sf.plantlore.common.SwingWorker;
-import net.sf.plantlore.common.record.Author;
 import org.apache.log4j.Logger;
 
 /**
@@ -251,8 +247,8 @@
 						done = true;
 						// Save the results
 						setResult(resultId);
-						return resultId;
 					}
+					return resultId;
 				} catch (RemoteException e) {
 					System.err
 							.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");

Added: trunk/src/net/sf/plantlore/client/export/Builder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-21 17:44:30 UTC (rev 170)
+++ trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-22 15:18:40 UTC (rev 171)
@@ -0,0 +1,41 @@
+package net.sf.plantlore.client.export;
+
+import net.sf.plantlore.common.record.*;
+
+/**
+ * Interface for building the output.
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-21
+ * @version 0.99
+ */
+public interface Builder {
+		
+	void makeHeader();
+	
+	void makeFooter();
+	
+	void startNewRecord();
+	
+	void finishRecord();
+	
+	void writePartialRecord(Author arg);
+	
+	void writePartialRecord(AuthorOccurrence arg);
+	
+	void writePartialRecord(Habitat arg);
+	
+	void writePartialRecord(Metadata arg);
+	
+	void writePartialRecord(Occurrence arg);
+	
+	void writePartialRecord(Phytochorion arg);
+	
+	void writePartialRecord(Plant arg);
+	
+	void writePartialRecord(Publication arg);
+	
+	void writePartialRecord(Territory arg);
+
+	void writePartialRecord(Village arg);
+}

Added: trunk/src/net/sf/plantlore/client/export/Export.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Export.java	2006-04-21 17:44:30 UTC (rev 170)
+++ trunk/src/net/sf/plantlore/client/export/Export.java	2006-04-22 15:18:40 UTC (rev 171)
@@ -0,0 +1,84 @@
+package net.sf.plantlore.client.export;
+
+import java.rmi.RemoteException;
+
+import net.sf.plantlore.common.Selection;
+import net.sf.plantlore.common.record.*;
+import net.sf.plantlore.middleware.DBLayer;
+import net.sf.plantlore.middleware.SelectQuery;
+import net.sf.plantlore.server.DBLayerException;
+
+
+import org.apache.log4j.Logger;
+
+/**
+ * The Director class (for export).
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-21
+ *	@version 0.7
+ */
+public class Export implements Runnable {
+	
+	private Logger logger = Logger.getLogger(this.getClass().getPackage().getName());
+	
+	private Builder builder;
+	private SelectQuery query;
+	private Selection selection;
+	private DBLayer database;
+	
+	
+	public Export(Builder builder, SelectQuery query, DBLayer database, Selection selection) {
+		this.builder = builder; this.query = query; this.database = database;
+		this.selection = selection;
+	}
+	
+	
+	public void run() {
+		try {
+			int result = database.executeQuery( query );
+			long count = 0;
+			
+			logger.info("Export begins...");
+			builder.makeHeader();
+			
+			for(int i = 0; i < database.getNumRows( result ); i++) {
+				Object[] record = database.next( result );	
+				if( !selection.contains( record ) ) continue; // [!]
+				
+				count++;
+				
+				builder.startNewRecord();
+				for(Object part : record) {
+					if(part instanceof Author) builder.writePartialRecord( (Author)part);
+					else if(part instanceof AuthorOccurrence) builder.writePartialRecord( (AuthorOccurrence)part);
+					else if(part instanceof Habitat) builder.writePartialRecord( (Habitat)part);
+					else if(part instanceof Metadata) builder.writePartialRecord( (Metadata)part);
+					else if(part instanceof Occurrence) builder.writePartialRecord( (Occurrence)part);
+					else if(part instanceof Phytochorion) builder.writePartialRecord( (Phytochorion)part);
+					else if(part instanceof Plant) builder.writePartialRecord( (Plant)part);
+					else if(part instanceof Publication) builder.writePartialRecord( (Publication)part);
+					else if(part instanceof Territory) builder.writePartialRecord( (Territory)part);
+					else if(part instanceof Village) builder.writePartialRecord( (Village)part);
+					else /* ERROR */;
+				}
+				builder.finishRecord();
+			}
+		
+			builder.makeFooter();
+			logger.info("Export completed. " + count + " records sent to output.");
+		}
+		catch(DBLayerException e) {
+			logger.error(e); e.printStackTrace();
+		}
+		catch(RemoteException e) {
+			logger.error(e); e.printStackTrace();
+		}
+	}
+	
+	
+	
+	
+
+
+}

Added: trunk/src/net/sf/plantlore/client/export/MetaBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/MetaBuilder.java	2006-04-21 17:44:30 UTC (rev 170)
+++ trunk/src/net/sf/plantlore/client/export/MetaBuilder.java	2006-04-22 15:18:40 UTC (rev 171)
@@ -0,0 +1,44 @@
+package net.sf.plantlore.client.export;
+
+import net.sf.plantlore.common.record.Author;
+import net.sf.plantlore.common.record.AuthorOccurrence;
+import net.sf.plantlore.common.record.Habitat;
+import net.sf.plantlore.common.record.Metadata;
+import net.sf.plantlore.common.record.Occurrence;
+import net.sf.plantlore.common.record.Phytochorion;
+import net.sf.plantlore.common.record.Plant;
+import net.sf.plantlore.common.record.Publication;
+import net.sf.plantlore.common.record.Territory;
+import net.sf.plantlore.common.record.Village;
+
+public class MetaBuilder implements Builder {
+	
+	public void makeHeader() {}
+	
+	public void makeFooter() {}
+	
+	public void startNewRecord() {}
+	
+	public void finishRecord() {}
+	
+	public void writePartialRecord(Author arg) {}
+	
+	public void writePartialRecord(AuthorOccurrence arg) {}
+	
+	public void writePartialRecord(Habitat arg) {}
+	
+	public void writePartialRecord(Metadata arg) {}
+	
+	public void writePartialRecord(Occurrence arg) {}
+	
+	public void writePartialRecord(Phytochorion arg) {}
+	
+	public void writePartialRecord(Plant arg) {}
+	
+	public void writePartialRecord(Publication arg) {}
+	
+	public void writePartialRecord(Territory arg) {}
+
+	public void writePartialRecord(Village arg) {}
+	
+}

Added: trunk/src/net/sf/plantlore/common/Selection.java
===================================================================
--- trunk/src/net/sf/plantlore/common/Selection.java	2006-04-21 17:44:30 UTC (rev 170)
+++ trunk/src/net/sf/plantlore/common/Selection.java	2006-04-22 15:18:40 UTC (rev 171)
@@ -0,0 +1,27 @@
+package net.sf.plantlore.common;
+
+import java.util.Collection;
+import java.util.HashSet;
+
+
+public class Selection {
+	
+	private Collection<Long> selected = new HashSet(100);
+	private boolean inverted = false;
+	
+	
+	public void add(Long id) { selected.add(id); }
+		
+	public void remove(Long id) { selected.remove(id); }
+	
+	public void invert() { inverted = !inverted; }
+	
+	public void none() { selected.clear(); inverted = false; }
+	
+	public void all() { selected.clear(); inverted = true; }
+	
+	public boolean contains(Long id) { return selected.contains(id) ^ inverted; }
+	
+	public boolean contains(Object un) { return false; }
+
+}



From krater at berlios.de  Sat Apr 22 17:57:29 2006
From: krater at berlios.de (krater at berlios.de)
Date: Sat, 22 Apr 2006 17:57:29 +0200
Subject: [Plantlore-dev] r172 - in trunk/src/net/sf/plantlore: client/export common common/record
Message-ID: <200604221557.k3MFvTw0015495@sheep.berlios.de>

Author: krater
Date: 2006-04-22 17:57:23 +0200 (Sat, 22 Apr 2006)
New Revision: 172

Added:
   trunk/src/net/sf/plantlore/common/record/Record.java
Modified:
   trunk/src/net/sf/plantlore/client/export/Export.java
   trunk/src/net/sf/plantlore/common/Selection.java
   trunk/src/net/sf/plantlore/common/record/Author.java
   trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java
   trunk/src/net/sf/plantlore/common/record/Habitat.java
   trunk/src/net/sf/plantlore/common/record/HistoryChange.java
   trunk/src/net/sf/plantlore/common/record/HistoryColumn.java
   trunk/src/net/sf/plantlore/common/record/HistoryRecord.java
   trunk/src/net/sf/plantlore/common/record/LastUpdate.java
   trunk/src/net/sf/plantlore/common/record/Metadata.java
   trunk/src/net/sf/plantlore/common/record/Occurrence.java
   trunk/src/net/sf/plantlore/common/record/Phytochorion.java
   trunk/src/net/sf/plantlore/common/record/Plant.java
   trunk/src/net/sf/plantlore/common/record/Publication.java
   trunk/src/net/sf/plantlore/common/record/Right.java
   trunk/src/net/sf/plantlore/common/record/Territory.java
   trunk/src/net/sf/plantlore/common/record/User.java
   trunk/src/net/sf/plantlore/common/record/Village.java
Log:
Unification of all records - they now inherit from a common ancestor Record, that has only one method: int getId();
Export.java and Selection.java benefit from this change.

Modified: trunk/src/net/sf/plantlore/client/export/Export.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Export.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/client/export/Export.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -44,22 +44,32 @@
 			
 			for(int i = 0; i < database.getNumRows( result ); i++) {
 				Object[] record = database.next( result );	
-				if( !selection.contains( record ) ) continue; // [!]
+				if( !selection.contains( (Record)record[0] ) ) continue;
 				
 				count++;
 				
 				builder.startNewRecord();
 				for(Object part : record) {
-					if(part instanceof Author) builder.writePartialRecord( (Author)part);
-					else if(part instanceof AuthorOccurrence) builder.writePartialRecord( (AuthorOccurrence)part);
-					else if(part instanceof Habitat) builder.writePartialRecord( (Habitat)part);
-					else if(part instanceof Metadata) builder.writePartialRecord( (Metadata)part);
-					else if(part instanceof Occurrence) builder.writePartialRecord( (Occurrence)part);
-					else if(part instanceof Phytochorion) builder.writePartialRecord( (Phytochorion)part);
-					else if(part instanceof Plant) builder.writePartialRecord( (Plant)part);
-					else if(part instanceof Publication) builder.writePartialRecord( (Publication)part);
-					else if(part instanceof Territory) builder.writePartialRecord( (Territory)part);
-					else if(part instanceof Village) builder.writePartialRecord( (Village)part);
+					if (part instanceof Author)
+						builder.writePartialRecord((Author) part);
+					else if (part instanceof AuthorOccurrence)
+						builder.writePartialRecord((AuthorOccurrence) part);
+					else if (part instanceof Habitat)
+						builder.writePartialRecord((Habitat) part);
+					else if (part instanceof Metadata)
+						builder.writePartialRecord((Metadata) part);
+					else if (part instanceof Occurrence)
+						builder.writePartialRecord((Occurrence) part);
+					else if (part instanceof Phytochorion)
+						builder.writePartialRecord((Phytochorion) part);
+					else if (part instanceof Plant)
+						builder.writePartialRecord((Plant) part);
+					else if (part instanceof Publication)
+						builder.writePartialRecord((Publication) part);
+					else if (part instanceof Territory)
+						builder.writePartialRecord((Territory) part);
+					else if (part instanceof Village)
+						builder.writePartialRecord((Village) part);
 					else /* ERROR */;
 				}
 				builder.finishRecord();

Modified: trunk/src/net/sf/plantlore/common/Selection.java
===================================================================
--- trunk/src/net/sf/plantlore/common/Selection.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/Selection.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -3,7 +3,9 @@
 import java.util.Collection;
 import java.util.HashSet;
 
+import net.sf.plantlore.common.record.Record;
 
+
 public class Selection {
 	
 	private Collection<Long> selected = new HashSet(100);
@@ -22,6 +24,6 @@
 	
 	public boolean contains(Long id) { return selected.contains(id) ^ inverted; }
 	
-	public boolean contains(Object un) { return false; }
+	public boolean contains(Record r) { return selected.contains(r.getId()) ^ inverted; }
 
 }

Modified: trunk/src/net/sf/plantlore/common/record/Author.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Author.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/Author.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -6,8 +6,6 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing TAUTHORS table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents an author
@@ -17,7 +15,7 @@
  *  @author Tomas Kovarik
  *  @version 0.1, Mar 14, 2006
  */
-public class Author implements Serializable {
+public class Author extends Record {
     /** Parameters of the author. For detailed explanation see data model documentation. */
     private int id;
     private String wholeName;

Modified: trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -7,8 +7,6 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing TAUTHORSOCCURENCES table in the DB. This object is used as a 
  *  data holder for Hibernate operations on the server side. On the side of the client, it 
@@ -18,7 +16,7 @@
  * @author Tomas Kovarik
  * @author Lada Oberreiterova
  */
-public class AuthorOccurrence implements Serializable {
+public class AuthorOccurrence extends Record {
     /** Parameters of AuthorOccurence */
     private int id;
     private Author author;

Modified: trunk/src/net/sf/plantlore/common/record/Habitat.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Habitat.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/Habitat.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -7,8 +7,6 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing THABITATS table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a habitat
@@ -18,7 +16,7 @@
  * @author Tomas Kovarik
  * @author Lada Oberreiterova
  */
-public class Habitat implements Serializable {   
+public class Habitat extends Record {   
     /** Parameters of the Habitat */
     private Integer id;
     private Territory territory;
@@ -59,7 +57,7 @@
      *   @return id of the habitat
      *   @see setId
      */
-    public Integer getId() {
+    public int getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/HistoryChange.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/HistoryChange.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/HistoryChange.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -6,8 +6,6 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing THISTORYCHANGE table in the DB. This object is used as a data 
  *  holder for Hibernate operations on the server side. On the side of the client, it represents part
@@ -17,7 +15,7 @@
  *  @author Lada Oberreiterova
  *  @author Tomas Kovarik
  */
-public class HistoryChange implements Serializable {
+public class HistoryChange extends Record {
 
     // Constants for HistoryChange operations (field COPERATION)
     public static final int HISTORYCHANGE_INSERT = 1;

Modified: trunk/src/net/sf/plantlore/common/record/HistoryColumn.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/HistoryColumn.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/HistoryColumn.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -6,8 +6,6 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing THISTORYCOLUMN table in the DB. This object is used as a data
  *  holder for Hibernate operations on the server side. On the side of the client, it represents part
@@ -17,7 +15,7 @@
  *  @author Lada Oberreiterova
  *  @author Tomas Kovarik
  */
-public class HistoryColumn implements Serializable {
+public class HistoryColumn extends Record {
     /** Parameters of the HistoryColumn. For detailed explanation see data model documentation. */
     private int id;    
     private String tableName;

Modified: trunk/src/net/sf/plantlore/common/record/HistoryRecord.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/HistoryRecord.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/HistoryRecord.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -1,7 +1,5 @@
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing THISTORY table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a history
@@ -11,7 +9,7 @@
  *  @author Lada Oberreiterova
  *  @author Tomas Kovarik
  */
-public class HistoryRecord implements Serializable {
+public class HistoryRecord extends Record {
     /** Parameters of the author. For detailed explanation see data model documentation. */
     private int id;
     private HistoryColumn historyColumn;

Modified: trunk/src/net/sf/plantlore/common/record/LastUpdate.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/LastUpdate.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/LastUpdate.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -1,7 +1,5 @@
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing TLASTUPDATE table in the DB. This object is used as a data
  *  holder for Hibernate operations on the server side. On the side of the client, it represents part
@@ -10,7 +8,7 @@
  *
  *  @author Lada Oberreiterova  
  */
-public class LastUpdate {
+public class LastUpdate extends Record {
 
 	 /** Parameters of the LastUpdate. For detailed explanation see data model documentation. */
     private int id;

Modified: trunk/src/net/sf/plantlore/common/record/Metadata.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Metadata.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/Metadata.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -7,8 +7,6 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing TMETADATA table in the DB. This object is used as a data
  *  holder for Hibernate operations on the server side. On the side of the client, it represents
@@ -18,7 +16,7 @@
  * @author Tomas Kovarik
  * @author Lada Oberreiterova
  */
-public class Metadata implements Serializable {
+public class Metadata extends Record {
     /** Parameters of Metadata */
     private Integer id;
     private String technicalContactName;
@@ -67,7 +65,7 @@
      *   @return id of the metadata
      *   @see setId
      */
-    public Integer getId() {
+    public int getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/Occurrence.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -7,10 +7,6 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Date;
-
 /**
  *  Data holder object representing TAUTHORS table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents an occurrence
@@ -21,7 +17,7 @@
  *  @author Tomas Kovarik
  *  @version 0.1, Mar 14, 2006
  */
-public class Occurrence implements Serializable {
+public class Occurrence extends Record {
     /** Parameters of the occurrence. For detailed explanation see data model documentation. */
     private Integer id;
     private String unitIdDb;
@@ -76,7 +72,7 @@
      *   @return id of the occurrence
      *   @see setId
      */
-    public Integer getId() {
+    public int getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/Phytochorion.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Phytochorion.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/Phytochorion.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -7,8 +7,6 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing TPHYTOCHORIA table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a phytochorion
@@ -18,7 +16,7 @@
  * @author Tomas Kovarik
  * @author Lada Oberreiterova
  */
-public class Phytochorion implements Serializable {
+public class Phytochorion extends Record {
     /** Parameters of phytochorion */
     private int id;
     private String code;

Modified: trunk/src/net/sf/plantlore/common/record/Plant.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Plant.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/Plant.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -7,8 +7,6 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing TPLANTS table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a plant
@@ -18,7 +16,7 @@
  *  @author Tomas Kovarik
  *  @version 0.1, Mar 15, 2006
  */
-public class Plant implements Serializable {
+public class Plant extends Record {
     /** Parameters of the plant */    
     private Integer id;
     private String surveyTaxId;
@@ -51,7 +49,7 @@
      *   @return id of the plant
      *   @see setId
      */
-    public Integer getId() {
+    public int getId() {
         return this.id;
     }    
     

Modified: trunk/src/net/sf/plantlore/common/record/Publication.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -7,8 +7,6 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing TPUBLICATIONS table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a publication
@@ -18,7 +16,7 @@
  *  @author Tomas Kovarik
  *  @version 0.1, Mar 15, 2006
  */
-public class Publication implements Serializable {
+public class Publication extends Record {
     /** Parameters of the publication */    
     private int id;
     private String collectionName;

Added: trunk/src/net/sf/plantlore/common/record/Record.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -0,0 +1,9 @@
+package net.sf.plantlore.common.record;
+
+import java.io.Serializable;
+
+public abstract class Record implements Serializable {
+
+	public abstract int getId();
+	
+}

Modified: trunk/src/net/sf/plantlore/common/record/Right.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Right.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/Right.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -7,8 +7,6 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing TRIGHT table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a right
@@ -18,7 +16,7 @@
  * @author Tomas Kovarik
  * @author Lada Oberreiterova
  */
-public class Right implements Serializable {
+public class Right extends Record {
     /** Parameters of the Right record */
     private int id;   
     private int administrator;

Modified: trunk/src/net/sf/plantlore/common/record/Territory.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Territory.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/Territory.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -7,8 +7,6 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing TTERRITORIES table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a territory
@@ -18,7 +16,7 @@
  * @author Tomas Kovarik
  * @author Lada Oberreiterova
  */
-public class Territory implements Serializable {
+public class Territory extends Record {
     /** Parameters of the territory */
     private int id;    
     private String name;

Modified: trunk/src/net/sf/plantlore/common/record/User.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/User.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/User.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -7,15 +7,13 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object containing information about a user
  *
  *  @author Tomas Kovarik
  *  @version 0.1, Mar 15, 2006
  */
-public class User implements Serializable {
+public class User extends Record {
     /** Parameters of the user */
     private int id;
     private String login;

Modified: trunk/src/net/sf/plantlore/common/record/Village.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Village.java	2006-04-22 15:18:40 UTC (rev 171)
+++ trunk/src/net/sf/plantlore/common/record/Village.java	2006-04-22 15:57:23 UTC (rev 172)
@@ -7,8 +7,6 @@
 
 package net.sf.plantlore.common.record;
 
-import java.io.Serializable;
-
 /**
  *  Data holder object representing TVILLAGES table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a village
@@ -18,7 +16,7 @@
  * @author Tomas Kovarik
  * @author Lada Oberreiterova
  */
-public class Village implements Serializable {
+public class Village extends Record {
     /** Parameters of the Village */    
     private int id;   
     private String name;



From fraktalek at berlios.de  Sat Apr 22 19:43:23 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Sat, 22 Apr 2006 19:43:23 +0200
Subject: [Plantlore-dev] r173 - trunk/src/net/sf/plantlore/client
Message-ID: <200604221743.k3MHhNCS023956@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-22 19:43:19 +0200 (Sat, 22 Apr 2006)
New Revision: 173

Added:
   trunk/src/net/sf/plantlore/client/AddEdit.java
Modified:
   trunk/src/net/sf/plantlore/client/AddEditCtrl.java
   trunk/src/net/sf/plantlore/client/AddEditView.form
   trunk/src/net/sf/plantlore/client/AddEditView.java
   trunk/src/net/sf/plantlore/client/AppCore.java
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
Log:
Improved AddEdit dialog, added a standalone model for it.


Added: trunk/src/net/sf/plantlore/client/AddEdit.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEdit.java	2006-04-22 15:57:23 UTC (rev 172)
+++ trunk/src/net/sf/plantlore/client/AddEdit.java	2006-04-22 17:43:19 UTC (rev 173)
@@ -0,0 +1,679 @@
+/*
+ * AddEdit.java
+ *
+ * Created on 20. duben 2006, 14:26
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client;
+
+import java.rmi.RemoteException;
+import java.util.Date;
+import java.util.Observable;
+import net.sf.plantlore.common.Pair;
+import net.sf.plantlore.common.PlantloreConstants;
+import net.sf.plantlore.common.record.Author;
+import net.sf.plantlore.common.record.AuthorOccurrence;
+import net.sf.plantlore.common.record.Habitat;
+import net.sf.plantlore.common.record.Metadata;
+import net.sf.plantlore.common.record.Occurrence;
+import net.sf.plantlore.common.record.Phytochorion;
+import net.sf.plantlore.common.record.Plant;
+import net.sf.plantlore.common.record.Publication;
+import net.sf.plantlore.common.record.Territory;
+import net.sf.plantlore.common.record.Village;
+import net.sf.plantlore.middleware.DBLayer;
+import net.sf.plantlore.middleware.SelectQuery;
+import net.sf.plantlore.server.DBLayerException;
+import org.apache.log4j.Logger;
+
+/**
+ *
+ * @author fraktalek
+ */
+public class AddEdit extends Observable {
+    private Logger logger;
+    private DBLayer database;      
+    
+    private AuthorOccurrence ao;
+    private Pair<String,Integer> author;
+    private Pair<String,Integer> village;
+    private String taxon;
+    private String localityDescription;
+    private Integer year;
+    private String habitatNote;
+    private String occurrenceNote;
+    private Pair<String, Integer> territoryName;
+    private Pair<String, Integer> phytName;
+    private Pair<String, Integer> phytCode;
+    private String phytCountry;
+    private String quadrant;
+    private Double altitude;
+    private Double longitude;
+    private Double latitude;
+    private String source;
+    private Pair<String,Integer> publication;
+    private String herbarium;
+    private Pair<String,Integer> project;
+    private Integer month;
+    private Integer day;
+    private Date time;
+    
+    private Pair<String, Integer>[] plants = null;
+    private Pair<String, Integer>[] authors = null;
+    private Pair<String, Integer>[] villages = null;
+    private Pair<String, Integer>[] territories = null;
+    private Pair<String, Integer>[] phytNames = null;
+    private Pair<String, Integer>[] phytCodes = null;
+    private String[] countries = null;
+    private String[] sources = null;
+    private Pair<String, Integer>[] publications = null;
+    private Pair<String, Integer>[] projects = null;
+
+    //helper variable to avoid recursion potentially caused by phytCode and phytName updates
+    private boolean skipUpdate = false;
+    
+    /** Creates a new instance of AddEdit */
+    public AddEdit(DBLayer database) {
+        this.database = database;
+        logger = Logger.getLogger(this.getClass().getPackage().getName());                
+    }
+ 
+    public void setRecord(AuthorOccurrence ao) {
+        this.ao = ao;
+        author = new Pair(ao.getAuthor().getWholeName(),ao.getAuthor().getId());
+        village = new Pair(ao.getOccurrence().getHabitat().getNearestVillage().getName(), ao.getOccurrence().getHabitat().getNearestVillage().getId());
+        taxon = ao.getOccurrence().getPlant().getTaxon();
+        localityDescription = ao.getOccurrence().getHabitat().getDescription();
+        year = ao.getOccurrence().getYearCollected();
+        
+        occurrenceNote = ao.getOccurrence().getNote();
+        habitatNote = ao.getOccurrence().getHabitat().getNote();
+        territoryName = new Pair(ao.getOccurrence().getHabitat().getTerritory().getName(),ao.getOccurrence().getHabitat().getTerritory().getId());
+        phytName = new Pair(ao.getOccurrence().getHabitat().getPhytochorion().getName(), ao.getOccurrence().getHabitat().getPhytochorion().getId());
+        phytCode = new Pair(ao.getOccurrence().getHabitat().getPhytochorion().getCode(), ao.getOccurrence().getHabitat().getPhytochorion().getId());
+        phytCountry = ao.getOccurrence().getHabitat().getCountry();
+        quadrant = ao.getOccurrence().getHabitat().getQuadrant();
+        altitude = ao.getOccurrence().getHabitat().getAltitude();
+        longitude = ao.getOccurrence().getHabitat().getLongitude();
+        latitude = ao.getOccurrence().getHabitat().getLatitude();
+        source = ao.getOccurrence().getDataSource();
+        publication = new Pair(ao.getOccurrence().getPublication().getReferenceCitation(), ao.getOccurrence().getPublication().getId());
+        herbarium = ao.getOccurrence().getHerbarium();
+        month = ao.getOccurrence().getMonthCollected();
+        day = ao.getOccurrence().getDayCollected();
+        time = ao.getOccurrence().getTimeCollected();
+    }
+
+    public Pair<String, Integer> getAuthor() {
+        return author;
+    }
+
+    public void setAuthor(Pair<String, Integer> author) {
+        this.author = author;
+        logger.debug("Author set to "+author);
+    }
+
+    public Pair<String, Integer> getVillage() {
+        return village;
+    }
+
+    public void setVillage(Pair<String, Integer> village) {
+        this.village = village;
+        logger.debug("Village set to "+village);
+    }
+
+    public String getTaxon() {
+        return taxon;
+    }
+
+    public void setTaxon(String taxon) {
+        this.taxon = taxon;
+        logger.debug("Taxon set to "+ taxon);
+    }
+
+    public String getLocalityDescription() {
+        return localityDescription;
+    }
+
+    public void setLocalityDescription(String localityDescription) {
+        this.localityDescription = localityDescription;
+        logger.debug("LocalityDescription set to "+localityDescription);
+    }
+
+    public Integer getYear() {
+        return year;
+    }
+
+    public void setYear(Integer year) {
+        this.year = year;
+        logger.debug("Year set to "+ year);
+    }
+
+    public String getHabitatNote() {
+        return habitatNote;
+    }
+
+    public void setHabitatNote(String habitatNote) {
+        this.habitatNote = habitatNote;
+        logger.debug("HabitatNote set to "+ habitatNote);
+    }
+
+    public String getOccurrenceNote() {
+        return occurrenceNote;
+    }
+
+    public void setOccurrenceNote(String occurrenceNote) {
+        this.occurrenceNote = occurrenceNote;
+        logger.debug("OccurrenceNote set to "+occurrenceNote);
+    }
+
+    public Pair<String, Integer> getTerritoryName() {
+        return territoryName;
+    }
+
+    public void setTerritoryName(Pair<String, Integer> territoryName) {
+        this.territoryName = territoryName;
+        logger.debug("TerritoryName set to "+territoryName);
+    }
+
+    public Pair<String, Integer> getPhytName() {
+        return phytName;
+    }
+
+    public void setPhytName(Pair<String, Integer> phytName) {
+        if (skipUpdate) {
+            skipUpdate = false;
+            return;
+        }
+        this.phytName = phytName;
+        for (int i=0; i < phytCodes.length; i++)
+            if (phytCodes[i].getSecond() == phytCode.getSecond()) {
+                phytCode = phytCodes[i];
+                skipUpdate = true;
+                break;
+            }
+        setChanged();
+        notifyObservers();
+        logger.debug("PhytName set to "+phytName);
+    }
+
+    public Pair<String, Integer> getPhytCode() {
+        return phytCode;
+    }
+
+    public void setPhytCode(Pair<String, Integer> phytCode) {
+        if (skipUpdate) {
+            skipUpdate = false;
+            return;
+        }
+        this.phytCode = phytCode;
+        for (int i=0; i < phytNames.length; i++)
+            if (phytNames[i].getSecond() == phytCode.getSecond()) {
+                phytName = phytNames[i];
+                skipUpdate = true;
+                break;
+            }
+        setChanged();
+        notifyObservers();
+        logger.debug("PhytCode set to "+phytCode);
+    }
+
+    public String getPhytCountry() {
+        return phytCountry;
+    }
+
+    public void setPhytCountry(String phytCountry) {
+        this.phytCountry = phytCountry;
+        logger.debug("PhytCountry set to "+phytCountry);
+    }
+
+    public String getQuadrant() {
+        return quadrant;
+    }
+
+    public void setQuadrant(String quadrant) {
+        this.quadrant = quadrant;
+        logger.debug("Quadrant set to "+ quadrant);
+    }
+
+    public Double getAltitude() {
+        return altitude;
+    }
+
+    public void setAltitude(Double altitude) {
+        this.altitude = altitude;
+        logger.debug("Altitude set to "+altitude);
+    }
+
+    public Double getLongitude() {
+        return longitude;
+    }
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+        logger.debug("Longitude set to "+longitude);
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+        logger.debug("Latitude set to "+latitude);
+    }
+
+    public String getSource() {
+        return source;
+    }
+
+    public void setSource(String source) {
+        this.source = source;
+        logger.debug("Source set to "+source);
+    }
+
+    public Pair<String, Integer> getPublication() {
+        return publication;
+    }
+
+    public void setPublication(Pair<String, Integer> publication) {
+        this.publication = publication;
+        logger.debug("Publication set to "+publication);
+    }
+
+    public String getHerbarium() {
+        return herbarium;
+    }
+
+    public void setHerbarium(String herbarium) {
+        this.herbarium = herbarium;
+        logger.debug("Herbarium set to "+herbarium);
+    }
+
+    public Integer getMonth() {
+        return month;
+    }
+
+    public void setMonth(Integer month) {
+        this.month = month;
+        logger.debug("Month set to "+month);
+    }
+
+    public Integer getDay() {
+        return day;
+    }
+
+    public void setDay(Integer day) {
+        this.day = day;
+        logger.debug("Day set to "+day);
+    }
+
+    public Date getTime() {
+        return time;
+    }
+
+    public void setTime(Date time) {
+        this.time = time;
+        logger.debug("Time set to "+time);
+    }
+    
+    public Pair<String, Integer>[] getPlants() {
+        if (plants == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Plant p;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Plant.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Plant.TAXON);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                System.out.println("getPlants(): we got "+resultsCount+" results.");
+                records = database.more(resultid, 1, resultsCount);
+                plants = new Pair[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    p = (Plant)((Object[])records[i-1])[0];
+                    plants[i-1] = new Pair(p.getTaxon(), p.getId());
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return plants;
+        } else
+            return plants;
+    }
+    public Pair<String, Integer>[] getAuthors() {
+        if (authors == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Author a;
+            //FIXME:
+            try {
+                sq = database.createQuery(Author.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Author.WHOLENAME);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                authors = new Pair[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    a = (Author)((Object[])records[i-1])[0];
+                    authors[i-1] = new Pair<String, Integer>(a.getWholeName(), a.getId());
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return authors;
+        } else
+            return authors;
+    }
+    
+    public Pair<String, Integer>[] getVillages() {
+        if (villages == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Village v;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Village.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Village.NAME);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                villages = new Pair[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    v = (Village)((Object[])records[i-1])[0];
+                    villages[i-1] = new Pair<String, Integer>(v.getName(), v.getId());
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return villages;
+        } else
+            return villages;
+    }
+
+    public Pair<String, Integer>[] getTerritories() {
+        if (territories == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Territory t;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Territory.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Territory.NAME);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                territories = new Pair[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    t = (Territory)((Object[])records[i-1])[0];
+                    territories[i-1] = new Pair<String,Integer>(t.getName(), t.getId());
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return territories;
+        } else
+            return territories;
+    }
+    
+    public Pair<String, Integer>[] getPhytNames() {
+        if (phytNames == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Phytochorion p;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Phytochorion.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Phytochorion.NAME);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                phytNames = new Pair[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    p = (Phytochorion)((Object[])records[i-1])[0];
+                    phytNames[i-1] = new Pair<String,Integer>(p.getName(), p.getId());
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return phytNames;
+        } else
+            return phytNames;
+    }
+    
+    public Pair<String, Integer>[] getPhytCodes() {
+        if (phytCodes == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Phytochorion p;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Phytochorion.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Phytochorion.CODE);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                phytCodes = new Pair[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    p = (Phytochorion)((Object[])records[i-1])[0];
+                    phytCodes[i-1] = new Pair<String,Integer>(p.getCode(), p.getId());
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return phytCodes;
+        } else
+            return phytCodes;
+    }
+    
+    public String[] getCountries() {
+        if (countries == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            int uniqueCount = 0;
+            String[] countriesTemp;
+            Object[] records;
+            Habitat h;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Habitat.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Habitat.COUNTRY);
+                resultid = database.executeQuery(sq); // the values can be doubled, we need to filter them 
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                countriesTemp = new String[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    h = (Habitat)((Object[])records[i-1])[0];
+                    if (h.getCountry() ==  null)
+                        System.out.println("\twas null");
+                    if (i == 1) {
+                        countriesTemp[0] = h.getCountry();
+                        uniqueCount++;
+                        continue;
+                    }
+                        
+                    if (h.getCountry()!=null && !h.getCountry().equals(countriesTemp[uniqueCount-1])) { //filter duplicates and null values
+                        countriesTemp[uniqueCount] = h.getCountry();
+                        uniqueCount++;
+                    }
+                }
+                
+                countries = new String[uniqueCount];
+                for (int i = 0; i < uniqueCount; i++) {
+                    countries[i] = countriesTemp[i];
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return countries;
+        } else
+            return countries;        
+    }
+    
+    public String[] getSources() {
+        if (sources == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Occurrence o;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Occurrence.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Occurrence.DATASOURCE);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                sources = new String[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    o = (Occurrence)((Object[])records[i-1])[0];
+                    sources[i-1] = o.getDataSource();
+                    System.out.println("Sources: \""+o.getDataSource()+"\"");
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return sources;
+        } else
+            return sources;
+    }
+    
+    public Pair<String, Integer>[] getPublications() {
+        if (publications == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Publication p;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Publication.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Publication.REFERENCECITATION);
+                //sq.addProjection(PlantloreConstants.PROJ_DISTINCT,Publication.REFERENCECITATION);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                publications = new Pair[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    p = (Publication)((Object[])records[i-1])[0];
+                    publications[i-1] = new Pair(p.getReferenceCitation(), p.getId());
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return publications;
+        } else
+            return publications;
+    }
+
+    public Pair<String, Integer>[] getProjects() {
+        if (projects == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            Metadata m;
+            
+            //FIXME:
+            try {
+                sq = database.createQuery(Metadata.class);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, Metadata.DATASETTITLE);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                projects = new Pair[resultsCount];
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    m = (Metadata)((Object[])records[i-1])[0];
+                    projects[i-1] = new Pair(m.getDataSetTitle(), m.getId());
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return projects;
+        } else
+            return projects;
+    }
+
+    public DBLayer getDatabase() {
+        return database;
+    }
+
+    public void setDatabase(DBLayer database) {
+        this.database = database;
+    }
+
+    public Pair<String, Integer> getProject() {
+        return project;
+    }
+
+    public void setProject(Pair<String, Integer> project) {
+        logger.debug("Project set to "+project);
+        this.project = project;
+    }
+    
+}

Modified: trunk/src/net/sf/plantlore/client/AddEditCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditCtrl.java	2006-04-22 15:57:23 UTC (rev 172)
+++ trunk/src/net/sf/plantlore/client/AddEditCtrl.java	2006-04-22 17:43:19 UTC (rev 173)
@@ -9,6 +9,16 @@
 
 package net.sf.plantlore.client;
 
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.FocusEvent;
+import java.awt.event.FocusListener;
+import java.awt.event.ItemEvent;
+import java.awt.event.ItemListener;
+import javax.swing.JComboBox;
+import javax.swing.JTextArea;
+import net.sf.plantlore.common.Pair;
+
 /**
  *
  * @author reimei
@@ -16,11 +26,104 @@
 public class AddEditCtrl {
     private boolean inEditMode = false;
     private boolean inAddMode = true;
+    private AddEdit model;
+    private AddEditView view;
     
     /** Creates a new instance of AddEditCtrl */
-    public AddEditCtrl(boolean edit) {
+    public AddEditCtrl(AddEdit model, AddEditView view, boolean edit) {
         this.inEditMode = edit;
         this.inAddMode = ! edit;
+        this.model = model;
+        this.view = view;
+        
+        view.authorComboBox.addActionListener(new ComboListener());
+        view.townComboBox.addActionListener(new ComboListener());
+        view.territoryNameCombo.addActionListener(new ComboListener());
+        view.phytNameCombo.addActionListener(new ComboListener());
+        view.phytCodeCombo.addActionListener(new ComboListener());
+        view.phytCountryCombo.addActionListener(new ComboListener());
+        view.sourceCombo.addActionListener(new ComboListener());
+        view.publicationCombo.addActionListener(new ComboListener());
+        view.projectCombo.addActionListener(new ComboListener());
+        
+        view.taxonTextArea.addFocusListener(new TaxonAreaListener());
+        view.descriptionArea.addFocusListener(new PlaceAreaListener());
+        view.locationNoteArea.addFocusListener(new LocationAreaListener());
+        view.occurrenceNoteArea.addFocusListener(new OccurrenceAreaListener());
     }
     
+    class ComboListener implements ActionListener {
+        public void actionPerformed(ActionEvent e) {
+            JComboBox c = (JComboBox)e.getSource();
+            String command = e.getActionCommand();
+            if (command.equals("authorComboBox"))
+                model.setAuthor((Pair<String, Integer>) c.getSelectedItem());
+                
+            if (command.equals("townComboBox"))
+                model.setVillage((Pair<String, Integer>) c.getSelectedItem());
+           
+            if (command.equals("territoryNameCombo"))
+                model.setTerritoryName((Pair<String, Integer>) c.getSelectedItem());
+
+            if (command.equals("phytNameCombo"))
+                model.setPhytName((Pair<String, Integer>) c.getSelectedItem());
+           
+            if (command.equals("phytCodeCombo"))
+                model.setPhytCode((Pair<String, Integer>) c.getSelectedItem());
+           
+            if (command.equals("phytCountryCombo"))
+                model.setPhytCountry((String) c.getSelectedItem());
+
+            if (command.equals("sourceCombo"))
+                model.setSource((String) c.getSelectedItem());
+           
+            if (command.equals("publicationCombo"))
+                model.setPublication((Pair<String, Integer>) c.getSelectedItem());
+           
+            if (command.equals("projectCombo"))
+                model.setProject((Pair<String, Integer>) c.getSelectedItem());
+           
+        }
+        
+    }//class ComboListener
+    
+    class TaxonAreaListener implements FocusListener {
+        public void focusGained(FocusEvent e) {
+        }
+
+        public void focusLost(FocusEvent e) {
+            JTextArea ta = (JTextArea) e.getSource();
+            model.setTaxon(ta.getText());
+        }
+    }//taxonAreaListener
+    
+    class PlaceAreaListener implements FocusListener {
+        public void focusGained(FocusEvent e) {
+        }
+
+        public void focusLost(FocusEvent e) {
+            JTextArea ta = (JTextArea) e.getSource();
+            model.setLocalityDescription(ta.getText());
+        }
+    }//placeAreaListener
+
+    class LocationAreaListener implements FocusListener {
+        public void focusGained(FocusEvent e) {
+        }
+
+        public void focusLost(FocusEvent e) {
+            JTextArea ta = (JTextArea) e.getSource();
+            model.setHabitatNote(ta.getText());
+        }
+    }//LocationAreaListener
+
+    class OccurrenceAreaListener implements FocusListener {
+        public void focusGained(FocusEvent e) {
+        }
+
+        public void focusLost(FocusEvent e) {
+            JTextArea ta = (JTextArea) e.getSource();
+            model.setOccurrenceNote(ta.getText());
+        }
+    }//LocationAreaListener
 }

Modified: trunk/src/net/sf/plantlore/client/AddEditView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditView.form	2006-04-22 15:57:23 UTC (rev 172)
+++ trunk/src/net/sf/plantlore/client/AddEditView.form	2006-04-22 17:43:19 UTC (rev 173)
@@ -17,7 +17,7 @@
     <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
     <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
     <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
-    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,2,-19,0,0,3,75"/>
+    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,2,-19,0,0,3,-88"/>
   </AuxValues>
 
   <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout"/>
@@ -56,13 +56,14 @@
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
                   <Group type="103" groupAlignment="0" attributes="0">
-                      <Group type="102" alignment="1" attributes="0">
+                      <Group type="102" attributes="0">
                           <Component id="yearSpinner" min="-2" pref="73" max="-2" attributes="0"/>
-                          <EmptySpace pref="80" max="32767" attributes="0"/>
+                          <EmptySpace pref="183" max="32767" attributes="0"/>
                           <Component id="checklistButton" min="-2" max="-2" attributes="0"/>
+                          <EmptySpace max="-2" attributes="0"/>
                       </Group>
-                      <Component id="authorComboBox" alignment="0" pref="245" max="32767" attributes="1"/>
-                      <Component id="jScrollPane3" alignment="0" pref="245" max="32767" attributes="1"/>
+                      <Component id="authorComboBox" pref="348" max="32767" attributes="1"/>
+                      <Component id="jScrollPane3" linkSize="9" alignment="0" min="-2" pref="315" max="-2" attributes="1"/>
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
                   <Group type="103" groupAlignment="1" attributes="0">
@@ -70,10 +71,10 @@
                       <Component id="jLabel2" min="-2" max="-2" attributes="0"/>
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
-                  <Group type="103" groupAlignment="0" attributes="0">
-                      <Component id="jScrollPane2" alignment="0" pref="358" max="32767" attributes="1"/>
-                      <Component id="townComboBox" alignment="0" pref="358" max="32767" attributes="1"/>
+                  <Group type="103" groupAlignment="0" max="-2" attributes="0">
+                      <Component id="jScrollPane2" linkSize="9" alignment="1" pref="348" max="32767" attributes="1"/>
                       <Component id="jToggleButton1" min="-2" max="-2" attributes="0"/>
+                      <Component id="townComboBox" alignment="1" max="32767" attributes="1"/>
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
               </Group>
@@ -84,24 +85,26 @@
               <Group type="102" alignment="1" attributes="0">
                   <Group type="103" groupAlignment="3" attributes="0">
                       <Component id="AuthorLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="townComboBox" alignment="3" min="-2" pref="24" max="-2" attributes="0"/>
                       <Component id="authorComboBox" alignment="3" min="-2" max="-2" attributes="0"/>
-                      <Component id="TownLabel" alignment="3" min="-2" max="-2" attributes="0"/>
-                      <Component id="townComboBox" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="TownLabel" alignment="3" min="-2" pref="8" max="-2" attributes="0"/>
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
                   <Group type="103" groupAlignment="0" attributes="0">
                       <Group type="102" attributes="0">
-                          <Group type="103" groupAlignment="0" max="-2" attributes="0">
-                              <Component id="jScrollPane2" max="32767" attributes="1"/>
-                              <Component id="TaxonLabel" min="-2" max="-2" attributes="0"/>
-                              <Component id="jScrollPane3" alignment="0" max="32767" attributes="1"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="jScrollPane3" max="32767" attributes="1"/>
+                              <Group type="103" alignment="0" groupAlignment="0" max="-2" attributes="0">
+                                  <Component id="jScrollPane2" max="32767" attributes="1"/>
+                                  <Component id="TaxonLabel" min="-2" max="-2" attributes="0"/>
+                              </Group>
                           </Group>
-                          <EmptySpace max="-2" attributes="0"/>
+                          <EmptySpace pref="30" max="32767" attributes="0"/>
                           <Group type="103" groupAlignment="3" attributes="0">
-                              <Component id="jToggleButton1" alignment="3" min="-2" max="-2" attributes="1"/>
                               <Component id="checklistButton" alignment="3" max="32767" attributes="1"/>
                               <Component id="YearLabel" alignment="3" min="-2" max="-2" attributes="0"/>
                               <Component id="yearSpinner" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="jToggleButton1" alignment="3" min="-2" max="-2" attributes="1"/>
                           </Group>
                       </Group>
                       <Component id="jLabel2" min="-2" max="-2" attributes="0"/>
@@ -132,7 +135,7 @@
           <AuxValues>
             <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getAuthors());&#xa;"/>
             <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="Object [] items;"/>
-            <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)authorComboBox).setStrict(true);"/>
+            <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)authorComboBox).setStrict(true);&#xa;authorComboBox.setActionCommand(&quot;authorComboBox&quot;);"/>
             <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
           </AuxValues>
         </Component>
@@ -153,7 +156,7 @@
           <AuxValues>
             <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getVillages());"/>
             <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="items = new Object[] {&quot;Praha&quot;, &quot;Brno&quot;, &quot;Turnov&quot;, &quot;Trebic&quot;};"/>
-            <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)townComboBox).setStrict(true);"/>
+            <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)townComboBox).setStrict(true);&#xa;townComboBox.setActionCommand(&quot;townComboBox&quot;);"/>
             <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
           </AuxValues>
         </Component>
@@ -288,10 +291,10 @@
                           <Group type="103" groupAlignment="0" attributes="0">
                               <Group type="102" attributes="0">
                                   <Component id="jPanel1" min="-2" max="-2" attributes="1"/>
-                                  <EmptySpace pref="30" max="32767" attributes="0"/>
+                                  <EmptySpace max="-2" attributes="0"/>
                                   <Component id="jPanel6" min="-2" max="-2" attributes="1"/>
                               </Group>
-                              <Component id="jPanel5" max="32767" attributes="1"/>
+                              <Component id="jPanel5" alignment="0" min="-2" max="-2" attributes="1"/>
                           </Group>
                           <EmptySpace max="-2" attributes="0"/>
                           <Group type="103" groupAlignment="1" attributes="0">
@@ -315,18 +318,15 @@
                   <Group type="103" groupAlignment="0" attributes="0">
                       <Group type="102" attributes="0">
                           <Group type="103" groupAlignment="0" attributes="0">
-                              <Component id="jPanel6" alignment="0" max="32767" attributes="1"/>
-                              <Component id="jPanel1" alignment="0" max="32767" attributes="1"/>
+                              <Component id="jPanel6" max="32767" attributes="1"/>
+                              <Component id="jPanel1" alignment="1" max="32767" attributes="1"/>
                           </Group>
                           <EmptySpace max="-2" attributes="0"/>
                           <Component id="jPanel4" min="-2" max="-2" attributes="1"/>
-                          <EmptySpace min="-2" pref="109" max="-2" attributes="0"/>
                       </Group>
-                      <Group type="102" attributes="0">
-                          <Component id="jPanel9" min="-2" max="-2" attributes="1"/>
-                          <EmptySpace max="-2" attributes="0"/>
-                      </Group>
+                      <Component id="jPanel9" min="-2" max="-2" attributes="1"/>
                   </Group>
+                  <EmptySpace min="-2" pref="109" max="-2" attributes="0"/>
               </Group>
           </Group>
         </DimensionLayout>
@@ -362,7 +362,7 @@
                       <Component id="jLabel5" min="-2" max="-2" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                       <Component id="timeFormattedTextField" min="-2" pref="60" max="-2" attributes="0"/>
-                      <EmptySpace pref="65" max="32767" attributes="0"/>
+                      <EmptySpace pref="158" max="32767" attributes="0"/>
                   </Group>
               </Group>
             </DimensionLayout>
@@ -420,6 +420,7 @@
             </Component>
             <Component class="javax.swing.JFormattedTextField" name="timeFormattedTextField">
               <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new JFormattedTextField(new SimpleDateFormat(&quot;HH:mm:ss&quot;));"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -444,36 +445,38 @@
               <Group type="103" groupAlignment="0" attributes="0">
                   <Group type="102" attributes="0">
                       <EmptySpace max="-2" attributes="0"/>
-                      <Group type="103" groupAlignment="1" max="-2" attributes="0">
+                      <Group type="103" groupAlignment="0" attributes="0">
                           <Group type="102" alignment="0" attributes="0">
-                              <EmptySpace min="-2" pref="19" max="-2" attributes="0"/>
-                              <Component id="jLabel11" min="-2" max="-2" attributes="0"/>
-                              <EmptySpace max="-2" attributes="0"/>
-                              <Component id="territoryNameCombo" linkSize="7" min="-2" pref="99" max="-2" attributes="0"/>
-                          </Group>
-                          <Group type="102" alignment="0" attributes="0">
                               <Group type="103" groupAlignment="1" attributes="0">
                                   <Component id="jLabel10" alignment="1" min="-2" max="-2" attributes="0"/>
                                   <Component id="jLabel13" alignment="1" min="-2" max="-2" attributes="0"/>
                               </Group>
                               <EmptySpace max="-2" attributes="0"/>
                               <Group type="103" groupAlignment="0" attributes="0">
-                                  <Component id="phytCountryCombo" linkSize="7" pref="99" max="32767" attributes="0"/>
-                                  <Component id="phytNameCombo" linkSize="7" alignment="0" pref="99" max="32767" attributes="0"/>
+                                  <Component id="phytCountryCombo" pref="173" max="32767" attributes="1"/>
+                                  <Component id="phytNameCombo" alignment="0" pref="173" max="32767" attributes="1"/>
                               </Group>
                           </Group>
+                          <Group type="102" alignment="0" attributes="1">
+                              <EmptySpace min="-2" pref="19" max="-2" attributes="0"/>
+                              <Component id="jLabel11" min="-2" max="-2" attributes="0"/>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Component id="territoryNameCombo" pref="173" max="32767" attributes="0"/>
+                          </Group>
                       </Group>
-                      <EmptySpace pref="31" max="32767" attributes="0"/>
-                      <Group type="103" groupAlignment="1" attributes="0">
-                          <Component id="jLabel14" min="-2" max="-2" attributes="0"/>
-                          <Component id="jLabel9" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Component id="jLabel9" alignment="1" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel14" alignment="1" min="-2" max="-2" attributes="0"/>
                       </Group>
                       <EmptySpace max="-2" attributes="0"/>
-                      <Group type="103" groupAlignment="0" max="-2" attributes="0">
-                          <Component id="quadrantTextField" max="32767" attributes="1"/>
-                          <Component id="phytCodeCombo" alignment="0" pref="111" max="32767" attributes="1"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Group type="102" attributes="0">
+                              <Component id="quadrantTextField" linkSize="10" min="-2" max="-2" attributes="1"/>
+                              <EmptySpace max="-2" attributes="0"/>
+                          </Group>
+                          <Component id="phytCodeCombo" linkSize="10" alignment="0" pref="90" max="32767" attributes="1"/>
                       </Group>
-                      <EmptySpace max="-2" attributes="0"/>
                   </Group>
               </Group>
             </DimensionLayout>
@@ -487,24 +490,22 @@
                       </Group>
                       <EmptySpace max="-2" attributes="0"/>
                       <Group type="103" groupAlignment="0" attributes="0">
-                          <Group type="102" attributes="0">
-                              <Group type="103" groupAlignment="0" attributes="0">
-                                  <Group type="103" groupAlignment="3" attributes="0">
-                                      <Component id="jLabel13" alignment="3" min="-2" max="-2" attributes="0"/>
-                                      <Component id="phytNameCombo" alignment="3" min="-2" max="-2" attributes="0"/>
-                                  </Group>
-                                  <Component id="phytCodeCombo" min="-2" max="-2" attributes="0"/>
-                              </Group>
-                              <EmptySpace max="-2" attributes="0"/>
-                              <Group type="103" groupAlignment="3" attributes="0">
-                                  <Component id="jLabel10" alignment="3" min="-2" max="-2" attributes="0"/>
-                                  <Component id="jLabel9" alignment="3" min="-2" max="-2" attributes="0"/>
-                                  <Component id="phytCountryCombo" alignment="3" min="-2" max="-2" attributes="0"/>
-                                  <Component id="quadrantTextField" alignment="3" min="-2" max="-2" attributes="0"/>
-                              </Group>
+                          <Group type="103" alignment="0" groupAlignment="3" attributes="0">
+                              <Component id="jLabel13" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="phytNameCombo" alignment="3" min="-2" max="-2" attributes="0"/>
                           </Group>
-                          <Component id="jLabel14" alignment="0" min="-2" max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="jLabel14" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="phytCodeCombo" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
                       </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="jLabel10" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="phytCountryCombo" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel9" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="quadrantTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
                       <EmptySpace pref="17" max="32767" attributes="0"/>
                   </Group>
               </Group>
@@ -559,7 +560,7 @@
               </Properties>
               <AuxValues>
                 <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getTerritories()); "/>
-                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)territoryNameCombo).setStrict(true);"/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)territoryNameCombo).setStrict(true);&#xa;territoryNameCombo.setActionCommand(&quot;territoryNameCombo&quot;);"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -571,7 +572,7 @@
               </Properties>
               <AuxValues>
                 <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getPhytNames()); "/>
-                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)phytNameCombo).setStrict(true);"/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)phytNameCombo).setStrict(true);&#xa;phytNameCombo.setActionCommand(&quot;phytNameCombo&quot;);&#xa;"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -583,7 +584,7 @@
               </Properties>
               <AuxValues>
                 <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getPhytCodes()); "/>
-                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)phytCodeCombo).setStrict(true);"/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)phytCodeCombo).setStrict(true);&#xa;phytCodeCombo.setActionCommand(&quot;phytCodeCombo&quot;);"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -595,7 +596,7 @@
               </Properties>
               <AuxValues>
                 <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getCountries()); "/>
-                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)phytCountryCombo).setStrict(false);"/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)phytCountryCombo).setStrict(false);&#xa;phytCountryCombo.setActionCommand(&quot;phytCountryCombo&quot;);"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -635,8 +636,8 @@
                       <Group type="103" groupAlignment="0" max="-2" attributes="0">
                           <Component id="projectCombo" max="32767" attributes="1"/>
                           <Component id="publicationCombo" max="32767" attributes="1"/>
-                          <Component id="sourceCombo" max="32767" attributes="1"/>
                           <Component id="herbariumTextField" alignment="0" pref="113" max="32767" attributes="1"/>
+                          <Component id="sourceCombo" alignment="0" pref="171" max="32767" attributes="1"/>
                       </Group>
                       <EmptySpace max="32767" attributes="0"/>
                   </Group>
@@ -715,7 +716,7 @@
               </Properties>
               <AuxValues>
                 <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getSources()); "/>
-                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)sourceCombo).setStrict(false);"/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)sourceCombo).setStrict(false);&#xa;sourceCombo.setActionCommand(&quot;sourceCombo&quot;);&#xa;"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -727,7 +728,7 @@
               </Properties>
               <AuxValues>
                 <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getPublications());"/>
-                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)publicationCombo).setStrict(true);"/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)publicationCombo).setStrict(true);&#xa;publicationCombo.setActionCommand(&quot;publicationCombo&quot;);&#xa;"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -739,7 +740,7 @@
               </Properties>
               <AuxValues>
                 <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getProjects());"/>
-                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)projectCombo).setStrict(true);"/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)projectCombo).setStrict(true);&#xa;projectCombo.setActionCommand(&quot;projectCombo&quot;);&#xa;"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -764,7 +765,7 @@
               <Group type="103" groupAlignment="0" attributes="0">
                   <Group type="102" alignment="0" attributes="0">
                       <EmptySpace max="-2" attributes="0"/>
-                      <Component id="jScrollPane4" pref="247" max="32767" attributes="0"/>
+                      <Component id="jScrollPane4" pref="306" max="32767" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                   </Group>
               </Group>
@@ -786,7 +787,7 @@
 
               <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
               <SubComponents>
-                <Component class="javax.swing.JTextArea" name="jTextArea2">
+                <Component class="javax.swing.JTextArea" name="locationNoteArea">
                   <Properties>
                     <Property name="columns" type="int" value="20"/>
                     <Property name="rows" type="int" value="5"/>
@@ -1020,7 +1021,7 @@
               <Group type="103" groupAlignment="0" attributes="0">
                   <Group type="102" alignment="0" attributes="0">
                       <EmptySpace max="-2" attributes="0"/>
-                      <Component id="jScrollPane5" pref="247" max="32767" attributes="0"/>
+                      <Component id="jScrollPane5" pref="306" max="32767" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                   </Group>
               </Group>
@@ -1042,7 +1043,7 @@
 
               <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
               <SubComponents>
-                <Component class="javax.swing.JTextArea" name="jTextArea3">
+                <Component class="javax.swing.JTextArea" name="occurrenceNoteArea">
                   <Properties>
                     <Property name="columns" type="int" value="20"/>
                     <Property name="rows" type="int" value="5"/>
@@ -1076,9 +1077,9 @@
         <DimensionLayout dim="0">
           <Group type="103" groupAlignment="0" attributes="0">
               <Group type="102" alignment="1" attributes="0">
-                  <EmptySpace min="-2" pref="163" max="-2" attributes="0"/>
+                  <EmptySpace min="-2" pref="270" max="-2" attributes="0"/>
                   <Component id="jButton4" linkSize="4" min="-2" max="-2" attributes="0"/>
-                  <EmptySpace pref="308" max="32767" attributes="0"/>
+                  <EmptySpace pref="294" max="32767" attributes="0"/>
                   <Component id="jButton2" linkSize="4" min="-2" pref="87" max="-2" attributes="0"/>
                   <EmptySpace max="-2" attributes="0"/>
                   <Component id="jButton3" linkSize="4" min="-2" max="-2" attributes="0"/>

Modified: trunk/src/net/sf/plantlore/client/AddEditView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditView.java	2006-04-22 15:57:23 UTC (rev 172)
+++ trunk/src/net/sf/plantlore/client/AddEditView.java	2006-04-22 17:43:19 UTC (rev 173)
@@ -7,7 +7,14 @@
 package net.sf.plantlore.client;
 
 import java.awt.Dimension;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Date;
 import java.util.Hashtable;
+import java.util.Observable;
+import java.util.Observer;
+import javax.swing.JDialog;
+import javax.swing.JFormattedTextField;
 import javax.swing.JPanel;
 import net.sf.plantlore.common.AutoComboBox;
 import net.sf.plantlore.common.AutoTextArea;
@@ -18,28 +25,27 @@
  *
  * @author  reimei
  */
-public class AddEditView extends javax.swing.JDialog {
+public class AddEditView extends javax.swing.JDialog implements Observer {
+    private static final int DIALOG_WIDTH = 930;
     private boolean visible=false;
-    private AppCore model;
-    private Object[] row;
-    private AuthorOccurrence ao;
+    private AddEdit model;
     private boolean inEditMode = false;
     private boolean inAddMode = true;
     
     /** Creates new form AddEdit2 */
-    public AddEditView(java.awt.Frame parent, boolean modal, AppCore model, boolean edit) {
+    public AddEditView(java.awt.Frame parent, boolean modal, AddEdit model, boolean edit) {
         super(parent, modal);
         this.model = model;
+        model.addObserver(this);
         this.inEditMode = edit;
         this.inAddMode = ! edit;
-        row = model.getSelectedRow();
-        ao = (AuthorOccurrence)row[row.length-1];
+        setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
         initComponents();
         if (inEditMode)
-            setComponentData();
+            loadComponentData();
         jPanel3.setVisible(visible);
-        jPanel2.setPreferredSize(new Dimension(720,170));
-        jPanel8.setPreferredSize(new Dimension(720,50));
+        jPanel2.setPreferredSize(new Dimension(DIALOG_WIDTH,190));
+        jPanel8.setPreferredSize(new Dimension(DIALOG_WIDTH,50));
         this.pack();        
     }
     
@@ -81,7 +87,7 @@
         jLabel4 = new javax.swing.JLabel();
         daySpinner = new javax.swing.JSpinner();
         jLabel5 = new javax.swing.JLabel();
-        timeFormattedTextField = new javax.swing.JFormattedTextField();
+        timeFormattedTextField = new JFormattedTextField(new SimpleDateFormat("HH:mm:ss"));
         jPanel5 = new javax.swing.JPanel();
         jLabel9 = new javax.swing.JLabel();
         jLabel10 = new javax.swing.JLabel();
@@ -104,7 +110,7 @@
         projectCombo = new AutoComboBox(model.getProjects());
         jPanel7 = new javax.swing.JPanel();
         jScrollPane4 = new javax.swing.JScrollPane();
-        jTextArea2 = new javax.swing.JTextArea();
+        locationNoteArea = new javax.swing.JTextArea();
         jPanel1 = new javax.swing.JPanel();
         jLabel6 = new javax.swing.JLabel();
         altitudeFormattedTextField = new javax.swing.JFormattedTextField();
@@ -117,7 +123,7 @@
         SJTSKButton = new javax.swing.JRadioButton();
         jPanel9 = new javax.swing.JPanel();
         jScrollPane5 = new javax.swing.JScrollPane();
-        jTextArea3 = new javax.swing.JTextArea();
+        occurrenceNoteArea = new javax.swing.JTextArea();
         jPanel8 = new javax.swing.JPanel();
         jButton2 = new javax.swing.JButton();
         jButton3 = new javax.swing.JButton();
@@ -130,6 +136,7 @@
         AuthorLabel.setText("Author:");
 
         ((AutoComboBox)authorComboBox).setStrict(true);
+        authorComboBox.setActionCommand("authorComboBox");
         authorComboBox.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 authorComboBoxActionPerformed(evt);
@@ -139,6 +146,7 @@
         TownLabel.setText("Nearest bigger seat:");
 
         ((AutoComboBox)townComboBox).setStrict(true);
+        townComboBox.setActionCommand("townComboBox");
 
         TaxonLabel.setText("Taxon:");
 
@@ -178,44 +186,49 @@
                     .add(TaxonLabel))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
-                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
+                    .add(jPanel2Layout.createSequentialGroup()
                         .add(yearSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 80, Short.MAX_VALUE)
-                        .add(checklistButton))
-                    .add(authorComboBox, 0, 245, Short.MAX_VALUE)
-                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 183, Short.MAX_VALUE)
+                        .add(checklistButton)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
+                    .add(authorComboBox, 0, 348, Short.MAX_VALUE)
+                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 315, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                     .add(TownLabel)
                     .add(jLabel2))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
-                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
-                    .add(townComboBox, 0, 358, Short.MAX_VALUE)
-                    .add(jToggleButton1))
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
+                    .add(jToggleButton1)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, townComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                 .addContainerGap())
         );
+
+        jPanel2Layout.linkSize(new java.awt.Component[] {jScrollPane2, jScrollPane3}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
+
         jPanel2Layout.setVerticalGroup(
             jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                     .add(AuthorLabel)
+                    .add(townComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(authorComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                    .add(TownLabel)
-                    .add(townComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(TownLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jPanel2Layout.createSequentialGroup()
-                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
-                            .add(jScrollPane2)
-                            .add(TaxonLabel)
-                            .add(jScrollPane3))
-                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(jScrollPane3)
+                            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
+                                .add(jScrollPane2)
+                                .add(TaxonLabel)))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 30, Short.MAX_VALUE)
                         .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                            .add(jToggleButton1)
                             .add(checklistButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                             .add(YearLabel)
-                            .add(yearSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
+                            .add(yearSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(jToggleButton1)))
                     .add(jLabel2))
                 .addContainerGap())
         );
@@ -249,7 +262,7 @@
                 .add(jLabel5)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(timeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                .addContainerGap(65, Short.MAX_VALUE))
+                .addContainerGap(158, Short.MAX_VALUE))
         );
         jPanel4Layout.setVerticalGroup(
             jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
@@ -277,12 +290,16 @@
         jLabel14.setText("Phytochoria code:");
 
         ((AutoComboBox)territoryNameCombo).setStrict(true);
+        territoryNameCombo.setActionCommand("territoryNameCombo");
 
         ((AutoComboBox)phytNameCombo).setStrict(true);
+        phytNameCombo.setActionCommand("phytNameCombo");
 
         ((AutoComboBox)phytCodeCombo).setStrict(true);
+        phytCodeCombo.setActionCommand("phytCodeCombo");
 
         ((AutoComboBox)phytCountryCombo).setStrict(false);
+        phytCountryCombo.setActionCommand("phytCountryCombo");
 
         org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
         jPanel5.setLayout(jPanel5Layout);
@@ -290,32 +307,33 @@
             jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(jPanel5Layout.createSequentialGroup()
                 .addContainerGap()
-                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
-                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5Layout.createSequentialGroup()
-                        .add(19, 19, 19)
-                        .add(jLabel11)
-                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                        .add(territoryNameCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
-                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5Layout.createSequentialGroup()
+                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel5Layout.createSequentialGroup()
                         .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                             .add(jLabel10)
                             .add(jLabel13))
                         .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                         .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
-                            .add(phytCountryCombo, 0, 99, Short.MAX_VALUE)
-                            .add(phytNameCombo, 0, 99, Short.MAX_VALUE))))
-                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 31, Short.MAX_VALUE)
-                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
-                    .add(jLabel14)
-                    .add(jLabel9))
+                            .add(phytCountryCombo, 0, 173, Short.MAX_VALUE)
+                            .add(phytNameCombo, 0, 173, Short.MAX_VALUE)))
+                    .add(jPanel5Layout.createSequentialGroup()
+                        .add(19, 19, 19)
+                        .add(jLabel11)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(territoryNameCombo, 0, 173, Short.MAX_VALUE)))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
-                    .add(quadrantTextField)
-                    .add(phytCodeCombo, 0, 111, Short.MAX_VALUE))
-                .addContainerGap())
+                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel9)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel14))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel5Layout.createSequentialGroup()
+                        .add(quadrantTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                        .addContainerGap())
+                    .add(phytCodeCombo, 0, 90, Short.MAX_VALUE)))
         );
 
-        jPanel5Layout.linkSize(new java.awt.Component[] {phytCountryCombo, phytNameCombo, territoryNameCombo}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
+        jPanel5Layout.linkSize(new java.awt.Component[] {phytCodeCombo, quadrantTextField}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
 
         jPanel5Layout.setVerticalGroup(
             jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
@@ -326,19 +344,18 @@
                     .add(territoryNameCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
-                    .add(jPanel5Layout.createSequentialGroup()
-                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
-                            .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                                .add(jLabel13)
-                                .add(phytNameCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
-                            .add(phytCodeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
-                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                            .add(jLabel10)
-                            .add(jLabel9)
-                            .add(phytCountryCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                            .add(quadrantTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
-                    .add(jLabel14))
+                    .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                        .add(jLabel13)
+                        .add(phytNameCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                        .add(jLabel14)
+                        .add(phytCodeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel10)
+                    .add(phytCountryCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(jLabel9)
+                    .add(quadrantTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addContainerGap(17, Short.MAX_VALUE))
         );
 
@@ -352,10 +369,13 @@
         sourceLabel.setText("Source:");
 
         ((AutoComboBox)sourceCombo).setStrict(false);
+        sourceCombo.setActionCommand("sourceCombo");
 
         ((AutoComboBox)publicationCombo).setStrict(true);
+        publicationCombo.setActionCommand("publicationCombo");
 
         ((AutoComboBox)projectCombo).setStrict(true);
+        projectCombo.setActionCommand("projectCombo");
 
         org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
         jPanel6.setLayout(jPanel6Layout);
@@ -372,8 +392,8 @@
                 .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                     .add(projectCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .add(publicationCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
-                    .add(sourceCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
-                    .add(herbariumTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
+                    .add(herbariumTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
+                    .add(sourceCombo, 0, 171, Short.MAX_VALUE))
                 .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         );
         jPanel6Layout.setVerticalGroup(
@@ -398,9 +418,9 @@
         );
 
         jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Location note", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
-        jTextArea2.setColumns(20);
-        jTextArea2.setRows(5);
-        jScrollPane4.setViewportView(jTextArea2);
+        locationNoteArea.setColumns(20);
+        locationNoteArea.setRows(5);
+        jScrollPane4.setViewportView(locationNoteArea);
 
         org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
         jPanel7.setLayout(jPanel7Layout);
@@ -408,7 +428,7 @@
             jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(jPanel7Layout.createSequentialGroup()
                 .addContainerGap()
-                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
+                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                 .addContainerGap())
         );
         jPanel7Layout.setVerticalGroup(
@@ -504,9 +524,9 @@
         );
 
         jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ocurrence note", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
-        jTextArea3.setColumns(20);
-        jTextArea3.setRows(5);
-        jScrollPane5.setViewportView(jTextArea3);
+        occurrenceNoteArea.setColumns(20);
+        occurrenceNoteArea.setRows(5);
+        jScrollPane5.setViewportView(occurrenceNoteArea);
 
         org.jdesktop.layout.GroupLayout jPanel9Layout = new org.jdesktop.layout.GroupLayout(jPanel9);
         jPanel9.setLayout(jPanel9Layout);
@@ -514,7 +534,7 @@
             jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(jPanel9Layout.createSequentialGroup()
                 .addContainerGap()
-                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
+                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                 .addContainerGap())
         );
         jPanel9Layout.setVerticalGroup(
@@ -539,9 +559,9 @@
                         .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                             .add(jPanel3Layout.createSequentialGroup()
                                 .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 30, Short.MAX_VALUE)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                 .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
-                            .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                            .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                         .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                         .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                             .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
@@ -559,13 +579,11 @@
                     .add(jPanel3Layout.createSequentialGroup()
                         .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                             .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
-                            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                         .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                        .add(109, 109, 109))
-                    .add(jPanel3Layout.createSequentialGroup()
-                        .add(jPanel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                        .addContainerGap())))
+                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(jPanel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .add(109, 109, 109))
         );
         getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);
 
@@ -582,9 +600,9 @@
         jPanel8Layout.setHorizontalGroup(
             jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8Layout.createSequentialGroup()
-                .add(163, 163, 163)
+                .add(270, 270, 270)
                 .add(jButton4)
-                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 308, Short.MAX_VALUE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 294, Short.MAX_VALUE)
                 .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jButton3)
@@ -621,8 +639,8 @@
     private void jToggleButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton1MouseClicked
         visible = !visible;
         jPanel3.setVisible(visible);
-        jPanel2.setPreferredSize(new Dimension(720,170));
-        jPanel8.setPreferredSize(new Dimension(720,50));
+        jPanel2.setPreferredSize(new Dimension(DIALOG_WIDTH,190));
+        jPanel8.setPreferredSize(new Dimension(DIALOG_WIDTH,50));
         this.pack();
 // TODO add your handling code here:
     }//GEN-LAST:event_jToggleButton1MouseClicked
@@ -631,34 +649,61 @@
 // TODO add your handling code here:
     }//GEN-LAST:event_authorComboBoxActionPerformed
     
-    private void setComponentData()
+    public void loadComponentData()
     {
-        authorComboBox.setSelectedItem(new Pair(ao.getAuthor().getWholeName(),ao.getAuthor().getId()));        
-        townComboBox.setSelectedItem(new Pair(ao.getOccurrence().getHabitat().getNearestVillage().getName(), ao.getOccurrence().getHabitat().getNearestVillage().getId()));
-        taxonTextArea.insert((String)row[2],0);
-        descriptionArea.setText((String)row[5]);
-        yearSpinner.setValue((Integer)row[6]);
+        authorComboBox.setSelectedItem(model.getAuthor());        
+        townComboBox.setSelectedItem(model.getVillage());
+        taxonTextArea.insert(model.getTaxon(),0);
+        descriptionArea.setText(model.getLocalityDescription());
+        yearSpinner.setValue(model.getYear());
         
-        jTextArea2.setText((String)row[13]);
-        jTextArea3.setText((String)row[12]);
-        territoryNameCombo.setSelectedItem(new Pair(ao.getOccurrence().getHabitat().getTerritory().getName(),ao.getOccurrence().getHabitat().getTerritory().getId()));
-        phytNameCombo.setSelectedItem(new Pair(ao.getOccurrence().getHabitat().getPhytochorion().getName(), ao.getOccurrence().getHabitat().getPhytochorion().getId()));
-        phytCodeCombo.setSelectedItem(new Pair(ao.getOccurrence().getHabitat().getPhytochorion().getCode(), ao.getOccurrence().getHabitat().getPhytochorion().getId()));
-        phytCountryCombo.setSelectedItem(ao.getOccurrence().getHabitat().getCountry());
-        quadrantTextField.setText(ao.getOccurrence().getHabitat().getQuadrant());
+        locationNoteArea.setText(model.getHabitatNote());
+        occurrenceNoteArea.setText(model.getOccurrenceNote());
+        territoryNameCombo.setSelectedItem(model.getTerritoryName());
+        phytNameCombo.setSelectedItem(model.getPhytName());
+        phytCodeCombo.setSelectedItem(model.getPhytCode());
+        phytCountryCombo.setSelectedItem(model.getPhytCountry());
+        quadrantTextField.setText(model.getQuadrant());
         
-        altitudeFormattedTextField.setText(""+ao.getOccurrence().getHabitat().getAltitude());
-        longitudeFormattedTextField.setText(""+ao.getOccurrence().getHabitat().getLongitude());
-        latitudeFormattedTextField.setText(""+ao.getOccurrence().getHabitat().getLatitude());
-        sourceCombo.setSelectedItem(ao.getOccurrence().getDataSource());
-        publicationCombo.setSelectedItem(new Pair(ao.getOccurrence().getPublication().getReferenceCitation(), ao.getOccurrence().getPublication().getId()));
-        herbariumTextField.setText(ao.getOccurrence().getHerbarium());
+        altitudeFormattedTextField.setText(""+model.getAltitude());
+        longitudeFormattedTextField.setText(""+model.getLongitude());
+        latitudeFormattedTextField.setText(""+model.getLatitude());
+        sourceCombo.setSelectedItem(model.getSource());
+        publicationCombo.setSelectedItem(model.getPublication());
+        herbariumTextField.setText(model.getHerbarium());
         
-        monthSpinner.setValue(ao.getOccurrence().getMonthCollected());
-        daySpinner.setValue(ao.getOccurrence().getDayCollected());
-        timeFormattedTextField.setValue(ao.getOccurrence().getTimeCollected());
+        monthSpinner.setValue(model.getMonth());
+        daySpinner.setValue(model.getDay());
+        timeFormattedTextField.setValue(model.getTime());
     }
     
+    public void clearComponentData() {
+        authorComboBox.setSelectedIndex(-1);        
+        townComboBox.setSelectedIndex(-1);
+        taxonTextArea.setText("");
+        descriptionArea.setText("");
+        yearSpinner.setValue(Calendar.getInstance().get(Calendar.YEAR));
+        
+        locationNoteArea.setText("");
+        occurrenceNoteArea.setText("");
+        territoryNameCombo.setSelectedIndex(-1);
+        phytNameCombo.setSelectedIndex(-1);
+        phytCodeCombo.setSelectedIndex(-1);
+        phytCountryCombo.setSelectedIndex(-1);
+        quadrantTextField.setText("");
+        
+        altitudeFormattedTextField.setText("");
+        longitudeFormattedTextField.setText("");
+        latitudeFormattedTextField.setText("");
+        sourceCombo.setSelectedIndex(-1);
+        publicationCombo.setSelectedIndex(-1);
+        herbariumTextField.setText("");
+        
+        monthSpinner.setValue(Calendar.getInstance().get(Calendar.MONTH));
+        daySpinner.setValue(Calendar.getInstance().get(Calendar.DAY_OF_MONTH));
+        timeFormattedTextField.setValue(new Date());        
+    }
+    
     /**
      * @param args the command line arguments
      */
@@ -669,6 +714,11 @@
             }
         });
     }
+
+    public void update(Observable o, Object arg) {
+        phytCodeCombo.setSelectedItem(model.getPhytCode());
+        phytNameCombo.setSelectedItem(model.getPhytName());
+    }
     
     // Variables declaration - do not modify//GEN-BEGIN:variables
     protected javax.swing.JLabel AuthorLabel;
@@ -714,12 +764,12 @@
     private javax.swing.JScrollPane jScrollPane3;
     private javax.swing.JScrollPane jScrollPane4;
     private javax.swing.JScrollPane jScrollPane5;
-    protected javax.swing.JTextArea jTextArea2;
-    protected javax.swing.JTextArea jTextArea3;
     protected javax.swing.JToggleButton jToggleButton1;
     protected javax.swing.JFormattedTextField latitudeFormattedTextField;
+    protected javax.swing.JTextArea locationNoteArea;
     protected javax.swing.JFormattedTextField longitudeFormattedTextField;
     protected javax.swing.JSpinner monthSpinner;
+    protected javax.swing.JTextArea occurrenceNoteArea;
     protected javax.swing.JComboBox phytCodeCombo;
     protected javax.swing.JComboBox phytCountryCombo;
     protected javax.swing.JComboBox phytNameCombo;

Modified: trunk/src/net/sf/plantlore/client/AppCore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-22 15:57:23 UTC (rev 172)
+++ trunk/src/net/sf/plantlore/client/AppCore.java	2006-04-22 17:43:19 UTC (rev 173)
@@ -42,16 +42,6 @@
     private DBLayer database;  
     private OverviewTableModel tableModel;
     private Logger logger;
-    private Pair<String, Integer>[] plants = null;
-    private Pair<String, Integer>[] authors = null;
-    private Pair<String, Integer>[] villages = null;
-    private Pair<String, Integer>[] territories = null;
-    private Pair<String, Integer>[] phytNames = null;
-    private Pair<String, Integer>[] phytCodes = null;
-    private String[] countries = null;
-    private String[] sources = null;
-    private Pair<String, Integer>[] publications = null;
-    private Pair<String, Integer>[] projects = null;
 
     private int selectedRow = 0;
 
@@ -244,342 +234,6 @@
         prefs.putInt("recordsPerPage", recordsPerPage);
     }
     
-    public Pair<String, Integer>[] getPlants() {
-        if (plants == null)
-        {
-            SelectQuery sq;
-            int resultid;
-            int resultsCount;
-            Object[] records;
-            Plant p;
-            
-            //FIXME:
-            try {
-                sq = database.createQuery(Plant.class);
-                sq.addOrder(PlantloreConstants.DIRECT_ASC, Plant.TAXON);
-                resultid = database.executeQuery(sq);
-                resultsCount = database.getNumRows(resultid);
-                System.out.println("getPlants(): we got "+resultsCount+" results.");
-                records = database.more(resultid, 1, resultsCount);
-                plants = new Pair[resultsCount];
-                for (int i = 1; i <= resultsCount; i++)
-                {
-                    p = (Plant)((Object[])records[i-1])[0];
-                    plants[i-1] = new Pair(p.getTaxon(), p.getId());
-                }
-            } catch (RemoteException ex) {
-                ex.printStackTrace();
-            } catch (DBLayerException ex) {
-                ex.printStackTrace();
-            }            
-            return plants;
-        } else
-            return plants;
-    }
-    public Pair<String, Integer>[] getAuthors() {
-        if (authors == null)
-        {
-            SelectQuery sq;
-            int resultid;
-            int resultsCount;
-            Object[] records;
-            Author a;
-            //FIXME:
-            try {
-                sq = database.createQuery(Author.class);
-                sq.addOrder(PlantloreConstants.DIRECT_ASC, Author.WHOLENAME);
-                resultid = database.executeQuery(sq);
-                resultsCount = database.getNumRows(resultid);
-                records = database.more(resultid, 1, resultsCount);
-                authors = new Pair[resultsCount];
-                for (int i = 1; i <= resultsCount; i++)
-                {
-                    a = (Author)((Object[])records[i-1])[0];
-                    authors[i-1] = new Pair<String, Integer>(a.getWholeName(), a.getId());
-                }
-            } catch (RemoteException ex) {
-                ex.printStackTrace();
-            } catch (DBLayerException ex) {
-                ex.printStackTrace();
-            }            
-            return authors;
-        } else
-            return authors;
-    }
     
-    public Pair<String, Integer>[] getVillages() {
-        if (villages == null)
-        {
-            SelectQuery sq;
-            int resultid;
-            int resultsCount;
-            Object[] records;
-            Village v;
-            
-            //FIXME:
-            try {
-                sq = database.createQuery(Village.class);
-                sq.addOrder(PlantloreConstants.DIRECT_ASC, Village.NAME);
-                resultid = database.executeQuery(sq);
-                resultsCount = database.getNumRows(resultid);
-                records = database.more(resultid, 1, resultsCount);
-                villages = new Pair[resultsCount];
-                for (int i = 1; i <= resultsCount; i++)
-                {
-                    v = (Village)((Object[])records[i-1])[0];
-                    villages[i-1] = new Pair<String, Integer>(v.getName(), v.getId());
-                }
-            } catch (RemoteException ex) {
-                ex.printStackTrace();
-            } catch (DBLayerException ex) {
-                ex.printStackTrace();
-            }            
-            return villages;
-        } else
-            return villages;
-    }
-
-    public Pair<String, Integer>[] getTerritories() {
-        if (territories == null)
-        {
-            SelectQuery sq;
-            int resultid;
-            int resultsCount;
-            Object[] records;
-            Territory t;
-            
-            //FIXME:
-            try {
-                sq = database.createQuery(Territory.class);
-                sq.addOrder(PlantloreConstants.DIRECT_ASC, Territory.NAME);
-                resultid = database.executeQuery(sq);
-                resultsCount = database.getNumRows(resultid);
-                records = database.more(resultid, 1, resultsCount);
-                territories = new Pair[resultsCount];
-                for (int i = 1; i <= resultsCount; i++)
-                {
-                    t = (Territory)((Object[])records[i-1])[0];
-                    territories[i-1] = new Pair<String,Integer>(t.getName(), t.getId());
-                }
-            } catch (RemoteException ex) {
-                ex.printStackTrace();
-            } catch (DBLayerException ex) {
-                ex.printStackTrace();
-            }            
-            return territories;
-        } else
-            return territories;
-    }
     
-    public Pair<String, Integer>[] getPhytNames() {
-        if (phytNames == null)
-        {
-            SelectQuery sq;
-            int resultid;
-            int resultsCount;
-            Object[] records;
-            Phytochorion p;
-            
-            //FIXME:
-            try {
-                sq = database.createQuery(Phytochorion.class);
-                sq.addOrder(PlantloreConstants.DIRECT_ASC, Phytochorion.NAME);
-                resultid = database.executeQuery(sq);
-                resultsCount = database.getNumRows(resultid);
-                records = database.more(resultid, 1, resultsCount);
-                phytNames = new Pair[resultsCount];
-                for (int i = 1; i <= resultsCount; i++)
-                {
-                    p = (Phytochorion)((Object[])records[i-1])[0];
-                    phytNames[i-1] = new Pair<String,Integer>(p.getName(), p.getId());
-                }
-            } catch (RemoteException ex) {
-                ex.printStackTrace();
-            } catch (DBLayerException ex) {
-                ex.printStackTrace();
-            }            
-            return phytNames;
-        } else
-            return phytNames;
-    }
-    
-    public Pair<String, Integer>[] getPhytCodes() {
-        if (phytCodes == null)
-        {
-            SelectQuery sq;
-            int resultid;
-            int resultsCount;
-            Object[] records;
-            Phytochorion p;
-            
-            //FIXME:
-            try {
-                sq = database.createQuery(Phytochorion.class);
-                sq.addOrder(PlantloreConstants.DIRECT_ASC, Phytochorion.CODE);
-                resultid = database.executeQuery(sq);
-                resultsCount = database.getNumRows(resultid);
-                records = database.more(resultid, 1, resultsCount);
-                phytCodes = new Pair[resultsCount];
-                for (int i = 1; i <= resultsCount; i++)
-                {
-                    p = (Phytochorion)((Object[])records[i-1])[0];
-                    phytCodes[i-1] = new Pair<String,Integer>(p.getCode(), p.getId());
-                }
-            } catch (RemoteException ex) {
-                ex.printStackTrace();
-            } catch (DBLayerException ex) {
-                ex.printStackTrace();
-            }            
-            return phytCodes;
-        } else
-            return phytCodes;
-    }
-    
-    public String[] getCountries() {
-        if (countries == null)
-        {
-            SelectQuery sq;
-            int resultid;
-            int resultsCount;
-            int uniqueCount = 0;
-            String[] countriesTemp;
-            Object[] records;
-            Habitat h;
-            
-            //FIXME:
-            try {
-                sq = database.createQuery(Habitat.class);
-                sq.addOrder(PlantloreConstants.DIRECT_ASC, Habitat.COUNTRY);
-                resultid = database.executeQuery(sq); // the values can be doubled, we need to filter them 
-                resultsCount = database.getNumRows(resultid);
-                records = database.more(resultid, 1, resultsCount);
-                countriesTemp = new String[resultsCount];
-                for (int i = 1; i <= resultsCount; i++)
-                {
-                    h = (Habitat)((Object[])records[i-1])[0];
-                    if (h.getCountry() ==  null)
-                        System.out.println("\twas null");
-                    if (i == 1) {
-                        countriesTemp[0] = h.getCountry();
-                        uniqueCount++;
-                        continue;
-                    }
-                        
-                    if (h.getCountry()!=null && !h.getCountry().equals(countriesTemp[uniqueCount-1])) { //filter duplicates and null values
-                        countriesTemp[uniqueCount] = h.getCountry();
-                        uniqueCount++;
-                    }
-                }
-                
-                countries = new String[uniqueCount];
-                for (int i = 0; i < uniqueCount; i++) {
-                    countries[i] = countriesTemp[i];
-                }
-            } catch (RemoteException ex) {
-                ex.printStackTrace();
-            } catch (DBLayerException ex) {
-                ex.printStackTrace();
-            }            
-            return countries;
-        } else
-            return countries;        
-    }
-    
-    public String[] getSources() {
-        if (sources == null)
-        {
-            SelectQuery sq;
-            int resultid;
-            int resultsCount;
-            Object[] records;
-            Occurrence o;
-            
-            //FIXME:
-            try {
-                sq = database.createQuery(Occurrence.class);
-                sq.addOrder(PlantloreConstants.DIRECT_ASC, Occurrence.DATASOURCE);
-                resultid = database.executeQuery(sq);
-                resultsCount = database.getNumRows(resultid);
-                records = database.more(resultid, 1, resultsCount);
-                sources = new String[resultsCount];
-                for (int i = 1; i <= resultsCount; i++)
-                {
-                    o = (Occurrence)((Object[])records[i-1])[0];
-                    sources[i-1] = o.getDataSource();
-                    System.out.println("Sources: \""+o.getDataSource()+"\"");
-                }
-            } catch (RemoteException ex) {
-                ex.printStackTrace();
-            } catch (DBLayerException ex) {
-                ex.printStackTrace();
-            }            
-            return sources;
-        } else
-            return sources;
-    }
-    
-    public Pair<String, Integer>[] getPublications() {
-        if (publications == null)
-        {
-            SelectQuery sq;
-            int resultid;
-            int resultsCount;
-            Object[] records;
-            Publication p;
-            
-            //FIXME:
-            try {
-                sq = database.createQuery(Publication.class);
-                sq.addOrder(PlantloreConstants.DIRECT_ASC, Publication.REFERENCECITATION);
-                sq.addProjection(PlantloreConstants.PROJ_DISTINCT,Publication.REFERENCECITATION);
-                resultid = database.executeQuery(sq);
-                resultsCount = database.getNumRows(resultid);
-                records = database.more(resultid, 1, resultsCount);
-                publications = new Pair[resultsCount];
-                for (int i = 1; i <= resultsCount; i++)
-                {
-                    p = (Publication)((Object[])records[i-1])[0];
-                    publications[i-1] = new Pair(p.getReferenceCitation(), p.getId());
-                }
-            } catch (RemoteException ex) {
-                ex.printStackTrace();
-            } catch (DBLayerException ex) {
-                ex.printStackTrace();
-            }            
-            return publications;
-        } else
-            return publications;
-    }
-
-    public Pair<String, Integer>[] getProjects() {
-        if (projects == null)
-        {
-            SelectQuery sq;
-            int resultid;
-            int resultsCount;
-            Object[] records;
-            Metadata m;
-            
-            //FIXME:
-            try {
-                sq = database.createQuery(Metadata.class);
-                sq.addOrder(PlantloreConstants.DIRECT_ASC, Metadata.DATASETTITLE);
-                resultid = database.executeQuery(sq);
-                resultsCount = database.getNumRows(resultid);
-                records = database.more(resultid, 1, resultsCount);
-                projects = new Pair[resultsCount];
-                for (int i = 1; i <= resultsCount; i++)
-                {
-                    m = (Metadata)((Object[])records[i-1])[0];
-                    projects[i-1] = new Pair(m.getDataSetTitle(), m.getId());
-                }
-            } catch (RemoteException ex) {
-                ex.printStackTrace();
-            } catch (DBLayerException ex) {
-                ex.printStackTrace();
-            }            
-            return projects;
-        } else
-            return projects;
-    }
 }

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-22 15:57:23 UTC (rev 172)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-22 17:43:19 UTC (rev 173)
@@ -61,6 +61,10 @@
     AppCoreView view;
     
     //--------------MODELS AND VIEWS THIS CONTROLLER CREATES-----------------
+    AddEdit addModel;
+    AddEdit editModel;
+    AddEditView addView;
+    AddEditView editView;
     Settings settingsModel;
     SettingsView settingsView;
     SettingsCtrl settingsCtrl;
@@ -262,9 +266,13 @@
         } 
 
         public void actionPerformed(ActionEvent actionEvent) {
-            AddEditView addEdit = new AddEditView(view, true, model, false);
-            addEdit.setTitle("Add a new occurrence");
-            addEdit.setVisible(true);
+            if (addView == null) {
+                addModel = new AddEdit(model.getDatabase());
+                addView = new AddEditView(view, true, addModel, false);
+                addView.setTitle("Add a new occurrence");
+            }
+            addView.clearComponentData();
+            addView.setVisible(true);
         }
     }
     
@@ -276,9 +284,16 @@
         } 
 
         public void actionPerformed(ActionEvent actionEvent) {
-            AddEditView addEdit = new AddEditView(view, true, model, true);
-            addEdit.setTitle("Edit occurrence");
-            addEdit.setVisible(true);
+            if (editView == null) {
+                editModel = new AddEdit(model.getDatabase());
+                Object[] row = model.getSelectedRow();
+                editModel.setRecord((AuthorOccurrence) row[row.length-1]);
+                editView = new AddEditView(view, true, editModel, true);
+                editView.setTitle("Edit occurrence");
+            }
+            editView.loadComponentData();
+            AddEditCtrl aec = new AddEditCtrl(editModel, editView, true);
+            editView.setVisible(true);
         }
     }
     



From krater at berlios.de  Sat Apr 22 20:12:33 2006
From: krater at berlios.de (krater at berlios.de)
Date: Sat, 22 Apr 2006 20:12:33 +0200
Subject: [Plantlore-dev] r174 - in trunk/src/net/sf/plantlore: client/export common/record
Message-ID: <200604221812.k3MICXIo002420@sheep.berlios.de>

Author: krater
Date: 2006-04-22 20:12:29 +0200 (Sat, 22 Apr 2006)
New Revision: 174

Added:
   trunk/src/net/sf/plantlore/client/export/Template.java
Modified:
   trunk/src/net/sf/plantlore/client/export/Builder.java
   trunk/src/net/sf/plantlore/client/export/Export.java
   trunk/src/net/sf/plantlore/client/export/MetaBuilder.java
   trunk/src/net/sf/plantlore/common/record/Author.java
   trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java
   trunk/src/net/sf/plantlore/common/record/Habitat.java
   trunk/src/net/sf/plantlore/common/record/HistoryChange.java
   trunk/src/net/sf/plantlore/common/record/HistoryColumn.java
   trunk/src/net/sf/plantlore/common/record/HistoryRecord.java
   trunk/src/net/sf/plantlore/common/record/LastUpdate.java
   trunk/src/net/sf/plantlore/common/record/Metadata.java
   trunk/src/net/sf/plantlore/common/record/Occurrence.java
   trunk/src/net/sf/plantlore/common/record/Phytochorion.java
   trunk/src/net/sf/plantlore/common/record/Plant.java
   trunk/src/net/sf/plantlore/common/record/Publication.java
   trunk/src/net/sf/plantlore/common/record/Record.java
   trunk/src/net/sf/plantlore/common/record/Right.java
   trunk/src/net/sf/plantlore/common/record/Territory.java
   trunk/src/net/sf/plantlore/common/record/User.java
   trunk/src/net/sf/plantlore/common/record/Village.java
Log:
Bugfix: int -> Integer.

Modified: trunk/src/net/sf/plantlore/client/export/Builder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -17,25 +17,8 @@
 	
 	void startNewRecord();
 	
+	void writeRecord(Record arg);
+	
 	void finishRecord();
 	
-	void writePartialRecord(Author arg);
-	
-	void writePartialRecord(AuthorOccurrence arg);
-	
-	void writePartialRecord(Habitat arg);
-	
-	void writePartialRecord(Metadata arg);
-	
-	void writePartialRecord(Occurrence arg);
-	
-	void writePartialRecord(Phytochorion arg);
-	
-	void writePartialRecord(Plant arg);
-	
-	void writePartialRecord(Publication arg);
-	
-	void writePartialRecord(Territory arg);
-
-	void writePartialRecord(Village arg);
 }

Modified: trunk/src/net/sf/plantlore/client/export/Export.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Export.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/client/export/Export.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -43,35 +43,13 @@
 			builder.makeHeader();
 			
 			for(int i = 0; i < database.getNumRows( result ); i++) {
-				Object[] record = database.next( result );	
-				if( !selection.contains( (Record)record[0] ) ) continue;
+				Object[] objRecord = database.next( result );
+				Record record = (Record)objRecord[0];
+				if( !selection.contains( record ) ) continue;
 				
 				count++;
-				
 				builder.startNewRecord();
-				for(Object part : record) {
-					if (part instanceof Author)
-						builder.writePartialRecord((Author) part);
-					else if (part instanceof AuthorOccurrence)
-						builder.writePartialRecord((AuthorOccurrence) part);
-					else if (part instanceof Habitat)
-						builder.writePartialRecord((Habitat) part);
-					else if (part instanceof Metadata)
-						builder.writePartialRecord((Metadata) part);
-					else if (part instanceof Occurrence)
-						builder.writePartialRecord((Occurrence) part);
-					else if (part instanceof Phytochorion)
-						builder.writePartialRecord((Phytochorion) part);
-					else if (part instanceof Plant)
-						builder.writePartialRecord((Plant) part);
-					else if (part instanceof Publication)
-						builder.writePartialRecord((Publication) part);
-					else if (part instanceof Territory)
-						builder.writePartialRecord((Territory) part);
-					else if (part instanceof Village)
-						builder.writePartialRecord((Village) part);
-					else /* ERROR */;
-				}
+				builder.writeRecord( record );
 				builder.finishRecord();
 			}
 		

Modified: trunk/src/net/sf/plantlore/client/export/MetaBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/MetaBuilder.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/client/export/MetaBuilder.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -1,16 +1,8 @@
 package net.sf.plantlore.client.export;
 
-import net.sf.plantlore.common.record.Author;
-import net.sf.plantlore.common.record.AuthorOccurrence;
-import net.sf.plantlore.common.record.Habitat;
-import net.sf.plantlore.common.record.Metadata;
-import net.sf.plantlore.common.record.Occurrence;
-import net.sf.plantlore.common.record.Phytochorion;
-import net.sf.plantlore.common.record.Plant;
-import net.sf.plantlore.common.record.Publication;
-import net.sf.plantlore.common.record.Territory;
-import net.sf.plantlore.common.record.Village;
+import net.sf.plantlore.common.record.Record;
 
+
 public class MetaBuilder implements Builder {
 	
 	public void makeHeader() {}
@@ -21,24 +13,6 @@
 	
 	public void finishRecord() {}
 	
-	public void writePartialRecord(Author arg) {}
+	public void writeRecord(Record arg) {}
 	
-	public void writePartialRecord(AuthorOccurrence arg) {}
-	
-	public void writePartialRecord(Habitat arg) {}
-	
-	public void writePartialRecord(Metadata arg) {}
-	
-	public void writePartialRecord(Occurrence arg) {}
-	
-	public void writePartialRecord(Phytochorion arg) {}
-	
-	public void writePartialRecord(Plant arg) {}
-	
-	public void writePartialRecord(Publication arg) {}
-	
-	public void writePartialRecord(Territory arg) {}
-
-	public void writePartialRecord(Village arg) {}
-	
 }

Added: trunk/src/net/sf/plantlore/client/export/Template.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -0,0 +1,33 @@
+package net.sf.plantlore.client.export;
+
+import java.util.Collection;
+import java.util.HashSet;
+
+
+/**
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-22
+ */
+public class Template {
+	
+	private Class root = null;
+	private Collection<String> tableColumn = new HashSet<String>(20);
+	
+		
+	public void setRootTable(Class table) { root = table; }
+	public Class getRootTable() { return root; }
+	
+	public void setTable(Class table) { tableColumn.add(table.toString()); }
+	public void unsetTable(Class table) { tableColumn.remove(table.toString()); }
+	public boolean isSetTable(Class table) { return tableColumn.contains(table.toString()); } 
+	
+	public void set(Class table, String column) { tableColumn.add(table+"."+column); }
+	public void unset(Class table, String column) { tableColumn.remove(table+"."+column); }
+	public boolean isSet(Class table, String column) { return tableColumn.contains(table+"."+column); }
+	
+	public void unsetAll() { tableColumn.clear(); }
+	
+	public boolean match(Template t) { return tableColumn.containsAll(t.tableColumn); }
+
+}

Modified: trunk/src/net/sf/plantlore/common/record/Author.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Author.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/Author.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -59,7 +59,7 @@
      *   @return int unique id of the user
      *   @see setID
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -43,7 +43,7 @@
      *   @return id of the AuthorOccurrence
      *   @see setId
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/Habitat.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Habitat.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/Habitat.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -57,7 +57,7 @@
      *   @return id of the habitat
      *   @see setId
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/HistoryChange.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/HistoryChange.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/HistoryChange.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -53,7 +53,7 @@
      *   @return id of the HistoryChange record
      *   @see setId
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/HistoryColumn.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/HistoryColumn.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/HistoryColumn.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -38,7 +38,7 @@
      *   @return id of the HistoryColumn
      *   @see setId
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/HistoryRecord.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/HistoryRecord.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/HistoryRecord.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -34,7 +34,7 @@
      *   @return History record id
      *   @see setId
      */          
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
 

Modified: trunk/src/net/sf/plantlore/common/record/LastUpdate.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/LastUpdate.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/LastUpdate.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -32,7 +32,7 @@
      *   @return id of the LastUpdate record
      *   @see setId
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/Metadata.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Metadata.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/Metadata.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -65,7 +65,7 @@
      *   @return id of the metadata
      *   @see setId
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/Occurrence.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -72,7 +72,7 @@
      *   @return id of the occurrence
      *   @see setId
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/Phytochorion.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Phytochorion.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/Phytochorion.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -39,7 +39,7 @@
      *   @return id of the phytochorion
      *   @see setId
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/Plant.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Plant.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/Plant.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -49,7 +49,7 @@
      *   @return id of the plant
      *   @see setId
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }    
     

Modified: trunk/src/net/sf/plantlore/common/record/Publication.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -50,7 +50,7 @@
      *   @return id of the publication
      *   @see setId
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/Record.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -4,6 +4,6 @@
 
 public abstract class Record implements Serializable {
 
-	public abstract int getId();
+	public abstract Integer getId();
 	
 }

Modified: trunk/src/net/sf/plantlore/common/record/Right.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Right.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/Right.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -47,7 +47,7 @@
      *   @return id of the right
      *   @see setId
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/Territory.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Territory.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/Territory.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -37,7 +37,7 @@
      *   @return id of the territory
      *   @see setId
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/User.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/User.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/User.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -50,7 +50,7 @@
      *   @return id of the user
      *   @see setID
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     

Modified: trunk/src/net/sf/plantlore/common/record/Village.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Village.java	2006-04-22 17:43:19 UTC (rev 173)
+++ trunk/src/net/sf/plantlore/common/record/Village.java	2006-04-22 18:12:29 UTC (rev 174)
@@ -35,7 +35,7 @@
      *   @return id of the village
      *   @see setId
      */
-    public int getId() {
+    public Integer getId() {
         return this.id;
     }
     



From fraktalek at berlios.de  Sat Apr 22 20:31:04 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Sat, 22 Apr 2006 20:31:04 +0200
Subject: [Plantlore-dev] r175 - trunk/src/net/sf/plantlore/client
Message-ID: <200604221831.k3MIV46x009928@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-22 20:30:40 +0200 (Sat, 22 Apr 2006)
New Revision: 175

Modified:
   trunk/src/net/sf/plantlore/client/OverviewTableModel.java
Log:
Just a fix to be able to connect to database.


Modified: trunk/src/net/sf/plantlore/client/OverviewTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-22 18:12:29 UTC (rev 174)
+++ trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-22 18:30:40 UTC (rev 175)
@@ -36,11 +36,11 @@
     private int resultsCount = 0;
     private int pageSize = 30;
     private int currentPage = 1;
-    private ArrayList<Record> recordsArray = new ArrayList<Record>();
-    private HashMap<Integer, Record> resultsMap = new HashMap<Integer, Record>();
+    private ArrayList<Record999> recordsArray = new ArrayList<Record999>();
+    private HashMap<Integer, Record999> resultsMap = new HashMap<Integer, Record999>();
     
-    class Record {
-        public Record(int id, boolean selected, int number) {
+    class Record999 {
+        public Record999(int id, boolean selected, int number) {
             this.id = id;
             this.selected = selected;
             this.number = number;
@@ -50,9 +50,9 @@
         public int number;
         
         public boolean equals(Object o) {
-            if (!(o instanceof Record))
+            if (!(o instanceof Record999))
                 return false;
-            Record r = (Record)o;
+            Record999 r = (Record999)o;
             return r.id == this.id;
         }
     }
@@ -163,7 +163,7 @@
         for (int i = 1; i <= to - from + 1 ; i++) {
             resultObj = (Object[])records[i-1];
             result = (AuthorOccurrence)resultObj[0];
-            Record r = new Record(result.getId(), false, from + i - 1);
+            Record999 r = new Record999(result.getId(), false, from + i - 1);
             if (from + i - 1 > recordsArray.size()) //most probably much faster than to ask recordsArray.contains(r)
                 recordsArray.add(r);
             else 



From krater at berlios.de  Sat Apr 22 20:59:31 2006
From: krater at berlios.de (krater at berlios.de)
Date: Sat, 22 Apr 2006 20:59:31 +0200
Subject: [Plantlore-dev] r176 - trunk/src/net/sf/plantlore/common
Message-ID: <200604221859.k3MIxVDJ022329@sheep.berlios.de>

Author: krater
Date: 2006-04-22 20:59:28 +0200 (Sat, 22 Apr 2006)
New Revision: 176

Modified:
   trunk/src/net/sf/plantlore/common/AutoComboBox.java
Log:
Simplified better behaving AutoComboBox.

Modified: trunk/src/net/sf/plantlore/common/AutoComboBox.java
===================================================================
--- trunk/src/net/sf/plantlore/common/AutoComboBox.java	2006-04-22 18:30:40 UTC (rev 175)
+++ trunk/src/net/sf/plantlore/common/AutoComboBox.java	2006-04-22 18:59:28 UTC (rev 176)
@@ -1,13 +1,16 @@
 package net.sf.plantlore.common;
 
-
+import java.awt.BorderLayout;
 import java.awt.event.FocusEvent;
 import java.awt.event.FocusListener;
 import java.awt.event.KeyEvent;
 import java.awt.event.KeyListener;
 
+import javax.swing.JButton;
 import javax.swing.JComboBox;
+import javax.swing.JFrame;
 import javax.swing.JTextField;
+import javax.swing.UIManager;
 import javax.swing.text.AttributeSet;
 import javax.swing.text.BadLocationException;
 import javax.swing.text.PlainDocument;
@@ -34,7 +37,7 @@
  * record "------" or "not specified" instead.
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
- * @version 1.2
+ * @version 1.1
  * @since The beginning of time.
  */
 public class AutoComboBox extends JComboBox {
@@ -42,10 +45,10 @@
 	protected boolean allowNew = false;
 	protected int capacity = 32;
 	
+	private Object last;
 	
-	public AutoComboBox() {
-		this(new String[] { null });		
-	}
+	
+	
 
 	/**
 	 * Create the AutoComboBox with given array of choices.
@@ -53,15 +56,26 @@
 	 * @param choices	<b>Sorted</b> list of available choices (items).
 	 */
 	public AutoComboBox(Object[] choices) {
+		super(choices); // base class constructor
 		setEditable(true);
-
-		addItems(choices);
 		
 		JTextField editor = (JTextField)getEditor().getEditorComponent();
 		AutoDocument a = new AutoDocument(); // change the model ~~> AutoDocument 
-		editor.setDocument(a); editor.addKeyListener(a); editor.addFocusListener(a);;
+		editor.setDocument(a); editor.addKeyListener(a); editor.addFocusListener(a);
 	}
 	
+	
+	public AutoComboBox() {
+		this(new String[] { null });		
+	} 
+	
+	public void addItems(Object[] items) {
+		for(Object item : items)
+			if(item != null) 
+				this.addItem(item);
+	}
+
+	
 	/**
 	 * Specify whether the component should also accept strings that are not part of the list of choices.
 	 * 
@@ -76,51 +90,30 @@
 	 */
 	public void setCapacity(int capacity) { this.capacity = capacity; }
 	
-		
-	public void addItems(Object[] items) {
-		for(Object item : items)
-			if(item != null) 
-				this.addItem(item);
-	}
 	
 	
-	
 	private class AutoDocument extends PlainDocument implements KeyListener, FocusListener {
 		
-		/** Prevent entering the setMatch method recursively. */
-		private boolean prevent = false;
 		
+		
 		/** 
 		 * Select the first suitable choice beginnig with <code>prefix</code>.
 		 * 
 		 * @param prefix		The prefix of the string. 
-		 * @param popupl	Display the string only (no popup selection)? 
 		 */
-		synchronized private void setMatch(String prefix, boolean popup) {
-			if (!prevent) {
-				prevent = true;
-				/*----------------------------------------------------------------
-				 * Another amazing example of hyperactivity of this component.
-				 * When someone calls addItem(), that item gets automatically selected.
-				 * This means insertString() and setMatch() are called.
-				 * 
-				 * The problem is, that this method is likely to show the popup
-				 * part of the ComboBox; if the AutoComboBox is not currently
-				 * visible on the screen, that call will throw an exception.
-				 *----------------------------------------------------------------*/
-				if(isShowing()) setPopupVisible(popup); // make sure popup is/isn't visible
+		synchronized private void setMatch(String prefix) {
 				try {
 					boolean noMatch = true;
 					if (prefix == null) prefix = getText(0, getLength());
+					
 					// Find the first suitable choice and select it.
 					for(int i = 0; i < getItemCount(); i++) {
 						String item = getItemAt(i).toString(); // test the i-th choice
 						if( prefix.length() <= item.length() && prefix.equalsIgnoreCase(item.substring(0, prefix.length())) ) {
-							setSelectedIndex(i); // CRAP! This method calls remove() & insertString()!!!
-							if(popup) item = item.substring(0, prefix.length()); // trim the string
 							super.remove(0, getLength());
-							super.insertString(0, item, null); // rewrite the text
+							super.insertString(0, item.substring(0, prefix.length()), null); // rewrite the text
 							noMatch = false;
+							last = getItemAt(i);
 							break;
 						}
 					}
@@ -129,28 +122,26 @@
 						super.insertString(0, prefix, null);
 					}
 				} catch (BadLocationException e) {} 
-				finally { prevent = false; }
-			}
 		}
 		
 		@Override
 		public void insertString(int offset, String insert, AttributeSet attr) throws BadLocationException {
-			setMatch(getText(0, offset) + insert, true);
+			setMatch(getText(0, offset) + insert);
 		}
 		
 		@Override
 		public void remove(int offset, int length) throws BadLocationException {
-			setMatch(getText(0, offset), true);
+			setMatch(getText(0, offset));
 		}
 
 		/** Ensure something got selected. */
 		public void keyPressed(KeyEvent e) {
-			if(e.getKeyCode() == KeyEvent.VK_ENTER) setMatch(null, false);
+			if(e.getKeyCode() == KeyEvent.VK_ENTER) setMatch(null);
 		}
 		
 		/** Make sure something is selected even if the AutoComboBox loses focus. */
 		public void focusLost(FocusEvent e) {
-			setMatch(null, false); 
+			setMatch(null); 
 		}
 
 		/* Bunch of uninteresting methods... */
@@ -160,4 +151,22 @@
 	}
 
 	
+/* ================================================================================== */
+	public static void main(String[] args) {
+		String lookAndFeel = UIManager.getSystemLookAndFeelClassName();
+        try { UIManager.setLookAndFeel(lookAndFeel); }
+        catch (Exception e) { JFrame.setDefaultLookAndFeelDecorated(true); }
+		
+		JFrame f = new JFrame();
+		//String[] ch = { "Daniel Jackson", "Etrachlorethylen", "Jack O'Neill", "Samantha Carter", "Tetrachlorethylen", "Tetraethylen", "Thor", "Ty'alc" };
+		String[] ch = new String[1000];
+		for(int i = 0; i < 1000; i++) ch[i] = Integer.toBinaryString(i);
+		
+		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		f.getContentPane().add(new AutoComboBox(ch), BorderLayout.NORTH);
+		f.getContentPane().add(new JButton("Done"), BorderLayout.SOUTH);
+		f.pack();
+		f.setVisible(true);
+	}
+
 }



From fraktalek at berlios.de  Sun Apr 23 14:51:08 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Sun, 23 Apr 2006 14:51:08 +0200
Subject: [Plantlore-dev] r177 - trunk/src/net/sf/plantlore/l10n
Message-ID: <200604231251.k3NCp89g019004@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-23 14:51:06 +0200 (Sun, 23 Apr 2006)
New Revision: 177

Added:
   trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties
Log:
Added en properties again so that locale/language switching works.
Please edit preferably this file. We'll copy it to the default Plantlore.properties file then.


Added: trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties	2006-04-22 18:59:28 UTC (rev 176)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties	2006-04-23 12:51:06 UTC (rev 177)
@@ -0,0 +1,219 @@
+# Properties common for all languages go here
+plantlore = Plantlore
+Settings = &Settings
+SettingsTooltip = Invokes the setting dialog
+Print = &Print
+PrintTooltip = Prints selected records
+Exit = &Exit
+Login = Logi&n
+File=&File
+helpContents = &Help contents
+helpAbout = &About
+Languages = &Languages
+Other = &Other
+Ok = &Ok
+# Continue stands for Ok on some dialogs
+Continue = C&ontinue
+ContinueTT = Continue with the operation 
+Cancel = &Cancel
+Close = Close
+Help = &Help
+defaultLang = Default system language
+Czech = Czech
+English = English
+statusReady = Plantlore ready
+statusOkButton = Confirms the dialog
+statusCancelButton = Cancels action, no changes will be stored
+statusHelpButton = Displays help for the current dialog
+statusLangSettings = Switches to language settings
+statusOtherSettings = Switches to other settings
+prevButton = Prev
+prevButtonTT = Shows previous page
+nextButton = Next
+nextButtonTT = Shows next page
+Data=Data
+dataImport=&Import
+dataImportTooltip=Imports occurence records into the database
+dataExport=&Export
+dataExportTooltip=Exports selected records
+dataSearch=&Search
+dataSearchTooltip=Invokes the search dialog
+
+recordAdd=&Add
+recordAddTT=Add a new occurence record
+recordEdit=&Edit
+recordEditTT=Edit selected record
+recordDelete=&Delete
+recordDeleteTT=Delete selected records
+
+selectAll=All
+selectAllTT=Selects all visible occurence records
+selectNone=None
+selectNoneTT=Deselects all occurence records
+invertSelected=Invert
+invertSelectedTT=Inverts the selection
+
+overviewColX = X
+overviewColResultNumber = Result number
+overviewColName = Name
+overviewColAuthor = Author
+overviewColVillage = Nearest village
+overviewColPlace = Place description
+overviewColYear = Year
+overviewColTerritory = Territory
+overviewColPhyt = Phytochorion
+overviewColPhytCode = Phyt. code
+overviewColCountry = Country
+overviewColQuadrant = Quadrant
+overviewColOccNote = Note (occurrence)
+overviewColLocNote = Note (location)
+overviewColAltitude = Altitude
+overviewColLongitude = Longitude
+overviewColLatitude = Latitude
+overviewColSource = Source
+overviewColPublication = Publication
+overviewColHerbarium = Herbarium
+overviewColMetadata = Metadata
+overviewColMonth = Month
+overviewColDay = Day
+overviewColTime = Time
+
+overviewRecordsCount=Results:
+overviewRecordsCountTT=Number of results found
+overviewPageStatus=Page:
+overviewPageStatusTT=Current page / Total number of pages
+
+authorMgr=Author manager
+
+publicationMgr=Publication manager
+
+#History of the occurrences
+History= History - undo
+#Whole history
+wholeHistory = Whole history - undo
+#History - Details of record
+taxon = Taxon:
+author = Author:
+location = Location:
+#History - List of changes
+whenInsert = Date record creation:
+whoInsert = User who record created:
+#History - buttons
+selectAll = Select all
+unselectAll = Unselect all
+undoSelected = Undo selected
+undoToDate = Undo to Date
+detailsHistory = Details
+#History - information about result and displayed rows
+totalResult = Total results:
+displayed = Displayed rows:
+toDisplay = Rows to display:
+#History - Title of table columns
+historyColX = X
+historyColDate = Date/Time
+historyColOperation = Operation
+historyColUser = User
+historyColItem = Item
+historyColOldValue = Old value
+historyColNewValue = New value
+#History - value of tHistoryChange.cOperation
+operation1 = insert
+operation2 = edit
+operation3 = edit
+operation4 = delete
+#History - value of tHistoryColumn.cColumnName (use as value of table column Item)
+plantId = Taxon
+yearCollected = Year
+monthCollected = Month
+dayCollected = Day
+timeCollected = Time
+isoDateTimeBegin = IsoDate
+dataSource = Data source
+herbarium = Herbarium
+noteOccurrence = Note of occurrence
+metadataId = Metadata
+collectionName = Collection
+colletionYearPublication = Year of publication
+journalName = Journal
+journalAuthorName = Author of journal
+referenceCitation = Reference citation
+referenceDetail = Reference detail
+url = URL of publication
+notePublication = Note of publication
+quadrant = Quadrant
+description = Place description
+country = Country
+altitude = Altitude
+latitude = Latitude
+longitude = Longitude
+noteHabitat = Note of habitat
+nameVillage = Nearest bigger seat
+nameTerritory = Territory
+namePhytochorion = Phytochorion
+code = Phytochorion code 
+#pravdepodobne budou smazany
+updatedWho = updatedWho
+metadata = metadata
+note = note
+
+# LOGIN
+loginAdd = &Add
+loginRemove = &Remove
+loginEdit = &Edit
+# LOGIN - AUTHORIZE
+Username = Username
+Password = Password
+Authorize = Authorize
+ConnectingTo = Connecting to
+# LOGIN - RECORDS
+AddTitle = Add a record
+EditTitle = Edit the record 
+Alias = Alias
+Hostname = Hostname
+HostPort = Hostname:Port
+Database = Database
+Change = Change
+
+Next = &Next
+Refresh = &Refresh
+RefreshTT = Reload the list of the connected clients.
+Kick = &Kick users
+KickTT = Disconnect the selected clients from the server.
+StopServer = Stop server
+TerminateServer = Terminate server
+TerminateServerTT = Switch off the server.
+SelectNew = Create and start &new server.
+SelectNewTT = Run a new server on the specified port\n protected by the given password.
+SelectExisting = Connect to an existing server.
+SelectExistingTT = Connect to an existing server on the host:port\n.  
+
+
+AutoSelect = select automatically 
+
+
+# LIST OF WARNINGS
+warningEmptySelection = No record has been selected.\n Please select some record and try again.
+warningEmptySelectionTitle = Empty selection...
+
+warningNoUsername = No username has been entered.\n Please select or type a username and try again.
+warningNoUsernameTitle = Missing username...
+
+# LIST OF ERRORS AND EXCEPTIONS
+errorDBLayerException = The connection to the database could not be established.\n Please make sure you entered valid authentication information (misspelled username, incorrect password)\n and try again.
+errorDBLayerExceptionTitle = Database connection error! 
+
+errorNotBoundException = The server is either unreachable or not running.\n Please make sure you entered valid connection information.\n Study the log for further details. 
+errorNotBoundExceptionTitle = Server unreachable!
+
+errorRemoteException = Either the network connection has failed or the server has crashed or gone off.\n Please make sure the network connection is working.\n Study the log for further details.  
+errorRemoteExceptionTitle = Network problem!
+
+errorAlreadyBoundException = Another server is already running on the specified port.\n Please choose another port and try again.
+errorAlreadyBoundExceptionTitle = Server collision!
+
+errorCertificationException = The certification failed - the password is incorrect.\n Please type the password again.
+errorCertificationExceptionTitle = Certification failure!
+
+
+questionAlreadyBoundException = Another server is already running on the selected port.\n Maybe you wanted to connect to it. Shall I do it for you?
+questionAlreadyBoundExceptionTitle = Server collision!



From fraktalek at berlios.de  Sun Apr 23 14:55:48 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Sun, 23 Apr 2006 14:55:48 +0200
Subject: [Plantlore-dev] r178 - in trunk/src/net/sf/plantlore: client l10n
Message-ID: <200604231255.k3NCtmf2020878@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-23 14:55:45 +0200 (Sun, 23 Apr 2006)
New Revision: 178

Modified:
   trunk/src/net/sf/plantlore/client/AddEdit.java
   trunk/src/net/sf/plantlore/client/AddEditCtrl.java
   trunk/src/net/sf/plantlore/client/AddEditView.form
   trunk/src/net/sf/plantlore/client/AddEditView.java
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/Plantlore.java
   trunk/src/net/sf/plantlore/l10n/L10n.java
Log:
Further improved AddEdit dialog - mainly the Controller, it's almost done now.
Also made it locale aware, that's why there's a new method in class L10n - getCurrentLocale().



Modified: trunk/src/net/sf/plantlore/client/AddEdit.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEdit.java	2006-04-23 12:51:06 UTC (rev 177)
+++ trunk/src/net/sf/plantlore/client/AddEdit.java	2006-04-23 12:55:45 UTC (rev 178)
@@ -34,9 +34,14 @@
  * @author fraktalek
  */
 public class AddEdit extends Observable {
+    public static final int WGS84 = 1;
+    public static final int S42 = 2;
+    public static final int SJTSK = 3;
+    
     private Logger logger;
     private DBLayer database;      
     
+    private int coordinateSystem;
     private AuthorOccurrence ao;
     private Pair<String,Integer> author;
     private Pair<String,Integer> village;
@@ -73,7 +78,7 @@
     private Pair<String, Integer>[] projects = null;
 
     //helper variable to avoid recursion potentially caused by phytCode and phytName updates
-    private boolean skipUpdate = false;
+    private Boolean skipUpdate = false;
     
     /** Creates a new instance of AddEdit */
     public AddEdit(DBLayer database) {
@@ -81,8 +86,13 @@
         logger = Logger.getLogger(this.getClass().getPackage().getName());                
     }
  
+    /** Makes the model load data from the parameter ao.
+     *
+     * @param ao Assumes it is from database and therefore assumes WGS84 coordinate system.
+     */
     public void setRecord(AuthorOccurrence ao) {
         this.ao = ao;
+        coordinateSystem = WGS84;
         author = new Pair(ao.getAuthor().getWholeName(),ao.getAuthor().getId());
         village = new Pair(ao.getOccurrence().getHabitat().getNearestVillage().getName(), ao.getOccurrence().getHabitat().getNearestVillage().getId());
         taxon = ao.getOccurrence().getPlant().getTaxon();
@@ -186,18 +196,21 @@
     public void setPhytName(Pair<String, Integer> phytName) {
         if (skipUpdate) {
             skipUpdate = false;
+            logger.debug("Skipping setPhytName");
             return;
         }
         this.phytName = phytName;
-        for (int i=0; i < phytCodes.length; i++)
-            if (phytCodes[i].getSecond() == phytCode.getSecond()) {
+        for (int i=0; i < phytCodes.length; i++) {
+            if (phytCodes[i].getSecond().equals(phytName.getSecond())) {
                 phytCode = phytCodes[i];
+                logger.debug("SetPhytName For "+phytName+" found "+phytCode);
                 skipUpdate = true;
                 break;
-            }
+            } 
+        }
+        logger.debug("PhytName set to "+phytName);
         setChanged();
-        notifyObservers();
-        logger.debug("PhytName set to "+phytName);
+        notifyObservers("updateCode");
     }
 
     public Pair<String, Integer> getPhytCode() {
@@ -207,18 +220,21 @@
     public void setPhytCode(Pair<String, Integer> phytCode) {
         if (skipUpdate) {
             skipUpdate = false;
+            logger.debug("Skipping setPhytCode");
             return;
         }
         this.phytCode = phytCode;
-        for (int i=0; i < phytNames.length; i++)
-            if (phytNames[i].getSecond() == phytCode.getSecond()) {
+        for (int i=0; i < phytNames.length; i++) {
+            if (phytNames[i].getSecond().equals(phytCode.getSecond())) {
                 phytName = phytNames[i];
+                logger.debug("SetPhytCode For "+phytCode+" found "+phytName);
                 skipUpdate = true;
                 break;
             }
+        }
+        logger.debug("PhytCode set to "+phytCode);
         setChanged();
-        notifyObservers();
-        logger.debug("PhytCode set to "+phytCode);
+        notifyObservers("updateName");
     }
 
     public String getPhytCountry() {
@@ -675,5 +691,24 @@
         logger.debug("Project set to "+project);
         this.project = project;
     }
+
+    public int getCoordinateSystem() {
+        return coordinateSystem;
+    }
+
+    public void setCoordinateSystem(int coordinateSystem) {
+        this.coordinateSystem = coordinateSystem;
+        switch (coordinateSystem) {
+            case WGS84:
+                logger.debug("CoordinateSystem set to WGS84");
+                break;
+            case S42:
+                logger.debug("CoordinateSystem set to S42");
+                break;
+            case SJTSK:
+                logger.debug("CoordinateSystem set to SJSTK");
+                break;
+        }
+    }
     
 }

Modified: trunk/src/net/sf/plantlore/client/AddEditCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditCtrl.java	2006-04-23 12:51:06 UTC (rev 177)
+++ trunk/src/net/sf/plantlore/client/AddEditCtrl.java	2006-04-23 12:55:45 UTC (rev 178)
@@ -15,8 +15,18 @@
 import java.awt.event.FocusListener;
 import java.awt.event.ItemEvent;
 import java.awt.event.ItemListener;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
+import java.util.Date;
 import javax.swing.JComboBox;
+import javax.swing.JFormattedTextField;
+import javax.swing.JSpinner;
 import javax.swing.JTextArea;
+import javax.swing.JTextField;
+import javax.swing.event.ChangeEvent;
+import javax.swing.event.ChangeListener;
 import net.sf.plantlore.common.Pair;
 
 /**
@@ -36,26 +46,57 @@
         this.model = model;
         this.view = view;
         
-        view.authorComboBox.addActionListener(new ComboListener());
-        view.townComboBox.addActionListener(new ComboListener());
-        view.territoryNameCombo.addActionListener(new ComboListener());
-        view.phytNameCombo.addActionListener(new ComboListener());
-        view.phytCodeCombo.addActionListener(new ComboListener());
-        view.phytCountryCombo.addActionListener(new ComboListener());
-        view.sourceCombo.addActionListener(new ComboListener());
-        view.publicationCombo.addActionListener(new ComboListener());
-        view.projectCombo.addActionListener(new ComboListener());
+        //------- ComboBoxes --------
+        view.authorComboBox.addActionListener(new CommonActionListener());
+        view.townComboBox.addActionListener(new CommonActionListener());
+        view.territoryNameCombo.addActionListener(new CommonActionListener());
+        view.phytNameCombo.addActionListener(new CommonActionListener());
+        view.phytCodeCombo.addActionListener(new CommonActionListener());
+        view.phytCountryCombo.addActionListener(new CommonActionListener());
+        view.sourceCombo.addActionListener(new CommonActionListener());
+        view.publicationCombo.addActionListener(new CommonActionListener());
+        view.projectCombo.addActionListener(new CommonActionListener());
+
+        //------- TextFields --------        
+        view.herbariumTextField.addFocusListener(new HerbariumListener());
+        view.quadrantTextField.addFocusListener(new QuadrantListener());
+        view.altitudeFormattedTextField.addPropertyChangeListener("value",new AltitudeListener());
+        view.longitudeFormattedTextField.addPropertyChangeListener("value",new LongitudeListener());
+        view.latitudeFormattedTextField.addPropertyChangeListener("value",new LatitudeListener());
+        view.timeFormattedTextField.addPropertyChangeListener("value",new TimeListener());
         
+        //------- TextAreas --------        
         view.taxonTextArea.addFocusListener(new TaxonAreaListener());
         view.descriptionArea.addFocusListener(new PlaceAreaListener());
         view.locationNoteArea.addFocusListener(new LocationAreaListener());
         view.occurrenceNoteArea.addFocusListener(new OccurrenceAreaListener());
+
+        //------- Spinners --------
+        view.yearSpinner.addChangeListener(new YearListener());
+        view.monthSpinner.addChangeListener(new MonthListener());
+        view.daySpinner.addChangeListener(new DayListener());
+        
+        //------- RadioButtons --------
+        view.WGS84Button.addActionListener(new CoordinateSystemListener());
+        view.S42Button.addActionListener(new CoordinateSystemListener());
+        view.SJTSKButton.addActionListener(new CoordinateSystemListener());
+        
+        //------- Buttons --------
+        view.extendedButton.addMouseListener(new ExtendedButtonListener());
+        view.okButton.addMouseListener(new OkButtonListener());
+        view.cancelButton.addMouseListener(new CancelButtonListener());
+        view.helpButton.addMouseListener(new HelpButtonListener());
     }
     
-    class ComboListener implements ActionListener {
+    class CommonActionListener implements ActionListener {
         public void actionPerformed(ActionEvent e) {
-            JComboBox c = (JComboBox)e.getSource();
+            JComboBox c = null;
+            
+            c  = (JComboBox) e.getSource();
+            
             String command = e.getActionCommand();
+            
+            //------- ComboBoxes --------            
             if (command.equals("authorComboBox"))
                 model.setAuthor((Pair<String, Integer>) c.getSelectedItem());
                 
@@ -82,11 +123,25 @@
            
             if (command.equals("projectCombo"))
                 model.setProject((Pair<String, Integer>) c.getSelectedItem());
-           
+            
         }
         
-    }//class ComboListener
+    }//class CommonActionListener
     
+    class CoordinateSystemListener implements ActionListener {
+        public void actionPerformed(ActionEvent e) {
+            String command = e.getActionCommand();
+            if (command.equals("WGS84"))
+                model.setCoordinateSystem(AddEdit.WGS84);
+            
+            if (command.equals("S42"))
+                model.setCoordinateSystem(AddEdit.S42);
+            
+            if (command.equals("SJTSK"))
+                model.setCoordinateSystem(AddEdit.SJTSK);            
+        }
+    }//CoordinateSystemListener
+    
     class TaxonAreaListener implements FocusListener {
         public void focusGained(FocusEvent e) {
         }
@@ -125,5 +180,95 @@
             JTextArea ta = (JTextArea) e.getSource();
             model.setOccurrenceNote(ta.getText());
         }
-    }//LocationAreaListener
+    }//OccurrenceAreaListener
+    
+    class HerbariumListener implements FocusListener {
+        public void focusGained(FocusEvent e) {
+        }
+
+        public void focusLost(FocusEvent e) {
+            JTextField tf = (JTextField) e.getSource();
+            model.setHerbarium(tf.getText());
+        }
+    }//HerbariumListener
+    
+    class QuadrantListener implements FocusListener {
+        public void focusGained(FocusEvent e) {
+        }
+
+        public void focusLost(FocusEvent e) {
+            JTextField tf = (JTextField) e.getSource();
+            model.setQuadrant(tf.getText());
+        }
+    }//QuadrantListener
+    
+    class MonthListener implements ChangeListener {
+        public void stateChanged(ChangeEvent e) {
+            JSpinner s = (JSpinner) e.getSource();
+            model.setMonth((Integer)s.getValue());
+        }
+    }//MonthListener
+    class DayListener implements ChangeListener {
+        public void stateChanged(ChangeEvent e) {
+            JSpinner s = (JSpinner) e.getSource();
+            model.setDay((Integer)s.getValue());
+        }
+    }//DayListener
+    
+    class YearListener implements ChangeListener {
+        public void stateChanged(ChangeEvent e) {
+            JSpinner s = (JSpinner) e.getSource();
+            model.setYear((Integer)s.getValue());
+        }
+    }//YearListener
+    
+    class AltitudeListener implements PropertyChangeListener {
+        public void propertyChange(PropertyChangeEvent evt) {
+            model.setAltitude(((Number)evt.getNewValue()).doubleValue());
+        }        
+    }//AltitudeListener
+
+    class LongitudeListener implements PropertyChangeListener {
+        public void propertyChange(PropertyChangeEvent evt) {
+            model.setLongitude(((Number)evt.getNewValue()).doubleValue());
+        }        
+    }//LongitudeListener
+
+    class LatitudeListener implements PropertyChangeListener {
+        public void propertyChange(PropertyChangeEvent evt) {
+            model.setLatitude(((Number)evt.getNewValue()).doubleValue());
+        }        
+    }//LatitudeListener
+
+    class TimeListener implements PropertyChangeListener {
+        public void propertyChange(PropertyChangeEvent evt) {
+            model.setTime((Date)evt.getNewValue());
+        }        
+    }//AltitudeListener
+    
+    class ExtendedButtonListener extends MouseAdapter {
+        public void mouseClicked(MouseEvent e) {
+            view.switchExtended();
+        }
+    }//ExtendedButtonListener
+    
+    class OkButtonListener extends MouseAdapter {
+        public void mouseClicked(MouseEvent e) {
+            System.out.println("Ok");
+        }
+    }//OkButtonListener
+    
+    class CancelButtonListener extends MouseAdapter {
+        public void mouseClicked(MouseEvent e) {
+            System.out.println("Cancel");
+            view.setVisible(false);
+        }
+    }//CancelButtonListener
+
+    class HelpButtonListener extends MouseAdapter {
+        public void mouseClicked(MouseEvent e) {
+            System.out.println("Help");
+        }
+    }//HelpButtonListener
 }
+

Modified: trunk/src/net/sf/plantlore/client/AddEditView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditView.form	2006-04-23 12:51:06 UTC (rev 177)
+++ trunk/src/net/sf/plantlore/client/AddEditView.form	2006-04-23 12:55:45 UTC (rev 178)
@@ -67,13 +67,13 @@
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
                   <Group type="103" groupAlignment="1" attributes="0">
+                      <Component id="jLabel2" min="-2" max="-2" attributes="0"/>
                       <Component id="TownLabel" min="-2" max="-2" attributes="0"/>
-                      <Component id="jLabel2" min="-2" max="-2" attributes="0"/>
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
                   <Group type="103" groupAlignment="0" max="-2" attributes="0">
                       <Component id="jScrollPane2" linkSize="9" alignment="1" pref="348" max="32767" attributes="1"/>
-                      <Component id="jToggleButton1" min="-2" max="-2" attributes="0"/>
+                      <Component id="extendedButton" min="-2" max="-2" attributes="0"/>
                       <Component id="townComboBox" alignment="1" max="32767" attributes="1"/>
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
@@ -87,7 +87,7 @@
                       <Component id="AuthorLabel" alignment="3" min="-2" max="-2" attributes="0"/>
                       <Component id="townComboBox" alignment="3" min="-2" pref="24" max="-2" attributes="0"/>
                       <Component id="authorComboBox" alignment="3" min="-2" max="-2" attributes="0"/>
-                      <Component id="TownLabel" alignment="3" min="-2" pref="8" max="-2" attributes="0"/>
+                      <Component id="TownLabel" alignment="3" min="-2" pref="16" max="-2" attributes="0"/>
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
                   <Group type="103" groupAlignment="0" attributes="0">
@@ -104,7 +104,7 @@
                               <Component id="checklistButton" alignment="3" max="32767" attributes="1"/>
                               <Component id="YearLabel" alignment="3" min="-2" max="-2" attributes="0"/>
                               <Component id="yearSpinner" alignment="3" min="-2" max="-2" attributes="0"/>
-                              <Component id="jToggleButton1" alignment="3" min="-2" max="-2" attributes="1"/>
+                              <Component id="extendedButton" alignment="3" min="-2" max="-2" attributes="1"/>
                           </Group>
                       </Group>
                       <Component id="jLabel2" min="-2" max="-2" attributes="0"/>
@@ -223,12 +223,13 @@
             </Component>
           </SubComponents>
         </Container>
-        <Component class="javax.swing.JToggleButton" name="jToggleButton1">
+        <Component class="javax.swing.JToggleButton" name="extendedButton">
           <Properties>
             <Property name="text" type="java.lang.String" value="Extended"/>
           </Properties>
           <Events>
-            <EventHandler event="mouseClicked" listener="java.awt.event.MouseListener" parameters="java.awt.event.MouseEvent" handler="jToggleButton1MouseClicked"/>
+            <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="extendedButtonActionPerformed"/>
+            <EventHandler event="mouseClicked" listener="java.awt.event.MouseListener" parameters="java.awt.event.MouseEvent" handler="extendedButtonMouseClicked"/>
           </Events>
           <AuxValues>
             <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
@@ -249,6 +250,7 @@
             </Property>
           </Properties>
           <AuxValues>
+            <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((SpinnerNumberModel)yearSpinner.getModel()).setMinimum(1);&#xa;"/>
             <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
           </AuxValues>
         </Component>
@@ -326,7 +328,7 @@
                       </Group>
                       <Component id="jPanel9" min="-2" max="-2" attributes="1"/>
                   </Group>
-                  <EmptySpace min="-2" pref="109" max="-2" attributes="0"/>
+                  <EmptySpace min="-2" pref="159" max="-2" attributes="0"/>
               </Group>
           </Group>
         </DimensionLayout>
@@ -353,16 +355,16 @@
                       <EmptySpace max="-2" attributes="0"/>
                       <Component id="jLabel3" min="-2" max="-2" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
-                      <Component id="monthSpinner" min="-2" max="-2" attributes="0"/>
+                      <Component id="monthSpinner" linkSize="11" min="-2" pref="39" max="-2" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                       <Component id="jLabel4" min="-2" max="-2" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
-                      <Component id="daySpinner" min="-2" max="-2" attributes="0"/>
+                      <Component id="daySpinner" linkSize="11" min="-2" pref="36" max="-2" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                       <Component id="jLabel5" min="-2" max="-2" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
-                      <Component id="timeFormattedTextField" min="-2" pref="60" max="-2" attributes="0"/>
-                      <EmptySpace pref="158" max="32767" attributes="0"/>
+                      <Component id="timeFormattedTextField" min="-2" pref="69" max="-2" attributes="0"/>
+                      <EmptySpace pref="127" max="32767" attributes="0"/>
                   </Group>
               </Group>
             </DimensionLayout>
@@ -372,10 +374,10 @@
                       <EmptySpace max="-2" attributes="0"/>
                       <Group type="103" groupAlignment="3" attributes="0">
                           <Component id="jLabel3" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="jLabel5" alignment="3" min="-2" max="-2" attributes="0"/>
                           <Component id="monthSpinner" alignment="3" min="-2" max="-2" attributes="0"/>
                           <Component id="jLabel4" alignment="3" min="-2" max="-2" attributes="0"/>
                           <Component id="daySpinner" alignment="3" min="-2" max="-2" attributes="0"/>
-                          <Component id="jLabel5" alignment="3" min="-2" max="-2" attributes="0"/>
                           <Component id="timeFormattedTextField" alignment="3" min="-2" max="-2" attributes="0"/>
                       </Group>
                       <EmptySpace max="32767" attributes="0"/>
@@ -386,6 +388,7 @@
           <SubComponents>
             <Component class="javax.swing.JSpinner" name="monthSpinner">
               <AuxValues>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((SpinnerNumberModel)monthSpinner.getModel()).setMinimum(1);&#xa;((SpinnerNumberModel)monthSpinner.getModel()).setMaximum(12);&#xa;"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -407,6 +410,7 @@
             </Component>
             <Component class="javax.swing.JSpinner" name="daySpinner">
               <AuxValues>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((SpinnerNumberModel)daySpinner.getModel()).setMinimum(1);&#xa;((SpinnerNumberModel)daySpinner.getModel()).setMaximum(31);&#xa;"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -420,7 +424,8 @@
             </Component>
             <Component class="javax.swing.JFormattedTextField" name="timeFormattedTextField">
               <AuxValues>
-                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new JFormattedTextField(new SimpleDateFormat(&quot;HH:mm:ss&quot;));"/>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new JFormattedTextField(DateFormat.getTimeInstance(DateFormat.SHORT,L10n.getCurrentLocale()));&#xa;"/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="timeFormattedTextField.setActionCommand(&quot;timeFormattedTextField&quot;);"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -602,6 +607,7 @@
             </Component>
             <Component class="javax.swing.JTextField" name="quadrantTextField">
               <AuxValues>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="quadrantTextField.setActionCommand(&quot;quadrantTextField&quot;);"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -697,6 +703,7 @@
             </Component>
             <Component class="javax.swing.JTextField" name="herbariumTextField">
               <AuxValues>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="herbariumTextField.setActionCommand(&quot;herbariumTextField&quot;);"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -892,6 +899,9 @@
                 </Property>
               </Properties>
               <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new JFormattedTextField(nf);"/>
+                <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="NumberFormat nf = NumberFormat.getNumberInstance(L10n.getCurrentLocale());&#xa;nf.setMaximumFractionDigits(3);"/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="altitudeFormattedTextField.setActionCommand(&quot;altitudeFormattedTextField&quot;);"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -902,6 +912,8 @@
                 </Property>
               </Properties>
               <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new JFormattedTextField(nf);"/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="latitudeFormattedTextField.setActionCommand(&quot;latitudeFormattedTextField&quot;);&#xa;"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -928,6 +940,8 @@
                 </Property>
               </Properties>
               <AuxValues>
+                <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new JFormattedTextField(nf);"/>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="longitudeFormattedTextField.setActionCommand(&quot;longitudeFormattedTextField&quot;);"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -953,6 +967,7 @@
                 <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="WGS84ButtonActionPerformed"/>
               </Events>
               <AuxValues>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="WGS84Button.setActionCommand(&quot;WGS84&quot;);"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -975,6 +990,7 @@
                 </Property>
               </Properties>
               <AuxValues>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="S42Button.setActionCommand(&quot;S42&quot;);"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -997,6 +1013,7 @@
                 </Property>
               </Properties>
               <AuxValues>
+                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="SJTSKButton.setActionCommand(&quot;SJTSK&quot;);"/>
                 <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
               </AuxValues>
             </Component>
@@ -1059,14 +1076,6 @@
       </SubComponents>
     </Container>
     <Container class="javax.swing.JPanel" name="jPanel8">
-      <Properties>
-        <Property name="minimumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
-          <Dimension value="[780, 90]"/>
-        </Property>
-        <Property name="preferredSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
-          <Dimension value="[780, 50]"/>
-        </Property>
-      </Properties>
       <Constraints>
         <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
           <BorderConstraints direction="South"/>
@@ -1077,54 +1086,54 @@
         <DimensionLayout dim="0">
           <Group type="103" groupAlignment="0" attributes="0">
               <Group type="102" alignment="1" attributes="0">
-                  <EmptySpace min="-2" pref="270" max="-2" attributes="0"/>
-                  <Component id="jButton4" linkSize="4" min="-2" max="-2" attributes="0"/>
-                  <EmptySpace pref="294" max="32767" attributes="0"/>
-                  <Component id="jButton2" linkSize="4" min="-2" pref="87" max="-2" attributes="0"/>
                   <EmptySpace max="-2" attributes="0"/>
-                  <Component id="jButton3" linkSize="4" min="-2" max="-2" attributes="0"/>
+                  <Component id="helpButton" linkSize="12" min="-2" max="-2" attributes="0"/>
+                  <EmptySpace pref="681" max="32767" attributes="0"/>
+                  <Component id="okButton" linkSize="12" min="-2" max="-2" attributes="0"/>
                   <EmptySpace max="-2" attributes="0"/>
-                  <Component id="jButton3" linkSize="4" min="-2" max="-2" attributes="0"/>
+                  <Component id="cancelButton" linkSize="12" min="-2" max="-2" attributes="0"/>
                   <EmptySpace max="-2" attributes="0"/>
               </Group>
           </Group>
         </DimensionLayout>
         <DimensionLayout dim="1">
           <Group type="103" groupAlignment="0" attributes="0">
-              <Group type="102" alignment="1" attributes="0">
-                  <EmptySpace pref="13" max="32767" attributes="0"/>
+              <Group type="102" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
                   <Group type="103" groupAlignment="3" attributes="0">
-                      <Component id="jButton3" linkSize="2" alignment="3" min="-2" max="-2" attributes="0"/>
-                      <Component id="jButton3" linkSize="2" alignment="3" min="-2" max="-2" attributes="0"/>
-                      <Component id="jButton4" alignment="3" min="-2" max="-2" attributes="0"/>
-                      <Component id="jButton2" linkSize="2" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="helpButton" linkSize="13" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="cancelButton" linkSize="13" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="okButton" linkSize="13" alignment="3" min="-2" max="-2" attributes="0"/>
                   </Group>
-                  <EmptySpace max="-2" attributes="0"/>
+                  <EmptySpace pref="40" max="32767" attributes="0"/>
               </Group>
           </Group>
         </DimensionLayout>
       </Layout>
       <SubComponents>
-        <Component class="javax.swing.JButton" name="jButton2">
+        <Component class="javax.swing.JButton" name="cancelButton">
           <Properties>
-            <Property name="text" type="java.lang.String" value="Ok"/>
+            <Property name="text" type="java.lang.String" value="Cancel"/>
           </Properties>
           <AuxValues>
             <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
           </AuxValues>
         </Component>
-        <Component class="javax.swing.JButton" name="jButton3">
+        <Component class="javax.swing.JButton" name="okButton">
           <Properties>
-            <Property name="text" type="java.lang.String" value="Cancel"/>
+            <Property name="text" type="java.lang.String" value="Ok"/>
           </Properties>
           <AuxValues>
             <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
           </AuxValues>
         </Component>
-        <Component class="javax.swing.JButton" name="jButton4">
+        <Component class="javax.swing.JButton" name="helpButton">
           <Properties>
             <Property name="text" type="java.lang.String" value="Help"/>
           </Properties>
+          <Events>
+            <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="helpButtonActionPerformed"/>
+          </Events>
           <AuxValues>
             <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
           </AuxValues>

Modified: trunk/src/net/sf/plantlore/client/AddEditView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditView.java	2006-04-23 12:51:06 UTC (rev 177)
+++ trunk/src/net/sf/plantlore/client/AddEditView.java	2006-04-23 12:55:45 UTC (rev 178)
@@ -7,6 +7,8 @@
 package net.sf.plantlore.client;
 
 import java.awt.Dimension;
+import java.text.DateFormat;
+import java.text.NumberFormat;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Date;
@@ -16,10 +18,13 @@
 import javax.swing.JDialog;
 import javax.swing.JFormattedTextField;
 import javax.swing.JPanel;
+import javax.swing.SpinnerDateModel;
+import javax.swing.SpinnerNumberModel;
 import net.sf.plantlore.common.AutoComboBox;
 import net.sf.plantlore.common.AutoTextArea;
 import net.sf.plantlore.common.Pair;
 import net.sf.plantlore.common.record.AuthorOccurrence;
+import net.sf.plantlore.l10n.L10n;
 
 /**
  *
@@ -77,7 +82,7 @@
         choices[i] = plants[i].getFirst();
 
         taxonTextArea = new AutoTextArea(choices, this);
-        jToggleButton1 = new javax.swing.JToggleButton();
+        extendedButton = new javax.swing.JToggleButton();
         checklistButton = new javax.swing.JButton();
         yearSpinner = new javax.swing.JSpinner();
         jPanel3 = new javax.swing.JPanel();
@@ -87,7 +92,8 @@
         jLabel4 = new javax.swing.JLabel();
         daySpinner = new javax.swing.JSpinner();
         jLabel5 = new javax.swing.JLabel();
-        timeFormattedTextField = new JFormattedTextField(new SimpleDateFormat("HH:mm:ss"));
+        timeFormattedTextField = new JFormattedTextField(DateFormat.getTimeInstance(DateFormat.SHORT,L10n.getCurrentLocale()));
+
         jPanel5 = new javax.swing.JPanel();
         jLabel9 = new javax.swing.JLabel();
         jLabel10 = new javax.swing.JLabel();
@@ -113,11 +119,13 @@
         locationNoteArea = new javax.swing.JTextArea();
         jPanel1 = new javax.swing.JPanel();
         jLabel6 = new javax.swing.JLabel();
-        altitudeFormattedTextField = new javax.swing.JFormattedTextField();
-        latitudeFormattedTextField = new javax.swing.JFormattedTextField();
+        NumberFormat nf = NumberFormat.getNumberInstance(L10n.getCurrentLocale());
+        nf.setMaximumFractionDigits(3);
+        altitudeFormattedTextField = new JFormattedTextField(nf);
+        latitudeFormattedTextField = new JFormattedTextField(nf);
         jLabel7 = new javax.swing.JLabel();
         jLabel8 = new javax.swing.JLabel();
-        longitudeFormattedTextField = new javax.swing.JFormattedTextField();
+        longitudeFormattedTextField = new JFormattedTextField(nf);
         WGS84Button = new javax.swing.JRadioButton();
         S42Button = new javax.swing.JRadioButton();
         SJTSKButton = new javax.swing.JRadioButton();
@@ -125,9 +133,9 @@
         jScrollPane5 = new javax.swing.JScrollPane();
         occurrenceNoteArea = new javax.swing.JTextArea();
         jPanel8 = new javax.swing.JPanel();
-        jButton2 = new javax.swing.JButton();
-        jButton3 = new javax.swing.JButton();
-        jButton4 = new javax.swing.JButton();
+        cancelButton = new javax.swing.JButton();
+        okButton = new javax.swing.JButton();
+        helpButton = new javax.swing.JButton();
 
         setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
         setResizable(false);
@@ -163,16 +171,22 @@
         taxonTextArea.setAutoscrolls(false);
         jScrollPane3.setViewportView(taxonTextArea);
 
-        jToggleButton1.setText("Extended");
-        jToggleButton1.addMouseListener(new java.awt.event.MouseAdapter() {
+        extendedButton.setText("Extended");
+        extendedButton.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(java.awt.event.ActionEvent evt) {
+                extendedButtonActionPerformed(evt);
+            }
+        });
+        extendedButton.addMouseListener(new java.awt.event.MouseAdapter() {
             public void mouseClicked(java.awt.event.MouseEvent evt) {
-                jToggleButton1MouseClicked(evt);
+                extendedButtonMouseClicked(evt);
             }
         });
 
         checklistButton.setText("Checklist");
 
         yearSpinner.setValue(2006);
+        ((SpinnerNumberModel)yearSpinner.getModel()).setMinimum(1);
 
         org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
         jPanel2.setLayout(jPanel2Layout);
@@ -195,12 +209,12 @@
                     .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 315, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
-                    .add(TownLabel)
-                    .add(jLabel2))
+                    .add(jLabel2)
+                    .add(TownLabel))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                     .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
-                    .add(jToggleButton1)
+                    .add(extendedButton)
                     .add(org.jdesktop.layout.GroupLayout.TRAILING, townComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                 .addContainerGap())
         );
@@ -214,7 +228,7 @@
                     .add(AuthorLabel)
                     .add(townComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(authorComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                    .add(TownLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(TownLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jPanel2Layout.createSequentialGroup()
@@ -228,7 +242,7 @@
                             .add(checklistButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                             .add(YearLabel)
                             .add(yearSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                            .add(jToggleButton1)))
+                            .add(extendedButton)))
                     .add(jLabel2))
                 .addContainerGap())
         );
@@ -238,13 +252,20 @@
         jPanel3.setMinimumSize(new java.awt.Dimension(800, 395));
         jPanel3.setPreferredSize(new java.awt.Dimension(800, 395));
         jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Time", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
+        ((SpinnerNumberModel)monthSpinner.getModel()).setMinimum(1);
+        ((SpinnerNumberModel)monthSpinner.getModel()).setMaximum(12);
 
         jLabel3.setText("Month:");
 
         jLabel4.setText("Day:");
 
+        ((SpinnerNumberModel)daySpinner.getModel()).setMinimum(1);
+        ((SpinnerNumberModel)daySpinner.getModel()).setMaximum(31);
+
         jLabel5.setText("Time:");
 
+        timeFormattedTextField.setActionCommand("timeFormattedTextField");
+
         org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
         jPanel4.setLayout(jPanel4Layout);
         jPanel4Layout.setHorizontalGroup(
@@ -253,27 +274,30 @@
                 .addContainerGap()
                 .add(jLabel3)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                .add(monthSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .add(monthSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jLabel4)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                .add(daySpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .add(daySpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(jLabel5)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                .add(timeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                .addContainerGap(158, Short.MAX_VALUE))
+                .add(timeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addContainerGap(127, Short.MAX_VALUE))
         );
+
+        jPanel4Layout.linkSize(new java.awt.Component[] {daySpinner, monthSpinner}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
+
         jPanel4Layout.setVerticalGroup(
             jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(jPanel4Layout.createSequentialGroup()
                 .addContainerGap()
                 .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                     .add(jLabel3)
+                    .add(jLabel5)
                     .add(monthSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(jLabel4)
                     .add(daySpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                    .add(jLabel5)
                     .add(timeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                 .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         );
@@ -301,6 +325,8 @@
         ((AutoComboBox)phytCountryCombo).setStrict(false);
         phytCountryCombo.setActionCommand("phytCountryCombo");
 
+        quadrantTextField.setActionCommand("quadrantTextField");
+
         org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
         jPanel5.setLayout(jPanel5Layout);
         jPanel5Layout.setHorizontalGroup(
@@ -366,6 +392,8 @@
 
         projectLabel.setText("Project:");
 
+        herbariumTextField.setActionCommand("herbariumTextField");
+
         sourceLabel.setText("Source:");
 
         ((AutoComboBox)sourceCombo).setStrict(false);
@@ -442,20 +470,24 @@
         jLabel6.setText("Altitude:");
 
         altitudeFormattedTextField.setNextFocusableComponent(latitudeFormattedTextField);
+        altitudeFormattedTextField.setActionCommand("altitudeFormattedTextField");
 
         latitudeFormattedTextField.setNextFocusableComponent(longitudeFormattedTextField);
+        latitudeFormattedTextField.setActionCommand("latitudeFormattedTextField");
 
         jLabel7.setText("Latitude:");
 
         jLabel8.setText("Longitude:");
 
         longitudeFormattedTextField.setNextFocusableComponent(WGS84Button);
+        longitudeFormattedTextField.setActionCommand("longitudeFormattedTextField");
 
         convertCoordinatesGroup.add(WGS84Button);
         WGS84Button.setText("WGS84");
         WGS84Button.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
         WGS84Button.setMargin(new java.awt.Insets(0, 0, 0, 0));
         WGS84Button.setNextFocusableComponent(S42Button);
+        WGS84Button.setActionCommand("WGS84");
         WGS84Button.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 WGS84ButtonActionPerformed(evt);
@@ -467,12 +499,14 @@
         S42Button.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
         S42Button.setMargin(new java.awt.Insets(0, 0, 0, 0));
         S42Button.setNextFocusableComponent(SJTSKButton);
+        S42Button.setActionCommand("S42");
 
         convertCoordinatesGroup.add(SJTSKButton);
         SJTSKButton.setText("S-JTSK");
         SJTSKButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
         SJTSKButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
         SJTSKButton.setNextFocusableComponent(sourceCombo);
+        SJTSKButton.setActionCommand("SJTSK");
 
         org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
         jPanel1.setLayout(jPanel1Layout);
@@ -583,67 +617,70 @@
                         .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                         .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                     .add(jPanel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
-                .add(109, 109, 109))
+                .add(159, 159, 159))
         );
         getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);
 
-        jPanel8.setMinimumSize(new java.awt.Dimension(780, 90));
-        jPanel8.setPreferredSize(new java.awt.Dimension(780, 50));
-        jButton2.setText("Ok");
+        cancelButton.setText("Cancel");
 
-        jButton3.setText("Cancel");
+        okButton.setText("Ok");
 
-        jButton4.setText("Help");
+        helpButton.setText("Help");
+        helpButton.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(java.awt.event.ActionEvent evt) {
+                helpButtonActionPerformed(evt);
+            }
+        });
 
         org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
         jPanel8.setLayout(jPanel8Layout);
         jPanel8Layout.setHorizontalGroup(
             jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8Layout.createSequentialGroup()
-                .add(270, 270, 270)
-                .add(jButton4)
-                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 294, Short.MAX_VALUE)
-                .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addContainerGap()
+                .add(helpButton)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 681, Short.MAX_VALUE)
+                .add(okButton)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                .add(jButton3)
-                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                .add(jButton3)
+                .add(cancelButton)
                 .addContainerGap())
         );
 
-        jPanel8Layout.linkSize(new java.awt.Component[] {jButton2, jButton3, jButton4}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
+        jPanel8Layout.linkSize(new java.awt.Component[] {cancelButton, helpButton, okButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
 
         jPanel8Layout.setVerticalGroup(
             jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
-            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8Layout.createSequentialGroup()
-                .addContainerGap(13, Short.MAX_VALUE)
+            .add(jPanel8Layout.createSequentialGroup()
+                .addContainerGap()
                 .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                    .add(jButton3)
-                    .add(jButton3)
-                    .add(jButton4)
-                    .add(jButton2))
-                .addContainerGap())
+                    .add(helpButton)
+                    .add(cancelButton)
+                    .add(okButton))
+                .addContainerGap(40, Short.MAX_VALUE))
         );
 
-        jPanel8Layout.linkSize(new java.awt.Component[] {jButton2, jButton3}, org.jdesktop.layout.GroupLayout.VERTICAL);
+        jPanel8Layout.linkSize(new java.awt.Component[] {cancelButton, helpButton, okButton}, org.jdesktop.layout.GroupLayout.VERTICAL);
 
         getContentPane().add(jPanel8, java.awt.BorderLayout.SOUTH);
 
         pack();
     }// </editor-fold>//GEN-END:initComponents
 
+    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
+// TODO add your handling code here:
+    }//GEN-LAST:event_helpButtonActionPerformed
+
+    private void extendedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extendedButtonActionPerformed
+// TODO add your handling code here:
+    }//GEN-LAST:event_extendedButtonActionPerformed
+
     private void WGS84ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WGS84ButtonActionPerformed
 // TODO add your handling code here:
     }//GEN-LAST:event_WGS84ButtonActionPerformed
 
-    private void jToggleButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton1MouseClicked
-        visible = !visible;
-        jPanel3.setVisible(visible);
-        jPanel2.setPreferredSize(new Dimension(DIALOG_WIDTH,190));
-        jPanel8.setPreferredSize(new Dimension(DIALOG_WIDTH,50));
-        this.pack();
+    private void extendedButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_extendedButtonMouseClicked
 // TODO add your handling code here:
-    }//GEN-LAST:event_jToggleButton1MouseClicked
+    }//GEN-LAST:event_extendedButtonMouseClicked
 
     private void authorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorComboBoxActionPerformed
 // TODO add your handling code here:
@@ -651,6 +688,19 @@
     
     public void loadComponentData()
     {
+        switch (model.getCoordinateSystem()) {
+            case AddEdit.WGS84:
+                WGS84Button.setSelected(true);
+                break;
+            case AddEdit.S42:
+                S42Button.setSelected(true);
+                break;
+            case AddEdit.SJTSK:
+                SJTSKButton.setSelected(true);
+                break;
+            default:
+                WGS84Button.setSelected(true);
+        }
         authorComboBox.setSelectedItem(model.getAuthor());        
         townComboBox.setSelectedItem(model.getVillage());
         taxonTextArea.insert(model.getTaxon(),0);
@@ -665,9 +715,9 @@
         phytCountryCombo.setSelectedItem(model.getPhytCountry());
         quadrantTextField.setText(model.getQuadrant());
         
-        altitudeFormattedTextField.setText(""+model.getAltitude());
-        longitudeFormattedTextField.setText(""+model.getLongitude());
-        latitudeFormattedTextField.setText(""+model.getLatitude());
+        altitudeFormattedTextField.setValue(model.getAltitude());
+        longitudeFormattedTextField.setValue(model.getLongitude());
+        latitudeFormattedTextField.setValue(model.getLatitude());
         sourceCombo.setSelectedItem(model.getSource());
         publicationCombo.setSelectedItem(model.getPublication());
         herbariumTextField.setText(model.getHerbarium());
@@ -704,6 +754,14 @@
         timeFormattedTextField.setValue(new Date());        
     }
     
+    public void switchExtended() {
+        visible = !visible;
+        jPanel3.setVisible(visible);
+        jPanel2.setPreferredSize(new Dimension(DIALOG_WIDTH,190));
+        jPanel8.setPreferredSize(new Dimension(DIALOG_WIDTH,50));
+        this.pack();        
+    }
+    
     /**
      * @param args the command line arguments
      */
@@ -716,8 +774,11 @@
     }
 
     public void update(Observable o, Object arg) {
-        phytCodeCombo.setSelectedItem(model.getPhytCode());
-        phytNameCombo.setSelectedItem(model.getPhytName());
+        String s = (String) arg;
+        if (s.equals("updateCode"))
+            phytCodeCombo.setSelectedItem(model.getPhytCode());
+        if (s.equals("updateName"))
+            phytNameCombo.setSelectedItem(model.getPhytName());
     }
     
     // Variables declaration - do not modify//GEN-BEGIN:variables
@@ -730,15 +791,15 @@
     protected javax.swing.JLabel YearLabel;
     protected javax.swing.JFormattedTextField altitudeFormattedTextField;
     protected javax.swing.JComboBox authorComboBox;
+    protected javax.swing.JButton cancelButton;
     protected javax.swing.JButton checklistButton;
     private javax.swing.ButtonGroup convertCoordinatesGroup;
     protected javax.swing.JSpinner daySpinner;
     protected javax.swing.JTextArea descriptionArea;
+    protected javax.swing.JToggleButton extendedButton;
+    protected javax.swing.JButton helpButton;
     protected javax.swing.JLabel herbariumLabel;
     protected javax.swing.JTextField herbariumTextField;
-    protected javax.swing.JButton jButton2;
-    protected javax.swing.JButton jButton3;
-    protected javax.swing.JButton jButton4;
     protected javax.swing.JLabel jLabel10;
     protected javax.swing.JLabel jLabel11;
     protected javax.swing.JLabel jLabel13;
@@ -764,12 +825,12 @@
     private javax.swing.JScrollPane jScrollPane3;
     private javax.swing.JScrollPane jScrollPane4;
     private javax.swing.JScrollPane jScrollPane5;
-    protected javax.swing.JToggleButton jToggleButton1;
     protected javax.swing.JFormattedTextField latitudeFormattedTextField;
     protected javax.swing.JTextArea locationNoteArea;
     protected javax.swing.JFormattedTextField longitudeFormattedTextField;
     protected javax.swing.JSpinner monthSpinner;
     protected javax.swing.JTextArea occurrenceNoteArea;
+    protected javax.swing.JButton okButton;
     protected javax.swing.JComboBox phytCodeCombo;
     protected javax.swing.JComboBox phytCountryCombo;
     protected javax.swing.JComboBox phytNameCombo;

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-23 12:51:06 UTC (rev 177)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-23 12:55:45 UTC (rev 178)
@@ -65,6 +65,8 @@
     AddEdit editModel;
     AddEditView addView;
     AddEditView editView;
+    AddEditCtrl addCtrl;
+    AddEditCtrl editCtrl;
     Settings settingsModel;
     SettingsView settingsView;
     SettingsCtrl settingsCtrl;
@@ -290,10 +292,16 @@
                 editModel.setRecord((AuthorOccurrence) row[row.length-1]);
                 editView = new AddEditView(view, true, editModel, true);
                 editView.setTitle("Edit occurrence");
+                editCtrl = new AddEditCtrl(editModel, editView, true);
+                editView.loadComponentData();
+                editView.setVisible(true);                
+                return;
+            } else {
+                Object[] row = model.getSelectedRow();
+                editModel.setRecord((AuthorOccurrence) row[row.length-1]);
+                editView.loadComponentData();
+                editView.setVisible(true);
             }
-            editView.loadComponentData();
-            AddEditCtrl aec = new AddEditCtrl(editModel, editView, true);
-            editView.setVisible(true);
         }
     }
     

Modified: trunk/src/net/sf/plantlore/client/Plantlore.java
===================================================================
--- trunk/src/net/sf/plantlore/client/Plantlore.java	2006-04-23 12:51:06 UTC (rev 177)
+++ trunk/src/net/sf/plantlore/client/Plantlore.java	2006-04-23 12:55:45 UTC (rev 178)
@@ -92,6 +92,7 @@
         logger.info("AppCore MVC constructed. Plantlore client should be visible now.");
         } catch(RuntimeException e) {
             //new ExceptionDialog(view,"Some exception was thrown: "+e);
+            e.printStackTrace();
         }
     }
     

Modified: trunk/src/net/sf/plantlore/l10n/L10n.java
===================================================================
--- trunk/src/net/sf/plantlore/l10n/L10n.java	2006-04-23 12:51:06 UTC (rev 177)
+++ trunk/src/net/sf/plantlore/l10n/L10n.java	2006-04-23 12:55:45 UTC (rev 178)
@@ -29,6 +29,7 @@
     private static ResourceBundle resource;
     private static Preferences prefs;
     private static Logger logger = Logger.getLogger(L10n.class.getPackage().getName());
+    private static Locale currentLocale;
     
     /** Creates a new instance of L10n */
     public L10n()
@@ -70,6 +71,7 @@
                 logger.info("Using user stored locale "+locale);
         }
         resource = ResourceBundle.getBundle(RESOURCE_NAME, loc);
+        currentLocale = loc;
     }
     
     /** Gets string for the given key
@@ -107,4 +109,8 @@
         
         return Character.toUpperCase(c);
     }
+    
+    public static Locale getCurrentLocale() {
+        return (Locale) currentLocale.clone();
+    }
 }



From jakubkotowski at gmx.net  Sun Apr 23 16:38:15 2006
From: jakubkotowski at gmx.net (Jakub Kotowski)
Date: Sun, 23 Apr 2006 16:38:15 +0200
Subject: [Plantlore-dev] navrhy od michala bacaka
Message-ID: <1145803095.11074.0.camel@kryton>

Jsou na urtaxu tam, co ty predchozi.

Jakub




From krater at berlios.de  Sun Apr 23 17:26:31 2006
From: krater at berlios.de (krater at berlios.de)
Date: Sun, 23 Apr 2006 17:26:31 +0200
Subject: [Plantlore-dev] r179 - in trunk/src/net/sf/plantlore: client/export client/export/builders common/record
Message-ID: <200604231526.k3NFQVbL016294@sheep.berlios.de>

Author: krater
Date: 2006-04-23 17:26:30 +0200 (Sun, 23 Apr 2006)
New Revision: 179

Added:
   trunk/src/net/sf/plantlore/client/export/RecordWalkBuilder.java
   trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
Modified:
   trunk/src/net/sf/plantlore/client/export/Builder.java
   trunk/src/net/sf/plantlore/client/export/Export.java
   trunk/src/net/sf/plantlore/client/export/MetaBuilder.java
   trunk/src/net/sf/plantlore/client/export/Template.java
   trunk/src/net/sf/plantlore/common/record/Author.java
   trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java
   trunk/src/net/sf/plantlore/common/record/Habitat.java
   trunk/src/net/sf/plantlore/common/record/HistoryChange.java
   trunk/src/net/sf/plantlore/common/record/HistoryColumn.java
   trunk/src/net/sf/plantlore/common/record/HistoryRecord.java
   trunk/src/net/sf/plantlore/common/record/LastUpdate.java
   trunk/src/net/sf/plantlore/common/record/Metadata.java
   trunk/src/net/sf/plantlore/common/record/Occurrence.java
   trunk/src/net/sf/plantlore/common/record/Phytochorion.java
   trunk/src/net/sf/plantlore/common/record/Plant.java
   trunk/src/net/sf/plantlore/common/record/Publication.java
   trunk/src/net/sf/plantlore/common/record/Record.java
   trunk/src/net/sf/plantlore/common/record/Territory.java
   trunk/src/net/sf/plantlore/common/record/Village.java
Log:
Methods of the Builder interface throw IOException now.
The Exporter (Export.java) is a little bit more general now.
Two abstract builders have been added:
1. MetaBuilder - hardwired database structure, faster.
2. RecordWalkBuilder - little bit more flexible, uses introspection (slower).
You want to subclass one of these abstract builders. See CSVBuilder.java which is an almost final version of CVS Builder.
Both abstract builders have the same function; the only difference is how they carry it out.
The Template class has been extended to suit its purpose better.

All records have two more methods now: getForeignKeys and getColumns - 
both will be used (at least) by the editor which will present the User with a set of columns that can be exported.




Modified: trunk/src/net/sf/plantlore/client/export/Builder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -1,5 +1,7 @@
 package net.sf.plantlore.client.export;
 
+import java.io.IOException;
+
 import net.sf.plantlore.common.record.*;
 
 /**
@@ -11,14 +13,14 @@
  */
 public interface Builder {
 		
-	void makeHeader();
+	void makeHeader() throws IOException;
 	
-	void makeFooter();
+	void makeFooter() throws IOException;
 	
-	void startNewRecord();
+	void startNewRecord() throws IOException;
 	
-	void writeRecord(Record arg);
+	void writeRecord(Record[] args) throws IOException;
 	
-	void finishRecord();
+	void finishRecord() throws IOException;
 	
 }

Modified: trunk/src/net/sf/plantlore/client/export/Export.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Export.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/client/export/Export.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -1,5 +1,6 @@
 package net.sf.plantlore.client.export;
 
+import java.io.IOException;
 import java.rmi.RemoteException;
 
 import net.sf.plantlore.common.Selection;
@@ -43,13 +44,18 @@
 			builder.makeHeader();
 			
 			for(int i = 0; i < database.getNumRows( result ); i++) {
-				Object[] objRecord = database.next( result );
-				Record record = (Record)objRecord[0];
-				if( !selection.contains( record ) ) continue;
+				Record[] records = (Record[]) database.next( result );
+				if( !selection.contains( records[0] ) ) continue;
 				
 				count++;
 				builder.startNewRecord();
-				builder.writeRecord( record );
+				/* Why do we give the whole array of records?
+				 * It is more general - the builder can 
+				 * # either start with the records[0] and use the introspection,
+				 * # or use the whole records array and the template
+				 * to re-create the record.
+				 */
+				builder.writeRecord( records );
 				builder.finishRecord();
 			}
 		
@@ -62,6 +68,9 @@
 		catch(RemoteException e) {
 			logger.error(e); e.printStackTrace();
 		}
+		catch(IOException e) {
+			logger.error(e); e.printStackTrace();
+		}
 	}
 	
 	

Modified: trunk/src/net/sf/plantlore/client/export/MetaBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/MetaBuilder.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/client/export/MetaBuilder.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -1,18 +1,194 @@
 package net.sf.plantlore.client.export;
 
-import net.sf.plantlore.common.record.Record;
+import java.io.IOException;
 
+import net.sf.plantlore.client.export.Template;
+import net.sf.plantlore.common.record.*;
 
-public class MetaBuilder implements Builder {
+
+/**
+ * MetaBuilder. Hard-wired database scheme.
+ * Fast, but not flexible (other permutations of columns aren't possible).
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-23
+ */
+
+
+
+public abstract class MetaBuilder implements Builder {
 	
-	public void makeHeader() {}
+	private Template tmp;
 	
-	public void makeFooter() {}
+	public MetaBuilder(Template tmp) {
+		this.tmp = tmp;
+	}
 	
-	public void startNewRecord() {}
 	
-	public void finishRecord() {}
+	public void writeRecord(Record[] args) throws IOException {
+		Record r = args[0];
+		if(r instanceof Author) process( (Author)r );
+		else if(r instanceof AuthorOccurrence) process( (AuthorOccurrence)r );
+		else if(r instanceof Habitat) process( (Habitat)r );
+		else if(r instanceof Metadata) process( (Metadata)r );
+		else if(r instanceof Occurrence) process( (Occurrence)r );
+		else if(r instanceof Phytochorion) process( (Phytochorion)r );
+		else if(r instanceof Plant) process( (Plant)r );
+		else if(r instanceof Publication) process( (Publication)r );
+		else if(r instanceof Territory) process( (Territory)r );
+		else if(r instanceof Village) process( (Village)r );
+		else /* ERROR! */;
+	}
+
+	protected void process(Author a) throws IOException {
+		if (!tmp.isSetTableD(Author.class))
+			return; // prevent recursion!
+		wc(Author.class, Author.WHOLENAME, a.getWholeName());
+		wc(Author.class, Author.ORGANIZATION, a.getOrganization());
+		wc(Author.class, Author.ADDRESS, a.getAddress());
+		wc(Author.class, Author.EMAIL, a.getEmail());
+		wc(Author.class, Author.PHONENUMBER, a.getPhoneNumber());
+		wc(Author.class, Author.URL, a.getUrl());
+		wc(Author.class, Author.ROLE, a.getRole());
+		wc(Author.class, Author.NOTE, a.getNote());
+	}
+
+	protected void process(AuthorOccurrence a) throws IOException {
+		if (!tmp.isSetTableD(AuthorOccurrence.class))
+			return; // prevent recursion!
+		process(a.getAuthor());
+		process(a.getOccurrence());
+		wc(AuthorOccurrence.class, AuthorOccurrence.ROLE, a.getRole());
+		wc(AuthorOccurrence.class, AuthorOccurrence.RESULTREVISION, a
+				.getResultRevision());
+	}
+
+	protected void process(Habitat a) throws IOException {
+		if (!tmp.isSetTableD(Habitat.class))
+			return; // prevent recursion!
+		process(a.getTerritory());
+		process(a.getPhytochorion());
+		process(a.getNearestVillage());
+		wc(Habitat.class, Habitat.DESCRIPTION, a.getDescription());
+		wc(Habitat.class, Habitat.COUNTRY, a.getCountry());
+		wc(Habitat.class, Habitat.NOTE, a.getNote());
+		wc(Habitat.class, Habitat.QUADRANT, a.getQuadrant());
+		wc(Habitat.class, Habitat.ALTITUDE, a.getAltitude());
+		wc(Habitat.class, Habitat.LATITUDE, a.getLatitude());
+		wc(Habitat.class, Habitat.LONGITUDE, a.getLongitude());
+	}
+
+	protected void process(Metadata a) throws IOException {
+		if (!tmp.isSetTableD(Metadata.class))
+			return; // prevent recursion!
+		wc(Metadata.class, Metadata.CONTENTCONTACTNAME, a
+				.getContentContactName());
+		wc(Metadata.class, Metadata.CONTENTCONTACTADDRESS, a
+				.getContentContactAddress());
+		wc(Metadata.class, Metadata.CONTENTCONTACTEMAIL, a
+				.getContentContactEmail());
+		wc(Metadata.class, Metadata.DATASETTITLE, a.getDataSetTitle());
+		wc(Metadata.class, Metadata.DATASETDETAILS, a.getDataSetDetails());
+		wc(Metadata.class, Metadata.DATECREATE, a.getDateCreate());
+		wc(Metadata.class, Metadata.DATEMODIFIED, a.getDateModified());
+		wc(Metadata.class, Metadata.OWNERORGANIZATIONABBREV, a
+				.getOwnerOrganizationAbbrev());
+		wc(Metadata.class, Metadata.RECORDBASIS, a.getRecordBasis());
+		wc(Metadata.class, Metadata.SOURCEINSTITUTIONID, a
+				.getSourceInstitutionId());
+		wc(Metadata.class, Metadata.SOURCEID, a.getSourceId());
+		wc(Metadata.class, Metadata.TECHNICALCONTACTNAME, a
+				.getTechnicalContactName());
+		wc(Metadata.class, Metadata.TECHNICALCONTACTADDRESS, a
+				.getTechnicalContactAddress());
+		wc(Metadata.class, Metadata.TECHNICALCONTACTEMAIL, a
+				.getTechnicalContactEmail());
+		wc(Metadata.class, Metadata.VERSIONPLANTSFILE, a.getVersionPlantsFile());
+	}
+
+	protected void process(Occurrence a) throws IOException {
+		if (!tmp.isSetTableD(Occurrence.class))
+			return; // prevent recursion!
+		process(a.getPlant());
+		process(a.getHabitat());
+		process(a.getMetadata());
+		process(a.getPublication());
+		wc(Occurrence.class, Occurrence.UNITIDDB, a.getUnitIdDb());
+		wc(Occurrence.class, Occurrence.UNITVALUE, a.getUnitValue());
+		wc(Occurrence.class, Occurrence.DAYCOLLECTED, a.getDayCollected());
+		wc(Occurrence.class, Occurrence.MONTHCOLLECTED, a.getMonthCollected());
+		wc(Occurrence.class, Occurrence.YEARCOLLECTED, a.getYearCollected());
+		wc(Occurrence.class, Occurrence.TIMECOLLECTED, a.getTimeCollected());
+		wc(Occurrence.class, Occurrence.ISODATETIMEBEGIN, a
+				.getIsoDateTimeBegin());
+		wc(Occurrence.class, Occurrence.DATASOURCE, a.getDataSource());
+		wc(Occurrence.class, Occurrence.HERBARIUM, a.getHerbarium());
+		wc(Occurrence.class, Occurrence.NOTE, a.getNote());
+		wc(Occurrence.class, Occurrence.CREATEDWHEN, a.getCreatedWhen());
+		wc(Occurrence.class, Occurrence.UPDATEDWHEN, a.getUpdatedWhen());
+	}
+
+	protected void process(Phytochorion a) throws IOException {
+		if (!tmp.isSetTableD(Phytochorion.class))
+			return; // prevent recursion!
+		wc(Phytochorion.class, Phytochorion.NAME, a.getName());
+		wc(Phytochorion.class, Phytochorion.CODE, a.getCode());
+	}
+
+	protected void process(Plant a) throws IOException {
+		if (!tmp.isSetTableD(Plant.class))
+			return; // prevent recursion!
+		wc(Plant.class, Plant.TAXON, a.getTaxon());
+		wc(Plant.class, Plant.SCIENTIFICNAMEAUTHOR, a.getScientificNameAuthor());
+		wc(Plant.class, Plant.CZECHNAME, a.getCzechName());
+		wc(Plant.class, Plant.GENUS, a.getGenus());
+		wc(Plant.class, Plant.SPECIES, a.getSpecies());
+		wc(Plant.class, Plant.SYNONYMS, a.getSynonyms());
+		wc(Plant.class, Plant.SURVEYTAXID, a.getSurveyTaxId());
+		wc(Plant.class, Plant.NOTE, a.getNote());
+	}
+
+	protected void process(Publication a) throws IOException {
+		if (!tmp.isSetTableD(Publication.class))
+			return; // prevent recursion!
+		wc(Publication.class, Publication.COLLECTIONNAME, a.getCollectionName());
+		wc(Publication.class, Publication.COLLECTIONYEARPUBLICATION, a
+				.getCollectionYearPublication());
+		wc(Publication.class, Publication.JOURNALNAME, a.getJournalName());
+		wc(Publication.class, Publication.JOURNALAUTHORNAME, a
+				.getJournalAuthorName());
+		wc(Publication.class, Publication.NOTE, a.getNote());
+		wc(Publication.class, Publication.REFERENCECITATION, a
+				.getReferenceCitation());
+		wc(Publication.class, Publication.REFERENCEDETAIL, a
+				.getReferenceDetail());
+		wc(Publication.class, Publication.URL, a.getUrl());
+	}
+
+	protected void process(Territory a) throws IOException {
+		if (!tmp.isSetTableD(Territory.class))
+			return; // prevent recursion!
+		wc(Territory.class, Territory.NAME, a.getName());
+	}
+
+	protected void process(Village a) throws IOException {
+		if (!tmp.isSetTableD(Village.class))
+			return; // prevent recursion!
+		wc(Village.class, Village.NAME, a.getName());
+	}
+
+	/** Write Column! */
+	protected abstract void wc(Class table, String column, Object value)
+		throws IOException;
+
 	
-	public void writeRecord(Record arg) {}
 	
+	public void makeHeader() throws IOException {}
+	
+	public void makeFooter() throws IOException {}
+	
+	public void startNewRecord() throws IOException {}
+	
+	public void finishRecord() throws IOException {}
+
 }

Added: trunk/src/net/sf/plantlore/client/export/RecordWalkBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/RecordWalkBuilder.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/client/export/RecordWalkBuilder.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -0,0 +1,58 @@
+package net.sf.plantlore.client.export;
+
+import java.io.IOException;
+import java.util.HashSet;
+
+import net.sf.plantlore.common.record.Record;
+
+
+public abstract class RecordWalkBuilder implements Builder {
+	
+	private Template tmp;
+	
+		
+	public RecordWalkBuilder(Template tmp) {
+		this.tmp = tmp;
+	}
+	
+	
+	
+	public void writeRecord(Record[] args) throws IOException {
+		for(Record record : args) dealWith( record );
+	}
+	
+	private String methodName(String column) {
+		StringBuilder s = new StringBuilder("get" + column);
+		s.setCharAt(3, Character.toUpperCase(s.charAt(3)));
+		return s.toString();
+	}
+	
+	protected void dealWith(Record record) throws IOException {
+		Class table = Template.whichTable( record );
+		if( table == null ||  !tmp.isSetTableD( table ) ) return;
+		
+		String[] foreignKeys = record.getForeignKeys(); // I love inheritance ;)
+		String[] allColumns = record.getColumns();
+		
+		HashSet<String> fk = new HashSet<String>(20);
+		if( foreignKeys != null ) for(String key : foreignKeys) fk.add( key );
+		
+		for(String column : allColumns) {
+			if( fk.contains(column) || !tmp.isSet(table, column) ) continue; // skip foreign keys and unwanted columns
+			try {
+				Object value = table.getMethod( methodName(column), new Class[0] ).invoke( record, new Object[0] );
+				wc(table, column, value);
+			} catch(Exception e) {}
+		}
+	}
+	
+	
+	protected abstract void wc(Class table, String column, Object value) throws IOException;
+		
+		
+	
+	public void makeHeader() throws IOException {}
+	public void makeFooter() throws IOException {}
+	public void startNewRecord() throws IOException {}
+	public void finishRecord() throws IOException {}
+}

Modified: trunk/src/net/sf/plantlore/client/export/Template.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -1,9 +1,12 @@
 package net.sf.plantlore.client.export;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
 
+import net.sf.plantlore.common.record.*;
 
+
 /**
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
@@ -11,23 +14,41 @@
  */
 public class Template {
 	
-	private Class root = null;
-	private Collection<String> tableColumn = new HashSet<String>(20);
+	/** The list of all pairs Table:Column that shall be exported. */
+	private Collection<String> columns = new HashSet<String>(20);
 	
-		
-	public void setRootTable(Class table) { root = table; }
-	public Class getRootTable() { return root; }
+	/** The list of all tables the current template covers. */
+	private ArrayList<Class> tables = new ArrayList<Class>(20);
 	
-	public void setTable(Class table) { tableColumn.add(table.toString()); }
-	public void unsetTable(Class table) { tableColumn.remove(table.toString()); }
-	public boolean isSetTable(Class table) { return tableColumn.contains(table.toString()); } 
+	/** The list of "basic tables" i.e. tables related directly to the Occurence data. */
+	public final static Class[] BASIC_TABLES = new Class[] { 
+			Author.class, AuthorOccurrence.class, Habitat.class,
+			Metadata.class, Occurrence.class, Phytochorion.class,
+			Plant.class, Publication.class, Territory.class,
+			Village.class
+			};
 	
-	public void set(Class table, String column) { tableColumn.add(table+"."+column); }
-	public void unset(Class table, String column) { tableColumn.remove(table+"."+column); }
-	public boolean isSet(Class table, String column) { return tableColumn.contains(table+"."+column); }
+	public static Class whichTable(Record record) {
+		for(Class c : BASIC_TABLES)
+			if( c.isInstance( record ) ) return c;
+		return null;
+	}
 	
-	public void unsetAll() { tableColumn.clear(); }
+	/** The table that is central to the current query. */
+	public Class getRootTable() { return tables.get(0); }
 	
-	public boolean match(Template t) { return tableColumn.containsAll(t.tableColumn); }
+	public void setTable(Class table) { tables.add(table); }
+	public void unsetTable(Class table) { tables.remove(table); }
+	public boolean isSetTable(Class table) { return tables.contains(table); } 
+	public boolean isSetTableD(Class table) { return tables.remove(table); }
+	
+	public void set(Class table, String column) { columns.add(table+"."+column); }
+	public void unset(Class table, String column) { columns.remove(table+"."+column); }
+	public boolean isSet(Class table, String column) { return columns.contains(table+"."+column); }
+	
+		
+	public void unsetAll() { columns.clear(); }
+	
+	public boolean match(Template t) { return columns.containsAll(t.columns); }
 
 }

Added: trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -0,0 +1,73 @@
+package net.sf.plantlore.client.export.builders;
+
+import java.io.IOException;
+import java.io.Writer;
+
+import net.sf.plantlore.client.export.MetaBuilder;
+import net.sf.plantlore.client.export.RecordWalkBuilder;
+import net.sf.plantlore.client.export.Template;
+
+
+/**
+ * CSV Builder.
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 23.4.2006
+ *
+ */
+public class CSVBuilder extends /*MetaBuilder*/RecordWalkBuilder {
+	
+	private Writer output;
+	private Template tmp;
+		
+	private static final String DELIMITER = ",";
+	private static final String DOUBLEQUOTE = "\"";
+	private static final String NEWLINE = System.getProperty("line.separator");
+	
+	private boolean firstColumn = true;
+	
+		
+	
+	public CSVBuilder(Writer output, Template tmp) {
+		super( tmp );
+		this.output = output; this.tmp = tmp;
+	}
+	
+	
+	@Override
+	public void finishRecord() throws IOException {
+		output.write(NEWLINE);		
+		firstColumn = true;
+	}
+	
+	/** CSV */
+	protected void wc(Class table, String column, Object value) throws IOException {
+		// Shall we export this column?
+		if( !tmp.isSet(table, column) ) return;
+		
+		StringBuilder r = new StringBuilder( value.toString() );
+		boolean containsDoubleQuote = r.indexOf(DOUBLEQUOTE) >= 0, 
+			containsDelimiter = r.indexOf(DELIMITER) >= 0,
+			containsNewline = r.indexOf(NEWLINE) >= 0;
+		
+		// Convert doublequotes to double-doublequotes: " -> ""
+		if( containsDoubleQuote ) { 
+			int k = 0;
+			while( (k = r.indexOf(DOUBLEQUOTE, k)) >= 0 ) { 
+				r.insert(k, DOUBLEQUOTE); k += 2;
+			}
+		}
+		
+		// Wrap problematic records.
+		if( containsDoubleQuote || containsDelimiter || containsNewline ) {
+			r.insert(0, DOUBLEQUOTE); r.append(DOUBLEQUOTE);
+		}
+		
+		if( firstColumn ) firstColumn = false; 
+		else output.write( DELIMITER );
+		output.write( r.toString() );
+			
+	}
+	
+
+}

Modified: trunk/src/net/sf/plantlore/common/record/Author.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Author.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/Author.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -42,9 +42,12 @@
     
     /** Creates a new instance of AuthorRecord */
     public Author() {
-        
     }
     
+    public String[] getColumns() {
+    	return new String[] { ID, WHOLENAME, ORGANIZATION, ROLE, ADDRESS, PHONENUMBER, EMAIL, URL, NOTE };
+    }
+    
     /**
      *   Set unique id of the author
      *   @param id unique id of the author

Modified: trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -31,6 +31,15 @@
     public static final String ROLE = "role";
     public static final String RESULTREVISION = "resultRevision";
     
+    @Override
+    public String[] getForeignKeys() { 
+    	return new String[] { AUTHOR, OCCURRENCE }; 
+    }
+    
+    public String[] getColumns() {
+    	return new String[] { ID, AUTHOR, OCCURRENCE, ROLE, RESULTREVISION };
+    }
+    
     /**
      *   Default constructor to create new class AuthorOccurrences
      */

Modified: trunk/src/net/sf/plantlore/common/record/Habitat.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Habitat.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/Habitat.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -45,6 +45,16 @@
     public static final String DELETED = "deleted";    
     public static final String NOTE = "note";
     
+    @Override
+    public String[] getForeignKeys() { 
+    	return new String[] { TERRITORY, PHYTOCHORION, NEARESTVILLAGE }; 
+    }
+    
+    public String[] getColumns() {
+    	return new String[] { ID, TERRITORY, PHYTOCHORION, NEARESTVILLAGE, 
+    			QUADRANT, DESCRIPTION, COUNTRY, ALTITUDE, LATITUDE, LONGITUDE, NOTE };
+    }
+    
     /**
      * Default constructor to create new class Habitat
      */

Modified: trunk/src/net/sf/plantlore/common/record/HistoryChange.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/HistoryChange.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/HistoryChange.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -48,6 +48,7 @@
         
     }
     
+      
     /**
      *   Get HistoryChange record id
      *   @return id of the HistoryChange record

Modified: trunk/src/net/sf/plantlore/common/record/HistoryColumn.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/HistoryColumn.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/HistoryColumn.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -33,6 +33,7 @@
         
     }
     
+      
     /**
      *   Get HistoryColumn id
      *   @return id of the HistoryColumn

Modified: trunk/src/net/sf/plantlore/common/record/HistoryRecord.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/HistoryRecord.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/HistoryRecord.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -29,6 +29,7 @@
         
     }
     
+       
     /**
      *   Get History record id
      *   @return History record id

Modified: trunk/src/net/sf/plantlore/common/record/LastUpdate.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/LastUpdate.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/LastUpdate.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -27,6 +27,7 @@
         
     }
     
+        
     /**
      *   Get LastUpdate record id
      *   @return id of the LastUpdate record

Modified: trunk/src/net/sf/plantlore/common/record/Metadata.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Metadata.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/Metadata.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -46,7 +46,8 @@
     public static final String CONTENTCONTACTEMAIL = "contentContactEmail";
     public static final String DATASETTITLE = "dataSetTitle";    
     public static final String DATASETDETAILS = "dataSetDetails";    
-    public static final String SOURCEINSTITUTIONID = "sourceInstitutionId";    
+    public static final String SOURCEINSTITUTIONID = "sourceInstitutionId";
+    public static final String SOURCEID = "sourceId";
     public static final String OWNERORGANIZATIONABBREV = "ownerOrganizationAbbrev";
     public static final String DATECREATE = "dateCreate";    
     public static final String DATEMODIFIED = "dateModified";    
@@ -60,6 +61,14 @@
     public Metadata() {
     }
     
+    public String[] getColumns() {
+    	return new String[] { ID, TECHNICALCONTACTADDRESS, TECHNICALCONTACTEMAIL, TECHNICALCONTACTNAME,
+    			CONTENTCONTACTADDRESS, CONTENTCONTACTEMAIL, CONTENTCONTACTNAME,
+    			DATASETDETAILS, DATASETTITLE, SOURCEID, SOURCEINSTITUTIONID,
+    			OWNERORGANIZATIONABBREV, BIOTOPETEXT, RECORDBASIS, VERSIONPLANTSFILE,
+    			DATECREATE, DATEMODIFIED };
+    }
+    
     /**
      *   Get metadata id
      *   @return id of the metadata

Modified: trunk/src/net/sf/plantlore/common/record/Occurrence.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -62,6 +62,20 @@
     public static final String DELETED = "deleted";
     public static final String NOTE = "note";        
     
+    
+    @Override
+    public String[] getForeignKeys() { 
+    	return new String[] { HABITAT, PLANT, PUBLICATION, METADATA }; 
+    }
+    
+    public String[] getColumns() {
+    	return new String[] { ID, UNITIDDB, UNITVALUE, HABITAT, PLANT, YEARCOLLECTED,
+    			MONTHCOLLECTED, DAYCOLLECTED, TIMECOLLECTED, ISODATETIMEBEGIN,
+    			DATASOURCE, PUBLICATION, HERBARIUM, CREATEDWHEN, 
+    			UPDATEDWHEN, METADATA, NOTE };
+    }
+    
+    
     /** Creates a new instance of OccurrenceRecord */
     public Occurrence() {
         

Modified: trunk/src/net/sf/plantlore/common/record/Phytochorion.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Phytochorion.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/Phytochorion.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -34,6 +34,10 @@
         
     }
     
+    public String[] getColumns() {
+    	return new String[] { ID, CODE, NAME };
+    }
+    
     /**
      *   Get phytochorion id
      *   @return id of the phytochorion

Modified: trunk/src/net/sf/plantlore/common/record/Plant.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Plant.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/Plant.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -44,6 +44,11 @@
         
     }
     
+    public String[] getColumns() {
+    	return new String[] { ID, TAXON, GENUS, SPECIES, SCIENTIFICNAMEAUTHOR,
+    			CZECHNAME, SYNONYMS, NOTE, SURVEYTAXID };
+    }
+    
     /**
      *   Get plant id
      *   @return id of the plant

Modified: trunk/src/net/sf/plantlore/common/record/Publication.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -45,6 +45,12 @@
     public Publication() {
         
     }
+    
+    public String[] getColumns() {
+    	return new String[] { ID, COLLECTIONNAME, COLLECTIONYEARPUBLICATION, JOURNALNAME,
+    			JOURNALAUTHORNAME, REFERENCECITATION, REFERENCEDETAIL, URL, NOTE };
+    }
+    
     /**
      *   Get publication id
      *   @return id of the publication

Modified: trunk/src/net/sf/plantlore/common/record/Record.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -6,4 +6,8 @@
 
 	public abstract Integer getId();
 	
+	public String[] getForeignKeys() { return null; }
+	
+	public String[] getColumns() { return null; }
+	
 }

Modified: trunk/src/net/sf/plantlore/common/record/Territory.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Territory.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/Territory.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -32,6 +32,10 @@
         
     }
     
+    public String[] getColumns() {
+    	return new String[] { ID, NAME };
+    }
+    
     /**
      *   Get territory id
      *   @return id of the territory

Modified: trunk/src/net/sf/plantlore/common/record/Village.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Village.java	2006-04-23 12:55:45 UTC (rev 178)
+++ trunk/src/net/sf/plantlore/common/record/Village.java	2006-04-23 15:26:30 UTC (rev 179)
@@ -30,6 +30,10 @@
         
     }
     
+    public String[] getColumns() {
+    	return new String[] { ID, NAME };
+    }
+    
     /**
      *   Get village id
      *   @return id of the village



From fraktalek at berlios.de  Sun Apr 23 18:51:58 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Sun, 23 Apr 2006 18:51:58 +0200
Subject: [Plantlore-dev] r180 - trunk/src/net/sf/plantlore/client
Message-ID: <200604231651.k3NGpwxm000343@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-23 18:51:56 +0200 (Sun, 23 Apr 2006)
New Revision: 180

Modified:
   trunk/src/net/sf/plantlore/client/AddEdit.java
   trunk/src/net/sf/plantlore/client/AddEditCtrl.java
Log:
Edit now executes updates into the database. It doesn't not work properly yet I think.
Need to investigate persistent/transient Hibernate object behaviour, etc.



Modified: trunk/src/net/sf/plantlore/client/AddEdit.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEdit.java	2006-04-23 15:26:30 UTC (rev 179)
+++ trunk/src/net/sf/plantlore/client/AddEdit.java	2006-04-23 16:51:56 UTC (rev 180)
@@ -711,4 +711,135 @@
         }
     }
     
+    private AuthorOccurrence prepareAuthorOccurrence(boolean newRecord) {
+        Occurrence o;
+        Author a;
+        Habitat h;
+        Village v; 
+        Phytochorion p;
+        Territory t;
+        Metadata m;
+        Plant plant;
+        Publication publ ;
+        
+        if (newRecord)
+            o = new Occurrence();
+        else 
+            o = ao.getOccurrence();
+        
+        assert author != null;
+        if (newRecord)
+            a = new Author();
+        else
+            a = ao.getAuthor();
+        a.setId(author.getSecond());
+        
+        if (newRecord)
+            h = new Habitat();
+        else 
+            h = o.getHabitat();
+        
+        if (newRecord)
+            v = new Village();
+        else
+            v = h.getNearestVillage();
+        v.setId(village.getSecond());
+
+        
+        if (newRecord)
+            p = new Phytochorion();
+        else
+            p = h.getPhytochorion();
+        p.setId(phytCode.getSecond());
+        
+        if (newRecord)
+            t = new Territory();
+        else
+            t = h.getTerritory();
+        t.setId(territoryName.getSecond());
+
+        h.setAltitude(altitude);
+        h.setCountry(phytCountry);
+        h.setDescription(localityDescription);
+        h.setLatitude(latitude);
+        h.setLongitude(longitude);
+        h.setNearestVillage(v);
+        h.setNote(habitatNote);
+        h.setPhytochorion(p);
+        h.setQuadrant(quadrant);
+        h.setTerritory(t);
+        
+        if (newRecord)
+            m = new Metadata();
+        else
+            m = o.getMetadata();
+        if (project != null)
+            m.setId(project.getSecond());
+
+        if (newRecord)
+            plant = new Plant();
+        else
+            plant = o.getPlant();
+        for (int i=0; i < plants.length; i++)
+            if (plants[i].equals(taxon))
+                plant.setId(plants[i].getSecond());
+
+        if (newRecord)
+            publ = new Publication();
+        else
+            publ = o.getPublication();
+        if (publication != null)
+            publ.setId(publication.getSecond());
+            
+        o.setDayCollected(day);
+        o.setHabitat(h);
+        o.setHerbarium(herbarium);
+        //o.setIsoDateTimeBegin(); ???
+        o.setMetadata(m);
+        o.setMonthCollected(month);
+        o.setNote(occurrenceNote);
+        o.setPlant(plant);
+        o.setPublication(publ);
+        o.setTimeCollected(time);
+        o.setYearCollected(year);
+
+        
+        if (newRecord) {
+            AuthorOccurrence newAO = new AuthorOccurrence();
+            newAO.setAuthor(a);
+            newAO.setOccurrence(o);
+            return newAO;
+        } else {
+            ao.setAuthor(a);
+            ao.setOccurrence(o);
+            return ao;
+        }
+        
+    }//prepareAuthorOccurrence
+    
+    public void createRecord() {
+        logger.debug("About to insert new occurrence record");
+        //FIXME:
+        try {     
+            database.executeInsert(prepareAuthorOccurrence(true));
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }        
+    }//createRecord()
+    
+    public void updateRecord() {        
+        logger.debug("About to update existing occurrence record id="+ao.getId());
+        //FIXME:
+        try {     
+            database.executeUpdate(prepareAuthorOccurrence(false));
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }
+    }//updateRecord()
 }
+
+

Modified: trunk/src/net/sf/plantlore/client/AddEditCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditCtrl.java	2006-04-23 15:26:30 UTC (rev 179)
+++ trunk/src/net/sf/plantlore/client/AddEditCtrl.java	2006-04-23 16:51:56 UTC (rev 180)
@@ -254,7 +254,11 @@
     
     class OkButtonListener extends MouseAdapter {
         public void mouseClicked(MouseEvent e) {
-            System.out.println("Ok");
+            if (inEditMode)
+                model.updateRecord();
+            else
+                model.createRecord();
+            view.setVisible(false);
         }
     }//OkButtonListener
     



From krater at berlios.de  Sun Apr 23 22:00:22 2006
From: krater at berlios.de (krater at berlios.de)
Date: Sun, 23 Apr 2006 22:00:22 +0200
Subject: [Plantlore-dev] r181 - in trunk/src/net/sf/plantlore: client/export client/export/builders common common/record
Message-ID: <200604232000.k3NK0MQn009789@sheep.berlios.de>

Author: krater
Date: 2006-04-23 22:00:20 +0200 (Sun, 23 Apr 2006)
New Revision: 181

Added:
   trunk/src/net/sf/plantlore/client/export/Director.java
Modified:
   trunk/src/net/sf/plantlore/client/export/Builder.java
   trunk/src/net/sf/plantlore/client/export/MetaBuilder.java
   trunk/src/net/sf/plantlore/client/export/RecordWalkBuilder.java
   trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
   trunk/src/net/sf/plantlore/common/Selection.java
   trunk/src/net/sf/plantlore/common/record/Record.java
Log:
Commented versions of almost all classes from net.sf.plantlore.client.export package and subpackages.
Export.java renamed to Director.java.

Modified: trunk/src/net/sf/plantlore/client/export/Builder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-23 16:51:56 UTC (rev 180)
+++ trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-23 20:00:20 UTC (rev 181)
@@ -5,22 +5,45 @@
 import net.sf.plantlore.common.record.*;
 
 /**
- * Interface for building the output.
+ * Interface for building the output. 
+ * The builder is responsible for "building" the output when given 
+ * a record. The Director calls only these few methods - everything
+ * else is "particular-implementation specific".
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-04-21
- * @version 0.99
+ * @version 1.0
+ * @see Director
  */
 public interface Builder {
 		
+	/** 
+	 * Write a header. This method is called just once before the iteration starts. 
+	 */
 	void makeHeader() throws IOException;
 	
+	/** 
+	 * Write a footer. This method is called just once after the iteration ends. 
+	 */
 	void makeFooter() throws IOException;
 	
+	/** 
+	 * Make adjustments needed before
+	 * the output of another record starts. 
+	 * This method is called right before the <code>writeRecord()</code>. 
+	 */
 	void startNewRecord() throws IOException;
 	
+	/** 
+	 * Write the record that is contained within the <code>args</code> array.
+	 * @see net.sf.plantlore.middleware.DBLayer
+	 */
 	void writeRecord(Record[] args) throws IOException;
 	
+	/** 
+	 * Make adjustments needed after the output of the current record is completed.
+	 * This method is called right after the <code>writeRecord()</code>. 
+	 */
 	void finishRecord() throws IOException;
 	
 }

Added: trunk/src/net/sf/plantlore/client/export/Director.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Director.java	2006-04-23 16:51:56 UTC (rev 180)
+++ trunk/src/net/sf/plantlore/client/export/Director.java	2006-04-23 20:00:20 UTC (rev 181)
@@ -0,0 +1,104 @@
+package net.sf.plantlore.client.export;
+
+import java.io.IOException;
+import java.rmi.RemoteException;
+
+import net.sf.plantlore.common.Selection;
+import net.sf.plantlore.common.record.*;
+import net.sf.plantlore.middleware.DBLayer;
+import net.sf.plantlore.middleware.SelectQuery;
+import net.sf.plantlore.server.DBLayerException;
+
+
+import org.apache.log4j.Logger;
+
+/**
+ * The Director class (for export).
+ * Purpose: The Director continualy fetches results of the <code>query</code>.
+ * The selected queries (queries whose ID is in the <code>selection</code>)
+ * are passed to the <code>builder</code> - the builder is responsible for
+ * parsing the result and creating a corresponing output.
+ * <br/>
+ * Note that the Director doesn't manage any of these objects.
+ * It merely iterates over the selected records of the result.
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-21
+ *	@version 1.0
+ *
+ * @see net.sf.plantlore.client.common.Selection
+ * @see net.sf.plantlore.client.export.Builder
+ * @see net.sf.plantlore.middlerware.DBLayer
+ */
+public class Director implements Runnable {
+	
+	private Logger logger = Logger.getLogger(this.getClass().getPackage().getName());
+	
+	private Builder builder;
+	private SelectQuery query;
+	private Selection selection;
+	private DBLayer database;
+	
+
+	/**
+	 * Create a new export Director. The Director iterates over the results 
+	 * of the <code>query</code> (<code>database.executeQuery(query)</code>)
+	 * and selected records (i.e. records in the <code>selection</code>)
+	 * passes to the <code>builder</code>.
+	 * 
+	 * @param builder	The particular builder used to construct the final output.
+	 * @param query	The query which will be iterated over.
+	 * @param database	The database layer that will carry out the execution of the query.
+	 * @param selection	The set of selected records.
+	 */
+	public Director(Builder builder, SelectQuery query, DBLayer database, Selection selection) {
+		this.builder = builder; this.query = query; this.database = database;
+		this.selection = selection;
+	}
+	
+	
+	/** Execute the exporting procedure as described. */
+	public void run() {
+		try {
+			// The result identifier.
+			int result = database.executeQuery( query );
+			long count = 0; // how many records were exported
+			
+			logger.info("Export begins...");
+			
+			// Create the header of the file (some opening tags possibly).
+			builder.makeHeader();
+			// Iterate over the result of the query.
+			for(int i = 0; i < database.getNumRows( result ); i++) {
+				Record[] records = (Record[]) database.next( result );
+				if( !selection.contains( records[0] ) ) continue; // is it selected?
+				
+				count++;
+				// Write down this record.
+				builder.startNewRecord();
+				builder.writeRecord( records );
+				builder.finishRecord();
+			}
+			// Create the footer of the file (some closing tags possibly).
+			builder.makeFooter();
+			logger.info("Export completed. " + count + " records sent to output.");
+		}
+		// FIXME: Since the run() method comes from the Runnable interface, it cannot throw
+		// any exceptions :( This is yet to be solved!
+		catch(DBLayerException e) {
+			logger.error(e); e.printStackTrace();
+		}
+		catch(RemoteException e) {
+			logger.error(e); e.printStackTrace();
+		}
+		catch(IOException e) {
+			logger.error(e); e.printStackTrace();
+		}
+	}
+	
+	
+	
+	
+
+
+}

Modified: trunk/src/net/sf/plantlore/client/export/MetaBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/MetaBuilder.java	2006-04-23 16:51:56 UTC (rev 180)
+++ trunk/src/net/sf/plantlore/client/export/MetaBuilder.java	2006-04-23 20:00:20 UTC (rev 181)
@@ -7,24 +7,51 @@
 
 
 /**
- * MetaBuilder. Hard-wired database scheme.
+ * MetaBuilder. Hard-wired database scheme = changes of the database model will
+ * affect this class directly (the code will have to be changed accordingly).
  * Fast, but not flexible (other permutations of columns aren't possible).
+ * <br/>
+ * MetaBuilder is a partial implementation of the Builder interface
+ * and implements the most annoying and always-repeating parts:
+ * the traversal through all tables and their columns.
+ * For each column, that has to be exported, 
+ * the <code>w()</code> method is called.
+ * <br/>
+ * <code>w() </code> is the only method that has to be implemented;
+ * it says how the [table, column, value] should be written to the output.
  * 
+ * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-04-23
+ * @see net.sf.plantlore.client.export.MetaBuilder#w(Class, String, Object)
+ * @see net.sf.plantlore.client.export.RecordWalkBuilder
  */
-
-
-
 public abstract class MetaBuilder implements Builder {
 	
+	/** 
+	 * The particular template that is used while building the output.
+	 * @see net.sf.plantlore.client.export.Template
+	 */ 
 	private Template tmp;
 	
+	/**
+	 * "Create" a new MetaBuilder. Since MetaBuilder is an abstract class,
+	 * you cannot instantiate it.
+	 * 
+	 * @param tmp The template that is used to decide, whether a particular
+	 * 		table interests us or not.
+	 * @see net.sf.plantlore.client.export.Template
+	 */
 	public MetaBuilder(Template tmp) {
 		this.tmp = tmp;
 	}
 	
 	
+	/**
+	 * An implementation of the Builder::writeRecord().
+	 * It completely traverses the record starting with <code>args[0]</code>
+	 * as a root table. It traverses all tables that are seleted in the Template. 
+	 */
 	public void writeRecord(Record[] args) throws IOException {
 		Record r = args[0];
 		if(r instanceof Author) process( (Author)r );
@@ -40,72 +67,77 @@
 		else /* ERROR! */;
 	}
 
+	/** Process the table of Authors. */
 	protected void process(Author a) throws IOException {
 		if (!tmp.isSetTableD(Author.class))
 			return; // prevent recursion!
-		wc(Author.class, Author.WHOLENAME, a.getWholeName());
-		wc(Author.class, Author.ORGANIZATION, a.getOrganization());
-		wc(Author.class, Author.ADDRESS, a.getAddress());
-		wc(Author.class, Author.EMAIL, a.getEmail());
-		wc(Author.class, Author.PHONENUMBER, a.getPhoneNumber());
-		wc(Author.class, Author.URL, a.getUrl());
-		wc(Author.class, Author.ROLE, a.getRole());
-		wc(Author.class, Author.NOTE, a.getNote());
+		w(Author.class, Author.WHOLENAME, a.getWholeName());
+		w(Author.class, Author.ORGANIZATION, a.getOrganization());
+		w(Author.class, Author.ADDRESS, a.getAddress());
+		w(Author.class, Author.EMAIL, a.getEmail());
+		w(Author.class, Author.PHONENUMBER, a.getPhoneNumber());
+		w(Author.class, Author.URL, a.getUrl());
+		w(Author.class, Author.ROLE, a.getRole());
+		w(Author.class, Author.NOTE, a.getNote());
 	}
 
+	/** Process the table of AuthorsOccurences. */
 	protected void process(AuthorOccurrence a) throws IOException {
 		if (!tmp.isSetTableD(AuthorOccurrence.class))
 			return; // prevent recursion!
 		process(a.getAuthor());
 		process(a.getOccurrence());
-		wc(AuthorOccurrence.class, AuthorOccurrence.ROLE, a.getRole());
-		wc(AuthorOccurrence.class, AuthorOccurrence.RESULTREVISION, a
+		w(AuthorOccurrence.class, AuthorOccurrence.ROLE, a.getRole());
+		w(AuthorOccurrence.class, AuthorOccurrence.RESULTREVISION, a
 				.getResultRevision());
 	}
 
+	/** Process the table of Habitats. */
 	protected void process(Habitat a) throws IOException {
 		if (!tmp.isSetTableD(Habitat.class))
 			return; // prevent recursion!
 		process(a.getTerritory());
 		process(a.getPhytochorion());
 		process(a.getNearestVillage());
-		wc(Habitat.class, Habitat.DESCRIPTION, a.getDescription());
-		wc(Habitat.class, Habitat.COUNTRY, a.getCountry());
-		wc(Habitat.class, Habitat.NOTE, a.getNote());
-		wc(Habitat.class, Habitat.QUADRANT, a.getQuadrant());
-		wc(Habitat.class, Habitat.ALTITUDE, a.getAltitude());
-		wc(Habitat.class, Habitat.LATITUDE, a.getLatitude());
-		wc(Habitat.class, Habitat.LONGITUDE, a.getLongitude());
+		w(Habitat.class, Habitat.DESCRIPTION, a.getDescription());
+		w(Habitat.class, Habitat.COUNTRY, a.getCountry());
+		w(Habitat.class, Habitat.NOTE, a.getNote());
+		w(Habitat.class, Habitat.QUADRANT, a.getQuadrant());
+		w(Habitat.class, Habitat.ALTITUDE, a.getAltitude());
+		w(Habitat.class, Habitat.LATITUDE, a.getLatitude());
+		w(Habitat.class, Habitat.LONGITUDE, a.getLongitude());
 	}
 
+	/** Process the table of Metadata. */
 	protected void process(Metadata a) throws IOException {
 		if (!tmp.isSetTableD(Metadata.class))
 			return; // prevent recursion!
-		wc(Metadata.class, Metadata.CONTENTCONTACTNAME, a
+		w(Metadata.class, Metadata.CONTENTCONTACTNAME, a
 				.getContentContactName());
-		wc(Metadata.class, Metadata.CONTENTCONTACTADDRESS, a
+		w(Metadata.class, Metadata.CONTENTCONTACTADDRESS, a
 				.getContentContactAddress());
-		wc(Metadata.class, Metadata.CONTENTCONTACTEMAIL, a
+		w(Metadata.class, Metadata.CONTENTCONTACTEMAIL, a
 				.getContentContactEmail());
-		wc(Metadata.class, Metadata.DATASETTITLE, a.getDataSetTitle());
-		wc(Metadata.class, Metadata.DATASETDETAILS, a.getDataSetDetails());
-		wc(Metadata.class, Metadata.DATECREATE, a.getDateCreate());
-		wc(Metadata.class, Metadata.DATEMODIFIED, a.getDateModified());
-		wc(Metadata.class, Metadata.OWNERORGANIZATIONABBREV, a
+		w(Metadata.class, Metadata.DATASETTITLE, a.getDataSetTitle());
+		w(Metadata.class, Metadata.DATASETDETAILS, a.getDataSetDetails());
+		w(Metadata.class, Metadata.DATECREATE, a.getDateCreate());
+		w(Metadata.class, Metadata.DATEMODIFIED, a.getDateModified());
+		w(Metadata.class, Metadata.OWNERORGANIZATIONABBREV, a
 				.getOwnerOrganizationAbbrev());
-		wc(Metadata.class, Metadata.RECORDBASIS, a.getRecordBasis());
-		wc(Metadata.class, Metadata.SOURCEINSTITUTIONID, a
+		w(Metadata.class, Metadata.RECORDBASIS, a.getRecordBasis());
+		w(Metadata.class, Metadata.SOURCEINSTITUTIONID, a
 				.getSourceInstitutionId());
-		wc(Metadata.class, Metadata.SOURCEID, a.getSourceId());
-		wc(Metadata.class, Metadata.TECHNICALCONTACTNAME, a
+		w(Metadata.class, Metadata.SOURCEID, a.getSourceId());
+		w(Metadata.class, Metadata.TECHNICALCONTACTNAME, a
 				.getTechnicalContactName());
-		wc(Metadata.class, Metadata.TECHNICALCONTACTADDRESS, a
+		w(Metadata.class, Metadata.TECHNICALCONTACTADDRESS, a
 				.getTechnicalContactAddress());
-		wc(Metadata.class, Metadata.TECHNICALCONTACTEMAIL, a
+		w(Metadata.class, Metadata.TECHNICALCONTACTEMAIL, a
 				.getTechnicalContactEmail());
-		wc(Metadata.class, Metadata.VERSIONPLANTSFILE, a.getVersionPlantsFile());
+		w(Metadata.class, Metadata.VERSIONPLANTSFILE, a.getVersionPlantsFile());
 	}
 
+	/** Process the table of Occurences. */
 	protected void process(Occurrence a) throws IOException {
 		if (!tmp.isSetTableD(Occurrence.class))
 			return; // prevent recursion!
@@ -113,82 +145,98 @@
 		process(a.getHabitat());
 		process(a.getMetadata());
 		process(a.getPublication());
-		wc(Occurrence.class, Occurrence.UNITIDDB, a.getUnitIdDb());
-		wc(Occurrence.class, Occurrence.UNITVALUE, a.getUnitValue());
-		wc(Occurrence.class, Occurrence.DAYCOLLECTED, a.getDayCollected());
-		wc(Occurrence.class, Occurrence.MONTHCOLLECTED, a.getMonthCollected());
-		wc(Occurrence.class, Occurrence.YEARCOLLECTED, a.getYearCollected());
-		wc(Occurrence.class, Occurrence.TIMECOLLECTED, a.getTimeCollected());
-		wc(Occurrence.class, Occurrence.ISODATETIMEBEGIN, a
+		w(Occurrence.class, Occurrence.UNITIDDB, a.getUnitIdDb());
+		w(Occurrence.class, Occurrence.UNITVALUE, a.getUnitValue());
+		w(Occurrence.class, Occurrence.DAYCOLLECTED, a.getDayCollected());
+		w(Occurrence.class, Occurrence.MONTHCOLLECTED, a.getMonthCollected());
+		w(Occurrence.class, Occurrence.YEARCOLLECTED, a.getYearCollected());
+		w(Occurrence.class, Occurrence.TIMECOLLECTED, a.getTimeCollected());
+		w(Occurrence.class, Occurrence.ISODATETIMEBEGIN, a
 				.getIsoDateTimeBegin());
-		wc(Occurrence.class, Occurrence.DATASOURCE, a.getDataSource());
-		wc(Occurrence.class, Occurrence.HERBARIUM, a.getHerbarium());
-		wc(Occurrence.class, Occurrence.NOTE, a.getNote());
-		wc(Occurrence.class, Occurrence.CREATEDWHEN, a.getCreatedWhen());
-		wc(Occurrence.class, Occurrence.UPDATEDWHEN, a.getUpdatedWhen());
+		w(Occurrence.class, Occurrence.DATASOURCE, a.getDataSource());
+		w(Occurrence.class, Occurrence.HERBARIUM, a.getHerbarium());
+		w(Occurrence.class, Occurrence.NOTE, a.getNote());
+		w(Occurrence.class, Occurrence.CREATEDWHEN, a.getCreatedWhen());
+		w(Occurrence.class, Occurrence.UPDATEDWHEN, a.getUpdatedWhen());
 	}
 
+	/** Process the table of Phytochoria. */
 	protected void process(Phytochorion a) throws IOException {
 		if (!tmp.isSetTableD(Phytochorion.class))
 			return; // prevent recursion!
-		wc(Phytochorion.class, Phytochorion.NAME, a.getName());
-		wc(Phytochorion.class, Phytochorion.CODE, a.getCode());
+		w(Phytochorion.class, Phytochorion.NAME, a.getName());
+		w(Phytochorion.class, Phytochorion.CODE, a.getCode());
 	}
 
+	/** Process the table of Plants. */
 	protected void process(Plant a) throws IOException {
 		if (!tmp.isSetTableD(Plant.class))
 			return; // prevent recursion!
-		wc(Plant.class, Plant.TAXON, a.getTaxon());
-		wc(Plant.class, Plant.SCIENTIFICNAMEAUTHOR, a.getScientificNameAuthor());
-		wc(Plant.class, Plant.CZECHNAME, a.getCzechName());
-		wc(Plant.class, Plant.GENUS, a.getGenus());
-		wc(Plant.class, Plant.SPECIES, a.getSpecies());
-		wc(Plant.class, Plant.SYNONYMS, a.getSynonyms());
-		wc(Plant.class, Plant.SURVEYTAXID, a.getSurveyTaxId());
-		wc(Plant.class, Plant.NOTE, a.getNote());
+		w(Plant.class, Plant.TAXON, a.getTaxon());
+		w(Plant.class, Plant.SCIENTIFICNAMEAUTHOR, a.getScientificNameAuthor());
+		w(Plant.class, Plant.CZECHNAME, a.getCzechName());
+		w(Plant.class, Plant.GENUS, a.getGenus());
+		w(Plant.class, Plant.SPECIES, a.getSpecies());
+		w(Plant.class, Plant.SYNONYMS, a.getSynonyms());
+		w(Plant.class, Plant.SURVEYTAXID, a.getSurveyTaxId());
+		w(Plant.class, Plant.NOTE, a.getNote());
 	}
 
+	/** Process the table of Publications. */
 	protected void process(Publication a) throws IOException {
 		if (!tmp.isSetTableD(Publication.class))
 			return; // prevent recursion!
-		wc(Publication.class, Publication.COLLECTIONNAME, a.getCollectionName());
-		wc(Publication.class, Publication.COLLECTIONYEARPUBLICATION, a
+		w(Publication.class, Publication.COLLECTIONNAME, a.getCollectionName());
+		w(Publication.class, Publication.COLLECTIONYEARPUBLICATION, a
 				.getCollectionYearPublication());
-		wc(Publication.class, Publication.JOURNALNAME, a.getJournalName());
-		wc(Publication.class, Publication.JOURNALAUTHORNAME, a
+		w(Publication.class, Publication.JOURNALNAME, a.getJournalName());
+		w(Publication.class, Publication.JOURNALAUTHORNAME, a
 				.getJournalAuthorName());
-		wc(Publication.class, Publication.NOTE, a.getNote());
-		wc(Publication.class, Publication.REFERENCECITATION, a
+		w(Publication.class, Publication.NOTE, a.getNote());
+		w(Publication.class, Publication.REFERENCECITATION, a
 				.getReferenceCitation());
-		wc(Publication.class, Publication.REFERENCEDETAIL, a
+		w(Publication.class, Publication.REFERENCEDETAIL, a
 				.getReferenceDetail());
-		wc(Publication.class, Publication.URL, a.getUrl());
+		w(Publication.class, Publication.URL, a.getUrl());
 	}
 
+	/** Process the table of Territories. */
 	protected void process(Territory a) throws IOException {
 		if (!tmp.isSetTableD(Territory.class))
 			return; // prevent recursion!
-		wc(Territory.class, Territory.NAME, a.getName());
+		w(Territory.class, Territory.NAME, a.getName());
 	}
 
+	/** Process the table of Villages. */
 	protected void process(Village a) throws IOException {
 		if (!tmp.isSetTableD(Village.class))
 			return; // prevent recursion!
-		wc(Village.class, Village.NAME, a.getName());
+		w(Village.class, Village.NAME, a.getName());
 	}
 
-	/** Write Column! */
-	protected abstract void wc(Class table, String column, Object value)
+	/**
+	 * Write down the [table, column, value] to the output in a particular format.
+	 * It is up to the subclass to specify this method. 
+	 * 
+	 * @param table	The currently processed table.
+	 * @param column	The currently considered column of the table.
+	 * @param value	The particular value contained in that column.
+	 * @throws IOException	when an IO error occurs.
+	 */
+	protected abstract void w(Class table, String column, Object value)
 		throws IOException;
 
 	
-	
+	/** Empty implementation (does nothing). */
 	public void makeHeader() throws IOException {}
 	
+	/** Empty implementation (does nothing). */
 	public void makeFooter() throws IOException {}
 	
+	/** Empty implementation (does nothing). */
 	public void startNewRecord() throws IOException {}
 	
+	/** Empty implementation (does nothing). */
 	public void finishRecord() throws IOException {}
 
 }

Modified: trunk/src/net/sf/plantlore/client/export/RecordWalkBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/RecordWalkBuilder.java	2006-04-23 16:51:56 UTC (rev 180)
+++ trunk/src/net/sf/plantlore/client/export/RecordWalkBuilder.java	2006-04-23 20:00:20 UTC (rev 181)
@@ -1,58 +1,147 @@
 package net.sf.plantlore.client.export;
 
 import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
 import java.util.HashSet;
 
 import net.sf.plantlore.common.record.Record;
 
-
+/**
+ * RecordWalkBuilder. Immune to the database model changes.
+ * The RecordWalkBuilder has the same purpose as the MetaBuilder,
+ * and in fact it does the same thing but in a different way.
+ * It is slower than MetaBuilder - it is the price for its more general design.
+ * <br/>
+ * RecordBuilder is a partial implementation of the Builder interface
+ * and implements the most annoying and always-repeating parts:
+ * the traversal through all tables and their columns.
+ * For each column, that has to be exported, 
+ * the <code>w()</code> method is called.
+ * <br/>
+ * <code>w() </code> is the only method that has to be implemented;
+ * it says how the [table, column, value] should be written to the output.
+ * 
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-23
+ * @see net.sf.plantlore.client.export.MetaBuilder#w(Class, String, Object)
+ * @see net.sf.plantlore.client.export.MetaBuilder
+ */
 public abstract class RecordWalkBuilder implements Builder {
 	
+	/** 
+	 * The particular template that is used while building the output.
+	 * @see net.sf.plantlore.client.export.Template
+	 */ 
 	private Template tmp;
 	
-		
+	/**
+	 * "Create" a new RecordWalkBuilder. Since RecordWalkBuilder is an abstract class,
+	 * you cannot instantiate it.
+	 * 
+	 * @param tmp The template that is used to decide, whether a particular
+	 * 		table interests us or not.
+	 * @see net.sf.plantlore.client.export.Template
+	 */
 	public RecordWalkBuilder(Template tmp) {
 		this.tmp = tmp;
 	}
 	
-	
-	
+	/**
+	 * An implementation of the Builder::writeRecord().
+	 * It completely traverses the record starting with <code>args[0]</code>
+	 * as a root table. It traverses all tables that are seleted in the Template.
+	 * <br/>
+	 * This task is carried out more elegantly (or more slowly if you want)
+	 * than in the MetaBuilder. This method uses the introspection to 
+	 * invoke the getters on the columns of tables.
+	 * 
+	 * @see net.sf.plantlore.client.export.MetaBuilder
+	 */	
 	public void writeRecord(Record[] args) throws IOException {
+		// Well, deal with every part (part corresponds with a table) of the record separately 
 		for(Record record : args) dealWith( record );
 	}
 	
+	/**
+	 * Construct the getter method name from the name of the <code>column</code>
+	 * 
+	 * @param column	The name of the column whose value we need to obtain. 
+	 * @return	The getter's name.
+	 */
 	private String methodName(String column) {
-		StringBuilder s = new StringBuilder("get" + column);
-		s.setCharAt(3, Character.toUpperCase(s.charAt(3)));
+		StringBuilder s = new StringBuilder("get" + column); // prepend `get` in front of  the name
+		s.setCharAt(3, Character.toUpperCase(s.charAt(3))); // convert the first letter of the name to uppercase
 		return s.toString();
 	}
 	
+	/**
+	 * Deal with <b>this</b> partial record. 
+	 * The record corresponds to a particular table
+	 * (i.e. Author, Plant, etc.).
+	 * The traversal of all parts of the record is not done here.
+	 * 
+	 * @param record	Part of the output that corresponds to one of the basic tables.
+	 * @throws IOException
+	 */
 	protected void dealWith(Record record) throws IOException {
+		// Find out to which table this record corresponds.
 		Class table = Template.whichTable( record );
+		// Is this table important to us?
 		if( table == null ||  !tmp.isSetTableD( table ) ) return;
 		
+		// Obtain the column names and names of columns holding foreign keys.
 		String[] foreignKeys = record.getForeignKeys(); // I love inheritance ;)
 		String[] allColumns = record.getColumns();
 		
+		// The foreignKeys table will be questioned repeatedly -> create a hash set.
 		HashSet<String> fk = new HashSet<String>(20);
 		if( foreignKeys != null ) for(String key : foreignKeys) fk.add( key );
 		
+		// Export every column of this table, that is marked to be exported.
 		for(String column : allColumns) {
-			if( fk.contains(column) || !tmp.isSet(table, column) ) continue; // skip foreign keys and unwanted columns
+			// Foreign keys and unwanted columns will be skipped.
+			if( fk.contains(column) || !tmp.isSet(table, column) ) continue;
 			try {
+				// Invoke the getter on the `record` to obtain the particular value
+				// of that column.
 				Object value = table.getMethod( methodName(column), new Class[0] ).invoke( record, new Object[0] );
-				wc(table, column, value);
-			} catch(Exception e) {}
+				// Send the value to the output.
+				w(table, column, value);
+			} 
+			catch(NoSuchMethodException e) {
+				System.err.println(e); e.printStackTrace();
+			}
+			catch(IllegalAccessException e) {
+				System.err.println(e); e.printStackTrace();
+			}
+			catch(InvocationTargetException e) {
+				System.err.println(e); e.printStackTrace();
+			}
 		}
 	}
 	
-	
-	protected abstract void wc(Class table, String column, Object value) throws IOException;
+	/**
+	 * Write down the [table, column, value] to the output in a particular format.
+	 * It is up to the subclass to specify this method. 
+	 * 
+	 * @param table	The currently processed table.
+	 * @param column	The currently considered column of the table.
+	 * @param value	The particular value contained in that column.
+	 * @throws IOException	when an IO error occurs.
+	 */
+	protected abstract void w(Class table, String column, Object value) throws IOException;
 		
 		
+	/** Empty implementation (does nothing). */
+	public void makeHeader() throws IOException {}
 	
-	public void makeHeader() throws IOException {}
+	/** Empty implementation (does nothing). */
 	public void makeFooter() throws IOException {}
+	
+	/** Empty implementation (does nothing). */
 	public void startNewRecord() throws IOException {}
+	
+	/** Empty implementation (does nothing). */
 	public void finishRecord() throws IOException {}
 }

Modified: trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-23 16:51:56 UTC (rev 180)
+++ trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-23 20:00:20 UTC (rev 181)
@@ -4,7 +4,7 @@
 import java.io.Writer;
 
 import net.sf.plantlore.client.export.MetaBuilder;
-import net.sf.plantlore.client.export.RecordWalkBuilder;
+//import net.sf.plantlore.client.export.RecordWalkBuilder;
 import net.sf.plantlore.client.export.Template;
 
 
@@ -12,10 +12,9 @@
  * CSV Builder.
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
- * @since 23.4.2006
- *
+ * @since 2006-04-23
  */
-public class CSVBuilder extends /*MetaBuilder*/RecordWalkBuilder {
+public class CSVBuilder extends MetaBuilder {
 	
 	private Writer output;
 	private Template tmp;
@@ -27,7 +26,13 @@
 	private boolean firstColumn = true;
 	
 		
-	
+	/**
+	 * Create a new CSV Builder. 
+	 * The output is written as a comma separated values.
+	 * 
+	 * @param output	The writer where the output will be sent.
+	 * @param tmp	The template that describes the selected columns and tables.
+	 */
 	public CSVBuilder(Writer output, Template tmp) {
 		super( tmp );
 		this.output = output; this.tmp = tmp;
@@ -40,8 +45,11 @@
 		firstColumn = true;
 	}
 	
-	/** CSV */
-	protected void wc(Class table, String column, Object value) throws IOException {
+	/**
+	 * Send the <code>[table, column, value]</code> in the CSV format
+	 * to the output.
+	 */ 
+	protected void w(Class table, String column, Object value) throws IOException {
 		// Shall we export this column?
 		if( !tmp.isSet(table, column) ) return;
 		

Modified: trunk/src/net/sf/plantlore/common/Selection.java
===================================================================
--- trunk/src/net/sf/plantlore/common/Selection.java	2006-04-23 16:51:56 UTC (rev 180)
+++ trunk/src/net/sf/plantlore/common/Selection.java	2006-04-23 20:00:20 UTC (rev 181)
@@ -5,25 +5,57 @@
 
 import net.sf.plantlore.common.record.Record;
 
-
+/**
+ * A list of selected records. The selection allows
+ * selection of new records, removal of selected records (deselection),
+ * selection of all records, deselection of all records,
+ * and inversion of the current selection.
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-23
+ */
 public class Selection {
 	
-	private Collection<Long> selected = new HashSet(100);
+	private Collection<Integer> selected = new HashSet<Integer>(100);
 	private boolean inverted = false;
 	
-	
-	public void add(Long id) { selected.add(id); }
+	/**
+	 * Add another record to the selection.
+	 * @param id	The primary key of the record.
+	 */
+	public void add(Integer id) { selected.add(id); }
 		
-	public void remove(Long id) { selected.remove(id); }
+	/**
+	 * Remove a selected record from the selection (deselect).
+	 * @param id Of the record that is deselected.
+	 */
+	public void remove(Integer id) { selected.remove(id); }
 	
+	/**
+	 * Invert the current selection.
+	 */
 	public void invert() { inverted = !inverted; }
-	
+
+	/**
+	 * Deselect all records.
+	 */
 	public void none() { selected.clear(); inverted = false; }
-	
+
+	/**
+	 * Select all records.
+	 */
 	public void all() { selected.clear(); inverted = true; }
+
+	/**
+	 * @param id	The primary key of the record.
+	 * @return true if a record with this primary key is selected.
+	 */
+	public boolean contains(Integer id) { return selected.contains(id) ^ inverted; }
 	
-	public boolean contains(Long id) { return selected.contains(id) ^ inverted; }
-	
+	/**
+	 * @param r	The record.
+	 * @return true if the record is selected.
+	 */
 	public boolean contains(Record r) { return selected.contains(r.getId()) ^ inverted; }
 
 }

Modified: trunk/src/net/sf/plantlore/common/record/Record.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-23 16:51:56 UTC (rev 180)
+++ trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-23 20:00:20 UTC (rev 181)
@@ -2,12 +2,30 @@
 
 import java.io.Serializable;
 
+/**
+ * The common ancestor of all records. 
+ * Every record corresponds to a certain table of the database.
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-23
+ */
 public abstract class Record implements Serializable {
 
+	/** 
+	 * Every record has an ID number that is unique in its table.
+	 * 
+	 * @return The ID number of the record.
+	 */
 	public abstract Integer getId();
 	
+	/**
+	 * @return The set of all foreign keys (columns that refer to other tables).
+	 */
 	public String[] getForeignKeys() { return null; }
 	
+	/**
+	 * @return The set of all columns of the table.
+	 */
 	public String[] getColumns() { return null; }
 	
 }



From krater at berlios.de  Sun Apr 23 22:01:13 2006
From: krater at berlios.de (krater at berlios.de)
Date: Sun, 23 Apr 2006 22:01:13 +0200
Subject: [Plantlore-dev] r182 - trunk/src/net/sf/plantlore/client/export
Message-ID: <200604232001.k3NK1DB5009961@sheep.berlios.de>

Author: krater
Date: 2006-04-23 22:01:12 +0200 (Sun, 23 Apr 2006)
New Revision: 182

Removed:
   trunk/src/net/sf/plantlore/client/export/Export.java
Log:
Hmm, Export.java deleted now.

Deleted: trunk/src/net/sf/plantlore/client/export/Export.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Export.java	2006-04-23 20:00:20 UTC (rev 181)
+++ trunk/src/net/sf/plantlore/client/export/Export.java	2006-04-23 20:01:12 UTC (rev 182)
@@ -1,81 +0,0 @@
-package net.sf.plantlore.client.export;
-
-import java.io.IOException;
-import java.rmi.RemoteException;
-
-import net.sf.plantlore.common.Selection;
-import net.sf.plantlore.common.record.*;
-import net.sf.plantlore.middleware.DBLayer;
-import net.sf.plantlore.middleware.SelectQuery;
-import net.sf.plantlore.server.DBLayerException;
-
-
-import org.apache.log4j.Logger;
-
-/**
- * The Director class (for export).
- * 
- * @author Erik Kratochv?l (discontinuum at gmail.com)
- * @since 2006-04-21
- *	@version 0.7
- */
-public class Export implements Runnable {
-	
-	private Logger logger = Logger.getLogger(this.getClass().getPackage().getName());
-	
-	private Builder builder;
-	private SelectQuery query;
-	private Selection selection;
-	private DBLayer database;
-	
-	
-	public Export(Builder builder, SelectQuery query, DBLayer database, Selection selection) {
-		this.builder = builder; this.query = query; this.database = database;
-		this.selection = selection;
-	}
-	
-	
-	public void run() {
-		try {
-			int result = database.executeQuery( query );
-			long count = 0;
-			
-			logger.info("Export begins...");
-			builder.makeHeader();
-			
-			for(int i = 0; i < database.getNumRows( result ); i++) {
-				Record[] records = (Record[]) database.next( result );
-				if( !selection.contains( records[0] ) ) continue;
-				
-				count++;
-				builder.startNewRecord();
-				/* Why do we give the whole array of records?
-				 * It is more general - the builder can 
-				 * # either start with the records[0] and use the introspection,
-				 * # or use the whole records array and the template
-				 * to re-create the record.
-				 */
-				builder.writeRecord( records );
-				builder.finishRecord();
-			}
-		
-			builder.makeFooter();
-			logger.info("Export completed. " + count + " records sent to output.");
-		}
-		catch(DBLayerException e) {
-			logger.error(e); e.printStackTrace();
-		}
-		catch(RemoteException e) {
-			logger.error(e); e.printStackTrace();
-		}
-		catch(IOException e) {
-			logger.error(e); e.printStackTrace();
-		}
-	}
-	
-	
-	
-	
-
-
-}



From discontinuum at gmail.com  Mon Apr 24 10:35:35 2006
From: discontinuum at gmail.com (Erik Kratochvil)
Date: Mon, 24 Apr 2006 10:35:35 +0200
Subject: [Plantlore-dev] Jak resit 1:N vazby v DB pri exportu
Message-ID: <f4dc39b90604240135y84eb7b4h1dbc5025de884e9f@mail.gmail.com>

Zdravim, potrebuju trochu poradit.

V pripade vazeb 1:N (pripad TOccurrences <-> TAuthorsOccurrences) je otazka,
jak vyresit export do CSV, XML si s tim asi poradi.

Kdybysme delali dotaz rekneme nad tabulkama

    TAuthors, TAuthorsOccurrences, TOccurrences, Plants

a chteli  exportovat Plant.Taxon, Author.WholeName, AuthorsOccurences.Role.

Problem je, ze prvni radek toho CSV souboru je seznam nazvu sloupcu, proste
proto, aby se poznalo, co obsahuje i-ta hodnota.
Jenze k jednomu nalezu (Occurence) muze existovat vice autoru s ruznymi
rolemi (Authors, Role).

Cili, kdyz si nadepisu CSV soubor

    Plant.Taxon, Author.WholeName, AuthorsOccurrences.Role

pak nevim, jak do toho schematu nacpat promenny pocet autoru nalezu.
CSV neni zadny standard (jak sem se docetl), trochu sem googlil, ale nikde
sem nenasel nejaky navrh na reseni.

Prvni trochu rozumna moznost je zopakovani toho zaznamu nekolikrat s ruznymi
autory (jak je to v aktualnim Overview).
Cili pro zaznam

    Pampeliska, EK, nasel, JK, revidoval, TK, revidoval

by se konstruovaly 3. zaznamy

    Pampeliska, EK, nasel
    Pampeliska, JK, revidoval
    Pampeliska, TK, nasel // nasel TK jinou pampelisku jinde vs.
                          // nebo je to ta prvni pampeliska,
                          // kterou TK nasel spolus EK?

ktery by sly bezprostredne po sobe. Jenze problem s timhle resenim je, ze by
se pri importu potom musel vzdycky drzet ten predchozi zaznam (cely, coz
muze znamenat az desitky polozek) a ten nasledujici by se musel s tim
predchozim porovnavat (co by mohlo bejt neprijemne zdlouhavy), ale presto by
to nestacilo (viz ten modrozeleny pripad).
Mozna by se hodilo zavest jakysi  hack toho CSV  a misto opakovani tech
hodnot tam vlozit nejaky priznak, ze se radek vztahuje k tomu predchozimu, a
vsechny hodnoty, ktere se shoduji s tim predchozim, nechat prazdne. Neco
jako:

    Author.WholeName, Plant.Taxon, Plant.Czechname, Author.Role,
Author.Organization, Author.Address, AuthorOccurrence.Role
    EK, pampeliska, pampelka, nalezce, UK, 17.listopadu, nasel
    #JK,,, revizor, UK, 17.listopadu, revidoval
    #TK,,, null, VSE, Daleko9kou, revidoval po JK
    #LO,,, null, null, KdesiVLesi, null

Pri importu by to pak znamenalo, ze by se Importovaci parser prepnul do
nejakyho specialniho rezimu, kde by vedel, ze se to vztahuje k predch.
zaznamu, a zaridil se podle toho.

Nebo  ostrichovo reseni : "strcit hlavu do pisku a nic  s tim nedelat" a
nechat uzivateli prostredky, kteryma to muze vyresit (jako deadlock v
linuxu:) - at si, pokud chce ty zaznamy rozeznat, necha u nich vyexportovat
i sloupecky obsahujici unikatni id zaznamu. Stejnak pro zpetny import jsou
potreba minimalne vsechny NN sloupce a unikatni id zaznamu je NN...

V XML tenhle problem neni, tam by se dalo neco jako (moc toho o xml nevim):

    <record>
      <Plant taxon="pampeliska"/>
      <Occurrence note="V lese u lesa."/>
      <Author wholename="EK" role="nalezce" organization="UK"
address="17..."/>
      <Author wholename="JK" role="revizor" organization="UK"
address="17..:"/>
      <Author wholename="TK" ...../>
    </record>

Samosebou se bude muset upravit i export, zkusim dneska zapremejslet, jak by
to tam slo nejak elegantne vecpat, aniz bych ztratil obecnost nebo musel
delat nejaky hacky. Export bude stejne potreba upravit tak jako tak (protoze
treba kvuli prenaseni zaznamu -> aby se neztracela informace o lidech
spjatych se zaznamem).

Jak se na to tvarite? Unika mi neco?



P.S.
To druhy reseni me napadlo az skoro pri dokonceni tohohle mejlu. Priklanel
bych se spis k nemu :)


/* NEVSIMAT SI - nemam papir a nechci to zapomenout
pro export styl XML uprava jenom Exporteru
startNewRecord(); ---> add <Record>
writeRecord( record ); --> add <Plant />, <Occurrence />, <Author />
for each Author do writeRecord( author ) ---> add <Author ../>
finishRecord(); ---> add </Record>
*/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060424/1713dfd0/attachment.html>

From LadaOb at seznam.cz  Mon Apr 24 12:00:10 2006
From: LadaOb at seznam.cz (=?us-ascii?Q?Lada=20Oberreiterova?=)
Date: Mon, 24 Apr 2006 12:00:10 +0200 (CEST)
Subject: [Plantlore-dev] =?us-ascii?Q?Fwd=3ARe=3A=20Sw=20projekt=20=2D=20schuzka?=
Message-ID: <2230.4315-10179-1666312857-1145872810@seznam.cz>

An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060424/81e9a13a/attachment.html>
-------------- next part --------------


# ------------ P?vodn? zpr?va ------------
# Od: Antonin Riha <riha at ksi.ms.mff.cuni.cz>
# P?edm?t: Re: Sw projekt - schuzka
# Datum: 24.4.2006 10:49:29
# ---------------------------------------------
# Mili projektanti, 
s odlozenim schuzky souhlasim, hlavne ze delate # pokroky. 
Musim behem tohoto tydne napsat posudky na 3 projekty 
predlozene na MSMT, tak ten ziskany cas vyuziju. Pisu 
si tedy do # kalendare 2.5. v 15 hod. 
Zdravi A.Riha 
# 

From LadaOb at seznam.cz  Mon Apr 24 17:51:08 2006
From: LadaOb at seznam.cz (=?us-ascii?Q?Lada=20Oberreiterova?=)
Date: Mon, 24 Apr 2006 17:51:08 +0200 (CEST)
Subject: [Plantlore-dev] BioCASE
Message-ID: <2252.4404-24396-1139289953-1145893868@seznam.cz>

Ahojte,

preposlal jsem vam mailiky od vyvojaru ( vetsina si jiz vsimla ;-) )
.

1. Zkusila jsem pouzit ten poslany soubor dbmod_firebird.py, ale 
bohuzel zadna zmena k lepsimu.
2. Spustila jsem ten skript test.py a posilam screens jeho vypisu.

Zatim jsem na mail neopovidala.

Lada

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060424/724de01a/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: testFirebird.JPG
Type: image/jpeg
Size: 38523 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060424/724de01a/attachment.jpe>

From LadaOb at seznam.cz  Mon Apr 24 17:54:02 2006
From: LadaOb at seznam.cz (=?us-ascii?Q?Lada=20Oberreiterova?=)
Date: Mon, 24 Apr 2006 17:54:02 +0200 (CEST)
Subject: [Plantlore-dev] BioCASE
Message-ID: <2252.4404-24597-1905127457-1145894042@seznam.cz>

Specham a preposlala jsem vam spatny screen.
Jdu ted na cca 30 min pryc, tak jak se vratim, tak poslu ten spravny
(i kdyz vlastne ho ani posilat nemusim).

Lada

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060424/bad82e25/attachment.html>

From krater at berlios.de  Mon Apr 24 22:18:31 2006
From: krater at berlios.de (krater at berlios.de)
Date: Mon, 24 Apr 2006 22:18:31 +0200
Subject: [Plantlore-dev] r183 - in trunk/src/net/sf/plantlore: client/export client/export/builders common/record
Message-ID: <200604242018.k3OKIVpx013891@sheep.berlios.de>

Author: krater
Date: 2006-04-24 22:18:29 +0200 (Mon, 24 Apr 2006)
New Revision: 183

Modified:
   trunk/src/net/sf/plantlore/client/export/Builder.java
   trunk/src/net/sf/plantlore/client/export/Director.java
   trunk/src/net/sf/plantlore/client/export/Template.java
   trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
   trunk/src/net/sf/plantlore/common/record/Author.java
   trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java
   trunk/src/net/sf/plantlore/common/record/Habitat.java
   trunk/src/net/sf/plantlore/common/record/Metadata.java
   trunk/src/net/sf/plantlore/common/record/Occurrence.java
   trunk/src/net/sf/plantlore/common/record/Phytochorion.java
   trunk/src/net/sf/plantlore/common/record/Plant.java
   trunk/src/net/sf/plantlore/common/record/Publication.java
   trunk/src/net/sf/plantlore/common/record/Record.java
   trunk/src/net/sf/plantlore/common/record/Territory.java
   trunk/src/net/sf/plantlore/common/record/Village.java
Log:
Records' getColumns(), getForeignKeys() return ArrayList<String> instead of a String[].
The interface Builder changed to suit a new purpose. CSVBuilder rewritten accordingly.
Builder is not up-to-date. Do not use it yet.

Modified: trunk/src/net/sf/plantlore/client/export/Builder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -20,25 +20,26 @@
 	/** 
 	 * Write a header. This method is called just once before the iteration starts. 
 	 */
-	void makeHeader() throws IOException;
+	void header() throws IOException;
 	
 	/** 
 	 * Write a footer. This method is called just once after the iteration ends. 
 	 */
-	void makeFooter() throws IOException;
+	void footer() throws IOException;
 	
 	/** 
 	 * Make adjustments needed before
 	 * the output of another record starts. 
 	 * This method is called right before the <code>writeRecord()</code>. 
 	 */
-	void startNewRecord() throws IOException;
+	void startRecord() throws IOException;
 	
-	/** 
-	 * Write the record that is contained within the <code>args</code> array.
-	 * @see net.sf.plantlore.middleware.DBLayer
+	/**
+	 * 
+	 * @param arg
+	 * @throws IOException
 	 */
-	void writeRecord(Record[] args) throws IOException;
+	void part(Record arg) throws IOException;
 	
 	/** 
 	 * Make adjustments needed after the output of the current record is completed.

Modified: trunk/src/net/sf/plantlore/client/export/Director.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Director.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/client/export/Director.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -17,14 +17,11 @@
  * Purpose: The Director continualy fetches results of the <code>query</code>.
  * The selected queries (queries whose ID is in the <code>selection</code>)
  * are passed to the <code>builder</code> - the builder is responsible for
- * parsing the result and creating a corresponing output.
- * <br/>
- * Note that the Director doesn't manage any of these objects.
- * It merely iterates over the selected records of the result.
+ * creating a corresponing output.
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-04-21
- *	@version 1.0
+ *	@version wrong (must be rewritten!) 
  *
  * @see net.sf.plantlore.client.common.Selection
  * @see net.sf.plantlore.client.export.Builder
@@ -34,7 +31,7 @@
 	
 	private Logger logger = Logger.getLogger(this.getClass().getPackage().getName());
 	
-	private Builder builder;
+	private Builder build;
 	private SelectQuery query;
 	private Selection selection;
 	private DBLayer database;
@@ -52,7 +49,7 @@
 	 * @param selection	The set of selected records.
 	 */
 	public Director(Builder builder, SelectQuery query, DBLayer database, Selection selection) {
-		this.builder = builder; this.query = query; this.database = database;
+		this.build = builder; this.query = query; this.database = database;
 		this.selection = selection;
 	}
 	
@@ -67,7 +64,7 @@
 			logger.info("Export begins...");
 			
 			// Create the header of the file (some opening tags possibly).
-			builder.makeHeader();
+			build.header();
 			// Iterate over the result of the query.
 			for(int i = 0; i < database.getNumRows( result ); i++) {
 				Record[] records = (Record[]) database.next( result );
@@ -75,12 +72,16 @@
 				
 				count++;
 				// Write down this record.
-				builder.startNewRecord();
-				builder.writeRecord( records );
-				builder.finishRecord();
+				build.startRecord();
+				
+				// Parse the record.
+				//build.writeRecord( records );
+				
+				
+				build.finishRecord();
 			}
 			// Create the footer of the file (some closing tags possibly).
-			builder.makeFooter();
+			build.footer();
 			logger.info("Export completed. " + count + " records sent to output.");
 		}
 		// FIXME: Since the run() method comes from the Runnable interface, it cannot throw

Modified: trunk/src/net/sf/plantlore/client/export/Template.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -8,6 +8,9 @@
 
 
 /**
+ * The template that holds the information about the selected columns and tables.
+ * This information is used by the builder to decide, whether or not the currently
+ * considered column of a table should be exported.
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-04-22
@@ -20,35 +23,89 @@
 	/** The list of all tables the current template covers. */
 	private ArrayList<Class> tables = new ArrayList<Class>(20);
 	
-	/** The list of "basic tables" i.e. tables related directly to the Occurence data. */
+	/** 
+	 * The list of "basic tables" i.e. tables related directly to the Occurence data.
+	 */
 	public final static Class[] BASIC_TABLES = new Class[] { 
 			Author.class, AuthorOccurrence.class, Habitat.class,
 			Metadata.class, Occurrence.class, Phytochorion.class,
 			Plant.class, Publication.class, Territory.class,
-			Village.class
-			};
+			Village.class };
+		
+	/** 
+	 * @return The table that is central (primary) to the current query. 
+	 */
+	public Class getRootTable() { return tables.get(0); }
 	
-	public static Class whichTable(Record record) {
-		for(Class c : BASIC_TABLES)
-			if( c.isInstance( record ) ) return c;
-		return null;
+	/** 
+	 * Mark the database as set every time the database gets involved in a query!
+	 * @param table	The database that is involved in a query.
+	 */ 
+	public void set(Class table) { 
+		tables.add(table); 
 	}
 	
-	/** The table that is central to the current query. */
-	public Class getRootTable() { return tables.get(0); }
+	/** 
+	 * Unset a previously selected table.
+	 * @param table The table to be unset. 
+	 */
+	public void unset(Class table) { 
+		tables.remove(table);
+	}
 	
-	public void setTable(Class table) { tables.add(table); }
-	public void unsetTable(Class table) { tables.remove(table); }
-	public boolean isSetTable(Class table) { return tables.contains(table); } 
-	public boolean isSetTableD(Class table) { return tables.remove(table); }
+	/** 
+	 * 
+	 * @param table
+	 * @return true if the some of the table's columns are seleted to be exported. 
+	 */
+	public boolean isSet(Class table) { 
+		return tables.contains(table); 
+	} 
 	
-	public void set(Class table, String column) { columns.add(table+"."+column); }
-	public void unset(Class table, String column) { columns.remove(table+"."+column); }
-	public boolean isSet(Class table, String column) { return columns.contains(table+"."+column); }
+	/**
+	 * 
+	 * @param table	The table we are interested in and that will be deleted if it is there.
+	 * @return true if the table is set.
+	 */
+	public boolean isSetD(Class table) { return tables.remove(table); }
 	
+	/**
+	 * 
+	 * @param table
+	 * @param column
+	 */
+	public void set(Class table, String column) { 
+		columns.add(table+"."+column);
+		tables.add(table);
+	}
+	
+	
+	public void unset(Class table, String column) { 
+		columns.remove(table+"."+column); 
+	}
+	
+	
+	public boolean isSet(Class table, String column) { 
+		return columns.contains(table+"."+column); 
+	}
+	
+	/** 
+	 * Deselect all columns of all tables.
+	 */
+	public void unsetAll() { 
+		columns.clear(); 
+		tables.clear();
+	}
+	
 		
-	public void unsetAll() { columns.clear(); }
-	
-	public boolean match(Template t) { return columns.containsAll(t.columns); }
+	/**
+	 * Match this template against another one.
+	 * 
+	 * @param t	The template against which the matching will be held.
+	 * @return	True if this template is a superset of the other template.
+	 */ 
+	public boolean match(Template t) { 
+		return columns.containsAll(t.columns); 
+	}
 
 }

Modified: trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -2,29 +2,41 @@
 
 import java.io.IOException;
 import java.io.Writer;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.Hashtable;
 
-import net.sf.plantlore.client.export.MetaBuilder;
-//import net.sf.plantlore.client.export.RecordWalkBuilder;
+import net.sf.plantlore.client.export.Builder;
+import net.sf.plantlore.common.record.*;
 import net.sf.plantlore.client.export.Template;
 
 
 /**
  * CSV Builder.
+ * An ingenious use of introspection :]
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-04-23
  */
-public class CSVBuilder extends MetaBuilder {
+public class CSVBuilder implements Builder{
 	
 	private Writer output;
-	private Template tmp;
+	
+	private boolean first;
 		
 	private static final String DELIMITER = ",";
 	private static final String DOUBLEQUOTE = "\"";
 	private static final String NEWLINE = System.getProperty("line.separator");
 	
-	private boolean firstColumn = true;
+	private static final Object[] NO_PARAMETERS = new Object[0];
 	
+	
+	private ArrayList<Record> cache = new ArrayList<Record>(20);
+	private ArrayList<Author> authors = new ArrayList<Author>(10);
+	
+	private Hashtable<Class, ArrayList<Method>> properties = 
+		new Hashtable<Class, ArrayList<Method>>(20);
 		
 	/**
 	 * Create a new CSV Builder. 
@@ -34,25 +46,65 @@
 	 * @param tmp	The template that describes the selected columns and tables.
 	 */
 	public CSVBuilder(Writer output, Template tmp) {
-		super( tmp );
-		this.output = output; this.tmp = tmp;
+		this.output = output;
+		for( Class table : Template.BASIC_TABLES)
+			try {
+				// Get the list of all properties.
+				ArrayList<String> columns = ((Record) table.newInstance()).getProperties();
+				// Create a list of getters of those properties.
+				ArrayList<Method> methods = new ArrayList<Method>( columns.size() );
+				properties.put(table, methods);
+				// Check if these properties (columns) are set to be exported. 
+				for(String column : columns)  
+					if( !tmp.isSet(table, column) ) // yes -> store the getter
+						try {
+							methods.add( table.getMethod( methodName(column), new Class[0] ) );
+						} catch(NoSuchMethodException e) {}
+			} 
+			catch(IllegalAccessException e) {}
+			catch(InstantiationException e) {}
 	}
 	
 	
-	@Override
+	public void header() throws IOException {
+		
+	}
+	
+	
+	public void footer() throws IOException {
+		output.write(NEWLINE);
+	}
+	
+	
+	public void startRecord() throws IOException {
+		 cache.clear(); authors.clear(); first = true;
+	}
+	
+	
 	public void finishRecord() throws IOException {
+		if(authors.size() == 0)
+			for(Record record : cache) write( record );
+		else
+			for(Author author : authors) {
+				for(Record record : cache) write( record );
+				write( author );
+			}
+		
 		output.write(NEWLINE);		
-		firstColumn = true;
 	}
 	
+	
+	public void part(Record record) throws IOException {
+		if(record instanceof Author) authors.add( (Author) record);
+		else cache.add(record);
+	}
+	
+	
 	/**
-	 * Send the <code>[table, column, value]</code> in the CSV format
+	 * Send the <code>value</code> in the CSV format
 	 * to the output.
 	 */ 
-	protected void w(Class table, String column, Object value) throws IOException {
-		// Shall we export this column?
-		if( !tmp.isSet(table, column) ) return;
-		
+	protected void w(Object value) throws IOException {
 		StringBuilder r = new StringBuilder( value.toString() );
 		boolean containsDoubleQuote = r.indexOf(DOUBLEQUOTE) >= 0, 
 			containsDelimiter = r.indexOf(DELIMITER) >= 0,
@@ -71,11 +123,36 @@
 			r.insert(0, DOUBLEQUOTE); r.append(DOUBLEQUOTE);
 		}
 		
-		if( firstColumn ) firstColumn = false; 
-		else output.write( DELIMITER );
 		output.write( r.toString() );
-			
 	}
 	
+	/**
+	 * Construct the getter method name from the name of the <code>column</code>
+	 * 
+	 * @param column	The name of the column whose value we need to obtain. 
+	 * @return	The getter's name.
+	 */
+	private String methodName(String column) {
+		StringBuilder s = new StringBuilder("get" + column); // prepend `get` in front of  the name
+		s.setCharAt(3, Character.toUpperCase(s.charAt(3))); // convert the first letter of the name to uppercase
+		return s.toString();
+	}
 
+	
+	
+	protected void write(Record record) throws IOException {
+		Class table =  record.getClass();
+		ArrayList<Method> methods = properties.get( table );
+		for(Method getter : methods) 
+			try {
+				// Invoke the getter.
+				Object value = getter.invoke( record, NO_PARAMETERS );
+				if( !first ) output.write(DELIMITER); else first = false;
+				w( value );
+			} 
+			catch(IllegalAccessException e) {}
+			catch(InvocationTargetException e) {}
+	}
+	
+
 }

Modified: trunk/src/net/sf/plantlore/common/record/Author.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Author.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/common/record/Author.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -6,6 +6,8 @@
 
 package net.sf.plantlore.common.record;
 
+import java.util.ArrayList;
+
 /**
  *  Data holder object representing TAUTHORS table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents an author
@@ -44,8 +46,8 @@
     public Author() {
     }
     
-    public String[] getColumns() {
-    	return new String[] { ID, WHOLENAME, ORGANIZATION, ROLE, ADDRESS, PHONENUMBER, EMAIL, URL, NOTE };
+    public ArrayList<String> getColumns() {
+    	return list( ID, WHOLENAME, ORGANIZATION, ROLE, ADDRESS, PHONENUMBER, EMAIL, URL, NOTE );
     }
     
     /**

Modified: trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/common/record/AuthorOccurrence.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -7,6 +7,8 @@
 
 package net.sf.plantlore.common.record;
 
+import java.util.ArrayList;
+
 /**
  *  Data holder object representing TAUTHORSOCCURENCES table in the DB. This object is used as a 
  *  data holder for Hibernate operations on the server side. On the side of the client, it 
@@ -32,12 +34,12 @@
     public static final String RESULTREVISION = "resultRevision";
     
     @Override
-    public String[] getForeignKeys() { 
-    	return new String[] { AUTHOR, OCCURRENCE }; 
+    public ArrayList<String> getForeignKeys() { 
+    	return list( AUTHOR, OCCURRENCE ); 
     }
     
-    public String[] getColumns() {
-    	return new String[] { ID, AUTHOR, OCCURRENCE, ROLE, RESULTREVISION };
+    public ArrayList<String> getColumns() {
+    	return list( ID, AUTHOR, OCCURRENCE, ROLE, RESULTREVISION );
     }
     
     /**

Modified: trunk/src/net/sf/plantlore/common/record/Habitat.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Habitat.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/common/record/Habitat.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -7,6 +7,8 @@
 
 package net.sf.plantlore.common.record;
 
+import java.util.ArrayList;
+
 /**
  *  Data holder object representing THABITATS table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a habitat
@@ -46,13 +48,13 @@
     public static final String NOTE = "note";
     
     @Override
-    public String[] getForeignKeys() { 
-    	return new String[] { TERRITORY, PHYTOCHORION, NEARESTVILLAGE }; 
+    public ArrayList<String> getForeignKeys() { 
+    	return list( TERRITORY, PHYTOCHORION, NEARESTVILLAGE ); 
     }
     
-    public String[] getColumns() {
-    	return new String[] { ID, TERRITORY, PHYTOCHORION, NEARESTVILLAGE, 
-    			QUADRANT, DESCRIPTION, COUNTRY, ALTITUDE, LATITUDE, LONGITUDE, NOTE };
+    public ArrayList<String> getColumns() {
+    	return list( ID, TERRITORY, PHYTOCHORION, NEARESTVILLAGE, 
+    			QUADRANT, DESCRIPTION, COUNTRY, ALTITUDE, LATITUDE, LONGITUDE, NOTE );
     }
     
     /**

Modified: trunk/src/net/sf/plantlore/common/record/Metadata.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Metadata.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/common/record/Metadata.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -7,6 +7,8 @@
 
 package net.sf.plantlore.common.record;
 
+import java.util.ArrayList;
+
 /**
  *  Data holder object representing TMETADATA table in the DB. This object is used as a data
  *  holder for Hibernate operations on the server side. On the side of the client, it represents
@@ -61,12 +63,12 @@
     public Metadata() {
     }
     
-    public String[] getColumns() {
-    	return new String[] { ID, TECHNICALCONTACTADDRESS, TECHNICALCONTACTEMAIL, TECHNICALCONTACTNAME,
+    public ArrayList<String> getColumns() {
+    	return list( ID, TECHNICALCONTACTADDRESS, TECHNICALCONTACTEMAIL, TECHNICALCONTACTNAME,
     			CONTENTCONTACTADDRESS, CONTENTCONTACTEMAIL, CONTENTCONTACTNAME,
     			DATASETDETAILS, DATASETTITLE, SOURCEID, SOURCEINSTITUTIONID,
     			OWNERORGANIZATIONABBREV, BIOTOPETEXT, RECORDBASIS, VERSIONPLANTSFILE,
-    			DATECREATE, DATEMODIFIED };
+    			DATECREATE, DATEMODIFIED );
     }
     
     /**

Modified: trunk/src/net/sf/plantlore/common/record/Occurrence.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -7,6 +7,8 @@
 
 package net.sf.plantlore.common.record;
 
+import java.util.ArrayList;
+
 /**
  *  Data holder object representing TAUTHORS table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents an occurrence
@@ -64,15 +66,15 @@
     
     
     @Override
-    public String[] getForeignKeys() { 
-    	return new String[] { HABITAT, PLANT, PUBLICATION, METADATA }; 
+    public ArrayList<String> getForeignKeys() { 
+    	return list( HABITAT, PLANT, PUBLICATION, METADATA ); 
     }
     
-    public String[] getColumns() {
-    	return new String[] { ID, UNITIDDB, UNITVALUE, HABITAT, PLANT, YEARCOLLECTED,
+    public ArrayList<String> getColumns() {
+    	return list( ID, UNITIDDB, UNITVALUE, HABITAT, PLANT, YEARCOLLECTED,
     			MONTHCOLLECTED, DAYCOLLECTED, TIMECOLLECTED, ISODATETIMEBEGIN,
     			DATASOURCE, PUBLICATION, HERBARIUM, CREATEDWHEN, 
-    			UPDATEDWHEN, METADATA, NOTE };
+    			UPDATEDWHEN, METADATA, NOTE );
     }
     
     

Modified: trunk/src/net/sf/plantlore/common/record/Phytochorion.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Phytochorion.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/common/record/Phytochorion.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -7,6 +7,8 @@
 
 package net.sf.plantlore.common.record;
 
+import java.util.ArrayList;
+
 /**
  *  Data holder object representing TPHYTOCHORIA table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a phytochorion
@@ -34,8 +36,8 @@
         
     }
     
-    public String[] getColumns() {
-    	return new String[] { ID, CODE, NAME };
+    public ArrayList<String> getColumns() {
+    	return list( ID, CODE, NAME );
     }
     
     /**

Modified: trunk/src/net/sf/plantlore/common/record/Plant.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Plant.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/common/record/Plant.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -7,6 +7,8 @@
 
 package net.sf.plantlore.common.record;
 
+import java.util.ArrayList;
+
 /**
  *  Data holder object representing TPLANTS table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a plant
@@ -44,9 +46,9 @@
         
     }
     
-    public String[] getColumns() {
-    	return new String[] { ID, TAXON, GENUS, SPECIES, SCIENTIFICNAMEAUTHOR,
-    			CZECHNAME, SYNONYMS, NOTE, SURVEYTAXID };
+    public ArrayList<String> getColumns() {
+    	return list( ID, TAXON, GENUS, SPECIES, SCIENTIFICNAMEAUTHOR,
+    			CZECHNAME, SYNONYMS, NOTE, SURVEYTAXID );
     }
     
     /**

Modified: trunk/src/net/sf/plantlore/common/record/Publication.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -7,6 +7,8 @@
 
 package net.sf.plantlore.common.record;
 
+import java.util.ArrayList;
+
 /**
  *  Data holder object representing TPUBLICATIONS table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a publication
@@ -46,9 +48,9 @@
         
     }
     
-    public String[] getColumns() {
-    	return new String[] { ID, COLLECTIONNAME, COLLECTIONYEARPUBLICATION, JOURNALNAME,
-    			JOURNALAUTHORNAME, REFERENCECITATION, REFERENCEDETAIL, URL, NOTE };
+    public ArrayList<String> getColumns() {
+    	return list( ID, COLLECTIONNAME, COLLECTIONYEARPUBLICATION, JOURNALNAME,
+    			JOURNALAUTHORNAME, REFERENCECITATION, REFERENCEDETAIL, URL, NOTE );
     }
     
     /**

Modified: trunk/src/net/sf/plantlore/common/record/Record.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -1,6 +1,7 @@
 package net.sf.plantlore.common.record;
 
 import java.io.Serializable;
+import java.util.ArrayList;
 
 /**
  * The common ancestor of all records. 
@@ -21,11 +22,29 @@
 	/**
 	 * @return The set of all foreign keys (columns that refer to other tables).
 	 */
-	public String[] getForeignKeys() { return null; }
+	public ArrayList<String> getForeignKeys() { return new ArrayList(0); }
 	
 	/**
 	 * @return The set of all columns of the table.
 	 */
-	public String[] getColumns() { return null; }
+	public ArrayList<String> getColumns() { return new ArrayList(0); }
 	
+	/**
+	 * @return The set of columns that are not foreign keys.
+	 */
+	public ArrayList<String> getProperties() {
+		ArrayList<String> properties = getColumns();
+		properties.removeAll(getForeignKeys());
+		return properties;
+	}
+	
+	
+	
+	protected static ArrayList<String> list(String... values) {
+		if(values == null) return new ArrayList<String>(0);
+		ArrayList<String> list = new ArrayList<String>(values.length);
+		for(String value : values) list.add(value);
+		return list;
+	}
+	
 }

Modified: trunk/src/net/sf/plantlore/common/record/Territory.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Territory.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/common/record/Territory.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -7,6 +7,8 @@
 
 package net.sf.plantlore.common.record;
 
+import java.util.ArrayList;
+
 /**
  *  Data holder object representing TTERRITORIES table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a territory
@@ -32,8 +34,8 @@
         
     }
     
-    public String[] getColumns() {
-    	return new String[] { ID, NAME };
+    public ArrayList<String> getColumns() {
+    	return list( ID, NAME );
     }
     
     /**

Modified: trunk/src/net/sf/plantlore/common/record/Village.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Village.java	2006-04-23 20:01:12 UTC (rev 182)
+++ trunk/src/net/sf/plantlore/common/record/Village.java	2006-04-24 20:18:29 UTC (rev 183)
@@ -7,6 +7,8 @@
 
 package net.sf.plantlore.common.record;
 
+import java.util.ArrayList;
+
 /**
  *  Data holder object representing TVILLAGES table in the DB. This object is used as a data holder
  *  for Hibernate operations on the server side. On the side of the client, it represents a village
@@ -30,8 +32,8 @@
         
     }
     
-    public String[] getColumns() {
-    	return new String[] { ID, NAME };
+    public ArrayList<String> getColumns() {
+    	return list( ID, NAME );
     }
     
     /**



From krater at berlios.de  Mon Apr 24 22:20:57 2006
From: krater at berlios.de (krater at berlios.de)
Date: Mon, 24 Apr 2006 22:20:57 +0200
Subject: [Plantlore-dev] r184 - trunk/src/net/sf/plantlore/client/export
Message-ID: <200604242020.k3OKKv0t015437@sheep.berlios.de>

Author: krater
Date: 2006-04-24 22:20:56 +0200 (Mon, 24 Apr 2006)
New Revision: 184

Removed:
   trunk/src/net/sf/plantlore/client/export/MetaBuilder.java
   trunk/src/net/sf/plantlore/client/export/RecordWalkBuilder.java
Log:
MetaBuilder and RecordWalkBuilder are obsolete and no longer necessary.

Deleted: trunk/src/net/sf/plantlore/client/export/MetaBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/MetaBuilder.java	2006-04-24 20:18:29 UTC (rev 183)
+++ trunk/src/net/sf/plantlore/client/export/MetaBuilder.java	2006-04-24 20:20:56 UTC (rev 184)
@@ -1,242 +0,0 @@
-package net.sf.plantlore.client.export;
-
-import java.io.IOException;
-
-import net.sf.plantlore.client.export.Template;
-import net.sf.plantlore.common.record.*;
-
-
-/**
- * MetaBuilder. Hard-wired database scheme = changes of the database model will
- * affect this class directly (the code will have to be changed accordingly).
- * Fast, but not flexible (other permutations of columns aren't possible).
- * <br/>
- * MetaBuilder is a partial implementation of the Builder interface
- * and implements the most annoying and always-repeating parts:
- * the traversal through all tables and their columns.
- * For each column, that has to be exported, 
- * the <code>w()</code> method is called.
- * <br/>
- * <code>w() </code> is the only method that has to be implemented;
- * it says how the [table, column, value] should be written to the output.
- * 
- * 
- * @author Erik Kratochv?l (discontinuum at gmail.com)
- * @since 2006-04-23
- * @see net.sf.plantlore.client.export.MetaBuilder#w(Class, String, Object)
- * @see net.sf.plantlore.client.export.RecordWalkBuilder
- */
-public abstract class MetaBuilder implements Builder {
-	
-	/** 
-	 * The particular template that is used while building the output.
-	 * @see net.sf.plantlore.client.export.Template
-	 */ 
-	private Template tmp;
-	
-	/**
-	 * "Create" a new MetaBuilder. Since MetaBuilder is an abstract class,
-	 * you cannot instantiate it.
-	 * 
-	 * @param tmp The template that is used to decide, whether a particular
-	 * 		table interests us or not.
-	 * @see net.sf.plantlore.client.export.Template
-	 */
-	public MetaBuilder(Template tmp) {
-		this.tmp = tmp;
-	}
-	
-	
-	/**
-	 * An implementation of the Builder::writeRecord().
-	 * It completely traverses the record starting with <code>args[0]</code>
-	 * as a root table. It traverses all tables that are seleted in the Template. 
-	 */
-	public void writeRecord(Record[] args) throws IOException {
-		Record r = args[0];
-		if(r instanceof Author) process( (Author)r );
-		else if(r instanceof AuthorOccurrence) process( (AuthorOccurrence)r );
-		else if(r instanceof Habitat) process( (Habitat)r );
-		else if(r instanceof Metadata) process( (Metadata)r );
-		else if(r instanceof Occurrence) process( (Occurrence)r );
-		else if(r instanceof Phytochorion) process( (Phytochorion)r );
-		else if(r instanceof Plant) process( (Plant)r );
-		else if(r instanceof Publication) process( (Publication)r );
-		else if(r instanceof Territory) process( (Territory)r );
-		else if(r instanceof Village) process( (Village)r );
-		else /* ERROR! */;
-	}
-
-	/** Process the table of Authors. */
-	protected void process(Author a) throws IOException {
-		if (!tmp.isSetTableD(Author.class))
-			return; // prevent recursion!
-		w(Author.class, Author.WHOLENAME, a.getWholeName());
-		w(Author.class, Author.ORGANIZATION, a.getOrganization());
-		w(Author.class, Author.ADDRESS, a.getAddress());
-		w(Author.class, Author.EMAIL, a.getEmail());
-		w(Author.class, Author.PHONENUMBER, a.getPhoneNumber());
-		w(Author.class, Author.URL, a.getUrl());
-		w(Author.class, Author.ROLE, a.getRole());
-		w(Author.class, Author.NOTE, a.getNote());
-	}
-
-	/** Process the table of AuthorsOccurences. */
-	protected void process(AuthorOccurrence a) throws IOException {
-		if (!tmp.isSetTableD(AuthorOccurrence.class))
-			return; // prevent recursion!
-		process(a.getAuthor());
-		process(a.getOccurrence());
-		w(AuthorOccurrence.class, AuthorOccurrence.ROLE, a.getRole());
-		w(AuthorOccurrence.class, AuthorOccurrence.RESULTREVISION, a
-				.getResultRevision());
-	}
-
-	/** Process the table of Habitats. */
-	protected void process(Habitat a) throws IOException {
-		if (!tmp.isSetTableD(Habitat.class))
-			return; // prevent recursion!
-		process(a.getTerritory());
-		process(a.getPhytochorion());
-		process(a.getNearestVillage());
-		w(Habitat.class, Habitat.DESCRIPTION, a.getDescription());
-		w(Habitat.class, Habitat.COUNTRY, a.getCountry());
-		w(Habitat.class, Habitat.NOTE, a.getNote());
-		w(Habitat.class, Habitat.QUADRANT, a.getQuadrant());
-		w(Habitat.class, Habitat.ALTITUDE, a.getAltitude());
-		w(Habitat.class, Habitat.LATITUDE, a.getLatitude());
-		w(Habitat.class, Habitat.LONGITUDE, a.getLongitude());
-	}
-
-	/** Process the table of Metadata. */
-	protected void process(Metadata a) throws IOException {
-		if (!tmp.isSetTableD(Metadata.class))
-			return; // prevent recursion!
-		w(Metadata.class, Metadata.CONTENTCONTACTNAME, a
-				.getContentContactName());
-		w(Metadata.class, Metadata.CONTENTCONTACTADDRESS, a
-				.getContentContactAddress());
-		w(Metadata.class, Metadata.CONTENTCONTACTEMAIL, a
-				.getContentContactEmail());
-		w(Metadata.class, Metadata.DATASETTITLE, a.getDataSetTitle());
-		w(Metadata.class, Metadata.DATASETDETAILS, a.getDataSetDetails());
-		w(Metadata.class, Metadata.DATECREATE, a.getDateCreate());
-		w(Metadata.class, Metadata.DATEMODIFIED, a.getDateModified());
-		w(Metadata.class, Metadata.OWNERORGANIZATIONABBREV, a
-				.getOwnerOrganizationAbbrev());
-		w(Metadata.class, Metadata.RECORDBASIS, a.getRecordBasis());
-		w(Metadata.class, Metadata.SOURCEINSTITUTIONID, a
-				.getSourceInstitutionId());
-		w(Metadata.class, Metadata.SOURCEID, a.getSourceId());
-		w(Metadata.class, Metadata.TECHNICALCONTACTNAME, a
-				.getTechnicalContactName());
-		w(Metadata.class, Metadata.TECHNICALCONTACTADDRESS, a
-				.getTechnicalContactAddress());
-		w(Metadata.class, Metadata.TECHNICALCONTACTEMAIL, a
-				.getTechnicalContactEmail());
-		w(Metadata.class, Metadata.VERSIONPLANTSFILE, a.getVersionPlantsFile());
-	}
-
-	/** Process the table of Occurences. */
-	protected void process(Occurrence a) throws IOException {
-		if (!tmp.isSetTableD(Occurrence.class))
-			return; // prevent recursion!
-		process(a.getPlant());
-		process(a.getHabitat());
-		process(a.getMetadata());
-		process(a.getPublication());
-		w(Occurrence.class, Occurrence.UNITIDDB, a.getUnitIdDb());
-		w(Occurrence.class, Occurrence.UNITVALUE, a.getUnitValue());
-		w(Occurrence.class, Occurrence.DAYCOLLECTED, a.getDayCollected());
-		w(Occurrence.class, Occurrence.MONTHCOLLECTED, a.getMonthCollected());
-		w(Occurrence.class, Occurrence.YEARCOLLECTED, a.getYearCollected());
-		w(Occurrence.class, Occurrence.TIMECOLLECTED, a.getTimeCollected());
-		w(Occurrence.class, Occurrence.ISODATETIMEBEGIN, a
-				.getIsoDateTimeBegin());
-		w(Occurrence.class, Occurrence.DATASOURCE, a.getDataSource());
-		w(Occurrence.class, Occurrence.HERBARIUM, a.getHerbarium());
-		w(Occurrence.class, Occurrence.NOTE, a.getNote());
-		w(Occurrence.class, Occurrence.CREATEDWHEN, a.getCreatedWhen());
-		w(Occurrence.class, Occurrence.UPDATEDWHEN, a.getUpdatedWhen());
-	}
-
-	/** Process the table of Phytochoria. */
-	protected void process(Phytochorion a) throws IOException {
-		if (!tmp.isSetTableD(Phytochorion.class))
-			return; // prevent recursion!
-		w(Phytochorion.class, Phytochorion.NAME, a.getName());
-		w(Phytochorion.class, Phytochorion.CODE, a.getCode());
-	}
-
-	/** Process the table of Plants. */
-	protected void process(Plant a) throws IOException {
-		if (!tmp.isSetTableD(Plant.class))
-			return; // prevent recursion!
-		w(Plant.class, Plant.TAXON, a.getTaxon());
-		w(Plant.class, Plant.SCIENTIFICNAMEAUTHOR, a.getScientificNameAuthor());
-		w(Plant.class, Plant.CZECHNAME, a.getCzechName());
-		w(Plant.class, Plant.GENUS, a.getGenus());
-		w(Plant.class, Plant.SPECIES, a.getSpecies());
-		w(Plant.class, Plant.SYNONYMS, a.getSynonyms());
-		w(Plant.class, Plant.SURVEYTAXID, a.getSurveyTaxId());
-		w(Plant.class, Plant.NOTE, a.getNote());
-	}
-
-	/** Process the table of Publications. */
-	protected void process(Publication a) throws IOException {
-		if (!tmp.isSetTableD(Publication.class))
-			return; // prevent recursion!
-		w(Publication.class, Publication.COLLECTIONNAME, a.getCollectionName());
-		w(Publication.class, Publication.COLLECTIONYEARPUBLICATION, a
-				.getCollectionYearPublication());
-		w(Publication.class, Publication.JOURNALNAME, a.getJournalName());
-		w(Publication.class, Publication.JOURNALAUTHORNAME, a
-				.getJournalAuthorName());
-		w(Publication.class, Publication.NOTE, a.getNote());
-		w(Publication.class, Publication.REFERENCECITATION, a
-				.getReferenceCitation());
-		w(Publication.class, Publication.REFERENCEDETAIL, a
-				.getReferenceDetail());
-		w(Publication.class, Publication.URL, a.getUrl());
-	}
-
-	/** Process the table of Territories. */
-	protected void process(Territory a) throws IOException {
-		if (!tmp.isSetTableD(Territory.class))
-			return; // prevent recursion!
-		w(Territory.class, Territory.NAME, a.getName());
-	}
-
-	/** Process the table of Villages. */
-	protected void process(Village a) throws IOException {
-		if (!tmp.isSetTableD(Village.class))
-			return; // prevent recursion!
-		w(Village.class, Village.NAME, a.getName());
-	}
-
-	/**
-	 * Write down the [table, column, value] to the output in a particular format.
-	 * It is up to the subclass to specify this method. 
-	 * 
-	 * @param table	The currently processed table.
-	 * @param column	The currently considered column of the table.
-	 * @param value	The particular value contained in that column.
-	 * @throws IOException	when an IO error occurs.
-	 */
-	protected abstract void w(Class table, String column, Object value)
-		throws IOException;
-
-	
-	/** Empty implementation (does nothing). */
-	public void makeHeader() throws IOException {}
-	
-	/** Empty implementation (does nothing). */
-	public void makeFooter() throws IOException {}
-	
-	/** Empty implementation (does nothing). */
-	public void startNewRecord() throws IOException {}
-	
-	/** Empty implementation (does nothing). */
-	public void finishRecord() throws IOException {}
-
-}

Deleted: trunk/src/net/sf/plantlore/client/export/RecordWalkBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/RecordWalkBuilder.java	2006-04-24 20:18:29 UTC (rev 183)
+++ trunk/src/net/sf/plantlore/client/export/RecordWalkBuilder.java	2006-04-24 20:20:56 UTC (rev 184)
@@ -1,147 +0,0 @@
-package net.sf.plantlore.client.export;
-
-import java.io.IOException;
-import java.lang.reflect.InvocationTargetException;
-import java.util.HashSet;
-
-import net.sf.plantlore.common.record.Record;
-
-/**
- * RecordWalkBuilder. Immune to the database model changes.
- * The RecordWalkBuilder has the same purpose as the MetaBuilder,
- * and in fact it does the same thing but in a different way.
- * It is slower than MetaBuilder - it is the price for its more general design.
- * <br/>
- * RecordBuilder is a partial implementation of the Builder interface
- * and implements the most annoying and always-repeating parts:
- * the traversal through all tables and their columns.
- * For each column, that has to be exported, 
- * the <code>w()</code> method is called.
- * <br/>
- * <code>w() </code> is the only method that has to be implemented;
- * it says how the [table, column, value] should be written to the output.
- * 
- * 
- * @author Erik Kratochv?l (discontinuum at gmail.com)
- * @since 2006-04-23
- * @see net.sf.plantlore.client.export.MetaBuilder#w(Class, String, Object)
- * @see net.sf.plantlore.client.export.MetaBuilder
- */
-public abstract class RecordWalkBuilder implements Builder {
-	
-	/** 
-	 * The particular template that is used while building the output.
-	 * @see net.sf.plantlore.client.export.Template
-	 */ 
-	private Template tmp;
-	
-	/**
-	 * "Create" a new RecordWalkBuilder. Since RecordWalkBuilder is an abstract class,
-	 * you cannot instantiate it.
-	 * 
-	 * @param tmp The template that is used to decide, whether a particular
-	 * 		table interests us or not.
-	 * @see net.sf.plantlore.client.export.Template
-	 */
-	public RecordWalkBuilder(Template tmp) {
-		this.tmp = tmp;
-	}
-	
-	/**
-	 * An implementation of the Builder::writeRecord().
-	 * It completely traverses the record starting with <code>args[0]</code>
-	 * as a root table. It traverses all tables that are seleted in the Template.
-	 * <br/>
-	 * This task is carried out more elegantly (or more slowly if you want)
-	 * than in the MetaBuilder. This method uses the introspection to 
-	 * invoke the getters on the columns of tables.
-	 * 
-	 * @see net.sf.plantlore.client.export.MetaBuilder
-	 */	
-	public void writeRecord(Record[] args) throws IOException {
-		// Well, deal with every part (part corresponds with a table) of the record separately 
-		for(Record record : args) dealWith( record );
-	}
-	
-	/**
-	 * Construct the getter method name from the name of the <code>column</code>
-	 * 
-	 * @param column	The name of the column whose value we need to obtain. 
-	 * @return	The getter's name.
-	 */
-	private String methodName(String column) {
-		StringBuilder s = new StringBuilder("get" + column); // prepend `get` in front of  the name
-		s.setCharAt(3, Character.toUpperCase(s.charAt(3))); // convert the first letter of the name to uppercase
-		return s.toString();
-	}
-	
-	/**
-	 * Deal with <b>this</b> partial record. 
-	 * The record corresponds to a particular table
-	 * (i.e. Author, Plant, etc.).
-	 * The traversal of all parts of the record is not done here.
-	 * 
-	 * @param record	Part of the output that corresponds to one of the basic tables.
-	 * @throws IOException
-	 */
-	protected void dealWith(Record record) throws IOException {
-		// Find out to which table this record corresponds.
-		Class table = Template.whichTable( record );
-		// Is this table important to us?
-		if( table == null ||  !tmp.isSetTableD( table ) ) return;
-		
-		// Obtain the column names and names of columns holding foreign keys.
-		String[] foreignKeys = record.getForeignKeys(); // I love inheritance ;)
-		String[] allColumns = record.getColumns();
-		
-		// The foreignKeys table will be questioned repeatedly -> create a hash set.
-		HashSet<String> fk = new HashSet<String>(20);
-		if( foreignKeys != null ) for(String key : foreignKeys) fk.add( key );
-		
-		// Export every column of this table, that is marked to be exported.
-		for(String column : allColumns) {
-			// Foreign keys and unwanted columns will be skipped.
-			if( fk.contains(column) || !tmp.isSet(table, column) ) continue;
-			try {
-				// Invoke the getter on the `record` to obtain the particular value
-				// of that column.
-				Object value = table.getMethod( methodName(column), new Class[0] ).invoke( record, new Object[0] );
-				// Send the value to the output.
-				w(table, column, value);
-			} 
-			catch(NoSuchMethodException e) {
-				System.err.println(e); e.printStackTrace();
-			}
-			catch(IllegalAccessException e) {
-				System.err.println(e); e.printStackTrace();
-			}
-			catch(InvocationTargetException e) {
-				System.err.println(e); e.printStackTrace();
-			}
-		}
-	}
-	
-	/**
-	 * Write down the [table, column, value] to the output in a particular format.
-	 * It is up to the subclass to specify this method. 
-	 * 
-	 * @param table	The currently processed table.
-	 * @param column	The currently considered column of the table.
-	 * @param value	The particular value contained in that column.
-	 * @throws IOException	when an IO error occurs.
-	 */
-	protected abstract void w(Class table, String column, Object value) throws IOException;
-		
-		
-	/** Empty implementation (does nothing). */
-	public void makeHeader() throws IOException {}
-	
-	/** Empty implementation (does nothing). */
-	public void makeFooter() throws IOException {}
-	
-	/** Empty implementation (does nothing). */
-	public void startNewRecord() throws IOException {}
-	
-	/** Empty implementation (does nothing). */
-	public void finishRecord() throws IOException {}
-}



From lada at berlios.de  Mon Apr 24 23:22:28 2006
From: lada at berlios.de (lada at berlios.de)
Date: Mon, 24 Apr 2006 23:22:28 +0200
Subject: [Plantlore-dev] r185 - in trunk/src/net/sf/plantlore: client client/history client/metadata l10n
Message-ID: <200604242122.k3OLMSZM026133@sheep.berlios.de>

Author: lada
Date: 2006-04-24 23:22:27 +0200 (Mon, 24 Apr 2006)
New Revision: 185

Added:
   trunk/src/net/sf/plantlore/client/metadata/
   trunk/src/net/sf/plantlore/client/metadata/AddEditMetadataCtrl.java
   trunk/src/net/sf/plantlore/client/metadata/AddEditMetadataView.form
   trunk/src/net/sf/plantlore/client/metadata/AddEditMetadataView.java
   trunk/src/net/sf/plantlore/client/metadata/MetadataManager.java
   trunk/src/net/sf/plantlore/client/metadata/MetadataManagerCtrl.java
   trunk/src/net/sf/plantlore/client/metadata/MetadataManagerTableModel.java
   trunk/src/net/sf/plantlore/client/metadata/MetadataManagerView.form
   trunk/src/net/sf/plantlore/client/metadata/MetadataManagerView.java
Modified:
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/AppCoreView.java
   trunk/src/net/sf/plantlore/client/history/DetailsHistoryCtrl.java
   trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.form
   trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java
   trunk/src/net/sf/plantlore/client/history/History.java
   trunk/src/net/sf/plantlore/client/history/HistoryView.form
   trunk/src/net/sf/plantlore/client/history/HistoryView.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java
   trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java
   trunk/src/net/sf/plantlore/l10n/Plantlore.properties
   trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties
Log:
Add metadata manager.AppCore - add AbstractAction for metadataManager, change Lisener of WholeHistory to AbstractAction.

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -27,6 +27,9 @@
 import net.sf.plantlore.client.history.History;
 import net.sf.plantlore.client.history.WholeHistoryCtrl;
 import net.sf.plantlore.client.history.WholeHistoryView;
+import net.sf.plantlore.client.metadata.MetadataManager;
+import net.sf.plantlore.client.metadata.MetadataManagerCtrl;
+import net.sf.plantlore.client.metadata.MetadataManagerView;
 import net.sf.plantlore.common.record.Author;
 import net.sf.plantlore.common.record.AuthorOccurrence;
 import net.sf.plantlore.common.record.Occurrence;
@@ -82,6 +85,11 @@
     WholeHistoryView wholeHistoryView;
     WholeHistoryCtrl wholeHistoryCtrl;
     
+    //MetadataManager
+    MetadataManager metadataManagerModel;
+    MetadataManagerView metadataManagerView;
+    MetadataManagerCtrl metadataManagerCtrl;
+    
     // Login
     Login loginModel;
     LoginView loginView;
@@ -104,8 +112,9 @@
         
         view.addDataAuthorsListener(new DataAuthorsListener());
         view.addDataPublicationsListener(new DataPublicationsListener());
+        view.addDataMetadataAction(new DataMetadataAction());
         view.addDataHistoryListener(new DataHistoryListener());
-        view.addDataWholeHistoryListener(new DataWholeHistoryListener());
+        view.addDataWholeHistoryAction(new DataWholeHistoryAction());
         
         view.setSearchAction(new SearchAction());
         view.setAddAction(new AddAction());
@@ -431,11 +440,14 @@
         }
     }    
     
-        class DataWholeHistoryListener implements ActionListener {
-    	public void actionPerformed(ActionEvent actionEvent)
-        {
+    class DataWholeHistoryAction extends AbstractAction {
+        public DataWholeHistoryAction() {
+             putValue(NAME, L10n.getString("wholeHistory"));
+        }
+
+        public void actionPerformed(ActionEvent actionEvent) {
             System.out.println("Whole history - Undo selected");
-            
+
             wholeHistoryModel = new History(model.getDatabase());
             wholeHistoryView = new WholeHistoryView(wholeHistoryModel, view, true);
             wholeHistoryCtrl = new WholeHistoryCtrl(wholeHistoryModel, wholeHistoryView);
@@ -443,6 +455,24 @@
         }
     }    
     
+   /* 
+    *
+    */
+    class DataMetadataAction extends AbstractAction {
+        public DataMetadataAction() {
+             putValue(NAME, L10n.getString("metadataManager"));
+        }
+
+        public void actionPerformed(ActionEvent actionEvent) {
+            System.out.println("Metadata Manager");
+
+            metadataManagerModel = new MetadataManager(model.getDatabase());
+            metadataManagerView = new MetadataManagerView(metadataManagerModel, view, true);
+            metadataManagerCtrl = new MetadataManagerCtrl(metadataManagerModel, metadataManagerView);
+            metadataManagerView.setVisible(true);
+        }
+    }              
+    
     class RecordsPerPagePropertyChangeListener implements PropertyChangeListener {
         public void propertyChange(PropertyChangeEvent e) {
             JFormattedTextField tf = (JFormattedTextField)e.getSource();

Modified: trunk/src/net/sf/plantlore/client/AppCoreView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -72,7 +72,8 @@
     private JMenuItem helpContents = new JMenuItem(L10n.getString("helpContents"));
     private JMenuItem helpAbout = new JMenuItem(L10n.getString("helpAbout"));
     private JMenuItem dataAuthors = new JMenuItem(L10n.getString("authorMgr"));
-    private JMenuItem dataPublications = new JMenuItem(L10n.getString("publicationMgr"));    
+    private JMenuItem dataPublications = new JMenuItem(L10n.getString("publicationMgr")); 
+    private JMenuItem dataMetadata = new JMenuItem(L10n.getString("metadataManager"));
     private JMenuItem dataHistory = new JMenuItem(L10n.getString("History"));
     private JMenuItem dataWholeHistory = new JMenuItem(L10n.getString("wholeHistory"));
     private JMenuItem dataImport = new JMenuItem(L10n.getString("dataImport"));
@@ -164,7 +165,8 @@
         
         dataMenu.setMnemonic(L10n.getMnemonic("Data"));
         dataMenu.add(dataAuthors);
-        dataMenu.add(dataPublications);   
+        dataMenu.add(dataPublications);  
+        dataMenu.add(dataMetadata);
         dataMenu.add(dataImport);
         dataMenu.add(dataExport);
         dataMenu.add(dataSearch);
@@ -451,13 +453,21 @@
         dataHistory.addActionListener(al);
     }
     
-     /** Adds a listener to the HistoryData menu item.
+    /** Sets an action to the MetadataData menu item.
     *
     */
-    public void addDataWholeHistoryListener(ActionListener al) {
-        dataWholeHistory.addActionListener(al);
+    public void addDataMetadataAction(AbstractAction a) {
+        dataMetadata.setAction(a);
     }
     
+    
+     /** Sets an action to the HistoryData menu item.
+    *
+    */
+    public void addDataWholeHistoryAction(AbstractAction a) {
+        dataWholeHistory.setAction(a);
+    }
+    
     public void setRecordsPerPageListener(PropertyChangeListener p)
     {
         recordsPerPage.addPropertyChangeListener(p);

Modified: trunk/src/net/sf/plantlore/client/history/DetailsHistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/DetailsHistoryCtrl.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/history/DetailsHistoryCtrl.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -28,21 +28,10 @@
         logger = Logger.getLogger(this.getClass().getPackage().getName());              
         this.view = view;
         
-        view.okButton.addActionListener(new okButtonListener());
         view.closeButton.addActionListener(new closeButtonListener());
         view.helpButton.addActionListener(new helpButtonListener());
     }
-    
-               /** 
-    * On Ok makes the model store() the preferences and hides the view.
-    * 
-    */
-   class okButtonListener implements ActionListener {
-       public void actionPerformed(ActionEvent actionEvent)
-       {       
-           view.close();           
-       }
-   }
+     
   
    /**
     * On Cancel just hides the view.

Modified: trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.form	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.form	2006-04-24 21:22:27 UTC (rev 185)
@@ -18,18 +18,13 @@
     <DimensionLayout dim="0">
       <Group type="103" groupAlignment="0" attributes="0">
           <Group type="102" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
               <Group type="103" groupAlignment="0" attributes="0">
-                  <Group type="102" alignment="0" attributes="0">
-                      <EmptySpace max="-2" attributes="0"/>
-                      <Component id="jPanel1" max="32767" attributes="0"/>
-                  </Group>
-                  <Group type="102" alignment="0" attributes="0">
-                      <EmptySpace min="-2" pref="186" max="-2" attributes="0"/>
-                      <Component id="okButton" min="-2" max="-2" attributes="0"/>
-                      <EmptySpace min="-2" pref="27" max="-2" attributes="0"/>
-                      <Component id="closeButton" min="-2" max="-2" attributes="0"/>
-                      <EmptySpace min="-2" pref="20" max="-2" attributes="0"/>
+                  <Component id="jPanel1" alignment="0" max="32767" attributes="0"/>
+                  <Group type="102" alignment="1" attributes="0">
                       <Component id="helpButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace pref="460" max="32767" attributes="0"/>
+                      <Component id="closeButton" min="-2" max="-2" attributes="0"/>
                   </Group>
               </Group>
               <EmptySpace max="-2" attributes="0"/>
@@ -43,11 +38,10 @@
               <Component id="jPanel1" min="-2" max="-2" attributes="0"/>
               <EmptySpace min="-2" pref="22" max="-2" attributes="0"/>
               <Group type="103" groupAlignment="3" attributes="0">
-                  <Component id="helpButton" alignment="3" min="-2" max="-2" attributes="0"/>
-                  <Component id="okButton" alignment="3" min="-2" max="-2" attributes="0"/>
                   <Component id="closeButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="helpButton" alignment="3" min="-2" max="-2" attributes="0"/>
               </Group>
-              <EmptySpace pref="21" max="32767" attributes="0"/>
+              <EmptySpace max="32767" attributes="0"/>
           </Group>
       </Group>
     </DimensionLayout>
@@ -98,16 +92,6 @@
         </Container>
       </SubComponents>
     </Container>
-    <Component class="javax.swing.JButton" name="okButton">
-      <Properties>
-        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
-          <Connection code="L10n.getString(&quot;Ok&quot;)" type="code"/>
-        </Property>
-      </Properties>
-      <AuxValues>
-        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
-      </AuxValues>
-    </Component>
     <Component class="javax.swing.JButton" name="closeButton">
       <Properties>
         <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">

Modified: trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/history/DetailsHistoryView.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -48,7 +48,6 @@
         jPanel1 = new javax.swing.JPanel();
         jScrollPane2 = new javax.swing.JScrollPane();
         detailsTextArea = new javax.swing.JTextArea();
-        okButton = new javax.swing.JButton();
         closeButton = new javax.swing.JButton();
         helpButton = new javax.swing.JButton();
 
@@ -70,8 +69,6 @@
             .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
         );
 
-        okButton.setText(L10n.getString("Ok"));
-
         closeButton.setText(L10n.getString("Close"));
 
         helpButton.setText(L10n.getString("Help"));
@@ -81,17 +78,13 @@
         layout.setHorizontalGroup(
             layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(layout.createSequentialGroup()
+                .addContainerGap()
                 .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
-                    .add(layout.createSequentialGroup()
-                        .addContainerGap()
-                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
-                    .add(layout.createSequentialGroup()
-                        .add(186, 186, 186)
-                        .add(okButton)
-                        .add(27, 27, 27)
-                        .add(closeButton)
-                        .add(20, 20, 20)
-                        .add(helpButton)))
+                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
+                        .add(helpButton)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 460, Short.MAX_VALUE)
+                        .add(closeButton)))
                 .addContainerGap())
         );
         layout.setVerticalGroup(
@@ -101,10 +94,9 @@
                 .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                 .add(22, 22, 22)
                 .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                    .add(helpButton)
-                    .add(okButton)
-                    .add(closeButton))
-                .addContainerGap(21, Short.MAX_VALUE))
+                    .add(closeButton)
+                    .add(helpButton))
+                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         );
         pack();
     }// </editor-fold>//GEN-END:initComponents
@@ -126,7 +118,6 @@
     protected javax.swing.JButton helpButton;
     private javax.swing.JPanel jPanel1;
     private javax.swing.JScrollPane jScrollPane2;
-    protected javax.swing.JButton okButton;
     // End of variables declaration//GEN-END:variables
     
 }

Modified: trunk/src/net/sf/plantlore/client/history/History.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/History.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/history/History.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -1234,6 +1234,11 @@
     	}
     }
     
+    public String getMessageUndoToDate(String toDate) {
+        String message = "V?echny zm?ny od " + toDate + " budou zru?eny."; 
+        return message;
+    }
+    
     /*
      * Funkce ktera zjisti podrobne informace o polozce, ktera byla editovana
      */
@@ -1251,34 +1256,62 @@
         
         //podle tableName najdeme podrobnosti o konkretnim objektu (autor, publikace, nalez,...)
          if (tableName.equals("Occurrence") || tableName.equals("Habitat")){           
-              Occurrence occurrence = historyChange.getOccurrence();
-              //bud tu rovnou napsat kod nebo tu volat funkci a v ni napsat ten kot
-              //occurrenceMessage(); 
+              Occurrence occurrence = historyChange.getOccurrence();             
               detailsMessage = "Details of Occurrences \n\n";
               detailsMessage = detailsMessage + "Taxon: "+ occurrence.getPlant().getTaxon()+"\n";
-              detailsMessage = detailsMessage + "Author: ???";
-              
+              detailsMessage = detailsMessage + "Author: ??? budu muset napsat fci pro dohledani autoru";
+              detailsMessage = detailsMessage + "Date/Time: " + occurrence.getIsoDateTimeBegin() +"\n";
+              detailsMessage = detailsMessage + "Nearest village: "+ occurrence.getHabitat().getNearestVillage().getName() + "\n";
+              detailsMessage = detailsMessage + "Place description: "+ occurrence.getHabitat().getDescription() + "\n";
+              detailsMessage = detailsMessage + "Territory: "+ occurrence.getHabitat().getTerritory().getName() + "\n";
+              detailsMessage = detailsMessage + "Phytochorion: "+ occurrence.getHabitat().getPhytochorion().getName() +" (Code: " + occurrence.getHabitat().getPhytochorion().getCode() + ")\n";
+              detailsMessage = detailsMessage + "Country: " + occurrence.getHabitat().getCountry() +"\n";
+              detailsMessage = detailsMessage + "Data source: " + occurrence.getDataSource() + "\n";
+              detailsMessage = detailsMessage + "Publications: " + occurrence.getPublication().getReferenceCitation() + "\n";
+              detailsMessage = detailsMessage + "Herbarium: " + occurrence.getHerbarium() +"\n";
+              detailsMessage = detailsMessage + "Note (occurernce): " + occurrence.getNote() + "\n";
+              detailsMessage = detailsMessage + "Note (habitat): " + occurrence.getHabitat().getNote() +"\n";
         } else if (tableName.equals("Publication")) {
               Object[] object = searchObject("Publication",recordId); 
               Publication publication = (Publication)object[0];
               detailsMessage = "Details of Publications \n\n";
+              detailsMessage = detailsMessage + "Name of collection: " + publication.getCollectionName() + "\n";
+              detailsMessage = detailsMessage + "Year of published collection: " + publication.getCollectionYearPublication() + "\n";
+              detailsMessage = detailsMessage + "Name of journal: " + publication.getJournalName() + "\n";
+              detailsMessage = detailsMessage + "Author of journal: " + publication.getJournalAuthorName() +"\n";
+              detailsMessage = detailsMessage + "URL: " + publication.getUrl() +"\n";
+              detailsMessage = detailsMessage + "Note: " + publication.getNote() + "\n";
         } else if (tableName.equals("Author")) {
               Object[] object = searchObject("Author",recordId);   
               Author author = (Author)object[0];
               detailsMessage = "Details of Author \n\n";
+              detailsMessage = detailsMessage + "Name: " + author.getWholeName() + "\n";
+              detailsMessage = detailsMessage + "Organization: " + author.getOrganization() + "\n";
+              detailsMessage = detailsMessage + "Role: " + author.getRole() + "\n";
+              detailsMessage = detailsMessage + "Address: " + author.getAddress() + "\n";
+              detailsMessage = detailsMessage + "Email: " + author.getEmail() + "\n";
+              detailsMessage = detailsMessage + "Telephone number: " + author.getPhoneNumber() + "\n";            
+              detailsMessage = detailsMessage + "URL: " + author.getUrl() + "\n";
+              detailsMessage = detailsMessage + "Note: " + author.getNote() + "\n";
         } else if (tableName.equals("Phytochorion")) {
               Object[] object = searchObject("Phytochorion",recordId); 
               Phytochorion  phytochorion = (Phytochorion)object[0];
               detailsMessage = "Details of Phytochorion \n\n";
+              detailsMessage = detailsMessage + "Phytochorion: " + phytochorion.getName() + "\n";
+              detailsMessage = detailsMessage + "Code of phytochorion: " + phytochorion.getCode() + "\n";
         } else if (tableName.equals("Territory")) {
               Object[] object = searchObject("Territory",recordId); 
               Territory territory = (Territory)object[0];
+              detailsMessage = "Details of Territory \n\n";
+              detailsMessage = detailsMessage + "Territory: " + territory.getName() + "\n";
         } else if (tableName.equals("Village")) {
               Object[] object = searchObject("Village",recordId);  
               Village village = (Village)object[0];
               detailsMessage = "Details of Village \n\n";
+              detailsMessage = detailsMessage + "Village: " + village.getName() + "\n";
         } else {
             logger.error("No table defined");
+            detailsMessage = "No details for selected row.";
         }        
         
         logger.debug("detailsMessage: "+ detailsMessage);

Modified: trunk/src/net/sf/plantlore/client/history/HistoryView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryView.form	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/history/HistoryView.form	2006-04-24 21:22:27 UTC (rev 185)
@@ -252,7 +252,7 @@
       <Properties>
         <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
           <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
-            <TitledBorder title="Lst of changes"/>
+            <TitledBorder title="List of changes"/>
           </Border>
         </Property>
       </Properties>

Modified: trunk/src/net/sf/plantlore/client/history/HistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/history/HistoryView.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -169,7 +169,7 @@
                 .addContainerGap(14, Short.MAX_VALUE))
         );
 
-        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Lst of changes"));
+        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("List of changes"));
         tableEditList.setModel(new javax.swing.table.DefaultTableModel(
             new Object [][] {
                 {null, null, null, null},

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryCtrl.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -11,6 +11,7 @@
 
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import java.util.Date;
 import org.apache.log4j.Logger;
 
 
@@ -164,13 +165,15 @@
        public void actionPerformed(ActionEvent actionEvent)
        {
            if (view.tableHistoryList.getSelectedRow() < 0) {    
-               view.messageUndoSelection();
+               view.messageSelection();
            } else {
                logger.debug("Undo to date - id of selected row: "+ view.tableHistoryList.getSelectedRow());
-               int toResult = view.tableHistoryList.getSelectedRow() + model.getCurrentFirstRow();
+               int selectedRow = view.tableHistoryList.getSelectedRow();
+               int toResult = selectedRow + model.getCurrentFirstRow();
+               Object toDate = view.tableHistoryList.getValueAt(selectedRow, 0);
                model.clearEditObjectList();
                model.undoToDate(toResult);
-               int okCancle = view.messageUndo("model.getMessageUndo()");      
+               int okCancle = view.messageUndo(model.getMessageUndoToDate(((Date)toDate).toString()));      
                if (okCancle == 0){
                    //Button OK was press
                    logger.debug("Button OK was press.");    
@@ -204,13 +207,10 @@
        public void actionPerformed(ActionEvent actionEvent)
        {
            if (view.tableHistoryList.getSelectedRow() < 0) {    
-               view.messageUndoSelection();
+               view.messageSelection();
            } else {
                //zobrazi se detailni informace o vybranem zaznamu
-               int resultNumber = view.tableHistoryList.getSelectedRow() + model.getCurrentFirstRow()-1;
-                
-               logger.debug("Result number: "+ resultNumber);
-        
+               int resultNumber = view.tableHistoryList.getSelectedRow() + model.getCurrentFirstRow()-1;             
                String detailsMessage = model.getDetailsMessage(resultNumber);
                DetailsHistoryView detailsView = new DetailsHistoryView(view, true);
                DetailsHistoryCtrl detailsCtrl = new DetailsHistoryCtrl(detailsView);

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryTableModel.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -122,8 +122,5 @@
      */
     public String getColumnName(int column){
         return columnNames[column];
-    }
-    
-    
-   
+    } 
 }

Modified: trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/history/WholeHistoryView.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -21,9 +21,7 @@
     
     //Whole History model
     private History model;  
-    //data
-    private Object[][] data;
-    
+  
     /** Creates new form WholeHistoryView */
     public WholeHistoryView(History model, java.awt.Frame parent, boolean modal) {
         
@@ -232,7 +230,7 @@
     	return okCancle;
     }
      
-    public void messageUndoSelection() {
+    public void messageSelection() {
     	JOptionPane.showMessageDialog(this, "No row was selected.", "Information about selected row", JOptionPane.ERROR_MESSAGE);               
     } 
     

Added: trunk/src/net/sf/plantlore/client/metadata/AddEditMetadataCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/metadata/AddEditMetadataCtrl.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/metadata/AddEditMetadataCtrl.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -0,0 +1,135 @@
+/*
+ * AddEditMetadataCtrl.java
+ *
+ * Created on 23. duben 2006, 15:45
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client.metadata;
+
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.util.Date;
+import net.sf.plantlore.common.record.Metadata;
+import org.apache.log4j.Logger;
+
+/**
+ *
+ * @author Lada
+ */
+public class AddEditMetadataCtrl {
+        
+    private Logger logger;
+    private MetadataManager model;
+    private AddEditMetadataView view;
+    
+    /** Creates a new instance of AddEditMetadataCtrl */
+    public AddEditMetadataCtrl(AddEditMetadataView view, MetadataManager model) {
+        
+        logger = Logger.getLogger(this.getClass().getPackage().getName());        
+        this.model = model;
+        this.view = view;
+        
+        view.closeButton.addActionListener(new closeButtonListener());
+        view.helpButton.addActionListener(new helpButtonListener());
+        view.operationButton.addActionListener(new operationButtonListener());
+    }
+    
+   /**
+    * On Cancel just hides the view.
+    *
+    */
+   class closeButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+    	   view.close();
+       }
+   }
+   
+   /**
+    * On Help should call help.
+    *
+    */
+   class helpButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {    	  
+    	   // Display help viewer            
+    	   System.out.println("Tady se bude volat Help!");
+       }
+   }
+   
+   /*
+    *
+    */
+   class operationButtonListener implements ActionListener {
+        public void actionPerformed(ActionEvent actionEvent)
+       {    	  
+    	   // zeptame se modelu, co je treba provest za akci DETEIL, ADD, EDIT
+            logger.debug(model.getOperation());
+           if (model.getOperation().equals("ADD")) {
+               logger.debug("Add of Metadata.");
+               //otestovani, zda jsou vyplneny povinne polozky
+                if (view.checkNotNull()) {
+                    //vytvorime novy rekord a ulozime do nej nactene hodnoty
+                    Metadata metadata = new Metadata();
+                    metadata.setTechnicalContactName(view.technicalContactNameText.getText());
+                    metadata.setTechnicalContactEmail(view.technicalContactEmailText.getText());
+                    metadata.setTechnicalContactAddress(view.technicalContactAddressText.getText());
+                    metadata.setContentContactName(view.contentContactNameText.getText());
+                    metadata.setContentContactEmail(view.contentContactEmailText.getText());
+                    metadata.setContentContactAddress(view.contectContactAddressText.getText());
+                    metadata.setDataSetTitle(view.dataSetTitleText.getText());
+                    metadata.setDataSetDetails(view.dataSetDetailsText.getText());
+                    metadata.setSourceInstitutionId(view.sourceInstirutionIdText.getText());
+                    metadata.setSourceId(view.sourceIdText.getText());
+                    metadata.setOwnerOrganizationAbbrev(view.abbrevText.getText());
+                    //metadata.setDateCreate(view.dateCreateText.getText());
+                    metadata.setDateCreate(new Date());
+                    //metadata.setDateModified(view.dateModifiedText.getText());
+                    metadata.setDateModified(new Date());                            
+                    metadata.setRecordBasis(view.recordbasisText.getText());
+                    metadata.setBiotopeText(view.biotopetextText.getText());
+                    //metadata.setVersionPlantsFile(Integer.parseInt(view.versionPlantsFileText.getText())); 
+                    //mela by se tu vypsat nejaka informace pro uzivatele
+                    //pridani metadat
+                    model.addMetedataRecord(metadata);                                                           
+                    view.close(); 
+                }
+           } else if (model.getOperation().equals("EDIT")) {  
+               logger.debug("Edit of Metadata.");
+                //otestovani, zda jsou vyplneny povinne polozky
+                if (view.checkNotNull()) {
+                    //nacteni hodnot
+                    model.getSelectedRecord().setTechnicalContactName(view.technicalContactNameText.getText());
+                    model.getSelectedRecord().setTechnicalContactEmail(view.technicalContactEmailText.getText());
+                    model.getSelectedRecord().setTechnicalContactAddress(view.technicalContactAddressText.getText());
+                    model.getSelectedRecord().setContentContactName(view.contentContactNameText.getText());
+                    model.getSelectedRecord().setContentContactEmail(view.contentContactEmailText.getText());
+                    model.getSelectedRecord().setContentContactAddress(view.contectContactAddressText.getText());
+                    model.getSelectedRecord().setDataSetTitle(view.dataSetTitleText.getText());
+                    model.getSelectedRecord().setDataSetDetails(view.dataSetDetailsText.getText());
+                    model.getSelectedRecord().setSourceInstitutionId(view.sourceInstirutionIdText.getText());
+                    model.getSelectedRecord().setSourceId(view.sourceIdText.getText());
+                    model.getSelectedRecord().setOwnerOrganizationAbbrev(view.abbrevText.getText());
+                    //model.getSelectedRecord().setDateCreate(view.dateCreateText.getText());
+                    //model.getSelectedRecord().setDateModified(view.dateModifiedText.getText());
+                    model.getSelectedRecord().setRecordBasis(view.recordbasisText.getText());
+                    model.getSelectedRecord().setBiotopeText(view.biotopetextText.getText());
+                   // model.getSelectedRecord().setVersionPlantsFile(Integer.parseInt(view.versionPlantsFileText.getText()));                
+                   //mela by se tu vypsat nejaka informace pro uzivatele
+                   //editace vybraneho zaznamu
+                   model.editMetadataRecord(); 
+                   view.close(); 
+                }
+           } else if (model.getOperation().equals("DETAILS")) {
+                logger.debug("Details of Metadata.");
+                view.close();
+           } else {
+               logger.error("MetadataManager - Incorect operation. Some from ADD, EDIT, DETAILS is excepted.");
+           }           
+        }
+   }
+    
+}

Added: trunk/src/net/sf/plantlore/client/metadata/AddEditMetadataView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/metadata/AddEditMetadataView.form	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/metadata/AddEditMetadataView.form	2006-04-24 21:22:27 UTC (rev 185)
@@ -0,0 +1,691 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JDialogFormInfo">
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="2"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="jPanel1" max="32767" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="jPanel1" max="32767" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Container class="javax.swing.JPanel" name="jPanel1">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Metadata"/>
+          </Border>
+        </Property>
+      </Properties>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" attributes="0">
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" attributes="0">
+                          <EmptySpace min="-2" pref="218" max="-2" attributes="0"/>
+                          <Component id="operationButton" min="-2" pref="110" max="-2" attributes="0"/>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Component id="closeButton" min="-2" pref="101" max="-2" attributes="0"/>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Component id="helpButton" min="-2" pref="109" max="-2" attributes="0"/>
+                          <EmptySpace min="-2" pref="204" max="-2" attributes="0"/>
+                      </Group>
+                      <Group type="102" alignment="0" attributes="0">
+                          <Group type="103" groupAlignment="1" max="-2" attributes="0">
+                              <Component id="jPanel5" alignment="0" max="32767" attributes="1"/>
+                              <Component id="jPanel4" alignment="0" max="32767" attributes="1"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                      </Group>
+                  </Group>
+                  <EmptySpace pref="6" max="32767" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="0" attributes="0">
+                  <Component id="jPanel4" min="-2" max="-2" attributes="0"/>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Component id="jPanel5" min="-2" max="-2" attributes="0"/>
+                  <EmptySpace min="-2" pref="19" max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="closeButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="helpButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="operationButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace pref="33" max="32767" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Container class="javax.swing.JPanel" name="jPanel4">
+          <Properties>
+            <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+              <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+                <TitledBorder title="Institution"/>
+              </Border>
+            </Property>
+          </Properties>
+
+          <Layout>
+            <DimensionLayout dim="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Group type="102" attributes="0">
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Component id="jPanel2" min="-2" max="-2" attributes="1"/>
+                              <EmptySpace min="-2" pref="15" max="-2" attributes="0"/>
+                              <Component id="jPanel3" min="-2" max="-2" attributes="1"/>
+                          </Group>
+                          <Group type="102" alignment="0" attributes="0">
+                              <EmptySpace min="-2" pref="27" max="-2" attributes="0"/>
+                              <Group type="103" groupAlignment="0" attributes="0">
+                                  <Component id="sourceInstitutionIdLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                                  <Component id="abbrevLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                              </Group>
+                              <EmptySpace min="-2" pref="63" max="-2" attributes="0"/>
+                              <Group type="103" groupAlignment="1" max="-2" attributes="0">
+                                  <Component id="abbrevText" max="32767" attributes="1"/>
+                                  <Component id="sourceInstirutionIdText" alignment="1" pref="177" max="32767" attributes="1"/>
+                              </Group>
+                          </Group>
+                      </Group>
+                      <EmptySpace pref="17" max="32767" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+            <DimensionLayout dim="1">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Group type="102" attributes="0">
+                              <Group type="103" groupAlignment="3" attributes="0">
+                                  <Component id="sourceInstitutionIdLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                                  <Component id="sourceInstirutionIdText" alignment="3" min="-2" max="-2" attributes="0"/>
+                              </Group>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Group type="103" groupAlignment="3" attributes="0">
+                                  <Component id="abbrevLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                                  <Component id="abbrevText" alignment="3" min="-2" max="-2" attributes="0"/>
+                              </Group>
+                              <EmptySpace min="-2" pref="19" max="-2" attributes="0"/>
+                              <Component id="jPanel2" max="32767" attributes="1"/>
+                          </Group>
+                          <Component id="jPanel3" alignment="1" min="-2" max="-2" attributes="1"/>
+                      </Group>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+          </Layout>
+          <SubComponents>
+            <Container class="javax.swing.JPanel" name="jPanel2">
+              <Properties>
+                <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+                  <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+                    <TitledBorder title="Technical contact"/>
+                  </Border>
+                </Property>
+              </Properties>
+
+              <Layout>
+                <DimensionLayout dim="0">
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" attributes="0">
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="technivalContactAddressLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                              <Component id="technicalContactEmailLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                              <Component id="technicalContactNameLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace pref="60" max="32767" attributes="0"/>
+                          <Group type="103" groupAlignment="0" max="-2" attributes="0">
+                              <Component id="technicalContactAddressText" max="32767" attributes="1"/>
+                              <Component id="technicalContactEmailText" alignment="0" max="32767" attributes="1"/>
+                              <Component id="technicalContactNameText" alignment="0" pref="179" max="32767" attributes="1"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                      </Group>
+                  </Group>
+                </DimensionLayout>
+                <DimensionLayout dim="1">
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" alignment="0" attributes="0">
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="technicalContactNameLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="technicalContactNameText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="1" attributes="0">
+                              <Component id="technicalContactEmailLabel" min="-2" max="-2" attributes="0"/>
+                              <Component id="technicalContactEmailText" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="technivalContactAddressLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="technicalContactAddressText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace pref="35" max="32767" attributes="0"/>
+                      </Group>
+                  </Group>
+                </DimensionLayout>
+              </Layout>
+              <SubComponents>
+                <Component class="javax.swing.JLabel" name="technicalContactNameLabel">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;technicalContactName&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JLabel" name="technicalContactEmailLabel">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;technicalContactEmail&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JLabel" name="technivalContactAddressLabel">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;technicalContactAddress&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JTextField" name="technicalContactNameText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+                <Component class="javax.swing.JTextField" name="technicalContactEmailText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+                <Component class="javax.swing.JTextField" name="technicalContactAddressText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+              </SubComponents>
+            </Container>
+            <Container class="javax.swing.JPanel" name="jPanel3">
+              <Properties>
+                <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+                  <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+                    <TitledBorder title="Content contact"/>
+                  </Border>
+                </Property>
+              </Properties>
+
+              <Layout>
+                <DimensionLayout dim="0">
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" attributes="0">
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="contentContactNameLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                              <Component id="contentContactEmail" alignment="0" min="-2" max="-2" attributes="0"/>
+                              <Component id="contectContactAddressLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace min="-2" pref="62" max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="1" attributes="0">
+                              <Component id="contentContactNameText" pref="187" max="32767" attributes="0"/>
+                              <Component id="contentContactEmailText" alignment="1" pref="187" max="32767" attributes="0"/>
+                              <Component id="contectContactAddressText" alignment="0" pref="187" max="32767" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                      </Group>
+                  </Group>
+                </DimensionLayout>
+                <DimensionLayout dim="1">
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" alignment="0" attributes="0">
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="contentContactNameLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="contentContactNameText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="contentContactEmail" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="contentContactEmailText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="contectContactAddressLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="contectContactAddressText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace pref="35" max="32767" attributes="0"/>
+                      </Group>
+                  </Group>
+                </DimensionLayout>
+              </Layout>
+              <SubComponents>
+                <Component class="javax.swing.JLabel" name="contentContactNameLabel">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;contentContactName&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JLabel" name="contentContactEmail">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;contentContactEmail&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JLabel" name="contectContactAddressLabel">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;contentContactAddress&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JTextField" name="contentContactNameText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+                <Component class="javax.swing.JTextField" name="contentContactEmailText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+                <Component class="javax.swing.JTextField" name="contectContactAddressText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+              </SubComponents>
+            </Container>
+            <Component class="javax.swing.JLabel" name="sourceInstitutionIdLabel">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;sourceInstitutionId&quot;)" type="code"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="abbrevLabel">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;ownerOrganizationAbbrev&quot;)" type="code"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JTextField" name="sourceInstirutionIdText">
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JTextField" name="abbrevText">
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+          </SubComponents>
+        </Container>
+        <Container class="javax.swing.JPanel" name="jPanel5">
+          <Properties>
+            <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+              <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+                <TitledBorder title="Project - data"/>
+              </Border>
+            </Property>
+          </Properties>
+
+          <Layout>
+            <DimensionLayout dim="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Group type="102" alignment="0" attributes="0">
+                              <Component id="jPanel6" min="-2" max="-2" attributes="0"/>
+                              <EmptySpace min="-2" pref="18" max="-2" attributes="0"/>
+                              <Component id="jPanel7" max="32767" attributes="0"/>
+                          </Group>
+                          <Component id="jPanel8" alignment="1" max="32767" attributes="1"/>
+                      </Group>
+                      <EmptySpace min="-2" max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+            <DimensionLayout dim="1">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Component id="jPanel6" min="-2" max="-2" attributes="0"/>
+                          <Component id="jPanel7" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="jPanel8" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+          </Layout>
+          <SubComponents>
+            <Container class="javax.swing.JPanel" name="jPanel6">
+              <Properties>
+                <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+                  <Border info="org.netbeans.modules.form.compat2.border.EtchedBorderInfo">
+                    <EtchetBorder/>
+                  </Border>
+                </Property>
+              </Properties>
+
+              <Layout>
+                <DimensionLayout dim="0">
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" attributes="0">
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="dataSetTitleLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                              <Component id="dataSetDetailsLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                              <Component id="sourceIdLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace pref="66" max="32767" attributes="0"/>
+                          <Group type="103" groupAlignment="1" max="-2" attributes="0">
+                              <Component id="sourceIdText" max="32767" attributes="1"/>
+                              <Component id="dataSetDetailsText" alignment="1" max="32767" attributes="1"/>
+                              <Component id="dataSetTitleText" alignment="1" pref="184" max="32767" attributes="1"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                      </Group>
+                  </Group>
+                </DimensionLayout>
+                <DimensionLayout dim="1">
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" alignment="0" attributes="0">
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="dataSetTitleLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="dataSetTitleText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="dataSetDetailsLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="dataSetDetailsText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="sourceIdLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="sourceIdText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace pref="35" max="32767" attributes="0"/>
+                      </Group>
+                  </Group>
+                </DimensionLayout>
+              </Layout>
+              <SubComponents>
+                <Component class="javax.swing.JLabel" name="dataSetTitleLabel">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;dataSetTitle&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JLabel" name="dataSetDetailsLabel">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;dataSetDetails&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JLabel" name="sourceIdLabel">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;sourceId&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JTextField" name="dataSetTitleText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+                <Component class="javax.swing.JTextField" name="dataSetDetailsText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+                <Component class="javax.swing.JTextField" name="sourceIdText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+              </SubComponents>
+            </Container>
+            <Container class="javax.swing.JPanel" name="jPanel7">
+              <Properties>
+                <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+                  <Border info="org.netbeans.modules.form.compat2.border.EtchedBorderInfo">
+                    <EtchetBorder/>
+                  </Border>
+                </Property>
+              </Properties>
+
+              <Layout>
+                <DimensionLayout dim="0">
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" attributes="0">
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="recordbasisLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                              <Component id="biotopetextLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                              <Component id="versionPlantloreFileLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace pref="73" max="32767" attributes="0"/>
+                          <Group type="103" groupAlignment="1" max="-2" attributes="0">
+                              <Component id="recordbasisText" alignment="1" pref="193" max="32767" attributes="1"/>
+                              <Component id="biotopetextText" alignment="1" max="32767" attributes="1"/>
+                              <Component id="versionPlantsFileText" alignment="1" max="32767" attributes="1"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                      </Group>
+                  </Group>
+                </DimensionLayout>
+                <DimensionLayout dim="1">
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" alignment="0" attributes="0">
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="recordbasisLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="recordbasisText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="biotopetextLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="biotopetextText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="versionPlantloreFileLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="versionPlantsFileText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace pref="35" max="32767" attributes="0"/>
+                      </Group>
+                  </Group>
+                </DimensionLayout>
+              </Layout>
+              <SubComponents>
+                <Component class="javax.swing.JLabel" name="recordbasisLabel">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;recordbasis&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JLabel" name="biotopetextLabel">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;biotopetext&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JLabel" name="versionPlantloreFileLabel">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;versionPlantsFile&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JTextField" name="recordbasisText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+                <Component class="javax.swing.JTextField" name="biotopetextText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+                <Component class="javax.swing.JTextField" name="versionPlantsFileText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+              </SubComponents>
+            </Container>
+            <Container class="javax.swing.JPanel" name="jPanel8">
+              <Properties>
+                <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+                  <Border info="org.netbeans.modules.form.compat2.border.EtchedBorderInfo">
+                    <EtchetBorder/>
+                  </Border>
+                </Property>
+              </Properties>
+
+              <Layout>
+                <DimensionLayout dim="0">
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" attributes="0">
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="dateCreateLabel" min="-2" max="-2" attributes="0"/>
+                              <Component id="dateModifiedLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace min="-2" pref="68" max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" max="-2" attributes="0">
+                              <Component id="dateModifiedText" max="32767" attributes="1"/>
+                              <Component id="dateCreateText" alignment="0" pref="178" max="32767" attributes="1"/>
+                          </Group>
+                          <EmptySpace pref="388" max="32767" attributes="0"/>
+                      </Group>
+                  </Group>
+                </DimensionLayout>
+                <DimensionLayout dim="1">
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" alignment="0" attributes="0">
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="dateCreateLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="dateCreateText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="dateModifiedLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="dateModifiedText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace pref="20" max="32767" attributes="0"/>
+                      </Group>
+                  </Group>
+                </DimensionLayout>
+              </Layout>
+              <SubComponents>
+                <Component class="javax.swing.JLabel" name="dateCreateLabel">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;dateCreate&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JLabel" name="dateModifiedLabel">
+                  <Properties>
+                    <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                      <Connection code="L10n.getString(&quot;dateModified&quot;)" type="code"/>
+                    </Property>
+                  </Properties>
+                </Component>
+                <Component class="javax.swing.JTextField" name="dateCreateText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+                <Component class="javax.swing.JTextField" name="dateModifiedText">
+                  <AuxValues>
+                    <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+                  </AuxValues>
+                </Component>
+              </SubComponents>
+            </Container>
+          </SubComponents>
+        </Container>
+        <Component class="javax.swing.JButton" name="operationButton">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="&quot;Add&quot;" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JButton" name="closeButton">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;Close&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JButton" name="helpButton">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;Help&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+      </SubComponents>
+    </Container>
+  </SubComponents>
+</Form>

Added: trunk/src/net/sf/plantlore/client/metadata/AddEditMetadataView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/metadata/AddEditMetadataView.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/metadata/AddEditMetadataView.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -0,0 +1,546 @@
+/*
+ * AddEditMetadataView.java
+ *
+ * Created on 23. duben 2006, 15:44
+ */
+
+package net.sf.plantlore.client.metadata;
+
+import java.util.Observable;
+import java.util.Observer;
+import javax.swing.JDialog;
+import javax.swing.JOptionPane;
+import net.sf.plantlore.l10n.L10n;
+
+/**
+ *
+ * @author  Lada
+ */
+public class AddEditMetadataView extends javax.swing.JDialog  implements Observer {
+    
+    /**
+     * Creates new form AddEditMetadataView
+     */
+    public AddEditMetadataView(javax.swing.JDialog parent, boolean modal) {
+        super(parent, modal);
+        initComponents();        
+    }
+    
+     public void update(Observable observable, Object object)
+    {
+    }
+    
+     /*
+      * nastaveni formulare pro add
+      */
+     public void setAddForm() {
+         operationButton.setText("Add");
+         
+     }
+     
+      public void setEditForm() {
+         operationButton.setText("Edit");
+         
+     }
+     
+     public void setDetailsForm() {
+       operationButton.setText("Ok");
+       technicalContactNameText.setEditable(false);
+       technicalContactEmailText.setEditable(false);
+       technicalContactAddressText.setEditable(false);
+       contentContactNameText.setEditable(false);
+       contentContactEmailText.setEditable(false);
+       contectContactAddressText.setEditable(false);
+       dataSetTitleText.setEditable(false);
+       dataSetDetailsText.setEditable(false);
+       sourceInstirutionIdText.setEditable(false);
+       sourceIdText.setEditable(false);
+       abbrevText.setEditable(false);
+       dateCreateText.setEditable(false);
+       dateModifiedText.setEditable(false);
+       recordbasisText.setEditable(false);
+       biotopetextText.setEditable(false);
+       versionPlantsFileText.setEditable(false);
+     }
+     
+     /**
+     *
+     */
+    public void close() {
+        dispose();
+    }
+    
+    /*
+     *
+     */
+    public boolean checkNotNull() {
+        if (this.technicalContactNameText.getText().equals("")) {
+            JOptionPane.showMessageDialog(this, "Technical contact name is a compulsory field. Please fill it in.", "Missing compulsory field", JOptionPane.ERROR_MESSAGE);
+            return false;
+        } else if (this.contentContactNameText.getText().equals("")) {
+            JOptionPane.showMessageDialog(this, "Content contact name is a compulsory field. Please fill it in.", "Missing compulsory field", JOptionPane.ERROR_MESSAGE);
+            return false;
+        } else if (this.dataSetTitleText.getText().equals("")) {
+            JOptionPane.showMessageDialog(this, "Project name is a compulsory field. Please fill it in.", "Missing compulsory field", JOptionPane.ERROR_MESSAGE);
+            return false;
+        } else if (this.sourceInstirutionIdText.getText().equals("")) {
+            JOptionPane.showMessageDialog(this, "Institution is a compulsory field. Please fill it in.", "Missing compulsory field", JOptionPane.ERROR_MESSAGE);
+            return false;
+        } else if (this.sourceIdText.getText().equals("")) {
+            JOptionPane.showMessageDialog(this, "Code of source name is a compulsory field. Please fill it in.", "Missing compulsory field", JOptionPane.ERROR_MESSAGE);
+            return false;
+        } else if (this.dateCreateText.getText().equals("")) {
+            JOptionPane.showMessageDialog(this, "Date creating of project is a compulsory field. Please fill it in.", "Missing compulsory field", JOptionPane.ERROR_MESSAGE);
+            return false;
+        } else if (this.dateModifiedText.getText().equals("")) {
+            JOptionPane.showMessageDialog(this, "Last modified data in project is a compulsory field. Please fill it in.", "Missing compulsory field", JOptionPane.ERROR_MESSAGE);
+            return false;
+        }
+        return true;
+    }
+    
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        jPanel1 = new javax.swing.JPanel();
+        jPanel4 = new javax.swing.JPanel();
+        jPanel2 = new javax.swing.JPanel();
+        technicalContactNameLabel = new javax.swing.JLabel();
+        technicalContactEmailLabel = new javax.swing.JLabel();
+        technivalContactAddressLabel = new javax.swing.JLabel();
+        technicalContactNameText = new javax.swing.JTextField();
+        technicalContactEmailText = new javax.swing.JTextField();
+        technicalContactAddressText = new javax.swing.JTextField();
+        jPanel3 = new javax.swing.JPanel();
+        contentContactNameLabel = new javax.swing.JLabel();
+        contentContactEmail = new javax.swing.JLabel();
+        contectContactAddressLabel = new javax.swing.JLabel();
+        contentContactNameText = new javax.swing.JTextField();
+        contentContactEmailText = new javax.swing.JTextField();
+        contectContactAddressText = new javax.swing.JTextField();
+        sourceInstitutionIdLabel = new javax.swing.JLabel();
+        abbrevLabel = new javax.swing.JLabel();
+        sourceInstirutionIdText = new javax.swing.JTextField();
+        abbrevText = new javax.swing.JTextField();
+        jPanel5 = new javax.swing.JPanel();
+        jPanel6 = new javax.swing.JPanel();
+        dataSetTitleLabel = new javax.swing.JLabel();
+        dataSetDetailsLabel = new javax.swing.JLabel();
+        sourceIdLabel = new javax.swing.JLabel();
+        dataSetTitleText = new javax.swing.JTextField();
+        dataSetDetailsText = new javax.swing.JTextField();
+        sourceIdText = new javax.swing.JTextField();
+        jPanel7 = new javax.swing.JPanel();
+        recordbasisLabel = new javax.swing.JLabel();
+        biotopetextLabel = new javax.swing.JLabel();
+        versionPlantloreFileLabel = new javax.swing.JLabel();
+        recordbasisText = new javax.swing.JTextField();
+        biotopetextText = new javax.swing.JTextField();
+        versionPlantsFileText = new javax.swing.JTextField();
+        jPanel8 = new javax.swing.JPanel();
+        dateCreateLabel = new javax.swing.JLabel();
+        dateModifiedLabel = new javax.swing.JLabel();
+        dateCreateText = new javax.swing.JTextField();
+        dateModifiedText = new javax.swing.JTextField();
+        operationButton = new javax.swing.JButton();
+        closeButton = new javax.swing.JButton();
+        helpButton = new javax.swing.JButton();
+
+        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
+        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Metadata"));
+        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Institution"));
+        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Technical contact"));
+        technicalContactNameLabel.setText(L10n.getString("technicalContactName"));
+
+        technicalContactEmailLabel.setText(L10n.getString("technicalContactEmail"));
+
+        technivalContactAddressLabel.setText(L10n.getString("technicalContactAddress"));
+
+        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
+        jPanel2.setLayout(jPanel2Layout);
+        jPanel2Layout.setHorizontalGroup(
+            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel2Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(technivalContactAddressLabel)
+                    .add(technicalContactEmailLabel)
+                    .add(technicalContactNameLabel))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 60, Short.MAX_VALUE)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
+                    .add(technicalContactAddressText)
+                    .add(technicalContactEmailText)
+                    .add(technicalContactNameText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
+                .addContainerGap())
+        );
+        jPanel2Layout.setVerticalGroup(
+            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel2Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(technicalContactNameLabel)
+                    .add(technicalContactNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                    .add(technicalContactEmailLabel)
+                    .add(technicalContactEmailText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(technivalContactAddressLabel)
+                    .add(technicalContactAddressText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addContainerGap(35, Short.MAX_VALUE))
+        );
+
+        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Content contact"));
+        contentContactNameLabel.setText(L10n.getString("contentContactName"));
+
+        contentContactEmail.setText(L10n.getString("contentContactEmail"));
+
+        contectContactAddressLabel.setText(L10n.getString("contentContactAddress"));
+
+        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
+        jPanel3.setLayout(jPanel3Layout);
+        jPanel3Layout.setHorizontalGroup(
+            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel3Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(contentContactNameLabel)
+                    .add(contentContactEmail)
+                    .add(contectContactAddressLabel))
+                .add(62, 62, 62)
+                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                    .add(contentContactNameText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
+                    .add(contentContactEmailText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
+                    .add(org.jdesktop.layout.GroupLayout.LEADING, contectContactAddressText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
+                .addContainerGap())
+        );
+        jPanel3Layout.setVerticalGroup(
+            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel3Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(contentContactNameLabel)
+                    .add(contentContactNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(contentContactEmail)
+                    .add(contentContactEmailText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(contectContactAddressLabel)
+                    .add(contectContactAddressText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addContainerGap(35, Short.MAX_VALUE))
+        );
+
+        sourceInstitutionIdLabel.setText(L10n.getString("sourceInstitutionId"));
+
+        abbrevLabel.setText(L10n.getString("ownerOrganizationAbbrev"));
+
+        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
+        jPanel4.setLayout(jPanel4Layout);
+        jPanel4Layout.setHorizontalGroup(
+            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel4Layout.createSequentialGroup()
+                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel4Layout.createSequentialGroup()
+                        .addContainerGap()
+                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                        .add(15, 15, 15)
+                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(jPanel4Layout.createSequentialGroup()
+                        .add(27, 27, 27)
+                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(sourceInstitutionIdLabel)
+                            .add(abbrevLabel))
+                        .add(63, 63, 63)
+                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
+                            .add(abbrevText)
+                            .add(sourceInstirutionIdText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))))
+                .addContainerGap(17, Short.MAX_VALUE))
+        );
+        jPanel4Layout.setVerticalGroup(
+            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel4Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel4Layout.createSequentialGroup()
+                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(sourceInstitutionIdLabel)
+                            .add(sourceInstirutionIdText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(abbrevLabel)
+                            .add(abbrevText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                        .add(19, 19, 19)
+                        .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
+        );
+
+        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Project - data"));
+        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
+        dataSetTitleLabel.setText(L10n.getString("dataSetTitle"));
+
+        dataSetDetailsLabel.setText(L10n.getString("dataSetDetails"));
+
+        sourceIdLabel.setText(L10n.getString("sourceId"));
+
+        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
+        jPanel6.setLayout(jPanel6Layout);
+        jPanel6Layout.setHorizontalGroup(
+            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel6Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(dataSetTitleLabel)
+                    .add(dataSetDetailsLabel)
+                    .add(sourceIdLabel))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 66, Short.MAX_VALUE)
+                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
+                    .add(sourceIdText)
+                    .add(dataSetDetailsText)
+                    .add(dataSetTitleText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
+                .addContainerGap())
+        );
+        jPanel6Layout.setVerticalGroup(
+            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel6Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(dataSetTitleLabel)
+                    .add(dataSetTitleText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(dataSetDetailsLabel)
+                    .add(dataSetDetailsText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(sourceIdLabel)
+                    .add(sourceIdText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addContainerGap(35, Short.MAX_VALUE))
+        );
+
+        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
+        recordbasisLabel.setText(L10n.getString("recordbasis"));
+
+        biotopetextLabel.setText(L10n.getString("biotopetext"));
+
+        versionPlantloreFileLabel.setText(L10n.getString("versionPlantsFile"));
+
+        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
+        jPanel7.setLayout(jPanel7Layout);
+        jPanel7Layout.setHorizontalGroup(
+            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel7Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(recordbasisLabel)
+                    .add(biotopetextLabel)
+                    .add(versionPlantloreFileLabel))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 73, Short.MAX_VALUE)
+                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
+                    .add(recordbasisText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
+                    .add(biotopetextText)
+                    .add(versionPlantsFileText))
+                .addContainerGap())
+        );
+        jPanel7Layout.setVerticalGroup(
+            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel7Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(recordbasisLabel)
+                    .add(recordbasisText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(biotopetextLabel)
+                    .add(biotopetextText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(versionPlantloreFileLabel)
+                    .add(versionPlantsFileText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addContainerGap(35, Short.MAX_VALUE))
+        );
+
+        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());
+        dateCreateLabel.setText(L10n.getString("dateCreate"));
+
+        dateModifiedLabel.setText(L10n.getString("dateModified"));
+
+        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
+        jPanel8.setLayout(jPanel8Layout);
+        jPanel8Layout.setHorizontalGroup(
+            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel8Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(dateCreateLabel)
+                    .add(dateModifiedLabel))
+                .add(68, 68, 68)
+                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
+                    .add(dateModifiedText)
+                    .add(dateCreateText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
+                .addContainerGap(388, Short.MAX_VALUE))
+        );
+        jPanel8Layout.setVerticalGroup(
+            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel8Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(dateCreateLabel)
+                    .add(dateCreateText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(dateModifiedLabel)
+                    .add(dateModifiedText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addContainerGap(20, Short.MAX_VALUE))
+        );
+
+        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
+        jPanel5.setLayout(jPanel5Layout);
+        jPanel5Layout.setHorizontalGroup(
+            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel5Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel5Layout.createSequentialGroup()
+                        .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                        .add(18, 18, 18)
+                        .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                .addContainerGap())
+        );
+        jPanel5Layout.setVerticalGroup(
+            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel5Layout.createSequentialGroup()
+                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addContainerGap())
+        );
+
+        operationButton.setText("Add");
+
+        closeButton.setText(L10n.getString("Close"));
+
+        helpButton.setText(L10n.getString("Help"));
+
+        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
+        jPanel1.setLayout(jPanel1Layout);
+        jPanel1Layout.setHorizontalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel1Layout.createSequentialGroup()
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel1Layout.createSequentialGroup()
+                        .add(218, 218, 218)
+                        .add(operationButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(helpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                        .add(204, 204, 204))
+                    .add(jPanel1Layout.createSequentialGroup()
+                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
+                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
+                .addContainerGap(6, Short.MAX_VALUE))
+        );
+        jPanel1Layout.setVerticalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel1Layout.createSequentialGroup()
+                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .add(19, 19, 19)
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(closeButton)
+                    .add(helpButton)
+                    .add(operationButton))
+                .addContainerGap(33, Short.MAX_VALUE))
+        );
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                .addContainerGap())
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    /**
+     * @param args the command line arguments
+     */
+    public static void main(String args[]) {
+        java.awt.EventQueue.invokeLater(new Runnable() {
+            public void run() {
+                new AddEditMetadataView(new javax.swing.JDialog(), true).setVisible(true);
+            }
+        });
+    }
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    private javax.swing.JLabel abbrevLabel;
+    protected javax.swing.JTextField abbrevText;
+    private javax.swing.JLabel biotopetextLabel;
+    protected javax.swing.JTextField biotopetextText;
+    protected javax.swing.JButton closeButton;
+    private javax.swing.JLabel contectContactAddressLabel;
+    protected javax.swing.JTextField contectContactAddressText;
+    private javax.swing.JLabel contentContactEmail;
+    protected javax.swing.JTextField contentContactEmailText;
+    private javax.swing.JLabel contentContactNameLabel;
+    protected javax.swing.JTextField contentContactNameText;
+    private javax.swing.JLabel dataSetDetailsLabel;
+    protected javax.swing.JTextField dataSetDetailsText;
+    private javax.swing.JLabel dataSetTitleLabel;
+    protected javax.swing.JTextField dataSetTitleText;
+    private javax.swing.JLabel dateCreateLabel;
+    protected javax.swing.JTextField dateCreateText;
+    private javax.swing.JLabel dateModifiedLabel;
+    protected javax.swing.JTextField dateModifiedText;
+    protected javax.swing.JButton helpButton;
+    private javax.swing.JPanel jPanel1;
+    private javax.swing.JPanel jPanel2;
+    private javax.swing.JPanel jPanel3;
+    private javax.swing.JPanel jPanel4;
+    private javax.swing.JPanel jPanel5;
+    private javax.swing.JPanel jPanel6;
+    private javax.swing.JPanel jPanel7;
+    private javax.swing.JPanel jPanel8;
+    protected javax.swing.JButton operationButton;
+    private javax.swing.JLabel recordbasisLabel;
+    protected javax.swing.JTextField recordbasisText;
+    private javax.swing.JLabel sourceIdLabel;
+    protected javax.swing.JTextField sourceIdText;
+    protected javax.swing.JTextField sourceInstirutionIdText;
+    private javax.swing.JLabel sourceInstitutionIdLabel;
+    protected javax.swing.JTextField technicalContactAddressText;
+    private javax.swing.JLabel technicalContactEmailLabel;
+    protected javax.swing.JTextField technicalContactEmailText;
+    private javax.swing.JLabel technicalContactNameLabel;
+    protected javax.swing.JTextField technicalContactNameText;
+    private javax.swing.JLabel technivalContactAddressLabel;
+    private javax.swing.JLabel versionPlantloreFileLabel;
+    protected javax.swing.JTextField versionPlantsFileText;
+    // End of variables declaration//GEN-END:variables
+    
+}

Added: trunk/src/net/sf/plantlore/client/metadata/MetadataManager.java
===================================================================
--- trunk/src/net/sf/plantlore/client/metadata/MetadataManager.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/metadata/MetadataManager.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -0,0 +1,273 @@
+/*
+ * MetadataManager.java
+ *
+ * Created on 22. duben 2006, 14:46
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client.metadata;
+
+import java.rmi.RemoteException;
+import java.util.ArrayList;
+import net.sf.plantlore.common.record.Metadata;
+import net.sf.plantlore.middleware.DBLayer;
+import net.sf.plantlore.middleware.SelectQuery;
+import net.sf.plantlore.server.DBLayerException;
+import org.apache.log4j.Logger;
+
+/**
+ *
+ * @author Lada
+ */
+public class MetadataManager {
+    
+    /** Instance of a logger */
+    private Logger logger;      
+    /** Instance of a database management object */
+    private DBLayer database;   
+    /** Constant with default number of rows to display */
+    private static final int DEFAULT_DISPLAY_ROWS = 6;    
+    /** Actual number of rows to display */
+    private int displayRows = DEFAULT_DISPLAY_ROWS;   
+    /** Index of the first record shown in the table */
+    private int currentFirstRow;
+    /** Information about current display rows*/
+    private String displayRow;    
+    
+     //*******Informations about searching Result from database*****//
+    /** Result of the search query */
+    private int resultId = 0;
+    /** List of data (results of a search query) displayed in the table */
+    private ArrayList<Metadata> metadataList = new ArrayList();         
+    // informace pro uzivatele o zmenach v tabulce metadata
+    private String messageMetadata;
+    
+    //Informace o operaci, ktera se bude provadet - ADD, EDIT, DELETE, DETAIL
+    private String operation = "";
+    //Vyvrany zaznam v tabulce s metadaty
+    private Metadata selectedRecord;
+    
+    
+    /**
+     * Creates a new instance of MetadataManager
+     */
+    public MetadataManager(DBLayer database) {
+        
+       logger = Logger.getLogger(this.getClass().getPackage().getName());	 
+       this.database = database;
+       
+       //nacteni metadat
+       searchMetadata();
+       //opet funkci pro vyzadani si dat postupne
+       processResult(1, displayRows);
+    }
+    
+     /**
+     *
+     */
+    public void searchMetadata() {
+        
+        //Create new Select query
+        SelectQuery query = null;       
+
+    	//  Select data from tMetadata table
+        try {
+                query = database.createQuery(Metadata.class);                                
+        } catch (RemoteException e) {
+        System.err.println("RemoteException- searchMetadataData(), createQuery");
+        }
+                
+        int resultId = 0;
+        try {
+            // Execute query                    
+            resultId = database.executeQuery(query);
+            // Save "edit" metadata data
+            setResultId(resultId);    
+        } catch (DBLayerException e) {                            
+            logger.error("Searching metada failed. Unable to execute search query.");           
+        } catch (RemoteException e) { 		   
+     	   System.err.println("RemoteException- searchMetada(), executeQuery");
+        }          
+    }
+    
+   /**
+     * Process results of a search query. Retrieves results using the database management object (DBLayer) and stores them in the data field of the class. 
+     * @param fromTable number of the first row to show in table. Number of the first row to retraieve is 1.
+     * @param count number of rows to retrieve 
+     */
+    public void processResult(int fromTable, int count) {
+        
+        if (this.resultId != 0) {
+            int currentRow = getResultRows();
+            logger.debug("Rows in the result: "+currentRow);
+            logger.debug("Max available rows: "+(fromTable+count-1));
+           
+            // Find out how many rows we can retrieve - it cannot be more than number of rows in the result
+            int to = Math.min(currentRow, fromTable+count-1);           
+            if (to <= 0) {
+            	metadataList = new ArrayList<Metadata>(); 
+            	setDisplayRows(0);
+            	setCurrentDisplayRows("0-0");
+            } else {
+                logger.debug("Retrieving query results: 1 - "+to);
+                setCurrentDisplayRows(fromTable+ "-" + to);
+                try {                	 
+                     // Retrieve selected row interval 
+                	Object[] objectMetadata;
+                 	try {
+                 		objectMetadata = database.more(this.resultId, 1, to);  
+                 	} catch(RemoteException e) {
+                     	System.err.println("RemoteException- processEditResult, more");
+                     	logger.debug("RemoteException- processEditResult, more");
+                     	return;
+                     }                   
+                    int countResult = objectMetadata.length;  
+                    logger.debug("Results retrieved. Count: "+ countResult);
+                    // Create storage for the results
+                    this.metadataList = new ArrayList<Metadata>();
+                    // Cast the results to the Metadata objects
+                    for (int i=0; i<countResult; i++ ) {                    							
+						Object[] objHis = (Object[])objectMetadata[i];
+                        this.metadataList.add((Metadata)objHis[0]);
+                    }           
+                    //Update current first displayed row (only if data retrieval was successful)
+                    setCurrentFirstRow(fromTable); 
+                } catch (DBLayerException e) {                  
+                    logger.error("Processing search results failed: "+e.toString());            
+                }             
+            }
+        }         
+    }
+    
+    public void addMetedataRecord (Metadata metadata) {
+        try {
+            database.executeInsert(metadata);
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }
+    }
+    
+    public void editMetadataRecord() {       
+        try {
+            database.executeUpdate(selectedRecord);
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }
+    }
+    
+    public void deleteMetadataRecord() {
+        try {
+            database.executeDelete(selectedRecord);
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }
+    }
+    
+           
+    //****************************//
+    //****Get and set metods*****//
+    //**************************//
+    
+    
+    //id vysledku po vyhledavani v db
+    public void setResultId(int resultId) {
+        this.resultId = resultId;
+    }
+    
+    public int getResultId() {
+        return this.resultId;
+    }
+    
+    public int getResultRows() {
+        int resultCount = 0;
+        if (resultId != 0) try {
+                resultCount = database.getNumRows(resultId);        	
+        } catch(RemoteException e) {
+                System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
+        }
+        return resultCount;
+    }
+
+    public ArrayList<Metadata> getMetadataList() {
+              return this.metadataList;		  
+       }
+
+     public void setMetadataList(ArrayList<Metadata> metadataList) {
+              this.metadataList = metadataList;		  
+     } 
+    
+     public String getCurrentDisplayRows() {
+		  return this.displayRow;		  
+	   }
+
+     public void setCurrentDisplayRows(String displayRow) {
+              this.displayRow = displayRow;		  
+     } 
+     
+     public String getMessageMetadata() {
+		  return this.messageMetadata;		  
+	   }
+
+     public void setMessageMetadata(String messageMetadata) {
+              this.messageMetadata= messageMetadata;		  
+     } 
+     
+         /**
+     *  Get index of the first row currently displayed in the list of record changes. This is an index in the results returned by a search query.
+     *  @return index of the first row currently displayed in the list of metadata
+     */
+    public int getCurrentFirstRow() {
+        return this.currentFirstRow;
+    }
+    
+    /**
+     *  Set index of the forst row currently displayed in the list of record changes. This is an index in the results returned by a search query.
+     *  @param row index of the first row currently displayed in the list of metadata
+     */
+    public void setCurrentFirstRow(int row) {
+        this.currentFirstRow = row;
+    }    
+
+    /**
+     *  Get number of rows to be displayed on one page.
+     *  @return number of rows to be displayed per page
+     */
+    public int getDisplayRows() {
+        return this.displayRows;
+    }
+    
+    /**
+     *  Set number of rows to be displayed on one page
+     *  @param rows number of rows ro be displayed per page
+     */
+    public void setDisplayRows(int rows) {
+        this.displayRows = rows;
+    }
+    
+    // predani informace o operaci, ktera byla zavolana - ADD, EDIT, DELETE, DETAIL
+     public String getOperation() {
+                  logger.debug("Operation: "+operation);
+		  return this.operation;		  
+	   }
+
+     public void setOperation(String operation) {
+              this.operation = operation;		  
+     } 
+    
+    //Vraci metadata objekt vybraneho zaznam pro nasledny EDIT, DELETE ci zobrazeni DETAILU 
+    public void setSelectedRecord(int selectedRecordId) {
+        this.selectedRecord = (Metadata)(metadataList.get(selectedRecordId));
+    }
+    
+    public Metadata getSelectedRecord() {
+        return this.selectedRecord;
+    }
+}

Added: trunk/src/net/sf/plantlore/client/metadata/MetadataManagerCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/metadata/MetadataManagerCtrl.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/metadata/MetadataManagerCtrl.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -0,0 +1,292 @@
+/*
+ * MetadataManagerCtrl.java
+ *
+ * Created on 23. duben 2006, 11:18
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client.metadata;
+
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import net.sf.plantlore.common.record.Metadata;
+import org.apache.log4j.Logger;
+
+/**
+ *
+ * @author Lada
+ */
+public class MetadataManagerCtrl {
+    
+    private Logger logger;
+    private MetadataManager model;
+    private MetadataManagerView view;
+    
+    /** Creates a new instance of MetadataManagerCtrl */
+    public MetadataManagerCtrl(MetadataManager model, MetadataManagerView view) {
+        
+        logger = Logger.getLogger(this.getClass().getPackage().getName());        
+        this.model = model;
+        this.view = view;
+          
+        view.closeButton.addActionListener(new closeButtonListener());
+        view.helpButton.addActionListener(new helpButtonListener());        
+        view.previousButton.addActionListener(new previousButtonListener());
+        view.nextButton.addActionListener(new nextButtonListener());            
+        view.toDisplayValueTextField.addActionListener(new rowSetDisplayChangeListener());    
+        view.detailsButton.addActionListener(new detailsMetadataListener());
+        view.addButtons.addActionListener(new addMetadataListener());
+        view.editButtons.addActionListener(new editMetadataListener());
+        view.deleteButton.addActionListener(new deleteMetadataListener());
+    }
+    
+       /**
+    * On Cancel just hides the view.
+    *
+    */
+   class closeButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+    	   view.close();
+       }
+   }
+   
+   /**
+    * On Help should call help.
+    *
+    */
+   class helpButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {    	  
+    	   // Display help viewer            
+    	   System.out.println("Tady se bude volat Help!");
+       }
+   }
+   
+   /**
+    * 
+    *
+    */
+   class previousButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+    	   //   Call processResults only if we don't see the first page (should not happen, button should be disabled)
+    	   logger.debug("FIRST");
+    	   logger.debug("current first row: "+model.getCurrentFirstRow());
+           logger.debug("num rows in the result: "+ model.getResultRows());            
+           logger.debug("display rows: "+ view.tableMetadataList.getRowCount());      
+           if (model.getCurrentFirstRow() > 1) {
+               int firstRow = Math.max(model.getCurrentFirstRow()- model.getDisplayRows(), 1);
+               model.processResult(firstRow, model.getDisplayRows()); 
+               if (model.getCurrentFirstRow() > 1){
+               }
+               view.tableMetadataList.setModel(new MetadataManagerTableModel(model));
+               int from = model.getCurrentFirstRow();
+               int to = from + view.tableMetadataList.getRowCount() - 1;
+               view.displayedValueLabel.setText(from + "-" + to);
+           }                           
+       }
+   }
+   
+   /**
+    * 
+    *
+    */
+   class nextButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+    	   //Call processResults only if we don't see the last page
+    	   logger.debug("NEXT");
+           logger.debug("current first row: "+model.getCurrentFirstRow());
+           logger.debug("num rows in the result: "+ model.getResultRows());            
+           logger.debug("display rows: "+ model.getDisplayRows());
+           logger.debug("num rows in table (view) "+ view.tableMetadataList.getRowCount());              
+           if (model.getCurrentFirstRow()+ view.tableMetadataList.getRowCount()<=model.getResultRows()) {
+               model.processResult(model.getCurrentFirstRow()+ model.getDisplayRows(), view.tableMetadataList.getRowCount());
+               view.tableMetadataList.setModel(new MetadataManagerTableModel(model));             
+               int from = model.getCurrentFirstRow();
+               int to = from + view.tableMetadataList.getRowCount() - 1;
+               if (to <= 0){
+            	   view.displayedValueLabel.setText("0-0");
+               }else {
+            	   view.displayedValueLabel.setText(from + "-" + to);
+               }               
+           }                       
+       }
+   }
+   
+    /**
+    * 
+    */
+     class rowSetDisplayChangeListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent) {
+           // Save old value
+           int oldValue = model.getDisplayRows();           
+           // Check whether new value > 0
+           if (view.getDisplayRows() < 1) {
+               view.setDisplayRows(oldValue);
+               return;
+           }
+           if (view.getDisplayRows() > model.getResultRows()){
+        	   view.setDisplayRows(model.getResultRows());
+           } 
+           
+           // Set new value in the model
+           model.setDisplayRows(view.getDisplayRows());
+           logger.debug("New display rows: "+view.getDisplayRows());
+           // If neccessary reload search results
+           if ((oldValue != view.getDisplayRows()) && (model.getDisplayRows() <= model.getResultRows())) {
+               model.processResult(model.getCurrentFirstRow(), view.getDisplayRows());
+               view.tableMetadataList.setModel(new MetadataManagerTableModel(model));
+               int from = model.getCurrentFirstRow();
+               int to = from + view.tableMetadataList.getRowCount() - 1;
+               view.displayedValueLabel.setText(from + "-" + to);               
+           }
+       }        	   
+   }
+   
+ 
+    /**
+    *
+    */  
+    class addMetadataListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+           //v modelu nastavim informaci o tom, ze jde o ADD
+           model.setOperation("ADD");           
+           //otevre se dialog addEdit s tim, ze mu rekneme, ze jde o ADD
+           //pozor: pri add se musi ohlidat, zda byly vyplneny povinne polozky
+           AddEditMetadataView addView = new AddEditMetadataView(view,true);
+           AddEditMetadataCtrl addCtrl = new AddEditMetadataCtrl(addView, model);
+           addView.setAddForm();
+           addView.setVisible(true);
+           //pokud bude pridan zaznam,je potreba ho zobrazit v tabulce = provest znovu dotaz nebo pridat do datalistu, ale tam
+           //nezarucim spravne setrizeni,takze novy dotaz bude lepsi....
+           //bylo by dobre si nekde drzet query (kdyby pouzil uzivatel search)
+           //nacteni metadat
+           model.searchMetadata();
+           //opet funkci pro vyzadani si dat postupne
+           model.processResult(1, model.getDisplayRows());
+           view.tableMetadataList.setModel(new MetadataManagerTableModel(model));                      
+           view.displayedValueLabel.setText(1 + "-" + view.tableMetadataList.getRowCount());  
+       }
+    }
+    
+     /**
+    *
+    */  
+    class editMetadataListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+           if (view.tableMetadataList.getSelectedRow() < 0) {    
+               view.messageSelection();
+           } else {
+               //v modelu nastavim informaci o tom, ze jde o EDIT
+               model.setOperation("EDIT");
+               //poznaceni si do modelu inforamce o vybranem radku pro dalsi praci
+               int resultNumber = view.tableMetadataList.getSelectedRow() + model.getCurrentFirstRow()-1;  
+               model.setSelectedRecord(resultNumber);
+               //nacteni dat do dialogu
+               Metadata metadata = model.getSelectedRecord();               
+               AddEditMetadataView editView = new AddEditMetadataView(view,true);
+               AddEditMetadataCtrl editCtrl = new AddEditMetadataCtrl(editView, model);
+               //nacteni dat
+               editView.technicalContactNameText.setText(metadata.getTechnicalContactName());
+               editView.technicalContactEmailText.setText(metadata.getTechnicalContactEmail());
+               editView.technicalContactAddressText.setText(metadata.getTechnicalContactAddress());
+               editView.contentContactNameText.setText(metadata.getContentContactName());
+               editView.contentContactEmailText.setText(metadata.getContentContactEmail());
+               editView.contectContactAddressText.setText(metadata.getContentContactAddress());
+               editView.dataSetTitleText.setText(metadata.getDataSetTitle());
+               editView.dataSetDetailsText.setText(metadata.getDataSetDetails());
+               editView.sourceInstirutionIdText.setText(metadata.getSourceInstitutionId());
+               editView.sourceIdText.setText(metadata.getSourceId());
+               editView.abbrevText.setText(metadata.getOwnerOrganizationAbbrev());
+               editView.dateCreateText.setText(metadata.getDateCreate().toString());
+               editView.dateModifiedText.setText(metadata.getDateModified().toString());
+               editView.recordbasisText.setText(metadata.getRecordBasis());
+               editView.biotopetextText.setText(metadata.getBiotopeText());            
+               //FIXME: vsechny Integery v DB nastavit defautlne na nulu,aby to pri prevodech na string nedelalo neplechu
+               //editView.versionPlantsFileText.setText(metadata.getVersionPlantsFile().toString());
+               //vytvoreni dialogu
+               editView.setEditForm();               
+               editView.setVisible(true);    
+               //po editaci zaznamu se musi zobrazit zmena i v tabulce
+              //nacteni metadat
+               model.searchMetadata();
+               //opet funkci pro vyzadani si dat postupne
+               model.processResult(1, model.getDisplayRows());
+               view.tableMetadataList.setModel(new MetadataManagerTableModel(model));                      
+               view.displayedValueLabel.setText(1 + "-" + view.tableMetadataList.getRowCount());  
+           }          
+       }
+    }
+    
+    /**
+    *
+    */  
+    class detailsMetadataListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+           if (view.tableMetadataList.getSelectedRow() < 0) {    
+               view.messageSelection();
+           } else {
+               //v modelu nastavim informaci o tom, ze jde o DETAILS
+                model.setOperation("DETAILS");
+               //poznaceni si do modelu inforamce o vybranem radku pro dalsi praci
+               int resultNumber = view.tableMetadataList.getSelectedRow() + model.getCurrentFirstRow()-1;  
+               model.setSelectedRecord(resultNumber);
+               //nacteni dat do dialogu
+               Metadata metadata = model.getSelectedRecord();               
+               AddEditMetadataView detailsView = new AddEditMetadataView(view,true);
+               AddEditMetadataCtrl detailsCtrl = new AddEditMetadataCtrl(detailsView, model);
+               //nacteni dat
+               detailsView.technicalContactNameText.setText(metadata.getTechnicalContactName());
+               detailsView.technicalContactEmailText.setText(metadata.getTechnicalContactEmail());
+               detailsView.technicalContactAddressText.setText(metadata.getTechnicalContactAddress());
+               detailsView.contentContactNameText.setText(metadata.getContentContactName());
+               detailsView.contentContactEmailText.setText(metadata.getContentContactEmail());
+               detailsView.contectContactAddressText.setText(metadata.getContentContactAddress());
+               detailsView.dataSetTitleText.setText(metadata.getDataSetTitle());
+               detailsView.dataSetDetailsText.setText(metadata.getDataSetDetails());
+               detailsView.sourceInstirutionIdText.setText(metadata.getSourceInstitutionId());
+               detailsView.sourceIdText.setText(metadata.getSourceId());
+               detailsView.abbrevText.setText(metadata.getOwnerOrganizationAbbrev());
+               detailsView.dateCreateText.setText(metadata.getDateCreate().toString());
+               detailsView.dateModifiedText.setText(metadata.getDateModified().toString());
+               detailsView.recordbasisText.setText(metadata.getRecordBasis());
+               detailsView.biotopetextText.setText(metadata.getBiotopeText());  
+               //FIXME: vsechny Integery v DB nastavit defautlne na nulu,aby to pri prevodech na string nedelalo neplechu
+               //editView.versionPlantsFileText.setText(metadata.getVersionPlantsFile().toString());
+               //vytvoreni dialogu
+               detailsView.setDetailsForm();
+               detailsView.setVisible(true); 
+           }          
+       }
+    }
+    
+     /**
+    *
+    */  
+    class deleteMetadataListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+           if (view.tableMetadataList.getSelectedRow() < 0) {    
+               view.messageSelection();
+           } else {
+               //smazani zaznamu
+               int resultNumber = view.tableMetadataList.getSelectedRow() + model.getCurrentFirstRow()-1; 
+               model.setSelectedRecord(resultNumber);
+               model.deleteMetadataRecord();        
+               //nacteni metadat
+               model.searchMetadata();
+               //opet funkci pro vyzadani si dat postupne
+               model.processResult(1, model.getDisplayRows());
+               view.tableMetadataList.setModel(new MetadataManagerTableModel(model));                      
+               view.displayedValueLabel.setText(1 + "-" + view.tableMetadataList.getRowCount());  
+           }          
+       }
+    }
+}

Added: trunk/src/net/sf/plantlore/client/metadata/MetadataManagerTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/metadata/MetadataManagerTableModel.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/metadata/MetadataManagerTableModel.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -0,0 +1,130 @@
+/*
+ * MetadataManagerTableModel.java
+ *
+ * Created on 22. duben 2006, 22:00
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client.metadata;
+
+import java.util.ArrayList;
+import javax.swing.table.AbstractTableModel;
+import net.sf.plantlore.common.record.Metadata;
+import net.sf.plantlore.l10n.L10n;
+import org.apache.log4j.Logger;
+
+/**
+ *
+ * @author Lada
+ */
+public class MetadataManagerTableModel  extends AbstractTableModel  {
+    
+  
+        //Logger
+    private Logger logger;
+    // MetadataManager model
+    private MetadataManager model; 
+    private ArrayList<Metadata> metadataDataList;
+    
+    /** Names of the columns */
+    private String[] columnNames;
+    /** Data values displayed in the table*/
+    private Object[][] data;
+
+    public final static int SOURCEINSTITUTIONID = 0;
+    public final static int SOURCEID = 1;
+    public final static int DATASETTITLE = 2; 
+    public final static int TECHNICALCONTACTNAME = 3;   
+    public final static int CONTENTCONTACTNAME = 4;          
+    public final static int DATECREATE = 5;
+    public final static int DATEMODIFIED = 6;    
+    
+    /** Creates a new instance of MetadataManagerTableModel */
+    public MetadataManagerTableModel(MetadataManager model) {
+        logger = Logger.getLogger(this.getClass().getPackage().getName());
+    	this.model = model;        
+    	initColumns();    	
+    	initData();    	
+    }  
+   
+    private void initColumns() {
+        columnNames = new String[7];                  
+        columnNames[0] = L10n.getString("sourceInstitutionId");   
+        columnNames[1] = L10n.getString("sourceId");  
+        columnNames[2] = L10n.getString("dataSetTitle");
+        columnNames[3] = L10n.getString("technicalContacName"); 
+        columnNames[4] = L10n.getString("contentContactName");                      
+        columnNames[5] = L10n.getString("dateCreate"); 
+        columnNames[6] = L10n.getString("dateModified");          
+    }       
+    
+    /**
+     * Load data for dislaying 
+     */
+    public void initData() {
+    	
+    	logger.debug("Metadata - Init data.");
+    	
+    	metadataDataList = model.getMetadataList();
+    	if (metadataDataList.size()==0 ){
+    		this.data = new Object[0][];
+    		return;
+    	}    	  	
+    	int firstRow = model.getCurrentFirstRow();
+    	int countResult = Math.min(metadataDataList.size(), firstRow+ model.getDisplayRows()-1);
+    	int countRow = countResult - firstRow + 1;   
+        int ii = 0;
+    	//loud data for view
+        Object[][] metadataData = new Object[countRow][7];   
+    	for (int i=firstRow-1; i < countResult; i++) {     
+            metadataData[ii][0] = ((Metadata)metadataDataList.get(i)).getSourceInstitutionId();  
+            metadataData[ii][1] = ((Metadata)metadataDataList.get(i)).getSourceId();  
+            metadataData[ii][2] = ((Metadata)metadataDataList.get(i)).getDataSetTitle();
+            metadataData[ii][3] = ((Metadata)metadataDataList.get(i)).getTechnicalContactName();    	    
+            metadataData[ii][4] = ((Metadata)metadataDataList.get(i)).getContentContactName();                                 
+            metadataData[ii][5] = ((Metadata)metadataDataList.get(i)).getDateCreate();
+            metadataData[ii][6] = ((Metadata)metadataDataList.get(i)).getDateModified();            
+    	    ii++;
+    	}      	    	
+    	this.data = metadataData;    	
+    }    
+    
+    /**
+     * Gets the value of the given cell.
+     * @param row index of row
+     * @param column index of column
+     */
+    public Object getValueAt(int row, int column)
+    {
+        return data[row][column];
+    }    
+    
+    /** 
+     * Gets number of rows in the actual MetadataTableModel
+     * @return the number of rows in the MetadataTableModel.
+     */
+    public int getRowCount()
+    {
+        return data.length;
+    }        
+
+   /**   
+     * Gets number of columns in the actual MetadataTableModel
+     * @return the number of columns in the MetadataTableModel.
+     */
+    public int getColumnCount()
+    {
+        return columnNames.length;
+    }
+    
+      /**
+     * Gets the name of the specified column
+     * @param column index of column
+     * @return the name of the specified column.
+     */
+    public String getColumnName(int column){
+        return columnNames[column];
+    }
+}

Added: trunk/src/net/sf/plantlore/client/metadata/MetadataManagerView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/metadata/MetadataManagerView.form	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/metadata/MetadataManagerView.form	2006-04-24 21:22:27 UTC (rev 185)
@@ -0,0 +1,495 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JDialogFormInfo">
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="2"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Component id="jPanel2" alignment="1" max="32767" attributes="0"/>
+                  <Component id="jPanel1" alignment="0" max="32767" attributes="0"/>
+                  <Group type="102" alignment="1" attributes="0">
+                      <Component id="helpButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace pref="679" max="32767" attributes="0"/>
+                      <Component id="closeButton" min="-2" max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="1" attributes="0">
+              <Component id="jPanel1" max="32767" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="jPanel2" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="closeButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="helpButton" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Container class="javax.swing.JPanel" name="jPanel1">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Metadata list"/>
+          </Border>
+        </Property>
+      </Properties>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="1" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="1" attributes="0">
+                      <Component id="jScrollPane1" alignment="0" pref="841" max="32767" attributes="0"/>
+                      <Group type="102" alignment="1" attributes="0">
+                          <Group type="103" groupAlignment="1" attributes="0">
+                              <Group type="102" alignment="1" attributes="0">
+                                  <Component id="previousButton" min="-2" pref="107" max="-2" attributes="0"/>
+                                  <EmptySpace pref="76" max="32767" attributes="0"/>
+                                  <Component id="totalResultLabel" min="-2" max="-2" attributes="0"/>
+                                  <EmptySpace max="-2" attributes="0"/>
+                                  <Component id="totalResultValueLabel" min="-2" max="-2" attributes="0"/>
+                                  <EmptySpace min="-2" pref="37" max="-2" attributes="0"/>
+                                  <Component id="toDisplayedLabel" min="-2" max="-2" attributes="0"/>
+                                  <EmptySpace max="-2" attributes="0"/>
+                                  <Component id="toDisplayValueTextField" min="-2" pref="33" max="-2" attributes="0"/>
+                                  <EmptySpace min="-2" pref="25" max="-2" attributes="0"/>
+                                  <Component id="displayedLabel" min="-2" max="-2" attributes="0"/>
+                                  <EmptySpace max="-2" attributes="0"/>
+                                  <Component id="displayedValueLabel" min="-2" max="-2" attributes="0"/>
+                              </Group>
+                              <Group type="102" alignment="1" attributes="0">
+                                  <Component id="detailsButton" min="-2" pref="107" max="-2" attributes="1"/>
+                                  <EmptySpace max="-2" attributes="0"/>
+                                  <Component id="addButtons" min="-2" pref="107" max="-2" attributes="0"/>
+                              </Group>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="1" attributes="0">
+                              <Group type="102" attributes="0">
+                                  <Component id="editButtons" min="-2" pref="106" max="-2" attributes="1"/>
+                                  <EmptySpace max="-2" attributes="0"/>
+                                  <Component id="deleteButton" min="-2" pref="99" max="-2" attributes="1"/>
+                              </Group>
+                              <Component id="nextButton" alignment="1" min="-2" max="-2" attributes="1"/>
+                          </Group>
+                      </Group>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="1" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Component id="jScrollPane1" pref="256" max="32767" attributes="0"/>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="totalResultLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="toDisplayedLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="displayedLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="totalResultValueLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="toDisplayValueTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="displayedValueLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="previousButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="nextButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace min="-2" pref="15" max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="editButtons" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="deleteButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="addButtons" alignment="3" min="-2" pref="23" max="-2" attributes="0"/>
+                      <Component id="detailsButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Container class="javax.swing.JScrollPane" name="jScrollPane1">
+
+          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+          <SubComponents>
+            <Component class="javax.swing.JTable" name="tableMetadataList">
+              <Properties>
+                <Property name="model" type="javax.swing.table.TableModel" editor="org.netbeans.modules.form.editors2.TableModelEditor">
+                  <Table columnCount="4" rowCount="4">
+                    <Column editable="true" title="Title 1" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 2" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 3" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 4" type="java.lang.Object"/>
+                  </Table>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+          </SubComponents>
+        </Container>
+        <Component class="javax.swing.JButton" name="previousButton">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;prevButton&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JButton" name="nextButton">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;nextButton&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JButton" name="deleteButton">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;recordDelete&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JButton" name="editButtons">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;recordEdit&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JButton" name="addButtons">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;recordAdd&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JButton" name="detailsButton">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;recordDetails&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JLabel" name="totalResultLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;totalResult&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="totalResultValueLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="((Integer)model.getResultRows()).toString()" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="toDisplayedLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;toDisplay&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JTextField" name="toDisplayValueTextField">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="((Integer)model.getDisplayRows()).toString()" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JLabel" name="displayedLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;displayed&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="displayedValueLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="model.getCurrentDisplayRows()" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+      </SubComponents>
+    </Container>
+    <Component class="javax.swing.JButton" name="closeButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Close&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Component class="javax.swing.JButton" name="helpButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Help&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Container class="javax.swing.JPanel" name="jPanel2">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Search metadata"/>
+          </Border>
+        </Property>
+      </Properties>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="1" attributes="0">
+                      <Group type="102" attributes="0">
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="jLabel1" min="-2" max="-2" attributes="0"/>
+                              <Component id="jLabel2" alignment="0" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="jTextField1" pref="177" max="32767" attributes="1"/>
+                              <Component id="jTextField2" pref="177" max="32767" attributes="1"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="jLabel3" alignment="0" min="-2" max="-2" attributes="0"/>
+                              <Component id="jLabel4" alignment="0" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="jTextField4" alignment="0" pref="203" max="32767" attributes="1"/>
+                              <Component id="jTextField3" alignment="0" pref="203" max="32767" attributes="1"/>
+                          </Group>
+                      </Group>
+                      <Component id="jButton1" min="-2" pref="118" max="-2" attributes="1"/>
+                  </Group>
+                  <EmptySpace min="-2" pref="60" max="-2" attributes="0"/>
+                  <Component id="jPanel3" min="-2" max="-2" attributes="0"/>
+                  <EmptySpace min="-2" pref="28" max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" attributes="0">
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" attributes="0">
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="jLabel1" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="jLabel3" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="jTextField3" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="jTextField1" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="jLabel2" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="jLabel4" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="jTextField4" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="jTextField2" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace min="-2" pref="16" max="-2" attributes="0"/>
+                          <Component id="jButton1" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <Component id="jPanel3" alignment="0" max="32767" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Component class="javax.swing.JLabel" name="jLabel1">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="jLabel1"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="jLabel2">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="jLabel2"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JTextField" name="jTextField1">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="jTextField1"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JTextField" name="jTextField2">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="jTextField2"/>
+          </Properties>
+        </Component>
+        <Container class="javax.swing.JPanel" name="jPanel3">
+          <Properties>
+            <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+              <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+                <TitledBorder title="Sorting"/>
+              </Border>
+            </Property>
+          </Properties>
+
+          <Layout>
+            <DimensionLayout dim="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="jLabel5" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace min="-2" pref="19" max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Component id="jRadioButton1" alignment="0" min="-2" max="-2" attributes="0"/>
+                          <Component id="jRadioButton2" alignment="0" min="-2" max="-2" attributes="0"/>
+                          <Component id="jComboBox1" alignment="0" pref="214" max="32767" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+            <DimensionLayout dim="1">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="jLabel5" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="jComboBox1" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="jRadioButton2" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="jRadioButton1" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="32767" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+          </Layout>
+          <SubComponents>
+            <Component class="javax.swing.JRadioButton" name="jRadioButton1">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="jRadioButton1"/>
+                <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+                  <Border info="org.netbeans.modules.form.compat2.border.EmptyBorderInfo">
+                    <EmptyBorder bottom="0" left="0" right="0" top="0"/>
+                  </Border>
+                </Property>
+                <Property name="margin" type="java.awt.Insets" editor="org.netbeans.beaninfo.editors.InsetsEditor">
+                  <Insets value="[0, 0, 0, 0]"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JRadioButton" name="jRadioButton2">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="jRadioButton2"/>
+                <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+                  <Border info="org.netbeans.modules.form.compat2.border.EmptyBorderInfo">
+                    <EmptyBorder bottom="0" left="0" right="0" top="0"/>
+                  </Border>
+                </Property>
+                <Property name="margin" type="java.awt.Insets" editor="org.netbeans.beaninfo.editors.InsetsEditor">
+                  <Insets value="[0, 0, 0, 0]"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel5">
+              <Properties>
+                <Property name="text" type="java.lang.String" value="jLabel5"/>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JComboBox" name="jComboBox1">
+              <Properties>
+                <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+                  <StringArray count="4">
+                    <StringItem index="0" value="Item 1"/>
+                    <StringItem index="1" value="Item 2"/>
+                    <StringItem index="2" value="Item 3"/>
+                    <StringItem index="3" value="Item 4"/>
+                  </StringArray>
+                </Property>
+              </Properties>
+            </Component>
+          </SubComponents>
+        </Container>
+        <Component class="javax.swing.JLabel" name="jLabel3">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="jLabel3"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JTextField" name="jTextField3">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="jTextField3"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="jLabel4">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="jLabel4"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JTextField" name="jTextField4">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="jTextField4"/>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JButton" name="jButton1">
+          <Properties>
+            <Property name="text" type="java.lang.String" value="jButton1"/>
+          </Properties>
+        </Component>
+      </SubComponents>
+    </Container>
+  </SubComponents>
+</Form>

Added: trunk/src/net/sf/plantlore/client/metadata/MetadataManagerView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/metadata/MetadataManagerView.java	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/client/metadata/MetadataManagerView.java	2006-04-24 21:22:27 UTC (rev 185)
@@ -0,0 +1,398 @@
+/*
+ * MetadataManagerView.java
+ *
+ * Created on 23. duben 2006, 11:43
+ */
+
+package net.sf.plantlore.client.metadata;
+
+import java.util.Observable;
+import java.util.Observer;
+import javax.swing.DefaultListSelectionModel;
+import javax.swing.JOptionPane;
+import net.sf.plantlore.l10n.L10n;
+
+/**
+ *
+ * @author  Lada
+ */
+public class MetadataManagerView extends javax.swing.JDialog implements Observer{
+    
+    //Whole MetadataManager model
+    private MetadataManager model;  
+    //data
+    private Object[][] data;
+    
+    /** Creates new form MetadataManagerView */
+    public MetadataManagerView(MetadataManager model, java.awt.Frame parent, boolean modal) {
+        super(parent, modal);
+        this.model = model;
+        initComponents();
+        this.tableMetadataList.setRowSelectionAllowed(true);
+        this.tableMetadataList.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
+        this.tableMetadataList.setModel(new MetadataManagerTableModel(model));  
+       
+    }
+    
+    public void update(Observable observable, Object object)
+    {
+    }
+    
+     /**
+     *
+     */
+    public void close() {
+        dispose();
+    }
+    
+    /**Rows to display */
+    public Integer getDisplayRows() { 
+        Integer countRows;
+        try {
+            countRows = Integer.parseInt(toDisplayValueTextField.getText());
+        }catch (NumberFormatException e){            
+            countRows = 0;
+        }
+        return countRows;
+    }
+    
+    /**Rows to display*/
+    public void setDisplayRows(Integer value) {
+        this.toDisplayValueTextField.setText(value.toString());
+    }  
+    
+    public void messageSelection() {
+    	JOptionPane.showMessageDialog(this, "No row was selected.", "Information about selected row", JOptionPane.ERROR_MESSAGE);               
+    } 
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        jPanel1 = new javax.swing.JPanel();
+        jScrollPane1 = new javax.swing.JScrollPane();
+        tableMetadataList = new javax.swing.JTable();
+        previousButton = new javax.swing.JButton();
+        nextButton = new javax.swing.JButton();
+        deleteButton = new javax.swing.JButton();
+        editButtons = new javax.swing.JButton();
+        addButtons = new javax.swing.JButton();
+        detailsButton = new javax.swing.JButton();
+        totalResultLabel = new javax.swing.JLabel();
+        totalResultValueLabel = new javax.swing.JLabel();
+        toDisplayedLabel = new javax.swing.JLabel();
+        toDisplayValueTextField = new javax.swing.JTextField();
+        displayedLabel = new javax.swing.JLabel();
+        displayedValueLabel = new javax.swing.JLabel();
+        closeButton = new javax.swing.JButton();
+        helpButton = new javax.swing.JButton();
+        jPanel2 = new javax.swing.JPanel();
+        jLabel1 = new javax.swing.JLabel();
+        jLabel2 = new javax.swing.JLabel();
+        jTextField1 = new javax.swing.JTextField();
+        jTextField2 = new javax.swing.JTextField();
+        jPanel3 = new javax.swing.JPanel();
+        jRadioButton1 = new javax.swing.JRadioButton();
+        jRadioButton2 = new javax.swing.JRadioButton();
+        jLabel5 = new javax.swing.JLabel();
+        jComboBox1 = new javax.swing.JComboBox();
+        jLabel3 = new javax.swing.JLabel();
+        jTextField3 = new javax.swing.JTextField();
+        jLabel4 = new javax.swing.JLabel();
+        jTextField4 = new javax.swing.JTextField();
+        jButton1 = new javax.swing.JButton();
+
+        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
+        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Metadata list"));
+        tableMetadataList.setModel(new javax.swing.table.DefaultTableModel(
+            new Object [][] {
+                {null, null, null, null},
+                {null, null, null, null},
+                {null, null, null, null},
+                {null, null, null, null}
+            },
+            new String [] {
+                "Title 1", "Title 2", "Title 3", "Title 4"
+            }
+        ));
+        jScrollPane1.setViewportView(tableMetadataList);
+
+        previousButton.setText(L10n.getString("prevButton"));
+
+        nextButton.setText(L10n.getString("nextButton"));
+
+        deleteButton.setText(L10n.getString("recordDelete"));
+
+        editButtons.setText(L10n.getString("recordEdit"));
+
+        addButtons.setText(L10n.getString("recordAdd"));
+
+        detailsButton.setText(L10n.getString("recordDetails"));
+
+        totalResultLabel.setText(L10n.getString("totalResult"));
+
+        totalResultValueLabel.setText(((Integer)model.getResultRows()).toString());
+
+        toDisplayedLabel.setText(L10n.getString("toDisplay"));
+
+        toDisplayValueTextField.setText(((Integer)model.getDisplayRows()).toString());
+
+        displayedLabel.setText(L10n.getString("displayed"));
+
+        displayedValueLabel.setText(model.getCurrentDisplayRows());
+
+        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
+        jPanel1.setLayout(jPanel1Layout);
+        jPanel1Layout.setHorizontalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 841, Short.MAX_VALUE)
+                    .add(jPanel1Layout.createSequentialGroup()
+                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                            .add(jPanel1Layout.createSequentialGroup()
+                                .add(previousButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 76, Short.MAX_VALUE)
+                                .add(totalResultLabel)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                                .add(totalResultValueLabel)
+                                .add(37, 37, 37)
+                                .add(toDisplayedLabel)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                                .add(toDisplayValueTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                                .add(25, 25, 25)
+                                .add(displayedLabel)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                                .add(displayedValueLabel))
+                            .add(jPanel1Layout.createSequentialGroup()
+                                .add(detailsButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                                .add(addButtons, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                            .add(jPanel1Layout.createSequentialGroup()
+                                .add(editButtons, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 106, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                            .add(nextButton))))
+                .addContainerGap())
+        );
+        jPanel1Layout.setVerticalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(totalResultLabel)
+                    .add(toDisplayedLabel)
+                    .add(displayedLabel)
+                    .add(totalResultValueLabel)
+                    .add(toDisplayValueTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(displayedValueLabel)
+                    .add(previousButton)
+                    .add(nextButton))
+                .add(15, 15, 15)
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(editButtons)
+                    .add(deleteButton)
+                    .add(addButtons, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(detailsButton))
+                .addContainerGap())
+        );
+
+        closeButton.setText(L10n.getString("Close"));
+
+        helpButton.setText(L10n.getString("Help"));
+
+        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Search metadata"));
+        jLabel1.setText("jLabel1");
+
+        jLabel2.setText("jLabel2");
+
+        jTextField1.setText("jTextField1");
+
+        jTextField2.setText("jTextField2");
+
+        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Sorting"));
+        jRadioButton1.setText("jRadioButton1");
+        jRadioButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
+        jRadioButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
+
+        jRadioButton2.setText("jRadioButton2");
+        jRadioButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
+        jRadioButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));
+
+        jLabel5.setText("jLabel5");
+
+        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
+
+        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
+        jPanel3.setLayout(jPanel3Layout);
+        jPanel3Layout.setHorizontalGroup(
+            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel3Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jLabel5)
+                .add(19, 19, 19)
+                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jRadioButton1)
+                    .add(jRadioButton2)
+                    .add(jComboBox1, 0, 214, Short.MAX_VALUE))
+                .addContainerGap())
+        );
+        jPanel3Layout.setVerticalGroup(
+            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel3Layout.createSequentialGroup()
+                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel5)
+                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jRadioButton2)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jRadioButton1)
+                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+        );
+
+        jLabel3.setText("jLabel3");
+
+        jTextField3.setText("jTextField3");
+
+        jLabel4.setText("jLabel4");
+
+        jTextField4.setText("jTextField4");
+
+        jButton1.setText("jButton1");
+
+        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
+        jPanel2.setLayout(jPanel2Layout);
+        jPanel2Layout.setHorizontalGroup(
+            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel2Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                    .add(jPanel2Layout.createSequentialGroup()
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(jLabel1)
+                            .add(jLabel2))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(jTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
+                            .add(jTextField2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(jLabel3)
+                            .add(jLabel4))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(jTextField4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
+                            .add(jTextField3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)))
+                    .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .add(60, 60, 60)
+                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .add(28, 28, 28))
+        );
+        jPanel2Layout.setVerticalGroup(
+            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel2Layout.createSequentialGroup()
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel2Layout.createSequentialGroup()
+                        .addContainerGap()
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(jLabel1)
+                            .add(jLabel3)
+                            .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(jLabel2)
+                            .add(jLabel4)
+                            .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                        .add(16, 16, 16)
+                        .add(jButton1))
+                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                .addContainerGap())
+        );
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
+                        .add(helpButton)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 679, Short.MAX_VALUE)
+                        .add(closeButton)))
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
+                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(closeButton)
+                    .add(helpButton))
+                .addContainerGap())
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    /**
+     * @param args the command line arguments
+     */
+    public static void main(String args[]) {
+        java.awt.EventQueue.invokeLater(new Runnable() {
+            public void run() {
+                new MetadataManagerView(null, new javax.swing.JFrame(), true).setVisible(true);
+            }
+        });
+    }
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    protected javax.swing.JButton addButtons;
+    protected javax.swing.JButton closeButton;
+    protected javax.swing.JButton deleteButton;
+    protected javax.swing.JButton detailsButton;
+    private javax.swing.JLabel displayedLabel;
+    protected javax.swing.JLabel displayedValueLabel;
+    protected javax.swing.JButton editButtons;
+    protected javax.swing.JButton helpButton;
+    private javax.swing.JButton jButton1;
+    private javax.swing.JComboBox jComboBox1;
+    private javax.swing.JLabel jLabel1;
+    private javax.swing.JLabel jLabel2;
+    private javax.swing.JLabel jLabel3;
+    private javax.swing.JLabel jLabel4;
+    private javax.swing.JLabel jLabel5;
+    private javax.swing.JPanel jPanel1;
+    private javax.swing.JPanel jPanel2;
+    private javax.swing.JPanel jPanel3;
+    private javax.swing.JRadioButton jRadioButton1;
+    private javax.swing.JRadioButton jRadioButton2;
+    private javax.swing.JScrollPane jScrollPane1;
+    private javax.swing.JTextField jTextField1;
+    private javax.swing.JTextField jTextField2;
+    private javax.swing.JTextField jTextField3;
+    private javax.swing.JTextField jTextField4;
+    protected javax.swing.JButton nextButton;
+    protected javax.swing.JButton previousButton;
+    protected javax.swing.JTable tableMetadataList;
+    protected javax.swing.JTextField toDisplayValueTextField;
+    private javax.swing.JLabel toDisplayedLabel;
+    private javax.swing.JLabel totalResultLabel;
+    private javax.swing.JLabel totalResultValueLabel;
+    // End of variables declaration//GEN-END:variables
+    
+}

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore.properties	2006-04-24 21:22:27 UTC (rev 185)
@@ -44,6 +44,7 @@
 recordEditTT=Edit selected record
 recordDelete=&Delete
 recordDeleteTT=Delete selected records
+recordDetails = Details
 
 selectAll=All
 selectAllTT=Selects all visible occurence records
@@ -86,6 +87,26 @@
 
 publicationMgr=Publication manager
 
+metadataManager = Metadata manager
+
+#MetadataManager - name of column for table
+technicalContacName = TechnicalContacName
+technicalContactEmail = TechnicalContactEmail
+technicalContactAddress = TechnicalContactAddress
+contentContactName = ContentContactName
+contentContactEmail = ContentContactEmail
+contentContactAddress = ContentContactAddress
+dataSetTitle = Project
+dataSetDetails = Project description
+sourceInstitutionId = Institution
+sourceId = Code of source
+ownerOrganizationAbbrev = Institution abbreviation
+dateCreate = Date of create of project
+dateModified = Last modified data of project
+recordbasis = Recordbasis
+biotopetext = Biotopetest
+versionPlantsFile = Last version of plants list
+
 #History of the occurrences
 History= History - undo
 #Whole history

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties	2006-04-24 20:20:56 UTC (rev 184)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties	2006-04-24 21:22:27 UTC (rev 185)
@@ -45,6 +45,7 @@
 recordEditTT=Edit selected record
 recordDelete=&Delete
 recordDeleteTT=Delete selected records
+recordDetails = Details
 
 selectAll=All
 selectAllTT=Selects all visible occurence records
@@ -87,6 +88,26 @@
 
 publicationMgr=Publication manager
 
+metadataManager= Metadata manager
+
+#MetadataManager - name of column for table
+technicalContactName = TechnicalContacName
+technicalContactEmail = TechnicalContactEmail
+technicalContactAddress = TechnicalContactAddress
+contentContactName = ContentContactName
+contentContactEmail = ContentContactEmail
+contentContactAddress = ContentContactAddress
+dataSetTitle = Project
+dataSetDetails = Project description
+sourceInstitutionId = Institution
+sourceId = Code of source
+ownerOrganizationAbbrev = Institution abbreviation
+dateCreate = Date creating of project
+dateModified = Last modified data in project
+recordbasis = Recordbasis
+biotopetext = Biotopetest
+versionPlantsFile = Last version of plants list
+
 #History of the occurrences
 History= History - undo
 #Whole history



From tkovarik at gmail.com  Tue Apr 25 11:50:46 2006
From: tkovarik at gmail.com (Tomas Kovarik)
Date: Tue, 25 Apr 2006 11:50:46 +0200
Subject: [Plantlore-dev] Fwd: [firebird-support] Block size exceeds implementation restriction
In-Reply-To: <7.0.1.0.2.20060425090921.08439ec0@tpg.com.au>
References: <ea88f1620604241034v53118e47t4e3c1cef71293b78@mail.gmail.com>
	 <7.0.1.0.2.20060425090921.08439ec0@tpg.com.au>
Message-ID: <ea88f1620604250250j760774e0v4124523d83668a7d@mail.gmail.com>

Preposielam odpoved z Firebird-Support. Je to tak ako som sa bal - ten
dotaz co tam Hibernate vyrobi je prilis velky (teda dotaz nie, ten
zdaleka nema 64Kb, ale plan vyhodnocovania dotazu, ktory Firebird
spravi ma asi viac nez 48 Kb).

Idem skusit par uprav, ktore by mohli pomoct, uvidime ci to pojde.

Kovo

---------- Forwarded message ----------
From: Helen Borrie <helebor at tpg.com.au>
Date: Apr 25, 2006 1:26 AM
Subject: Re: [firebird-support] Block size exceeds implementation restriction
To: firebird-support at yahoogroups.com


 At 03:34 AM 25/04/2006, you wrote:
 >Hello,
 >
 >I am using Firebird 1.5.2 for my project and I encountered one
 >problem. When executing a (rather complex) query I get the following
 >error messages:
 >
 >Implementation limit exceeded
 >Block size exceeds implementation restriction
 >
 >Besides Firebird I am using Hibernate for the OR mapping. I have
 >searched the web for the description and found only the following page
 >http://www.ibphoenix.com/main.nfs?a=ibphoenix&page=ibp_fb1_faq
 >describing the problem (at the bottom of the page). However, I am not
 >sure where exactly the problem is and what does "..expressions do not
 >exceed the maximum size of a column..." mean.

 It means (either or both) that your SQL statement is larger than 64
 Kb or the query plan is larger than 48 Kb.

 Some thoughts:

 --Don't overlook the size of data in your parameterised expressions
 --Consider the proliferation of bytes in the resolved SQL and the
 plan from using IN() (which resolves under the hood to a sometimes
 huge number of OR clauselets).
 --In fact, if you are using IN() at all, you would do well to
 rephrase your query to use EXISTS() instead, wherever possible
 --If you are joining to views, remember that the plan could be
 exceedingly complex
 --Consider places where you might be using joins unnecessarily, where
 a correlated subquery might do the trick better and distribute the
 load into separate plans
 --If the query is such that it is jostling at the outer limits, it's
 probably a sign that this op needs to be simplified into a selectable
 SP.  A 64Kb select statement or a 48 Kb plan is not particularly practicable...

 ./heLen


From kovo at berlios.de  Tue Apr 25 19:01:27 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Tue, 25 Apr 2006 19:01:27 +0200
Subject: [Plantlore-dev] r186 - trunk/src/net/sf/plantlore/config/hibernate
Message-ID: <200604251701.k3PH1R7I013782@sheep.berlios.de>

Author: kovo
Date: 2006-04-25 19:01:24 +0200 (Tue, 25 Apr 2006)
New Revision: 186

Modified:
   trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Habitats.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/History.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/HistoryColumn.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Metadata.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Phytochoria.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Plants.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Right.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Territories.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/User.hbm.xml
   trunk/src/net/sf/plantlore/config/hibernate/Villages.hbm.xml
Log:
Use eager fetching for all tables, do not construct queries with join but use multiple queries. Hope this time it works.

Modified: trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/Authors.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Author" table="TAUTHORS">
+   <class name="net.sf.plantlore.common.record.Author" table="TAUTHORS" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/AuthorsOccurrences.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,16 +4,18 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.AuthorOccurrence" table="TAUTHORSOCCURRENCES">
+   <class name="net.sf.plantlore.common.record.AuthorOccurrence" table="TAUTHORSOCCURRENCES" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>
       <many-to-one name="author" 
                    class="net.sf.plantlore.common.record.Author" 
-                   column="CAUTHORID"/>
+                   column="CAUTHORID"
+                   fetch="select"/>
       <many-to-one name="occurrence" 
                    class="net.sf.plantlore.common.record.Occurrence" 
-                   column="COCCURRENCEID"/>      
+                   column="COCCURRENCEID"
+                   fetch="select"/>      
       <property column="CROLE"
                 length="20"
                 name="role"

Modified: trunk/src/net/sf/plantlore/config/hibernate/Habitats.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Habitats.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/Habitats.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,17 +4,19 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Habitat" table="THABITATS">
+   <class name="net.sf.plantlore.common.record.Habitat" table="THABITATS" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>
       
       <many-to-one name="territory" 
                    class="net.sf.plantlore.common.record.Territory" 
-                   column="CTERRITORYID"/>
+                   column="CTERRITORYID"
+                   fetch="select"/>
       <many-to-one name="phytochorion" 
                    class="net.sf.plantlore.common.record.Phytochorion" 
-                   column="CPHYTOCHORIAID"/>                   
+                   column="CPHYTOCHORIAID"
+                   fetch="select"/>                   
       <property column="CQUADRANT" 
         	length="10"              
                 name="quadrant"
@@ -27,7 +29,8 @@
                 type="java.lang.String"/>   
       <many-to-one name="nearestVillage" 
                    class="net.sf.plantlore.common.record.Village" 
-                   column="CNEARESTVILLAGEID"/>                   
+                   column="CNEARESTVILLAGEID"
+                   fetch="select"/>                   
       <property column="CCOUNTRY"
 		length="30"
                 name="country"

Modified: trunk/src/net/sf/plantlore/config/hibernate/History.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/History.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/History.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,16 +4,18 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.HistoryRecord" table="THISTORY">
+   <class name="net.sf.plantlore.common.record.HistoryRecord" table="THISTORY" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>
       <many-to-one name="historyColumn" 
                    class="net.sf.plantlore.common.record.HistoryColumn" 
-                   column="CCOLUMNID"/>
+                   column="CCOLUMNID"
+                   fetch="select"/>
       <many-to-one name="historyChange" 
                    class="net.sf.plantlore.common.record.HistoryChange" 
-                   column="CCHANGEID"/>
+                   column="CCHANGEID"
+                   fetch="select"/>
       <property column="COLDVALUE"
                 length="4096"
                 name="oldValue"

Modified: trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/HistoryChange.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,14 +4,15 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.HistoryChange" table="THISTORYCHANGE">
+   <class name="net.sf.plantlore.common.record.HistoryChange" table="THISTORYCHANGE" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>
 
       <many-to-one name="occurrence" 
                    class="net.sf.plantlore.common.record.Occurrence" 
-                   column="COCCURRENCEID"/>           
+                   column="COCCURRENCEID"
+                   fetch="select"/>           
       <property column="CRECORDID"                
                 name="recordId"
                 not-null="true"
@@ -30,6 +31,7 @@
                 type="java.util.Date"/>          
       <many-to-one name="who" 
                    class="net.sf.plantlore.common.record.User" 
-                   column="CWHO"/>
+                   column="CWHO"
+                   fetch="select"/>
    </class>
 </hibernate-mapping>

Modified: trunk/src/net/sf/plantlore/config/hibernate/HistoryColumn.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/HistoryColumn.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/HistoryColumn.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.HistoryColumn" table="THISTORYCOLUMN">
+   <class name="net.sf.plantlore.common.record.HistoryColumn" table="THISTORYCOLUMN" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/LastUpdate.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.LastUpdate" table="TLASTUPDATE">
+   <class name="net.sf.plantlore.common.record.LastUpdate" table="TLASTUPDATE" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Metadata.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Metadata.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/Metadata.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Metadata" table="TMETADATA">
+   <class name="net.sf.plantlore.common.record.Metadata" table="TMETADATA" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/Occurrences.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Occurrence" table="TOCCURRENCES">
+   <class name="net.sf.plantlore.common.record.Occurrence" table="TOCCURRENCES" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>
@@ -21,10 +21,12 @@
                 type="java.lang.String"/>
       <many-to-one name="habitat" 
                    class="net.sf.plantlore.common.record.Habitat" 
-                   column="CHABITATID"/>                
+                   column="CHABITATID"
+                   fetch="select"/>                
       <many-to-one name="plant" 
                    class="net.sf.plantlore.common.record.Plant" 
-                   column="CPLANTID"/>                
+                   column="CPLANTID"
+                   fetch="select"/>                
       <property column="CYEARCOLLECTED"               
                 name="yearCollected"
                 not-null="true"                
@@ -52,7 +54,8 @@
                 type="java.lang.String"/> 
       <many-to-one name="publication" 
                    class="net.sf.plantlore.common.record.Publication" 
-                   column="CPUBLICATIONSID"/>                
+                   column="CPUBLICATIONSID"
+                   fetch="select"/>                
       <property column="CHERBARIUM"
 		length="20"
                 name="herbarium"
@@ -64,14 +67,16 @@
                 type="java.util.Date"/>
       <many-to-one name="createdWho" 
                    class="net.sf.plantlore.common.record.User" 
-                   column="CCREATEWHO"/>
+                   column="CCREATEWHO"
+                   fetch="select"/>
       <property column="CUPDATEWHEN"
                 name="updatedWhen"
                 not-null="true"                
                 type="java.util.Date"/>   
       <many-to-one name="updatedWho" 
                    class="net.sf.plantlore.common.record.User" 
-                   column="CUPDATEWHO"/>                      
+                   column="CUPDATEWHO"
+                   fetch="select"/>                      
       <property column="CNOTE"
                 length="4096"
                 name="note"
@@ -79,7 +84,8 @@
                 type="java.lang.String"/> 
       <many-to-one name="metadata" 
                    class="net.sf.plantlore.common.record.Metadata" 
-                   column="CMETADATAID"/>                      
+                   column="CMETADATAID"
+                   fetch="select"/>                      
       <property column="CDELETE"
                 name="deleted"
                 not-null="false"                

Modified: trunk/src/net/sf/plantlore/config/hibernate/Phytochoria.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Phytochoria.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/Phytochoria.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Phytochorion" table="TPHYTOCHORIA">
+   <class name="net.sf.plantlore.common.record.Phytochorion" table="TPHYTOCHORIA" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Plants.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Plants.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/Plants.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Plant" table="TPLANTS">
+   <class name="net.sf.plantlore.common.record.Plant" table="TPLANTS" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/Publications.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Publication" table="TPUBLICATIONS">
+   <class name="net.sf.plantlore.common.record.Publication" table="TPUBLICATIONS" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Right.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Right.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/Right.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Right" table="TRIGHT">
+   <class name="net.sf.plantlore.common.record.Right" table="TRIGHT" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/Territories.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Territories.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/Territories.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Territory" table="TTERRITORIES">
+   <class name="net.sf.plantlore.common.record.Territory" table="TTERRITORIES" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>

Modified: trunk/src/net/sf/plantlore/config/hibernate/User.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/User.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/User.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.User" table="TUSER">
+   <class name="net.sf.plantlore.common.record.User" table="TUSER" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>
@@ -49,7 +49,8 @@
                 type="java.util.Date"/> 
       <many-to-one name="right" 
                    class="net.sf.plantlore.common.record.Right" 
-                   column="CRIGHTID"/>
+                   column="CRIGHTID"
+                   fetch="select"/>
       <property column="CNOTE"
                 length="4096"
                 name="note"

Modified: trunk/src/net/sf/plantlore/config/hibernate/Villages.hbm.xml
===================================================================
--- trunk/src/net/sf/plantlore/config/hibernate/Villages.hbm.xml	2006-04-24 21:22:27 UTC (rev 185)
+++ trunk/src/net/sf/plantlore/config/hibernate/Villages.hbm.xml	2006-04-25 17:01:24 UTC (rev 186)
@@ -4,7 +4,7 @@
           "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
 
 <hibernate-mapping>
-   <class name="net.sf.plantlore.common.record.Village" table="TVILLAGES">
+   <class name="net.sf.plantlore.common.record.Village" table="TVILLAGES" lazy="false">
       <id column="CID" name="id" type="java.lang.Integer">
          <generator class="increment"/>
       </id>



From LadaOb at seznam.cz  Tue Apr 25 19:55:32 2006
From: LadaOb at seznam.cz (=?us-ascii?Q?Lada=20Oberreiterova?=)
Date: Tue, 25 Apr 2006 19:55:32 +0200 (CEST)
Subject: [Plantlore-dev] =?us-ascii?Q?Fwd=3AAW=3A=20AW=3A=20BioCASE=20Provider=20Software=20=2D=20character=20encoding?=
Message-ID: <2280.4488-22379-1168227426-1145987732@seznam.cz>

An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060425/03fdd622/attachment.html>
-------------- next part --------------


# ------------ P?vodn? zpr?va ------------
# Od: "D?ring, Markus" <m.doering at BGBM.org>
# P?edm?t: AW: AW: BioCASE Provider Software - character encoding
# Datum: 25.4.2006 17:10:27
# ---------------------------------------------
# Lada, 
2 things. Ive modified the dbmod_firebird again, but I dont expect #
it to be the solution. 
but I would be interested to know if its the same # with this 
module. 

The other thing is I dont have a unicode firebird # database here 
myself. would you mind to send me an extract of yours? just a # 
single table with some unicode records would be enough to test it 
here. 

Thanks, 
-- 
Markus 

-----Urspr?ngliche # Nachricht----- 
Von: Lada Oberreiterova [mailto:LadaOb at seznam.cz] 
Gesendet: Montag, 24. April 2006 20:16 
An: D?ring, Markus 
Betreff: # Re:AW: BioCASE Provider Software - character encoding 

Hello # Markus, 

thank you very much for your quick answer. 

I # replaced the existing script "dbmod_firebird.py" with the one 
from your email, # but it didn't help. 
I also executed script "test.py", you can find the # screenshot with
the result in the attachment. 

Lada 


> ------------ P?vodn? zpr?va ------------ 
> Od: "D?ring, Markus" # <m.doering at BGBM.org> 
> P?edm?t: AW: BioCASE Provider Software - # character encoding 
> Datum: 24.4.2006 17:20:01 
> # --------------------------------------------- 
> Hello Lada, 
I will # try to trace the errors. As you said already they dont > 
look as if they have # anything in common. 
The UTF8 problem you are having > is very likely # caused by the 
firebird connection. The Firebird module is not > being used much, #
so its quite likely that you discover errors noone has seen so > 
far. 

I have changed the firebird module slightly. Please try the > 
attached # dbmod by replacing the existing one in your installation 
> # (lib/biocase/wrapper/dbmod). 

If this doesnt help, try to execute > # the attached script from the
commandline and send me a screenshot from the > # result. It tries 
to connect to firebird differently and get some results to the # > 
terminal. Id like to know what encoding those strings have. But 
first you will # > have to modify the script to insert your db 
connection and some simple SQL > # select to get some unicode data 
from your database. If you need help please let # > me know. 

regards, 
-- 
Markus 

/>-----Urspr?ngliche Nachricht----- 
Von: Lada Oberreiterova > # [mailto:LadaOb at seznam.cz] 
Gesendet: Montag, 24. April 2006 16:44 
/>An: D?ring, Markus; Holetschek, J?rg; a.hahn at bgbm.org 
Betreff: BioCASE # > Provider Software - character encoding 

Hello, 

we # are a > group of developers working on an open-source project 
Plantlore > # (http://plantlore.berlios.de > # <http://email.seznam.
cz/redir?http://plantlore.berlios.de> ). We are using > # BioCASE 
Provider Software (BPS) as part of the project and we have 
encountered a # > problem with character encoding we are unable to 
solve. From what we can say, # > the problem is in the BPS therefore
we reported it some time ago but > # unfortunately didn't receive 
any reply yet. 

In the previous email # > we have reported a problem with wrong 
character encoding when displaying data # on > the web pages. 
Special characters (Czech as well as e.g. German, such as ?, # ?, > 
?) are not correctly displayed. Please see attached screenshots for 
more > # information. 

We think we have ruled out all the reasons on our > # side: 
* For data in the database we use UNICODE_FSS encoding (we are # 
using > Firebird 1.5). 
* We have set UTF8 in the database connection # settings > according
to the BPS documentation 
* The web page where the # problem occurs > is using UTF8 encoding 

Furthermore, here are more # details of our > configuration: 
* Database: Firebird 1.5 
* Python: # We have tried > versions 2.3 and 2.4 (those recommended 
by the 
documentation) without any > luck 
* We have tested it on Windows and # Linux platforms 

We > are following the BioCASE development and we # have tried new 
version 2.4.0 > released recently. Unfortunately, we were not # able
to test our problem since we > couldn't even use the training 
database for # Firebird 
/>(trainingDB_firebird.gdb) provided with the release. The error # 
occurred when > doing "Scan request". In the attachment you can find
detailed # description. This > is most probably completely different
issue from the # previous one though. 
/>We had some problems with connection to Firebird # database 
previously (August > 2005) but were successfully solved by Markus # 
D?ring (m.doering at BGBM.org > # <http://email.seznam.cz/
newMessageScreen?sessionId=aj6X.EASCz46&to=mailto:m.doering at BGBM.org
> # > ). 

We would like to ask you for a comment on these issues. We # know > 
it is still possible that the problem is on our end, but it would 
help us # to > know where to look for it. Since we would like to 
release Plantlore in the # very > near future, prompt help will be 
appreciated. 

If you need # any more > information about these problems, feel free
to contact us. 

Thank > you very much in advance 

On behalf of Plantlore # development > team 

Lada Oberreiterova 




> 

# 

From krater at berlios.de  Wed Apr 26 15:23:52 2006
From: krater at berlios.de (krater at berlios.de)
Date: Wed, 26 Apr 2006 15:23:52 +0200
Subject: [Plantlore-dev] r187 - in trunk/src/net/sf/plantlore: client/export client/export/builders common/record
Message-ID: <200604261323.k3QDNql9025346@sheep.berlios.de>

Author: krater
Date: 2006-04-26 15:23:47 +0200 (Wed, 26 Apr 2006)
New Revision: 187

Added:
   trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java
Modified:
   trunk/src/net/sf/plantlore/client/export/Builder.java
   trunk/src/net/sf/plantlore/client/export/Director.java
   trunk/src/net/sf/plantlore/client/export/Template.java
   trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
   trunk/src/net/sf/plantlore/common/record/Metadata.java
   trunk/src/net/sf/plantlore/common/record/Occurrence.java
   trunk/src/net/sf/plantlore/common/record/Phytochorion.java
   trunk/src/net/sf/plantlore/common/record/Plant.java
   trunk/src/net/sf/plantlore/common/record/Publication.java
   trunk/src/net/sf/plantlore/common/record/Record.java
   trunk/src/net/sf/plantlore/common/record/Territory.java
   trunk/src/net/sf/plantlore/common/record/Village.java
Log:
Further improvements to the Export package.
(However, it doesn't work properly yet, due to a problem with HibernateDBLayer.next(int). )

Modified: trunk/src/net/sf/plantlore/client/export/Builder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-25 17:01:24 UTC (rev 186)
+++ trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-26 13:23:47 UTC (rev 187)
@@ -41,6 +41,9 @@
 	 */
 	void part(Record arg) throws IOException;
 	
+	
+	void part(Record... args) throws IOException;
+	
 	/** 
 	 * Make adjustments needed after the output of the current record is completed.
 	 * This method is called right after the <code>writeRecord()</code>. 

Modified: trunk/src/net/sf/plantlore/client/export/Director.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Director.java	2006-04-25 17:01:24 UTC (rev 186)
+++ trunk/src/net/sf/plantlore/client/export/Director.java	2006-04-26 13:23:47 UTC (rev 187)
@@ -1,7 +1,10 @@
 package net.sf.plantlore.client.export;
 
 import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.rmi.RemoteException;
+import java.util.ArrayList;
 
 import net.sf.plantlore.common.Selection;
 import net.sf.plantlore.common.record.*;
@@ -32,10 +35,9 @@
 	private Logger logger = Logger.getLogger(this.getClass().getPackage().getName());
 	
 	private Builder build;
-	private SelectQuery query;
 	private Selection selection;
 	private DBLayer database;
-	
+	private int result;
 
 	/**
 	 * Create a new export Director. The Director iterates over the results 
@@ -48,17 +50,31 @@
 	 * @param database	The database layer that will carry out the execution of the query.
 	 * @param selection	The set of selected records.
 	 */
-	public Director(Builder builder, SelectQuery query, DBLayer database, Selection selection) {
-		this.build = builder; this.query = query; this.database = database;
+	public Director(Builder builder, int result, DBLayer database, Selection selection) {
+		this.build = builder; this.result = result; this.database = database;
 		this.selection = selection;
 	}
 	
 	
+	private static Object[] NO_PARAM = new Object[0];
+	
+	
+	private void buildPart(Record record) throws IOException {
+		build.part(record);
+		for(String key : record.getForeignKeys()) {
+			Method getter = Template.getMethod(record.getClass(), key);
+			try {
+				buildPart( (Record) getter.invoke( record, NO_PARAM ) );
+			}
+			catch(IllegalAccessException e) {}
+			catch(InvocationTargetException e) {}
+		}
+	}
+	
+	
 	/** Execute the exporting procedure as described. */
 	public void run() {
 		try {
-			// The result identifier.
-			int result = database.executeQuery( query );
 			long count = 0; // how many records were exported
 			
 			logger.info("Export begins...");
@@ -66,18 +82,23 @@
 			// Create the header of the file (some opening tags possibly).
 			build.header();
 			// Iterate over the result of the query.
-			for(int i = 0; i < database.getNumRows( result ); i++) {
-				Record[] records = (Record[]) database.next( result );
-				if( !selection.contains( records[0] ) ) continue; // is it selected?
+			
+			int rows = database.getNumRows( result );
+			for(int i = 0; i < rows; i++) {
+				Object[] records = database.next( result );
+				Record record = (Record) records[0];
+				if( !selection.contains( record ) ) continue; // is it selected?
 				
 				count++;
 				// Write down this record.
 				build.startRecord();
 				
 				// Parse the record.
-				//build.writeRecord( records );
+				buildPart( record );
 				
+				// Occurrence -> AuthorOccurrences & Authors
 				
+				
 				build.finishRecord();
 			}
 			// Create the footer of the file (some closing tags possibly).

Modified: trunk/src/net/sf/plantlore/client/export/Template.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-25 17:01:24 UTC (rev 186)
+++ trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-26 13:23:47 UTC (rev 187)
@@ -1,8 +1,10 @@
 package net.sf.plantlore.client.export;
 
+import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
+import java.util.Hashtable;
 
 import net.sf.plantlore.common.record.*;
 
@@ -31,7 +33,39 @@
 			Metadata.class, Occurrence.class, Phytochorion.class,
 			Plant.class, Publication.class, Territory.class,
 			Village.class };
+	
+	
+	private static Hashtable<String,Method> getters;
+	
+	
+	public static Method getMethod(Class table, String column) {
+		return getters.get(table+"."+column);
+	}
 		
+	static {
+		for( Class table : Template.BASIC_TABLES)
+			try {
+				ArrayList<String> columns = ((Record) table.newInstance()).getColumns();
+				for(String column : columns)  
+					getters.put(table+"."+column, getter(table, column));
+			} 
+			catch(IllegalAccessException e) { e.printStackTrace(); }
+			catch(InstantiationException e) { e.printStackTrace(); }
+	}
+	
+	
+	private static Method getter(Class table, String column) {
+		try {
+			StringBuilder s = new StringBuilder("get" + column); 
+			s.setCharAt(3, Character.toUpperCase(s.charAt(3)));
+			
+			return table.getMethod( s.toString(), new Class[0] );
+		} catch(NoSuchMethodException e) { e.printStackTrace(); }
+		return null;
+	}
+	
+	
+		
 	/** 
 	 * @return The table that is central (primary) to the current query. 
 	 */

Modified: trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-25 17:01:24 UTC (rev 186)
+++ trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-26 13:23:47 UTC (rev 187)
@@ -34,6 +34,7 @@
 	
 	private ArrayList<Record> cache = new ArrayList<Record>(20);
 	private ArrayList<Author> authors = new ArrayList<Author>(10);
+	private ArrayList<AuthorOccurrence> authocc = new ArrayList<AuthorOccurrence>(10);
 	
 	private Hashtable<Class, ArrayList<Method>> properties = 
 		new Hashtable<Class, ArrayList<Method>>(20);
@@ -56,13 +57,13 @@
 				properties.put(table, methods);
 				// Check if these properties (columns) are set to be exported. 
 				for(String column : columns)  
-					if( !tmp.isSet(table, column) ) // yes -> store the getter
+					if( tmp.isSet(table, column) ) // yes -> store the getter
 						try {
 							methods.add( table.getMethod( methodName(column), new Class[0] ) );
-						} catch(NoSuchMethodException e) {}
+						} catch(NoSuchMethodException e) { e.printStackTrace(); }
 			} 
-			catch(IllegalAccessException e) {}
-			catch(InstantiationException e) {}
+			catch(IllegalAccessException e) { e.printStackTrace(); }
+			catch(InstantiationException e) { e.printStackTrace(); }
 	}
 	
 	
@@ -77,34 +78,47 @@
 	
 	
 	public void startRecord() throws IOException {
-		 cache.clear(); authors.clear(); first = true;
+		 cache.clear(); authors.clear(); authocc.clear(); first = true;
 	}
 	
 	
 	public void finishRecord() throws IOException {
-		if(authors.size() == 0)
-			for(Record record : cache) write( record );
+		if(authors.size() + authocc.size() == 0)
+			for(Record record : cache) { 
+				write( record );
+				output.write(NEWLINE);
+			}
 		else
-			for(Author author : authors) {
+			for(int i = 0; i < Math.max(authors.size(), authocc.size()); i++) {
 				for(Record record : cache) write( record );
-				write( author );
+				if(!authors.isEmpty()) write( authors.get(i) );
+				if(!authocc.isEmpty()) write( authocc.get(i) );
+				output.write(NEWLINE);
+				first = true;
 			}
-		
-		output.write(NEWLINE);		
 	}
 	
 	
 	public void part(Record record) throws IOException {
-		if(record instanceof Author) authors.add( (Author) record);
+		if(record instanceof Author) authors.add( (Author) record );
+		else if(record instanceof AuthorOccurrence) authocc.add( (AuthorOccurrence) record );
 		else cache.add(record);
 	}
 	
 	
+	public void part(Record... records) throws IOException {
+		for(Record r : records) 
+			part( r );		
+	}
+	
+	
 	/**
 	 * Send the <code>value</code> in the CSV format
 	 * to the output.
 	 */ 
 	protected void w(Object value) throws IOException {
+		if( value == null ) return; // no value means no output 
+		
 		StringBuilder r = new StringBuilder( value.toString() );
 		boolean containsDoubleQuote = r.indexOf(DOUBLEQUOTE) >= 0, 
 			containsDelimiter = r.indexOf(DELIMITER) >= 0,
@@ -150,8 +164,8 @@
 				if( !first ) output.write(DELIMITER); else first = false;
 				w( value );
 			} 
-			catch(IllegalAccessException e) {}
-			catch(InvocationTargetException e) {}
+			catch(IllegalAccessException e) { e.printStackTrace(); }
+			catch(InvocationTargetException e) { e.printStackTrace(); }
 	}
 	
 

Added: trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java	2006-04-25 17:01:24 UTC (rev 186)
+++ trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java	2006-04-26 13:23:47 UTC (rev 187)
@@ -0,0 +1,37 @@
+package net.sf.plantlore.client.export.builders;
+
+import java.io.IOException;
+
+import net.sf.plantlore.client.export.Builder;
+import net.sf.plantlore.common.record.Record;
+
+public class TrainingBuilder implements Builder {
+	
+	private int i = 0;
+
+	public void header() throws IOException {
+		System.out.println("Training Builder engaged.");		
+	}
+
+	public void footer() throws IOException {
+		System.out.println("Training Builder disengaged.");
+	}
+
+	public void startRecord() throws IOException {
+		System.out.println(" [" + i + "].starts ");
+	}
+
+	public void part(Record arg) throws IOException {
+		System.out.println("  ? " + arg.getClass().getSimpleName() );
+	}
+
+	public void part(Record... args) throws IOException {
+		for(Record r : args) part( r );
+	}
+
+	public void finishRecord() throws IOException {
+		System.out.println(" [" + i + "].ends ");
+		i++;
+	}
+
+}

Modified: trunk/src/net/sf/plantlore/common/record/Metadata.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Metadata.java	2006-04-25 17:01:24 UTC (rev 186)
+++ trunk/src/net/sf/plantlore/common/record/Metadata.java	2006-04-26 13:23:47 UTC (rev 187)
@@ -71,6 +71,11 @@
     			DATECREATE, DATEMODIFIED );
     }
     
+    public ArrayList<String> getNN() {
+    	return list(TECHNICALCONTACTNAME, CONTENTCONTACTNAME, DATASETTITLE, 
+    			SOURCEINSTITUTIONID, SOURCEID, DATECREATE, DATEMODIFIED);
+    }
+    
     /**
      *   Get metadata id
      *   @return id of the metadata

Modified: trunk/src/net/sf/plantlore/common/record/Occurrence.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-04-25 17:01:24 UTC (rev 186)
+++ trunk/src/net/sf/plantlore/common/record/Occurrence.java	2006-04-26 13:23:47 UTC (rev 187)
@@ -77,7 +77,14 @@
     			UPDATEDWHEN, METADATA, NOTE );
     }
     
+    public ArrayList<String> getNN() {
+    	ArrayList<String> nn = getForeignKeys();
+    	nn.remove(PUBLICATION);
+    	nn.addAll( list(UNITIDDB, UNITVALUE, YEARCOLLECTED, CREATEDWHEN, UPDATEDWHEN) );
+    	return nn;
+    }
     
+    
     /** Creates a new instance of OccurrenceRecord */
     public Occurrence() {
         

Modified: trunk/src/net/sf/plantlore/common/record/Phytochorion.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Phytochorion.java	2006-04-25 17:01:24 UTC (rev 186)
+++ trunk/src/net/sf/plantlore/common/record/Phytochorion.java	2006-04-26 13:23:47 UTC (rev 187)
@@ -40,6 +40,10 @@
     	return list( ID, CODE, NAME );
     }
     
+    public ArrayList<String> getNN() {
+    	return list(CODE, NAME);
+    }
+    
     /**
      *   Get phytochorion id
      *   @return id of the phytochorion

Modified: trunk/src/net/sf/plantlore/common/record/Plant.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Plant.java	2006-04-25 17:01:24 UTC (rev 186)
+++ trunk/src/net/sf/plantlore/common/record/Plant.java	2006-04-26 13:23:47 UTC (rev 187)
@@ -51,6 +51,10 @@
     			CZECHNAME, SYNONYMS, NOTE, SURVEYTAXID );
     }
     
+    public ArrayList<String> getNN() {
+    	return list( SURVEYTAXID, TAXON, SCIENTIFICNAMEAUTHOR );
+    }
+    
     /**
      *   Get plant id
      *   @return id of the plant

Modified: trunk/src/net/sf/plantlore/common/record/Publication.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-25 17:01:24 UTC (rev 186)
+++ trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-26 13:23:47 UTC (rev 187)
@@ -53,6 +53,10 @@
     			JOURNALAUTHORNAME, REFERENCECITATION, REFERENCEDETAIL, URL, NOTE );
     }
     
+    public ArrayList<String> getNN() {
+    	return list(REFERENCECITATION);
+    }
+    
     /**
      *   Get publication id
      *   @return id of the publication

Modified: trunk/src/net/sf/plantlore/common/record/Record.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-25 17:01:24 UTC (rev 186)
+++ trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-26 13:23:47 UTC (rev 187)
@@ -39,7 +39,12 @@
 	}
 	
 	
+	public ArrayList<String> getNN() {
+		ArrayList<String> nn = getForeignKeys();
+		return nn;
+	}
 	
+	
 	protected static ArrayList<String> list(String... values) {
 		if(values == null) return new ArrayList<String>(0);
 		ArrayList<String> list = new ArrayList<String>(values.length);

Modified: trunk/src/net/sf/plantlore/common/record/Territory.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Territory.java	2006-04-25 17:01:24 UTC (rev 186)
+++ trunk/src/net/sf/plantlore/common/record/Territory.java	2006-04-26 13:23:47 UTC (rev 187)
@@ -38,6 +38,10 @@
     	return list( ID, NAME );
     }
     
+    public ArrayList<String> getNN() {
+    	return list(NAME);
+    }
+    
     /**
      *   Get territory id
      *   @return id of the territory

Modified: trunk/src/net/sf/plantlore/common/record/Village.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Village.java	2006-04-25 17:01:24 UTC (rev 186)
+++ trunk/src/net/sf/plantlore/common/record/Village.java	2006-04-26 13:23:47 UTC (rev 187)
@@ -36,6 +36,10 @@
     	return list( ID, NAME );
     }
     
+    public ArrayList<String> getNN() {
+    	return list(NAME);
+    }
+    
     /**
      *   Get village id
      *   @return id of the village



From lada at berlios.de  Wed Apr 26 19:46:39 2006
From: lada at berlios.de (lada at berlios.de)
Date: Wed, 26 Apr 2006 19:46:39 +0200
Subject: [Plantlore-dev] r188 - in trunk/src/net/sf/plantlore: client client/publication common/record l10n
Message-ID: <200604261746.k3QHkdve002390@sheep.berlios.de>

Author: lada
Date: 2006-04-26 19:46:33 +0200 (Wed, 26 Apr 2006)
New Revision: 188

Added:
   trunk/src/net/sf/plantlore/client/publication/
   trunk/src/net/sf/plantlore/client/publication/AddEditPublicationCtrl.java
   trunk/src/net/sf/plantlore/client/publication/AddEditPublicationView.form
   trunk/src/net/sf/plantlore/client/publication/AddEditPublicationView.java
   trunk/src/net/sf/plantlore/client/publication/PublicationManager.java
   trunk/src/net/sf/plantlore/client/publication/PublicationManagerCtrl.java
   trunk/src/net/sf/plantlore/client/publication/PublicationManagerTableModel.java
   trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.form
   trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.java
Modified:
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/AppCoreView.java
   trunk/src/net/sf/plantlore/common/record/Publication.java
   trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties
Log:
Add publication manager. 
Record/Publication.java - change int to Integer.
AppCore - change publicationLisenet to publicationAction.

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-26 13:23:47 UTC (rev 187)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-26 17:46:33 UTC (rev 188)
@@ -30,6 +30,10 @@
 import net.sf.plantlore.client.metadata.MetadataManager;
 import net.sf.plantlore.client.metadata.MetadataManagerCtrl;
 import net.sf.plantlore.client.metadata.MetadataManagerView;
+import net.sf.plantlore.client.publication.PublicationManager;
+import net.sf.plantlore.client.publication.PublicationManagerCtrl;
+import net.sf.plantlore.client.publication.PublicationManagerView;
+import net.sf.plantlore.client.publication.PublicationManagerView;
 import net.sf.plantlore.common.record.Author;
 import net.sf.plantlore.common.record.AuthorOccurrence;
 import net.sf.plantlore.common.record.Occurrence;
@@ -90,6 +94,11 @@
     MetadataManagerView metadataManagerView;
     MetadataManagerCtrl metadataManagerCtrl;
     
+    //PublicationManager
+    PublicationManager publicationManagerModel;
+    PublicationManagerView publicationManagerView;
+    PublicationManagerCtrl publicationManagerCtrl;
+    
     // Login
     Login loginModel;
     LoginView loginView;
@@ -111,7 +120,7 @@
         view.setImportAction(new ImportAction());
         
         view.addDataAuthorsListener(new DataAuthorsListener());
-        view.addDataPublicationsListener(new DataPublicationsListener());
+        view.addDataPublicationsAction(new DataPublicationsAction());
         view.addDataMetadataAction(new DataMetadataAction());
         view.addDataHistoryListener(new DataHistoryListener());
         view.addDataWholeHistoryAction(new DataWholeHistoryAction());
@@ -419,11 +428,20 @@
         }
     }    
 
-    class DataPublicationsListener implements ActionListener {
+    class DataPublicationsAction extends AbstractAction {
+        public DataPublicationsAction() {
+             putValue(NAME, L10n.getString("publicationMgr"));
+        }
+
         public void actionPerformed(ActionEvent actionEvent) {
-            // Open publication manager - not implemented yet
+            System.out.println("PublicationManager");
+
+            publicationManagerModel = new PublicationManager(model.getDatabase());
+            publicationManagerView = new PublicationManagerView(publicationManagerModel, view, true);
+            publicationManagerCtrl = new PublicationManagerCtrl(publicationManagerModel, publicationManagerView);
+            publicationManagerView.setVisible(true); 
         }
-    }   
+    }    
     
     class DataHistoryListener implements ActionListener {
     	public void actionPerformed(ActionEvent actionEvent)

Modified: trunk/src/net/sf/plantlore/client/AppCoreView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-26 13:23:47 UTC (rev 187)
+++ trunk/src/net/sf/plantlore/client/AppCoreView.java	2006-04-26 17:46:33 UTC (rev 188)
@@ -442,8 +442,8 @@
     /** Adds a listener to the Publication manager menu item.
      *
      */
-    public void addDataPublicationsListener(ActionListener al) {
-        dataPublications.addActionListener(al);
+    public void addDataPublicationsAction(AbstractAction a) {
+        dataPublications.setAction(a);
     }    
     
     /** Adds a listener to the HistoryData menu item.

Added: trunk/src/net/sf/plantlore/client/publication/AddEditPublicationCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/publication/AddEditPublicationCtrl.java	2006-04-26 13:23:47 UTC (rev 187)
+++ trunk/src/net/sf/plantlore/client/publication/AddEditPublicationCtrl.java	2006-04-26 17:46:33 UTC (rev 188)
@@ -0,0 +1,121 @@
+/*
+ * AddEditPublicationCtrl.java
+ *
+ * Created on 23. duben 2006, 15:45
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client.publication;
+
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.util.Date;
+import net.sf.plantlore.common.record.Publication;
+import org.apache.log4j.Logger;
+
+/**
+ *
+ * @author Lada
+ */
+public class AddEditPublicationCtrl {
+        
+    private Logger logger;
+    private PublicationManager model;
+    private AddEditPublicationView view;
+    
+    /**
+     * Creates a new instance of AddEditPublicationCtrl
+     */
+    public AddEditPublicationCtrl(AddEditPublicationView view, PublicationManager model) {
+        
+        logger = Logger.getLogger(this.getClass().getPackage().getName());        
+        this.model = model;
+        this.view = view;
+        
+        view.closeButton.addActionListener(new closeButtonListener());
+        view.helpButton.addActionListener(new helpButtonListener());
+        view.operationButton.addActionListener(new operationButtonListener());
+    }
+    
+   /**
+    * On Cancel just hides the view.
+    *
+    */
+   class closeButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+    	   view.close();
+       }
+   }
+   
+   /**
+    * On Help should call help.
+    *
+    */
+   class helpButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {    	  
+    	   // Display help viewer            
+    	   System.out.println("Tady se bude volat Help!");
+       }
+   }
+   
+   /*
+    *
+    */
+   class operationButtonListener implements ActionListener {
+        public void actionPerformed(ActionEvent actionEvent)
+       {    	  
+    	   // zeptame se modelu, co je treba provest za akci DETEIL, ADD, EDIT
+            logger.debug(model.getOperation());
+           if (model.getOperation().equals("ADD")) {
+               logger.debug("Add of Publication.");
+               //otestovani, zda jsou vyplneny povinne polozky
+                if (view.checkNotNull()) {
+                    //vytvorime novy rekord a ulozime do nej nactene hodnoty
+                    Publication publication = new Publication();
+                    publication.setCollectionName(view.collectionNameText.getText());
+                    //FIXME - osetrit zadani necoho jineho nez int 
+                    //publication.setCollectionYearPublication(Integer.parseInt(view.colllectionYearPublictionText.getText()));
+                    publication.setCollectionYearPublication(0);
+                    publication.setJournalName(view.journalNameText.getText());
+                    publication.setJournalAuthorName(view.journalAuthorNameText.getText());
+                    publication.setReferenceCitation(view.collectionNameText.getText()+", "+view.colllectionYearPublictionText.getText()
+                                                      +", "+view.journalNameText.getText()+", "+ view.journalAuthorNameText.getText());
+                    publication.setReferenceDetail(view.referenceDetailText.getText());
+                    publication.setUrl(view.urlText.getText());
+                    publication.setNote(view.noteText.getText());
+                    //mela by se tu vypsat nejaka informace pro uzivatele
+                    //pridani zaznamu do tabulky publication
+                    model.addPublicationRecord(publication);                                                           
+                    view.close(); 
+                }
+           } else if (model.getOperation().equals("EDIT")) {  
+               logger.debug("Edit of Publication.");
+                //otestovani, zda jsou vyplneny povinne polozky
+                if (view.checkNotNull()) {
+                    //nacteni hodnot                   
+                    model.getSelectedRecord().setCollectionName(view.collectionNameText.getText());
+                    model.getSelectedRecord().setCollectionYearPublication(Integer.parseInt(view.colllectionYearPublictionText.getText()));
+                    model.getSelectedRecord().setJournalName(view.journalNameText.getText());
+                    model.getSelectedRecord().setJournalAuthorName(view.journalAuthorNameText.getText());
+                    model.getSelectedRecord().setReferenceCitation(view.collectionNameText.getText()+", "+view.colllectionYearPublictionText.getText()
+                                                      +", "+view.journalNameText.getText()+", "+ view.journalAuthorNameText.getText());
+                    model.getSelectedRecord().setReferenceDetail(view.referenceDetailText.getText());
+                    model.getSelectedRecord().setUrl(view.urlText.getText());
+                    model.getSelectedRecord().setNote(view.noteText.getText());
+                   model.editPublicationRecord(); 
+                   view.close(); 
+                }
+           } else if (model.getOperation().equals("DETAILS")) {
+                logger.debug("Details of Publication.");
+                view.close();
+           } else {
+               logger.error("PublicationManager - Incorect operation. Some from ADD, EDIT, DETAILS is excepted.");
+           }           
+        }
+   }
+    
+}

Added: trunk/src/net/sf/plantlore/client/publication/AddEditPublicationView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/publication/AddEditPublicationView.form	2006-04-26 13:23:47 UTC (rev 187)
+++ trunk/src/net/sf/plantlore/client/publication/AddEditPublicationView.form	2006-04-26 17:46:33 UTC (rev 188)
@@ -0,0 +1,276 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JDialogFormInfo">
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="2"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" attributes="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <EmptySpace min="-2" pref="182" max="-2" attributes="0"/>
+                      <Component id="operationButton" min="-2" pref="110" max="-2" attributes="0"/>
+                      <EmptySpace min="-2" pref="22" max="-2" attributes="0"/>
+                      <Component id="closeButton" min="-2" pref="101" max="-2" attributes="0"/>
+                      <EmptySpace min="-2" pref="17" max="-2" attributes="0"/>
+                      <Component id="helpButton" min="-2" pref="109" max="-2" attributes="0"/>
+                  </Group>
+                  <Group type="102" alignment="0" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="jPanel1" max="32767" attributes="0"/>
+                  </Group>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="jPanel1" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="helpButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="operationButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="closeButton" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="32767" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Container class="javax.swing.JPanel" name="jPanel1">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Publication"/>
+          </Border>
+        </Property>
+      </Properties>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Component id="collectionNameLable" alignment="0" min="-2" max="-2" attributes="0"/>
+                      <Component id="journalNameLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                      <Component id="colllectionYearPublictionLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                      <Component id="journalAuthorNameLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                      <Component id="referenceDetailLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                      <Component id="urlLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace min="-2" pref="70" max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="0" max="-2" attributes="0">
+                      <Component id="urlText" max="32767" attributes="1"/>
+                      <Component id="referenceDetailText" max="32767" attributes="1"/>
+                      <Component id="journalAuthorNameText" max="32767" attributes="1"/>
+                      <Component id="journalNameText" max="32767" attributes="1"/>
+                      <Component id="colllectionYearPublictionText" max="32767" attributes="1"/>
+                      <Component id="collectionNameText" alignment="0" pref="261" max="32767" attributes="1"/>
+                  </Group>
+                  <EmptySpace min="-2" pref="24" max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="1" max="-2" attributes="0">
+                      <Group type="102" attributes="0">
+                          <Component id="noteLabel" min="-2" max="-2" attributes="0"/>
+                          <EmptySpace min="-2" pref="210" max="-2" attributes="0"/>
+                      </Group>
+                      <Group type="102" attributes="1">
+                          <Component id="jScrollPane1" max="32767" attributes="1"/>
+                          <EmptySpace max="-2" attributes="0"/>
+                      </Group>
+                  </Group>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="0" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="collectionNameLable" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="collectionNameText" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="noteLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" attributes="0">
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="colllectionYearPublictionText" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="colllectionYearPublictionLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="journalNameText" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="journalNameLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="journalAuthorNameText" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="journalAuthorNameLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="referenceDetailText" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="referenceDetailLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="urlText" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="urlLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                      </Group>
+                      <Component id="jScrollPane1" min="-2" pref="120" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace pref="25" max="32767" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Component class="javax.swing.JLabel" name="collectionNameLable">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;collectionName&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="colllectionYearPublictionLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;collectionYearPublication&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="journalNameLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;journalName&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="journalAuthorNameLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;journalAuthorName&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="referenceDetailLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;referenceDetail&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="urlLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;urlPublication&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JTextField" name="collectionNameText">
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JTextField" name="colllectionYearPublictionText">
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JTextField" name="journalNameText">
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JTextField" name="journalAuthorNameText">
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JTextField" name="referenceDetailText">
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JTextField" name="urlText">
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JLabel" name="noteLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;notePublication&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Container class="javax.swing.JScrollPane" name="jScrollPane1">
+          <AuxValues>
+            <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
+          </AuxValues>
+
+          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+          <SubComponents>
+            <Component class="javax.swing.JTextArea" name="noteText">
+              <Properties>
+                <Property name="columns" type="int" value="20"/>
+                <Property name="rows" type="int" value="5"/>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+          </SubComponents>
+        </Container>
+      </SubComponents>
+    </Container>
+    <Component class="javax.swing.JButton" name="operationButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="&quot;Add&quot;" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Component class="javax.swing.JButton" name="closeButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Close&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Component class="javax.swing.JButton" name="helpButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Help&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+  </SubComponents>
+</Form>

Added: trunk/src/net/sf/plantlore/client/publication/AddEditPublicationView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/publication/AddEditPublicationView.java	2006-04-26 13:23:47 UTC (rev 187)
+++ trunk/src/net/sf/plantlore/client/publication/AddEditPublicationView.java	2006-04-26 17:46:33 UTC (rev 188)
@@ -0,0 +1,259 @@
+/*
+ * AddEditPublicationView.java
+ *
+ * Created on 23. duben 2006, 15:44
+ */
+
+package net.sf.plantlore.client.publication;
+
+import java.util.Observable;
+import java.util.Observer;
+import javax.swing.JDialog;
+import javax.swing.JOptionPane;
+import net.sf.plantlore.l10n.L10n;
+
+/**
+ *
+ * @author  Lada
+ */
+public class AddEditPublicationView extends javax.swing.JDialog  implements Observer {
+    
+    /**
+     * Creates new form AddEditPublicationView
+     */
+    public AddEditPublicationView(javax.swing.JDialog parent, boolean modal) {
+        super(parent, modal);
+        initComponents();        
+    }
+    
+     public void update(Observable observable, Object object)
+    {
+    }
+    
+     /*
+      * nastaveni formulare pro add
+      */
+     public void setAddForm() {
+         operationButton.setText("Add");
+         
+     }
+     
+      public void setEditForm() {
+         operationButton.setText("Edit");
+         
+     }
+     
+     public void setDetailsForm() {
+       operationButton.setText("Ok");
+       this.collectionNameText.setEditable(false);
+       this.colllectionYearPublictionText.setEditable(false);
+       this.journalNameText.setEditable(false);
+       this.journalAuthorNameText.setEditable(false);
+       this.referenceDetailText.setEditable(false);
+       this.urlText.setEditable(false);
+       this.noteText.setEditable(false);
+     }
+     
+     /**
+     *
+     */
+    public void close() {
+        dispose();
+    }
+    
+    /*
+     *
+     */
+    public boolean checkNotNull() {
+        //if (this.collectionNameText.getText().equals("") && this.colllectionYearPublictionText.getText().enable("") && this.journalNameText.getText().equals("") && this.journalAuthorNameText.getText().equals("")) {
+        //   JOptionPane.showMessageDialog(this, ".... is a compulsory field. Please fill it in.", "Missing compulsory field", JOptionPane.ERROR_MESSAGE);
+        //    return false;
+        //}
+        return true;
+    }
+    
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        jPanel1 = new javax.swing.JPanel();
+        collectionNameLable = new javax.swing.JLabel();
+        colllectionYearPublictionLabel = new javax.swing.JLabel();
+        journalNameLabel = new javax.swing.JLabel();
+        journalAuthorNameLabel = new javax.swing.JLabel();
+        referenceDetailLabel = new javax.swing.JLabel();
+        urlLabel = new javax.swing.JLabel();
+        collectionNameText = new javax.swing.JTextField();
+        colllectionYearPublictionText = new javax.swing.JTextField();
+        journalNameText = new javax.swing.JTextField();
+        journalAuthorNameText = new javax.swing.JTextField();
+        referenceDetailText = new javax.swing.JTextField();
+        urlText = new javax.swing.JTextField();
+        noteLabel = new javax.swing.JLabel();
+        jScrollPane1 = new javax.swing.JScrollPane();
+        noteText = new javax.swing.JTextArea();
+        operationButton = new javax.swing.JButton();
+        closeButton = new javax.swing.JButton();
+        helpButton = new javax.swing.JButton();
+
+        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
+        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Publication"));
+        collectionNameLable.setText(L10n.getString("collectionName"));
+
+        colllectionYearPublictionLabel.setText(L10n.getString("collectionYearPublication"));
+
+        journalNameLabel.setText(L10n.getString("journalName"));
+
+        journalAuthorNameLabel.setText(L10n.getString("journalAuthorName"));
+
+        referenceDetailLabel.setText(L10n.getString("referenceDetail"));
+
+        urlLabel.setText(L10n.getString("urlPublication"));
+
+        noteLabel.setText(L10n.getString("notePublication"));
+
+        noteText.setColumns(20);
+        noteText.setRows(5);
+        jScrollPane1.setViewportView(noteText);
+
+        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
+        jPanel1.setLayout(jPanel1Layout);
+        jPanel1Layout.setHorizontalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel1Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(collectionNameLable)
+                    .add(journalNameLabel)
+                    .add(colllectionYearPublictionLabel)
+                    .add(journalAuthorNameLabel)
+                    .add(referenceDetailLabel)
+                    .add(urlLabel))
+                .add(70, 70, 70)
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
+                    .add(urlText)
+                    .add(referenceDetailText)
+                    .add(journalAuthorNameText)
+                    .add(journalNameText)
+                    .add(colllectionYearPublictionText)
+                    .add(collectionNameText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))
+                .add(24, 24, 24)
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
+                    .add(jPanel1Layout.createSequentialGroup()
+                        .add(noteLabel)
+                        .add(210, 210, 210))
+                    .add(jPanel1Layout.createSequentialGroup()
+                        .add(jScrollPane1)
+                        .addContainerGap())))
+        );
+        jPanel1Layout.setVerticalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel1Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(collectionNameLable)
+                    .add(collectionNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(noteLabel))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel1Layout.createSequentialGroup()
+                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(colllectionYearPublictionText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(colllectionYearPublictionLabel))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(journalNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(journalNameLabel))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(journalAuthorNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(journalAuthorNameLabel))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(referenceDetailText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(referenceDetailLabel))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(urlText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(urlLabel)))
+                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addContainerGap(25, Short.MAX_VALUE))
+        );
+
+        operationButton.setText("Add");
+
+        closeButton.setText(L10n.getString("Close"));
+
+        helpButton.setText(L10n.getString("Help"));
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(layout.createSequentialGroup()
+                        .add(182, 182, 182)
+                        .add(operationButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                        .add(22, 22, 22)
+                        .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                        .add(17, 17, 17)
+                        .add(helpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                    .add(layout.createSequentialGroup()
+                        .addContainerGap()
+                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(helpButton)
+                    .add(operationButton)
+                    .add(closeButton))
+                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    /**
+     * @param args the command line arguments
+     */
+    public static void main(String args[]) {
+        java.awt.EventQueue.invokeLater(new Runnable() {
+            public void run() {
+                new AddEditPublicationView(new javax.swing.JDialog(), true).setVisible(true);
+            }
+        });
+    }
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    protected javax.swing.JButton closeButton;
+    private javax.swing.JLabel collectionNameLable;
+    protected javax.swing.JTextField collectionNameText;
+    private javax.swing.JLabel colllectionYearPublictionLabel;
+    protected javax.swing.JTextField colllectionYearPublictionText;
+    protected javax.swing.JButton helpButton;
+    private javax.swing.JPanel jPanel1;
+    private javax.swing.JScrollPane jScrollPane1;
+    private javax.swing.JLabel journalAuthorNameLabel;
+    protected javax.swing.JTextField journalAuthorNameText;
+    private javax.swing.JLabel journalNameLabel;
+    protected javax.swing.JTextField journalNameText;
+    private javax.swing.JLabel noteLabel;
+    protected javax.swing.JTextArea noteText;
+    protected javax.swing.JButton operationButton;
+    private javax.swing.JLabel referenceDetailLabel;
+    protected javax.swing.JTextField referenceDetailText;
+    private javax.swing.JLabel urlLabel;
+    protected javax.swing.JTextField urlText;
+    // End of variables declaration//GEN-END:variables
+    
+}

Added: trunk/src/net/sf/plantlore/client/publication/PublicationManager.java
===================================================================
--- trunk/src/net/sf/plantlore/client/publication/PublicationManager.java	2006-04-26 13:23:47 UTC (rev 187)
+++ trunk/src/net/sf/plantlore/client/publication/PublicationManager.java	2006-04-26 17:46:33 UTC (rev 188)
@@ -0,0 +1,273 @@
+/*
+ * PublicationManager.java
+ *
+ * Created on 22. duben 2006, 14:46
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client.publication;
+
+import java.rmi.RemoteException;
+import java.util.ArrayList;
+import net.sf.plantlore.common.record.Publication;
+import net.sf.plantlore.middleware.DBLayer;
+import net.sf.plantlore.middleware.SelectQuery;
+import net.sf.plantlore.server.DBLayerException;
+import org.apache.log4j.Logger;
+
+/**
+ *
+ * @author Lada
+ */
+public class PublicationManager {
+    
+    /** Instance of a logger */
+    private Logger logger;      
+    /** Instance of a database management object */
+    private DBLayer database;   
+    /** Constant with default number of rows to display */
+    private static final int DEFAULT_DISPLAY_ROWS = 6;    
+    /** Actual number of rows to display */
+    private int displayRows = DEFAULT_DISPLAY_ROWS;   
+    /** Index of the first record shown in the table */
+    private int currentFirstRow;
+    /** Information about current display rows*/
+    private String displayRow;    
+    
+     //*******Informations about searching Result from database*****//
+    /** Result of the search query */
+    private int resultId = 0;
+    /** List of data (results of a search query) displayed in the table */
+    private ArrayList<Publication> publicationList = new ArrayList();         
+    // informace pro uzivatele o zmenach v tabulce publication
+    private String messagePublication;
+    
+    //Informace o operaci, ktera se bude provadet - ADD, EDIT, DELETE, DETAIL
+    private String operation = "";
+    //Vyvrany zaznam v tabulce s Petadaty
+    private Publication selectedRecord;
+    
+    
+    /**
+     * Creates a new instance of PublicationManager
+     */
+    public PublicationManager(DBLayer database) {
+        
+       logger = Logger.getLogger(this.getClass().getPackage().getName());	 
+       this.database = database;
+       
+       //nacteni metadat
+       searchPublication();
+       //opet funkci pro vyzadani si dat postupne
+       processResult(1, displayRows);
+    }
+    
+     /**
+     *
+     */
+    public void searchPublication() {
+        
+        //Create new Select query
+        SelectQuery query = null;       
+
+    	//  Select data from tPublication table
+        try {
+                query = database.createQuery(Publication.class);                                
+        } catch (RemoteException e) {
+        System.err.println("RemoteException- searchPublicationData(), createQuery");
+        }
+                
+        int resultId = 0;
+        try {
+            // Execute query                    
+            resultId = database.executeQuery(query);
+            // Save "edit" Publication data
+            setResultId(resultId);    
+        } catch (DBLayerException e) {                            
+            logger.error("Searching metada failed. Unable to execute search query.");           
+        } catch (RemoteException e) { 		   
+     	   System.err.println("RemoteException- searchMetada(), executeQuery");
+        }          
+    }
+    
+   /**
+     * Process results of a search query. Retrieves results using the database management object (DBLayer) and stores them in the data field of the class. 
+     * @param fromTable number of the first row to show in table. Number of the first row to retraieve is 1.
+     * @param count number of rows to retrieve 
+     */
+    public void processResult(int fromTable, int count) {
+        
+        if (this.resultId != 0) {
+            int currentRow = getResultRows();
+            logger.debug("Rows in the result: "+currentRow);
+            logger.debug("Max available rows: "+(fromTable+count-1));
+           
+            // Find out how many rows we can retrieve - it cannot be more than number of rows in the result
+            int to = Math.min(currentRow, fromTable+count-1);           
+            if (to <= 0) {
+            	publicationList = new ArrayList<Publication>(); 
+            	setDisplayRows(0);
+            	setCurrentDisplayRows("0-0");
+            } else {
+                logger.debug("Retrieving query results: 1 - "+to);
+                setCurrentDisplayRows(fromTable+ "-" + to);
+                try {                	 
+                     // Retrieve selected row interval 
+                	Object[] objectPublication;
+                 	try {
+                 		objectPublication = database.more(this.resultId, 1, to);  
+                 	} catch(RemoteException e) {
+                     	System.err.println("RemoteException- processEditResult, more");
+                     	logger.debug("RemoteException- processEditResult, more");
+                     	return;
+                     }                   
+                    int countResult = objectPublication.length;  
+                    logger.debug("Results retrieved. Count: "+ countResult);
+                    // Create storage for the results
+                    this.publicationList = new ArrayList<Publication>();
+                    // Cast the results to the Publication objects
+                    for (int i=0; i<countResult; i++ ) {                    							
+						Object[] objHis = (Object[])objectPublication[i];
+                        this.publicationList.add((Publication)objHis[0]);
+                    }           
+                    //Update current first displayed row (only if data retrieval was successful)
+                    setCurrentFirstRow(fromTable); 
+                } catch (DBLayerException e) {                  
+                    logger.error("Processing search results failed: "+e.toString());            
+                }             
+            }
+        }         
+    }
+    
+    public void addPublicationRecord (Publication publication) {
+        try {
+            database.executeInsert(publication);
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }
+    }
+    
+    public void editPublicationRecord() {       
+        try {
+            database.executeUpdate(selectedRecord);
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }
+    }
+    
+    public void deletePublicationRecord() {
+        try {
+            database.executeDelete(selectedRecord);
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }
+    }
+    
+           
+    //****************************//
+    //****Get and set metods*****//
+    //**************************//
+    
+    
+    //id vysledku po vyhledavani v db
+    public void setResultId(int resultId) {
+        this.resultId = resultId;
+    }
+    
+    public int getResultId() {
+        return this.resultId;
+    }
+    
+    public int getResultRows() {
+        int resultCount = 0;
+        if (resultId != 0) try {
+                resultCount = database.getNumRows(resultId);        	
+        } catch(RemoteException e) {
+                System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
+        }
+        return resultCount;
+    }
+
+    public ArrayList<Publication> getPublicationList() {
+              return this.publicationList;		  
+       }
+
+     public void setPublicationList(ArrayList<Publication> publicationList) {
+              this.publicationList = publicationList;		  
+     } 
+    
+     public String getCurrentDisplayRows() {
+		  return this.displayRow;		  
+	   }
+
+     public void setCurrentDisplayRows(String displayRow) {
+              this.displayRow = displayRow;		  
+     } 
+     
+     public String getMessagePublication() {
+		  return this.messagePublication;		  
+	   }
+
+     public void setMessagePublication(String messagePublication) {
+              this.messagePublication= messagePublication;		  
+     } 
+     
+         /**
+     *  Get index of the first row currently displayed in the list of record changes. This is an index in the results returned by a search query.
+     *  @return index of the first row currently displayed in the list of Publication
+     */
+    public int getCurrentFirstRow() {
+        return this.currentFirstRow;
+    }
+    
+    /**
+     *  Set index of the forst row currently displayed in the list of record changes. This is an index in the results returned by a search query.
+     *  @param row index of the first row currently displayed in the list of Publication
+     */
+    public void setCurrentFirstRow(int row) {
+        this.currentFirstRow = row;
+    }    
+
+    /**
+     *  Get number of rows to be displayed on one page.
+     *  @return number of rows to be displayed per page
+     */
+    public int getDisplayRows() {
+        return this.displayRows;
+    }
+    
+    /**
+     *  Set number of rows to be displayed on one page
+     *  @param rows number of rows ro be displayed per page
+     */
+    public void setDisplayRows(int rows) {
+        this.displayRows = rows;
+    }
+    
+    // predani informace o operaci, ktera byla zavolana - ADD, EDIT, DELETE, DETAIL
+     public String getOperation() {
+                  logger.debug("Operation: "+operation);
+		  return this.operation;		  
+	   }
+
+     public void setOperation(String operation) {
+              this.operation = operation;		  
+     } 
+    
+    //Vraci Publication objekt vybraneho zaznam pro nasledny EDIT, DELETE ci zobrazeni DETAILU 
+    public void setSelectedRecord(int selectedRecordId) {
+        this.selectedRecord = (Publication)(publicationList.get(selectedRecordId));
+    }
+    
+    public Publication getSelectedRecord() {
+        return this.selectedRecord;
+    }
+}

Added: trunk/src/net/sf/plantlore/client/publication/PublicationManagerCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/publication/PublicationManagerCtrl.java	2006-04-26 13:23:47 UTC (rev 187)
+++ trunk/src/net/sf/plantlore/client/publication/PublicationManagerCtrl.java	2006-04-26 17:46:33 UTC (rev 188)
@@ -0,0 +1,279 @@
+/*
+ * PublicationManagerCtrl.java
+ *
+ * Created on 23. duben 2006, 11:18
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client.publication;
+
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import net.sf.plantlore.common.record.Publication;
+import org.apache.log4j.Logger;
+
+/**
+ *
+ * @author Lada
+ */
+public class PublicationManagerCtrl {
+    
+    private Logger logger;
+    private PublicationManager model;
+    private PublicationManagerView view;
+    
+    /**
+     * Creates a new instance of PublicationManagerCtrl
+     */
+    public PublicationManagerCtrl(PublicationManager model, PublicationManagerView view) {
+        
+        logger = Logger.getLogger(this.getClass().getPackage().getName());        
+        this.model = model;
+        this.view = view;
+          
+        view.closeButton.addActionListener(new closeButtonListener());
+        view.helpButton.addActionListener(new helpButtonListener());        
+        view.previousButton.addActionListener(new previousButtonListener());
+        view.nextButton.addActionListener(new nextButtonListener());            
+        view.toDisplayValueTextField.addActionListener(new rowSetDisplayChangeListener());    
+        view.detailsButton.addActionListener(new detailsPublicationListener());
+        view.addButtons.addActionListener(new addPublicationListener());
+        view.editButtons.addActionListener(new editPublicationListener());
+        view.deleteButton.addActionListener(new deletePublicationListener());
+    }
+    
+       /**
+    * On Cancel just hides the view.
+    *
+    */
+   class closeButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+    	   view.close();
+       }
+   }
+   
+   /**
+    * On Help should call help.
+    *
+    */
+   class helpButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {    	  
+    	   // Display help viewer            
+    	   System.out.println("Tady se bude volat Help!");
+       }
+   }
+   
+   /**
+    * 
+    *
+    */
+   class previousButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+    	   //   Call processResults only if we don't see the first page (should not happen, button should be disabled)
+    	   logger.debug("FIRST");
+    	   logger.debug("current first row: "+model.getCurrentFirstRow());
+           logger.debug("num rows in the result: "+ model.getResultRows());            
+           logger.debug("display rows: "+ view.tablePublicationList.getRowCount());      
+           if (model.getCurrentFirstRow() > 1) {
+               int firstRow = Math.max(model.getCurrentFirstRow()- model.getDisplayRows(), 1);
+               model.processResult(firstRow, model.getDisplayRows()); 
+               if (model.getCurrentFirstRow() > 1){
+               }
+               view.tablePublicationList.setModel(new PublicationManagerTableModel(model));
+               int from = model.getCurrentFirstRow();
+               int to = from + view.tablePublicationList.getRowCount() - 1;
+               view.displayedValueLabel.setText(from + "-" + to);
+           }                           
+       }
+   }
+   
+   /**
+    * 
+    *
+    */
+   class nextButtonListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+    	   //Call processResults only if we don't see the last page
+    	   logger.debug("NEXT");
+           logger.debug("current first row: "+model.getCurrentFirstRow());
+           logger.debug("num rows in the result: "+ model.getResultRows());            
+           logger.debug("display rows: "+ model.getDisplayRows());
+           logger.debug("num rows in table (view) "+ view.tablePublicationList.getRowCount());              
+           if (model.getCurrentFirstRow()+ view.tablePublicationList.getRowCount()<=model.getResultRows()) {
+               model.processResult(model.getCurrentFirstRow()+ model.getDisplayRows(), view.tablePublicationList.getRowCount());
+               view.tablePublicationList.setModel(new PublicationManagerTableModel(model));             
+               int from = model.getCurrentFirstRow();
+               int to = from + view.tablePublicationList.getRowCount() - 1;
+               if (to <= 0){
+            	   view.displayedValueLabel.setText("0-0");
+               }else {
+            	   view.displayedValueLabel.setText(from + "-" + to);
+               }               
+           }                       
+       }
+   }
+   
+    /**
+    * 
+    */
+     class rowSetDisplayChangeListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent) {
+           // Save old value
+           int oldValue = model.getDisplayRows();           
+           // Check whether new value > 0
+           if (view.getDisplayRows() < 1) {
+               view.setDisplayRows(oldValue);
+               return;
+           }
+           if (view.getDisplayRows() > model.getResultRows()){
+        	   view.setDisplayRows(model.getResultRows());
+           } 
+           
+           // Set new value in the model
+           model.setDisplayRows(view.getDisplayRows());
+           logger.debug("New display rows: "+view.getDisplayRows());
+           // If neccessary reload search results
+           if ((oldValue != view.getDisplayRows()) && (model.getDisplayRows() <= model.getResultRows())) {
+               model.processResult(model.getCurrentFirstRow(), view.getDisplayRows());
+               view.tablePublicationList.setModel(new PublicationManagerTableModel(model));
+               int from = model.getCurrentFirstRow();
+               int to = from + view.tablePublicationList.getRowCount() - 1;
+               view.displayedValueLabel.setText(from + "-" + to);               
+           }
+       }        	   
+   }
+   
+ 
+    /**
+    *
+    */  
+    class addPublicationListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+           //v modelu nastavim informaci o tom, ze jde o ADD
+           model.setOperation("ADD");           
+           //otevre se dialog addEdit s tim, ze mu rekneme, ze jde o ADD
+           //pozor: pri add se musi ohlidat, zda byly vyplneny povinne polozky
+           AddEditPublicationView addView = new AddEditPublicationView(view,true);
+           AddEditPublicationCtrl addCtrl = new AddEditPublicationCtrl(addView, model);
+           addView.setAddForm();
+           addView.setVisible(true);
+           //pokud bude pridan zaznam,je potreba ho zobrazit v tabulce = provest znovu dotaz nebo pridat do datalistu, ale tam
+           //nezarucim spravne setrizeni,takze novy dotaz bude lepsi....
+           //bylo by dobre si nekde drzet query (kdyby pouzil uzivatel search)
+           //nacteni metadat
+           model.searchPublication();
+           //opet funkci pro vyzadani si dat postupne
+           model.processResult(1, model.getDisplayRows());
+           view.tablePublicationList.setModel(new PublicationManagerTableModel(model));                      
+           view.displayedValueLabel.setText(1 + "-" + view.tablePublicationList.getRowCount());
+           view.totalResultValueLabel.setText(((Integer)model.getResultRows()).toString());
+       }
+    }
+    
+     /**
+    *
+    */  
+    class editPublicationListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+           if (view.tablePublicationList.getSelectedRow() < 0) {    
+               view.messageSelection();
+           } else {
+               //v modelu nastavim informaci o tom, ze jde o EDIT
+               model.setOperation("EDIT");
+               //poznaceni si do modelu inforamce o vybranem radku pro dalsi praci
+               int resultNumber = view.tablePublicationList.getSelectedRow() + model.getCurrentFirstRow()-1;  
+               model.setSelectedRecord(resultNumber);
+               //nacteni dat do dialogu
+               Publication publication = model.getSelectedRecord();               
+               AddEditPublicationView editView = new AddEditPublicationView(view,true);
+               AddEditPublicationCtrl editCtrl = new AddEditPublicationCtrl(editView, model);
+               editView.collectionNameText.setText(publication.getCollectionName());
+               editView.colllectionYearPublictionText.setText(publication.getCollectionYearPublication().toString());
+               editView.journalNameText.setText(publication.getJournalName());
+               editView.journalAuthorNameText.setText(publication.getJournalAuthorName());
+               editView.referenceDetailText.setText(publication.getReferenceDetail());
+               editView.urlText.setText(publication.getUrl());
+               editView.noteText.setText(publication.getNote());
+               //FIXME: vsechny Integery v DB nastavit defautlne na nulu,aby to pri prevodech na string nedelalo neplechu
+               //editView.versionPlantsFileText.setText(publication.getVersionPlantsFile().toString());
+               //vytvoreni dialogu
+               editView.setEditForm();               
+               editView.setVisible(true);    
+               //po editaci zaznamu se musi zobrazit zmena i v tabulce
+              //nacteni metadat
+               model.searchPublication();
+               //opet funkci pro vyzadani si dat postupne
+               model.processResult(1, model.getDisplayRows());
+               view.tablePublicationList.setModel(new PublicationManagerTableModel(model));                      
+               view.displayedValueLabel.setText(1 + "-" + view.tablePublicationList.getRowCount());                
+           }          
+       }
+    }
+    
+    /**
+    *
+    */  
+    class detailsPublicationListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+           if (view.tablePublicationList.getSelectedRow() < 0) {    
+               view.messageSelection();
+           } else {
+               //v modelu nastavim informaci o tom, ze jde o DETAILS
+                model.setOperation("DETAILS");
+               //poznaceni si do modelu inforamce o vybranem radku pro dalsi praci
+               int resultNumber = view.tablePublicationList.getSelectedRow() + model.getCurrentFirstRow()-1;  
+               model.setSelectedRecord(resultNumber);
+               //nacteni dat do dialogu
+               Publication publication = model.getSelectedRecord();               
+               AddEditPublicationView detailsView = new AddEditPublicationView(view,true);
+               AddEditPublicationCtrl detailsCtrl = new AddEditPublicationCtrl(detailsView, model);
+               //nacteni dat                              
+               detailsView.collectionNameText.setText(publication.getCollectionName());
+               detailsView.colllectionYearPublictionText.setText(publication.getCollectionYearPublication().toString());
+               detailsView.journalNameText.setText(publication.getJournalName());
+               detailsView.journalAuthorNameText.setText(publication.getJournalAuthorName());
+               detailsView.referenceDetailText.setText(publication.getReferenceDetail());
+               detailsView.urlText.setText(publication.getUrl());
+               detailsView.noteText.setText(publication.getNote());
+               //FIXME: vsechny Integery v DB nastavit defautlne na nulu,aby to pri prevodech na string nedelalo neplechu
+               //editView.versionPlantsFileText.setText(publication.getVersionPlantsFile().toString());
+               //vytvoreni dialogu
+               detailsView.setDetailsForm();
+               detailsView.setVisible(true); 
+           }          
+       }
+    }
+    
+     /**
+    *
+    */  
+    class deletePublicationListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+           if (view.tablePublicationList.getSelectedRow() < 0) {    
+               view.messageSelection();
+           } else {
+               //smazani zaznamu
+               int resultNumber = view.tablePublicationList.getSelectedRow() + model.getCurrentFirstRow()-1; 
+               model.setSelectedRecord(resultNumber);
+               model.deletePublicationRecord();        
+               //nacteni metadat
+               model.searchPublication();
+               //opet funkci pro vyzadani si dat postupne
+               model.processResult(1, model.getDisplayRows());
+               view.tablePublicationList.setModel(new PublicationManagerTableModel(model));                      
+               view.displayedValueLabel.setText(1 + "-" + view.tablePublicationList.getRowCount());  
+               view.totalResultValueLabel.setText(((Integer)model.getResultRows()).toString());
+           }          
+       }
+    }
+}

Added: trunk/src/net/sf/plantlore/client/publication/PublicationManagerTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/publication/PublicationManagerTableModel.java	2006-04-26 13:23:47 UTC (rev 187)
+++ trunk/src/net/sf/plantlore/client/publication/PublicationManagerTableModel.java	2006-04-26 17:46:33 UTC (rev 188)
@@ -0,0 +1,132 @@
+/*
+ * PublicationManagerTableModel.java
+ *
+ * Created on 22. duben 2006, 22:00
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client.publication;
+
+import java.util.ArrayList;
+import javax.swing.table.AbstractTableModel;
+import net.sf.plantlore.common.record.Publication;
+import net.sf.plantlore.l10n.L10n;
+import org.apache.log4j.Logger;
+
+/**
+ *
+ * @author Lada
+ */
+public class PublicationManagerTableModel  extends AbstractTableModel  {
+    
+  
+        //Logger
+    private Logger logger;
+    // PublicationManager model
+    private PublicationManager model; 
+    private ArrayList<Publication> publicationDataList;
+    
+    /** Names of the columns */
+    private String[] columnNames;
+    /** Data values displayed in the table*/
+    private Object[][] data;
+
+    public final static int COLLECTIONNAME = 0;
+    public final static int COLLECTIONYEARPUBLICATION = 1;
+    public final static int JOURNALNAME = 2; 
+    public final static int JOURNALAUTHORNAME = 3;   
+    public final static int REFERENCEDETAIL = 4;          
+    public final static int URL = 5;
+    public final static int NOTE = 6;    
+    
+    /**
+     * Creates a new instance of PublicationManagerTableModel
+     */
+    public PublicationManagerTableModel(PublicationManager model) {
+        logger = Logger.getLogger(this.getClass().getPackage().getName());
+    	this.model = model;        
+    	initColumns();    	
+    	initData();    	
+    }  
+   
+    private void initColumns() {
+        columnNames = new String[7];                  
+        columnNames[0] = L10n.getString("collectionName");   
+        columnNames[1] = L10n.getString("collectionYearPublication");  
+        columnNames[2] = L10n.getString("journalName");
+        columnNames[3] = L10n.getString("journalAuthorName"); 
+        columnNames[4] = L10n.getString("referenceDetail");                      
+        columnNames[5] = L10n.getString("urlPublication"); 
+        columnNames[6] = L10n.getString("notePublication");          
+    }       
+    
+    /**
+     * Load data for dislaying 
+     */
+    public void initData() {
+    	
+    	logger.debug("Publication - Init data.");
+    	
+    	publicationDataList = model.getPublicationList();
+    	if (publicationDataList.size()==0 ){
+    		this.data = new Object[0][];
+    		return;
+    	}    	  	
+    	int firstRow = model.getCurrentFirstRow();
+    	int countResult = Math.min(publicationDataList.size(), firstRow+ model.getDisplayRows()-1);
+    	int countRow = countResult - firstRow + 1;   
+        int ii = 0;
+    	//loud data for view
+        Object[][] publicationData = new Object[countRow][7];   
+    	for (int i=firstRow-1; i < countResult; i++) {     
+            publicationData[ii][0] = ((Publication)publicationDataList.get(i)).getCollectionName();
+            publicationData[ii][1] = ((Publication)publicationDataList.get(i)).getCollectionYearPublication().toString(); 
+            publicationData[ii][2] = ((Publication)publicationDataList.get(i)).getJournalName();
+            publicationData[ii][3] = ((Publication)publicationDataList.get(i)).getJournalAuthorName();  	    
+            publicationData[ii][4] = ((Publication)publicationDataList.get(i)).getReferenceDetail();                                 
+            publicationData[ii][5] = ((Publication)publicationDataList.get(i)).getUrl();
+            publicationData[ii][6] = ((Publication)publicationDataList.get(i)).getNote();          
+    	    ii++;
+    	}      	    	
+    	this.data = publicationData;    	
+    }    
+    
+    /**
+     * Gets the value of the given cell.
+     * @param row index of row
+     * @param column index of column
+     */
+    public Object getValueAt(int row, int column)
+    {
+        return data[row][column];
+    }    
+    
+    /** 
+     * Gets number of rows in the actual PublicationTableModel
+     * @return the number of rows in the PublicationTableModel.
+     */
+    public int getRowCount()
+    {
+        return data.length;
+    }        
+
+   /**   
+     * Gets number of columns in the actual publicationTableModel
+     * @return the number of columns in the publicationTableModel.
+     */
+    public int getColumnCount()
+    {
+        return columnNames.length;
+    }
+    
+      /**
+     * Gets the name of the specified column
+     * @param column index of column
+     * @return the name of the specified column.
+     */
+    public String getColumnName(int column){
+        return columnNames[column];
+    }
+}

Added: trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.form	2006-04-26 13:23:47 UTC (rev 187)
+++ trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.form	2006-04-26 17:46:33 UTC (rev 188)
@@ -0,0 +1,526 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JDialogFormInfo">
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="2"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Component id="jPanel2" alignment="1" max="32767" attributes="0"/>
+                  <Component id="jPanel1" alignment="0" max="32767" attributes="0"/>
+                  <Group type="102" alignment="1" attributes="0">
+                      <Component id="helpButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace pref="757" max="32767" attributes="0"/>
+                      <Component id="closeButton" min="-2" max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="1" attributes="0">
+              <Component id="jPanel1" max="32767" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="jPanel2" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="closeButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="helpButton" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Container class="javax.swing.JPanel" name="jPanel1">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Publication list"/>
+          </Border>
+        </Property>
+      </Properties>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="1" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="1" attributes="0">
+                      <Component id="jScrollPane1" alignment="0" pref="919" max="32767" attributes="0"/>
+                      <Group type="102" alignment="1" attributes="0">
+                          <Group type="103" groupAlignment="1" attributes="0">
+                              <Group type="102" alignment="1" attributes="0">
+                                  <Component id="previousButton" min="-2" pref="107" max="-2" attributes="0"/>
+                                  <EmptySpace pref="154" max="32767" attributes="0"/>
+                                  <Component id="totalResultLabel" min="-2" max="-2" attributes="0"/>
+                                  <EmptySpace max="-2" attributes="0"/>
+                                  <Component id="totalResultValueLabel" min="-2" max="-2" attributes="0"/>
+                                  <EmptySpace min="-2" pref="37" max="-2" attributes="0"/>
+                                  <Component id="toDisplayedLabel" min="-2" max="-2" attributes="0"/>
+                                  <EmptySpace max="-2" attributes="0"/>
+                                  <Component id="toDisplayValueTextField" min="-2" pref="33" max="-2" attributes="0"/>
+                                  <EmptySpace min="-2" pref="25" max="-2" attributes="0"/>
+                                  <Component id="displayedLabel" min="-2" max="-2" attributes="0"/>
+                                  <EmptySpace max="-2" attributes="0"/>
+                                  <Component id="displayedValueLabel" min="-2" max="-2" attributes="0"/>
+                              </Group>
+                              <Group type="102" alignment="1" attributes="0">
+                                  <Component id="detailsButton" min="-2" pref="107" max="-2" attributes="1"/>
+                                  <EmptySpace max="-2" attributes="0"/>
+                                  <Component id="addButtons" min="-2" pref="107" max="-2" attributes="0"/>
+                              </Group>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="1" attributes="0">
+                              <Group type="102" attributes="0">
+                                  <Component id="editButtons" min="-2" pref="106" max="-2" attributes="1"/>
+                                  <EmptySpace max="-2" attributes="0"/>
+                                  <Component id="deleteButton" min="-2" pref="99" max="-2" attributes="1"/>
+                              </Group>
+                              <Component id="nextButton" alignment="1" min="-2" max="-2" attributes="1"/>
+                          </Group>
+                      </Group>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="1" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Component id="jScrollPane1" pref="256" max="32767" attributes="0"/>
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="totalResultLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="toDisplayedLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="displayedLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="totalResultValueLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="toDisplayValueTextField" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="displayedValueLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="previousButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="nextButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace min="-2" pref="15" max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="editButtons" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="deleteButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="addButtons" alignment="3" min="-2" pref="23" max="-2" attributes="0"/>
+                      <Component id="detailsButton" alignment="3" min="-2" max="-2" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Container class="javax.swing.JScrollPane" name="jScrollPane1">
+
+          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+          <SubComponents>
+            <Component class="javax.swing.JTable" name="tablePublicationList">
+              <Properties>
+                <Property name="model" type="javax.swing.table.TableModel" editor="org.netbeans.modules.form.editors2.TableModelEditor">
+                  <Table columnCount="4" rowCount="4">
+                    <Column editable="true" title="Title 1" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 2" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 3" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 4" type="java.lang.Object"/>
+                  </Table>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+          </SubComponents>
+        </Container>
+        <Component class="javax.swing.JButton" name="previousButton">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;prevButton&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JButton" name="nextButton">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;nextButton&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JButton" name="deleteButton">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;recordDelete&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JButton" name="editButtons">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;recordEdit&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JButton" name="addButtons">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;recordAdd&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JButton" name="detailsButton">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;recordDetails&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JLabel" name="totalResultLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;totalResult&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="totalResultValueLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="((Integer)model.getResultRows()).toString()" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JLabel" name="toDisplayedLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;toDisplay&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JTextField" name="toDisplayValueTextField">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="((Integer)model.getDisplayRows()).toString()" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JLabel" name="displayedLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;displayed&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="displayedValueLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="model.getCurrentDisplayRows()" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+      </SubComponents>
+    </Container>
+    <Component class="javax.swing.JButton" name="closeButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Close&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Component class="javax.swing.JButton" name="helpButton">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="L10n.getString(&quot;Help&quot;)" type="code"/>
+        </Property>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Container class="javax.swing.JPanel" name="jPanel2">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Search publicatin"/>
+          </Border>
+        </Property>
+      </Properties>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="1" attributes="0">
+                      <Group type="102" attributes="0">
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="collectionNameSearchLabel" min="-2" max="-2" attributes="0"/>
+                              <Component id="collectionYearSearchLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="collectionNameSearchText" pref="177" max="32767" attributes="1"/>
+                              <Component id="collectionYearSearchText" pref="177" max="32767" attributes="1"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="journalNameSearchLaber" alignment="0" min="-2" max="-2" attributes="0"/>
+                              <Component id="journaAuthorlNameSearchLabel" alignment="0" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="journalAuthorNameSearchText" alignment="0" pref="203" max="32767" attributes="1"/>
+                              <Component id="journalNameSearchText" alignment="0" pref="203" max="32767" attributes="1"/>
+                          </Group>
+                      </Group>
+                      <Component id="searchButton" min="-2" pref="118" max="-2" attributes="1"/>
+                  </Group>
+                  <EmptySpace min="-2" pref="60" max="-2" attributes="0"/>
+                  <Component id="jPanel3" min="-2" max="-2" attributes="0"/>
+                  <EmptySpace min="-2" pref="28" max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" attributes="0">
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Group type="102" attributes="0">
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="collectionNameSearchLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="journalNameSearchLaber" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="journalNameSearchText" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="collectionNameSearchText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="collectionYearSearchLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="journaAuthorlNameSearchLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="journalAuthorNameSearchText" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="collectionYearSearchText" alignment="3" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace min="-2" pref="16" max="-2" attributes="0"/>
+                          <Component id="searchButton" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <Component id="jPanel3" alignment="0" max="32767" attributes="0"/>
+                  </Group>
+                  <EmptySpace max="-2" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Component class="javax.swing.JLabel" name="collectionNameSearchLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;collectionName&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JLabel" name="collectionYearSearchLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;collectionYearPublication&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JTextField" name="collectionNameSearchText">
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JTextField" name="collectionYearSearchText">
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Container class="javax.swing.JPanel" name="jPanel3">
+          <Properties>
+            <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+              <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+                <TitledBorder title="Sorting"/>
+              </Border>
+            </Property>
+          </Properties>
+
+          <Layout>
+            <DimensionLayout dim="0">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="jLabel5" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace min="-2" pref="19" max="-2" attributes="0"/>
+                      <Group type="103" groupAlignment="0" attributes="0">
+                          <Component id="sortDescendingRadioButton" alignment="0" min="-2" max="-2" attributes="0"/>
+                          <Component id="sortAscendingRadioButton" alignment="0" min="-2" max="-2" attributes="0"/>
+                          <Component id="sortComboBox" alignment="0" pref="214" max="32767" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+            <DimensionLayout dim="1">
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" alignment="0" attributes="0">
+                      <Group type="103" groupAlignment="3" attributes="0">
+                          <Component id="jLabel5" alignment="3" min="-2" max="-2" attributes="0"/>
+                          <Component id="sortComboBox" alignment="3" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="sortAscendingRadioButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="-2" attributes="0"/>
+                      <Component id="sortDescendingRadioButton" min="-2" max="-2" attributes="0"/>
+                      <EmptySpace max="32767" attributes="0"/>
+                  </Group>
+              </Group>
+            </DimensionLayout>
+          </Layout>
+          <SubComponents>
+            <Component class="javax.swing.JRadioButton" name="sortDescendingRadioButton">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;sortDescending&quot;)" type="code"/>
+                </Property>
+                <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+                  <Border info="org.netbeans.modules.form.compat2.border.EmptyBorderInfo">
+                    <EmptyBorder bottom="0" left="0" right="0" top="0"/>
+                  </Border>
+                </Property>
+                <Property name="margin" type="java.awt.Insets" editor="org.netbeans.beaninfo.editors.InsetsEditor">
+                  <Insets value="[0, 0, 0, 0]"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JRadioButton" name="sortAscendingRadioButton">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;sortAscending&quot;)" type="code"/>
+                </Property>
+                <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+                  <Border info="org.netbeans.modules.form.compat2.border.EmptyBorderInfo">
+                    <EmptyBorder bottom="0" left="0" right="0" top="0"/>
+                  </Border>
+                </Property>
+                <Property name="margin" type="java.awt.Insets" editor="org.netbeans.beaninfo.editors.InsetsEditor">
+                  <Insets value="[0, 0, 0, 0]"/>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+            <Component class="javax.swing.JLabel" name="jLabel5">
+              <Properties>
+                <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+                  <Connection code="L10n.getString(&quot;dataSort&quot;)" type="code"/>
+                </Property>
+              </Properties>
+            </Component>
+            <Component class="javax.swing.JComboBox" name="sortComboBox">
+              <Properties>
+                <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
+                  <StringArray count="4">
+                    <StringItem index="0" value="CollectionName"/>
+                    <StringItem index="1" value="CollectionYearPublication"/>
+                    <StringItem index="2" value="JournalName"/>
+                    <StringItem index="3" value="JournalAuthorName"/>
+                  </StringArray>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+          </SubComponents>
+        </Container>
+        <Component class="javax.swing.JLabel" name="journalNameSearchLaber">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;journalName&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JTextField" name="journalNameSearchText">
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JLabel" name="journaAuthorlNameSearchLabel">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;journalAuthorName&quot;)" type="code"/>
+            </Property>
+          </Properties>
+        </Component>
+        <Component class="javax.swing.JTextField" name="journalAuthorNameSearchText">
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+        <Component class="javax.swing.JButton" name="searchButton">
+          <Properties>
+            <Property name="text" type="java.lang.String" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+              <Connection code="L10n.getString(&quot;dataSearch&quot;)" type="code"/>
+            </Property>
+          </Properties>
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+      </SubComponents>
+    </Container>
+  </SubComponents>
+</Form>

Added: trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.java	2006-04-26 13:23:47 UTC (rev 187)
+++ trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.java	2006-04-26 17:46:33 UTC (rev 188)
@@ -0,0 +1,392 @@
+/*
+ * PublicationManagerView.java
+ *
+ * Created on 23. duben 2006, 11:43
+ */
+
+package net.sf.plantlore.client.publication;
+
+import java.util.Observable;
+import java.util.Observer;
+import javax.swing.DefaultListSelectionModel;
+import javax.swing.JOptionPane;
+import net.sf.plantlore.l10n.L10n;
+
+/**
+ *
+ * @author  Lada
+ */
+public class PublicationManagerView extends javax.swing.JDialog implements Observer{
+    
+    //Whole PublicationManager model
+    private PublicationManager model;  
+    //data
+    private Object[][] data;
+    
+    /**
+     * Creates new form PublicationManagerView
+     */
+    public PublicationManagerView(PublicationManager model, java.awt.Frame parent, boolean modal) {
+        super(parent, modal);
+        this.model = model;
+        initComponents();
+        this.tablePublicationList.setRowSelectionAllowed(true);
+        this.tablePublicationList.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
+        this.tablePublicationList.setModel(new PublicationManagerTableModel(model));  
+       
+    }
+    
+    public void update(Observable observable, Object object)
+    {
+    }
+    
+     /**
+     *
+     */
+    public void close() {
+        dispose();
+    }
+    
+    /**Rows to display */
+    public Integer getDisplayRows() { 
+        Integer countRows;
+        try {
+            countRows = Integer.parseInt(toDisplayValueTextField.getText());
+        }catch (NumberFormatException e){            
+            countRows = 0;
+        }
+        return countRows;
+    }
+    
+    /**Rows to display*/
+    public void setDisplayRows(Integer value) {
+        this.toDisplayValueTextField.setText(value.toString());
+    }  
+    
+    public void messageSelection() {
+    	JOptionPane.showMessageDialog(this, "No row was selected.", "Information about selected row", JOptionPane.ERROR_MESSAGE);               
+    } 
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        jPanel1 = new javax.swing.JPanel();
+        jScrollPane1 = new javax.swing.JScrollPane();
+        tablePublicationList = new javax.swing.JTable();
+        previousButton = new javax.swing.JButton();
+        nextButton = new javax.swing.JButton();
+        deleteButton = new javax.swing.JButton();
+        editButtons = new javax.swing.JButton();
+        addButtons = new javax.swing.JButton();
+        detailsButton = new javax.swing.JButton();
+        totalResultLabel = new javax.swing.JLabel();
+        totalResultValueLabel = new javax.swing.JLabel();
+        toDisplayedLabel = new javax.swing.JLabel();
+        toDisplayValueTextField = new javax.swing.JTextField();
+        displayedLabel = new javax.swing.JLabel();
+        displayedValueLabel = new javax.swing.JLabel();
+        closeButton = new javax.swing.JButton();
+        helpButton = new javax.swing.JButton();
+        jPanel2 = new javax.swing.JPanel();
+        collectionNameSearchLabel = new javax.swing.JLabel();
+        collectionYearSearchLabel = new javax.swing.JLabel();
+        collectionNameSearchText = new javax.swing.JTextField();
+        collectionYearSearchText = new javax.swing.JTextField();
+        jPanel3 = new javax.swing.JPanel();
+        sortDescendingRadioButton = new javax.swing.JRadioButton();
+        sortAscendingRadioButton = new javax.swing.JRadioButton();
+        jLabel5 = new javax.swing.JLabel();
+        sortComboBox = new javax.swing.JComboBox();
+        journalNameSearchLaber = new javax.swing.JLabel();
+        journalNameSearchText = new javax.swing.JTextField();
+        journaAuthorlNameSearchLabel = new javax.swing.JLabel();
+        journalAuthorNameSearchText = new javax.swing.JTextField();
+        searchButton = new javax.swing.JButton();
+
+        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
+        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Publication list"));
+        tablePublicationList.setModel(new javax.swing.table.DefaultTableModel(
+            new Object [][] {
+                {null, null, null, null},
+                {null, null, null, null},
+                {null, null, null, null},
+                {null, null, null, null}
+            },
+            new String [] {
+                "Title 1", "Title 2", "Title 3", "Title 4"
+            }
+        ));
+        jScrollPane1.setViewportView(tablePublicationList);
+
+        previousButton.setText(L10n.getString("prevButton"));
+
+        nextButton.setText(L10n.getString("nextButton"));
+
+        deleteButton.setText(L10n.getString("recordDelete"));
+
+        editButtons.setText(L10n.getString("recordEdit"));
+
+        addButtons.setText(L10n.getString("recordAdd"));
+
+        detailsButton.setText(L10n.getString("recordDetails"));
+
+        totalResultLabel.setText(L10n.getString("totalResult"));
+
+        totalResultValueLabel.setText(((Integer)model.getResultRows()).toString());
+
+        toDisplayedLabel.setText(L10n.getString("toDisplay"));
+
+        toDisplayValueTextField.setText(((Integer)model.getDisplayRows()).toString());
+
+        displayedLabel.setText(L10n.getString("displayed"));
+
+        displayedValueLabel.setText(model.getCurrentDisplayRows());
+
+        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
+        jPanel1.setLayout(jPanel1Layout);
+        jPanel1Layout.setHorizontalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 919, Short.MAX_VALUE)
+                    .add(jPanel1Layout.createSequentialGroup()
+                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                            .add(jPanel1Layout.createSequentialGroup()
+                                .add(previousButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 154, Short.MAX_VALUE)
+                                .add(totalResultLabel)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                                .add(totalResultValueLabel)
+                                .add(37, 37, 37)
+                                .add(toDisplayedLabel)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                                .add(toDisplayValueTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                                .add(25, 25, 25)
+                                .add(displayedLabel)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                                .add(displayedValueLabel))
+                            .add(jPanel1Layout.createSequentialGroup()
+                                .add(detailsButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                                .add(addButtons, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                            .add(jPanel1Layout.createSequentialGroup()
+                                .add(editButtons, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 106, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                            .add(nextButton))))
+                .addContainerGap())
+        );
+        jPanel1Layout.setVerticalGroup(
+            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(totalResultLabel)
+                    .add(toDisplayedLabel)
+                    .add(displayedLabel)
+                    .add(totalResultValueLabel)
+                    .add(toDisplayValueTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(displayedValueLabel)
+                    .add(previousButton)
+                    .add(nextButton))
+                .add(15, 15, 15)
+                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(editButtons)
+                    .add(deleteButton)
+                    .add(addButtons, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(detailsButton))
+                .addContainerGap())
+        );
+
+        closeButton.setText(L10n.getString("Close"));
+
+        helpButton.setText(L10n.getString("Help"));
+
+        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Search publicatin"));
+        collectionNameSearchLabel.setText(L10n.getString("collectionName"));
+
+        collectionYearSearchLabel.setText(L10n.getString("collectionYearPublication"));
+
+        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Sorting"));
+        sortDescendingRadioButton.setText(L10n.getString("sortDescending"));
+        sortDescendingRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
+        sortDescendingRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
+
+        sortAscendingRadioButton.setText(L10n.getString("sortAscending"));
+        sortAscendingRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
+        sortAscendingRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
+
+        jLabel5.setText(L10n.getString("dataSort"));
+
+        sortComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CollectionName", "CollectionYearPublication", "JournalName", "JournalAuthorName" }));
+
+        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
+        jPanel3.setLayout(jPanel3Layout);
+        jPanel3Layout.setHorizontalGroup(
+            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel3Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jLabel5)
+                .add(19, 19, 19)
+                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(sortDescendingRadioButton)
+                    .add(sortAscendingRadioButton)
+                    .add(sortComboBox, 0, 214, Short.MAX_VALUE))
+                .addContainerGap())
+        );
+        jPanel3Layout.setVerticalGroup(
+            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel3Layout.createSequentialGroup()
+                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(jLabel5)
+                    .add(sortComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(sortAscendingRadioButton)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(sortDescendingRadioButton)
+                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+        );
+
+        journalNameSearchLaber.setText(L10n.getString("journalName"));
+
+        journaAuthorlNameSearchLabel.setText(L10n.getString("journalAuthorName"));
+
+        searchButton.setText(L10n.getString("dataSearch"));
+
+        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
+        jPanel2.setLayout(jPanel2Layout);
+        jPanel2Layout.setHorizontalGroup(
+            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel2Layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
+                    .add(jPanel2Layout.createSequentialGroup()
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(collectionNameSearchLabel)
+                            .add(collectionYearSearchLabel))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(collectionNameSearchText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
+                            .add(collectionYearSearchText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(journalNameSearchLaber)
+                            .add(journaAuthorlNameSearchLabel))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(journalAuthorNameSearchText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
+                            .add(journalNameSearchText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)))
+                    .add(searchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                .add(60, 60, 60)
+                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .add(28, 28, 28))
+        );
+        jPanel2Layout.setVerticalGroup(
+            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel2Layout.createSequentialGroup()
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jPanel2Layout.createSequentialGroup()
+                        .addContainerGap()
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(collectionNameSearchLabel)
+                            .add(journalNameSearchLaber)
+                            .add(journalNameSearchText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(collectionNameSearchText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                            .add(collectionYearSearchLabel)
+                            .add(journaAuthorlNameSearchLabel)
+                            .add(journalAuthorNameSearchText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                            .add(collectionYearSearchText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                        .add(16, 16, 16)
+                        .add(searchButton))
+                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                .addContainerGap())
+        );
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
+                        .add(helpButton)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 757, Short.MAX_VALUE)
+                        .add(closeButton)))
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
+                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(closeButton)
+                    .add(helpButton))
+                .addContainerGap())
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    /**
+     * @param args the command line arguments
+     */
+    public static void main(String args[]) {
+        java.awt.EventQueue.invokeLater(new Runnable() {
+            public void run() {
+                new PublicationManagerView(null, new javax.swing.JFrame(), true).setVisible(true);
+            }
+        });
+    }
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    protected javax.swing.JButton addButtons;
+    protected javax.swing.JButton closeButton;
+    private javax.swing.JLabel collectionNameSearchLabel;
+    protected javax.swing.JTextField collectionNameSearchText;
+    private javax.swing.JLabel collectionYearSearchLabel;
+    protected javax.swing.JTextField collectionYearSearchText;
+    protected javax.swing.JButton deleteButton;
+    protected javax.swing.JButton detailsButton;
+    private javax.swing.JLabel displayedLabel;
+    protected javax.swing.JLabel displayedValueLabel;
+    protected javax.swing.JButton editButtons;
+    protected javax.swing.JButton helpButton;
+    private javax.swing.JLabel jLabel5;
+    private javax.swing.JPanel jPanel1;
+    private javax.swing.JPanel jPanel2;
+    private javax.swing.JPanel jPanel3;
+    private javax.swing.JScrollPane jScrollPane1;
+    private javax.swing.JLabel journaAuthorlNameSearchLabel;
+    protected javax.swing.JTextField journalAuthorNameSearchText;
+    private javax.swing.JLabel journalNameSearchLaber;
+    protected javax.swing.JTextField journalNameSearchText;
+    protected javax.swing.JButton nextButton;
+    protected javax.swing.JButton previousButton;
+    protected javax.swing.JButton searchButton;
+    protected javax.swing.JRadioButton sortAscendingRadioButton;
+    protected javax.swing.JComboBox sortComboBox;
+    protected javax.swing.JRadioButton sortDescendingRadioButton;
+    protected javax.swing.JTable tablePublicationList;
+    protected javax.swing.JTextField toDisplayValueTextField;
+    private javax.swing.JLabel toDisplayedLabel;
+    private javax.swing.JLabel totalResultLabel;
+    protected javax.swing.JLabel totalResultValueLabel;
+    // End of variables declaration//GEN-END:variables
+    
+}

Modified: trunk/src/net/sf/plantlore/common/record/Publication.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-26 13:23:47 UTC (rev 187)
+++ trunk/src/net/sf/plantlore/common/record/Publication.java	2006-04-26 17:46:33 UTC (rev 188)
@@ -20,9 +20,9 @@
  */
 public class Publication extends Record {
     /** Parameters of the publication */    
-    private int id;
+    private Integer id;
     private String collectionName;
-    private int collectionYearPublication;
+    private Integer collectionYearPublication;
     private String journalName;
     private String journalAuthorName;
     private String referenceCitation;
@@ -98,7 +98,7 @@
      *   @return year when the collection was published
      *   @see setCollectionYearPublication
      */
-    public int getCollectionYearPublication() {
+    public Integer getCollectionYearPublication() {
         return this.collectionYearPublication;
     }
     

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties	2006-04-26 13:23:47 UTC (rev 187)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties	2006-04-26 17:46:33 UTC (rev 188)
@@ -38,6 +38,9 @@
 dataExportTooltip=Exports selected records
 dataSearch=&Search
 dataSearchTooltip=Invokes the search dialog
+dataSort= Sort by:
+sortAscending = Ascending
+sortDescending = Descending
 
 recordAdd=&Add
 recordAddTT=Add a new occurence record
@@ -90,7 +93,16 @@
 
 metadataManager= Metadata manager
 
-#MetadataManager - name of column for table
+#PublicationManager - name of column 
+collectionName = Collection
+collectionYearPublication = Year of publication
+journalName = Journal
+journalAuthorName = Author of journal
+referenceDetail = Reference detail
+urlPublication = URL
+notePublication = Note
+
+#MetadataManager - name of column 
 technicalContactName = TechnicalContacName
 technicalContactEmail = TechnicalContactEmail
 technicalContactAddress = TechnicalContactAddress



From krater at berlios.de  Thu Apr 27 11:17:44 2006
From: krater at berlios.de (krater at berlios.de)
Date: Thu, 27 Apr 2006 11:17:44 +0200
Subject: [Plantlore-dev] r190 - in trunk/src/net/sf/plantlore/client/export: . builders
Message-ID: <200604270917.k3R9HieT006675@sheep.berlios.de>

Author: krater
Date: 2006-04-27 11:17:42 +0200 (Thu, 27 Apr 2006)
New Revision: 190

Added:
   trunk/src/net/sf/plantlore/client/export/AbstractBuilder.java
Modified:
   trunk/src/net/sf/plantlore/client/export/Builder.java
   trunk/src/net/sf/plantlore/client/export/Director.java
   trunk/src/net/sf/plantlore/client/export/Template.java
   trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
   trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java
Log:
The export framework is almost finished. The Director is not ready - it cannot handle `one-to-many` relations (Occurence -> AuthorOccurence), but everything else is prepared for it.
All classes from the package "client.login.export" are fully documented now.
The only thing that remains is to implement the XMLBuilder, ABCDBuilder, and DCBuilder. I suggest you study the TrainingBuilder to see how to write your own Builder (and I strongly recommend the use of the AbstractBuilder).
Note that the CSVBuilder is somehow "special" and you should not use its approach (because the way the AbstractBuilder is implemented is more "Dom4j at XML friendly" - at least I hope it is). 


Added: trunk/src/net/sf/plantlore/client/export/AbstractBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/AbstractBuilder.java	2006-04-26 21:18:40 UTC (rev 189)
+++ trunk/src/net/sf/plantlore/client/export/AbstractBuilder.java	2006-04-27 09:17:42 UTC (rev 190)
@@ -0,0 +1,135 @@
+package net.sf.plantlore.client.export;
+
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.Hashtable;
+
+import net.sf.plantlore.common.record.Record;
+
+/**
+ * A default implementation of the Builder interface.
+ * It is strongly recommended to subclass the AbstractBuilder
+ * and implement the <code>output()</code> method
+ * instead of implementing the whole Builder interface
+ * yourself.
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-27
+ * @version 1.0
+ * @see net.sf.plantlore.client.Builder
+ * @see AbstractBuilder#output(Class, String, Object)
+ */
+public abstract class AbstractBuilder implements Builder {
+	
+	/** For an invocation of parameterless methods. */
+	protected static final Object[] NO_PARAMETERS = new Object[0];
+	
+	protected Template template;
+	
+	/** A list of getters of selected columns for every table. */
+	protected Hashtable<Class, ArrayList<Method>> properties = 
+		new Hashtable<Class, ArrayList<Method>>(20);
+	
+	/**
+	 * Create a new DefaultBuilder.
+	 * 
+	 * @param template The template describing which columns are selected.
+	 */
+	public AbstractBuilder(Template template) {
+		setTemplate(template);
+	}
+	
+	/**
+	 * Set another template.
+	 * The builder stores a clone of the template.
+	 *  
+	 * @param template The new template. <b>Mustn't be <i>null</i></b>.
+	 */
+	public void setTemplate(Template template) {
+		assert(template != null);
+		this.template = template.clone();
+		
+		// Store all getters of all selected columns.
+		for( Class table : Template.BASIC_TABLES)
+			try {
+				// Get the list of all properties.
+				ArrayList<String> columns = ((Record) table.newInstance()).getProperties();
+				// Create a list of getters of those properties.
+				ArrayList<Method> methods = new ArrayList<Method>( columns.size() );
+				properties.put(table, methods);
+				// Check if these properties (columns) are set to be exported. 
+				for(String column : columns)  
+					if( template.isSet(table, column) )
+						methods.add( Template.getMethod( table, column ) );
+			} 
+			catch(IllegalAccessException e) { /*e.printStackTrace();*/ }
+			catch(InstantiationException e) { /*e.printStackTrace();*/ }
+	}
+	
+	/**
+	 * @return A clone of the template this Builder currently uses.
+	 */
+	public Template getTemplate() {
+		return template.clone();
+	}
+	
+	/**
+	 * Write the [table, column, value] to the output.
+	 * 
+	 * @param table	Name of the table.
+	 * @param column Name of the column.
+	 * @param value Value of the <code>table.column</code>.
+	 * @throws IOException If the output could not be written.
+	 */
+	protected abstract void output(Class table, String column, Object value) throws IOException;
+
+	/**
+	 * Send the value of all properties (i.e. all columns that are not foreign keys)
+	 * of this record to the output. Uses the <code>output()</code> method.
+	 * 
+	 * @see AbstractBuilder#output(Class, String, Object)
+	 */
+	public void part(Record record) throws IOException {
+		if(record == null) return;
+		Class table = record.getClass();
+		ArrayList<Method> methods = properties.get( table );
+		for(Method getter : methods) 
+			try {
+				// Invoke the getter.
+				Object value = getter.invoke( record, NO_PARAMETERS );
+				output( table, getter.getName().substring(3), value );
+			} 
+			catch(IllegalAccessException e) { /*e.printStackTrace();*/ }
+			catch(InvocationTargetException e) { /*e.printStackTrace();*/ }
+	}
+
+	/**
+	 * Call <code>part(Record)</code> repeatedly.
+	 * 
+	 * @see AbstractBuilder#part(Record)
+	 */
+	public void part(Record... records) throws IOException {
+		for(Record r : records) 
+			part( r );		
+	}
+
+	/** Empty. */
+	public void startRecord() throws IOException {
+	}
+
+	/** Empty. */
+	public void finishRecord() throws IOException {
+	}
+
+	/** Empty. */
+	public void header() throws IOException {
+	}
+
+	/** Empty. */
+	public void footer() throws IOException {
+	}
+
+	
+}

Modified: trunk/src/net/sf/plantlore/client/export/Builder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-26 21:18:40 UTC (rev 189)
+++ trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-27 09:17:42 UTC (rev 190)
@@ -13,40 +13,48 @@
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-04-21
  * @version 1.0
- * @see Director
+ * @see net.sf.plantlore.client.export.Director
  */
 public interface Builder {
 		
 	/** 
-	 * Write a header. This method is called just once before the iteration starts. 
+	 * Write a header. This method must be called just once before the iteration starts. 
 	 */
 	void header() throws IOException;
 	
 	/** 
-	 * Write a footer. This method is called just once after the iteration ends. 
+	 * Write a footer. This method must be called just once after the iteration ends. 
 	 */
 	void footer() throws IOException;
 	
 	/** 
 	 * Make adjustments needed before
 	 * the output of another record starts. 
-	 * This method is called right before the <code>writeRecord()</code>. 
+	 * This method must be called right before any call of <code>part()</code>. 
 	 */
 	void startRecord() throws IOException;
 	
 	/**
+	 * Write a part of the whole record.
 	 * 
-	 * @param arg
-	 * @throws IOException
+	 * @param arg A part of a record to be written. The record corresponds with one table.
+	 * @throws IOException If the writer encounters an error.
 	 */
 	void part(Record arg) throws IOException;
 	
-	
+	/**
+	 * Convenient passing of more records. 
+	 * A typical implementation should call <code>part(Record)</code> repeatedly.  
+	 * 
+	 * @param args An unempty list of records.
+	 * @throws IOException If the writer encounters an error.
+	 * @see Builder#part(Record)
+	 */
 	void part(Record... args) throws IOException;
 	
 	/** 
 	 * Make adjustments needed after the output of the current record is completed.
-	 * This method is called right after the <code>writeRecord()</code>. 
+	 * This method must be called right after the last call of <code>part()</code>. 
 	 */
 	void finishRecord() throws IOException;
 	

Modified: trunk/src/net/sf/plantlore/client/export/Director.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Director.java	2006-04-26 21:18:40 UTC (rev 189)
+++ trunk/src/net/sf/plantlore/client/export/Director.java	2006-04-27 09:17:42 UTC (rev 190)
@@ -4,31 +4,29 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.rmi.RemoteException;
-import java.util.ArrayList;
 
 import net.sf.plantlore.common.Selection;
 import net.sf.plantlore.common.record.*;
 import net.sf.plantlore.middleware.DBLayer;
-import net.sf.plantlore.middleware.SelectQuery;
 import net.sf.plantlore.server.DBLayerException;
 
-
 import org.apache.log4j.Logger;
 
 /**
  * The Director class (for export).
- * Purpose: The Director continualy fetches results of the <code>query</code>.
- * The selected queries (queries whose ID is in the <code>selection</code>)
+ * Purpose: The Director continualy fetches results of the resultset
+ * identified by the <code>result</code>.
+ * The selected results (records whose ID is in the <code>selection</code>)
  * are passed to the <code>builder</code> - the builder is responsible for
  * creating a corresponing output.
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-04-21
- *	@version wrong (must be rewritten!) 
+ * @version 0.9 might still slightly change
  *
  * @see net.sf.plantlore.client.common.Selection
  * @see net.sf.plantlore.client.export.Builder
- * @see net.sf.plantlore.middlerware.DBLayer
+ * @see net.sf.plantlore.middleware.DBLayer
  */
 public class Director implements Runnable {
 	
@@ -38,6 +36,8 @@
 	private Selection selection;
 	private DBLayer database;
 	private int result;
+	
+	private int count = 0;
 
 	/**
 	 * Create a new export Director. The Director iterates over the results 
@@ -46,8 +46,8 @@
 	 * passes to the <code>builder</code>.
 	 * 
 	 * @param builder	The particular builder used to construct the final output.
-	 * @param query	The query which will be iterated over.
-	 * @param database	The database layer that will carry out the execution of the query.
+	 * @param result	The result describing the resultset that will be iterated over.
+	 * @param database	The database layer that will quench the Director's thirst for more results.
 	 * @param selection	The set of selected records.
 	 */
 	public Director(Builder builder, int result, DBLayer database, Selection selection) {
@@ -56,52 +56,75 @@
 	}
 	
 	
+	/** 
+	 * How many records has been exported.
+	 * 
+	 * @return The exact number of exported records.
+	 */
+	public int exportedRecords() { 
+		return count;
+	}
+	
+	
 	private static Object[] NO_PARAM = new Object[0];
 	
-	
+	/**
+	 * The whole record is returned in a tree structure.
+	 * We must traverse this structure.
+	 * The children are denoted as <i>foreign keys</i> 
+	 * - they contain other parts of the whole record.
+	 * 
+	 * @param record The "node" in the tree hierarchy representing the
+	 * whole record.
+	 */
 	private void buildPart(Record record) throws IOException {
+		// Build this part of the record.
 		build.part(record);
+		// Now look at all children of this record.
 		for(String key : record.getForeignKeys()) {
 			Method getter = Template.getMethod(record.getClass(), key);
 			try {
+				// And build'em too.
 				buildPart( (Record) getter.invoke( record, NO_PARAM ) );
 			}
-			catch(IllegalAccessException e) {}
-			catch(InvocationTargetException e) {}
+			catch(IllegalAccessException e) { e.printStackTrace(); }
+			catch(InvocationTargetException e) { e.printStackTrace(); }
 		}
 	}
 	
 	
-	/** Execute the exporting procedure as described. */
+	/** 
+	 * Execute the exporting procedure -
+	 * fetch all results from the resultset and those that are selected
+	 * send to the builder to process them.
+	 */
 	public void run() {
 		try {
-			long count = 0; // how many records were exported
-			
 			logger.info("Export begins...");
+			build.header();
 			
-			// Create the header of the file (some opening tags possibly).
-			build.header();
 			// Iterate over the result of the query.
-			
 			int rows = database.getNumRows( result );
 			for(int i = 0; i < rows; i++) {
 				Object[] records = database.next( result );
 				Record record = (Record) records[0];
-				if( !selection.contains( record ) ) continue; // is it selected?
-				
+				if( !selection.contains( record ) ) continue; // Is the record selected?
+			
 				count++;
-				// Write down this record.
 				build.startRecord();
 				
 				// Parse the record.
 				buildPart( record );
 				
+				// ONE-TO-MANY HACK:
 				// Occurrence -> AuthorOccurrences & Authors
+				// TODO: Iterace pres vsechny AuthorOccurence
 				
 				
+				
 				build.finishRecord();
 			}
-			// Create the footer of the file (some closing tags possibly).
+
 			build.footer();
 			logger.info("Export completed. " + count + " records sent to output.");
 		}
@@ -117,10 +140,5 @@
 			logger.error(e); e.printStackTrace();
 		}
 	}
-	
-	
-	
-	
 
-
 }

Modified: trunk/src/net/sf/plantlore/client/export/Template.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-26 21:18:40 UTC (rev 189)
+++ trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-27 09:17:42 UTC (rev 190)
@@ -10,23 +10,28 @@
 
 
 /**
- * The template that holds the information about the selected columns and tables.
- * This information is used by the builder to decide, whether or not the currently
- * considered column of a table should be exported.
+ * The template holds information about the selected columns and tables.
+ * This information may used by builders and access rights managers
+ * to decide, whether or not the currently
+ * considered column should be exported / is accessible.
+ * <br/>
+ * Note: The template doesn't know anything about the structure
+ * (mapping) of the database.  
+ *  
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-04-22
+ * @version 1.0
  */
 public class Template {
 	
-	/** The list of all pairs Table:Column that shall be exported. */
+	/** The list of all pairs Table.Column that are set. */
 	private Collection<String> columns = new HashSet<String>(20);
 	
-	/** The list of all tables the current template covers. */
-	private ArrayList<Class> tables = new ArrayList<Class>(20);
-	
 	/** 
 	 * The list of "basic tables" i.e. tables related directly to the Occurence data.
+	 * The other tables are database specific and are used by our System only
+	 * (concerns History, LastUpdate, User, AccessRights, and possibly more).
 	 */
 	public final static Class[] BASIC_TABLES = new Class[] { 
 			Author.class, AuthorOccurrence.class, Habitat.class,
@@ -34,108 +39,94 @@
 			Plant.class, Publication.class, Territory.class,
 			Village.class };
 	
+	/** Create a new template. */
+	public Template() {}
 	
-	private static Hashtable<String,Method> getters;
+	/** A copy constructor. */
+	public Template(Template template) {
+		columns = new HashSet<String>( template.columns );
+	}
 	
 	
+	@Override
+	public Template clone() {
+		return new Template(this);
+	}
+	
+	
+	/** The list of all getters (of all properties of all tables). */
+	private static Hashtable<String,Method> getters = new Hashtable<String, Method>(100);
+	
+	/**
+	 * Return the getter of this Table.Column property.
+	 * <br/>
+	 * This method is fast because all getters are pre-loaded.
+	 * 
+	 * @param table	The class identifying the table.
+	 * @param column The name of the column.
+	 * @return The getter of table.column
+	 */
 	public static Method getMethod(Class table, String column) {
 		return getters.get(table+"."+column);
 	}
 		
+	/** Pre-load all getters. */
 	static {
+		// Take all basic tables.
 		for( Class table : Template.BASIC_TABLES)
 			try {
+				// Take all their columns.
 				ArrayList<String> columns = ((Record) table.newInstance()).getColumns();
-				for(String column : columns)  
+				for(String column : columns)
+					// And store their getters. 
 					getters.put(table+"."+column, getter(table, column));
 			} 
-			catch(IllegalAccessException e) { e.printStackTrace(); }
-			catch(InstantiationException e) { e.printStackTrace(); }
+			catch(IllegalAccessException e) {}
+			catch(InstantiationException e) {}
 	}
 	
-	
+	/**
+	 * Return the method that corresponds with the getter of <code>table.column</code>.  
+	 * 
+	 * @return The getter of <code>table.column</code>. 
+	 */
 	private static Method getter(Class table, String column) {
 		try {
+			// Create the name of the getter.
 			StringBuilder s = new StringBuilder("get" + column); 
 			s.setCharAt(3, Character.toUpperCase(s.charAt(3)));
-			
+			// Take it. 
 			return table.getMethod( s.toString(), new Class[0] );
-		} catch(NoSuchMethodException e) { e.printStackTrace(); }
+		} catch(NoSuchMethodException e) {}
 		return null;
 	}
 	
-	
-		
-	/** 
-	 * @return The table that is central (primary) to the current query. 
-	 */
-	public Class getRootTable() { return tables.get(0); }
-	
-	/** 
-	 * Mark the database as set every time the database gets involved in a query!
-	 * @param table	The database that is involved in a query.
-	 */ 
-	public void set(Class table) { 
-		tables.add(table); 
-	}
-	
-	/** 
-	 * Unset a previously selected table.
-	 * @param table The table to be unset. 
-	 */
-	public void unset(Class table) { 
-		tables.remove(table);
-	}
-	
-	/** 
-	 * 
-	 * @param table
-	 * @return true if the some of the table's columns are seleted to be exported. 
-	 */
-	public boolean isSet(Class table) { 
-		return tables.contains(table); 
-	} 
-	
-	/**
-	 * 
-	 * @param table	The table we are interested in and that will be deleted if it is there.
-	 * @return true if the table is set.
-	 */
-	public boolean isSetD(Class table) { return tables.remove(table); }
-	
-	/**
-	 * 
-	 * @param table
-	 * @param column
-	 */
+			
+	/** Select the <code>table.column</code>. */
 	public void set(Class table, String column) { 
-		columns.add(table+"."+column);
-		tables.add(table);
+		columns.add(table.getSimpleName()+"."+column);
 	}
 	
-	
+	/** Unselect the <code>table.column</code>. */
 	public void unset(Class table, String column) { 
-		columns.remove(table+"."+column); 
+		columns.remove(table.getSimpleName()+"."+column); 
 	}
 	
-	
+	/** @return true if the <code>table.column</code> is set.*/
 	public boolean isSet(Class table, String column) { 
-		return columns.contains(table+"."+column); 
+		return columns.contains(table.getSimpleName()+"."+column); 
 	}
 	
-	/** 
-	 * Deselect all columns of all tables.
-	 */
-	public void unsetAll() { 
+	/** Unselect all columns of all tables. */
+	public void unsetEverything() { 
 		columns.clear(); 
-		tables.clear();
 	}
 	
 		
 	/**
 	 * Match this template against another one.
 	 * 
-	 * @param t	The template against which the matching will be held.
+	 * @param t	The template against which the matching will be done.
 	 * @return	True if this template is a superset of the other template.
 	 */ 
 	public boolean match(Template t) { 

Modified: trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-26 21:18:40 UTC (rev 189)
+++ trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-27 09:17:42 UTC (rev 190)
@@ -2,128 +2,110 @@
 
 import java.io.IOException;
 import java.io.Writer;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
 import java.util.ArrayList;
-import java.util.Hashtable;
 
-import net.sf.plantlore.client.export.Builder;
+import net.sf.plantlore.client.export.AbstractBuilder;
 import net.sf.plantlore.common.record.*;
 import net.sf.plantlore.client.export.Template;
 
 
 /**
  * CSV Builder.
- * An ingenious use of introspection :]
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-04-23
+ * @version 1.0 final
  */
-public class CSVBuilder implements Builder{
+public class CSVBuilder extends AbstractBuilder{
 	
-	private Writer output;
+	private Writer stream;
 	
-	private boolean first;
+	/** Is this the first column on this line? */
+	private boolean firstColumnOnThisLine;
 		
 	private static final String DELIMITER = ",";
 	private static final String DOUBLEQUOTE = "\"";
 	private static final String NEWLINE = System.getProperty("line.separator");
 	
-	private static final Object[] NO_PARAMETERS = new Object[0];
-	
-	
 	private ArrayList<Record> cache = new ArrayList<Record>(20);
 	private ArrayList<Author> authors = new ArrayList<Author>(10);
 	private ArrayList<AuthorOccurrence> authocc = new ArrayList<AuthorOccurrence>(10);
 	
-	private Hashtable<Class, ArrayList<Method>> properties = 
-		new Hashtable<Class, ArrayList<Method>>(20);
-		
+	
 	/**
 	 * Create a new CSV Builder. 
-	 * The output is written as a comma separated values.
+	 * The output is written in the format of comma separated values:<br/>
+	 * <pre>
+	 * Erik Kratochv?l, discontinuum at gmail.com, Gagea pratensis (Pers.) Dumort., ostru?in?k m?kk?
+	 * <pre>
 	 * 
 	 * @param output	The writer where the output will be sent.
 	 * @param tmp	The template that describes the selected columns and tables.
 	 */
 	public CSVBuilder(Writer output, Template tmp) {
-		this.output = output;
-		for( Class table : Template.BASIC_TABLES)
-			try {
-				// Get the list of all properties.
-				ArrayList<String> columns = ((Record) table.newInstance()).getProperties();
-				// Create a list of getters of those properties.
-				ArrayList<Method> methods = new ArrayList<Method>( columns.size() );
-				properties.put(table, methods);
-				// Check if these properties (columns) are set to be exported. 
-				for(String column : columns)  
-					if( tmp.isSet(table, column) ) // yes -> store the getter
-						try {
-							methods.add( table.getMethod( methodName(column), new Class[0] ) );
-						} catch(NoSuchMethodException e) { e.printStackTrace(); }
-			} 
-			catch(IllegalAccessException e) { e.printStackTrace(); }
-			catch(InstantiationException e) { e.printStackTrace(); }
-	}
-	
-	
-	public void header() throws IOException {
+		super(tmp);
+		assert(tmp != null);
 		
+		this.stream = output;
 	}
 	
-	
+	/**
+	 * Insert a line breaker.
+	 */
 	public void footer() throws IOException {
-		output.write(NEWLINE);
+		stream.write(NEWLINE);
 	}
 	
-	
+	/**
+	 * Clear the cache before receiving a new record set.
+	 */
 	public void startRecord() throws IOException {
-		 cache.clear(); authors.clear(); authocc.clear(); first = true;
+		 cache.clear(); authors.clear(); authocc.clear(); firstColumnOnThisLine = true;
 	}
 	
-	
+	/**
+	 * Flush the cache.
+	 */
 	public void finishRecord() throws IOException {
-		if(authors.size() + authocc.size() == 0)
-			for(Record record : cache) { 
-				write( record );
-				output.write(NEWLINE);
-			}
+		if(authors.size() + authocc.size() == 0) {
+			for(Record record : cache) 
+				writeCached( record );
+			stream.write(NEWLINE);
+		}
 		else
 			for(int i = 0; i < Math.max(authors.size(), authocc.size()); i++) {
-				for(Record record : cache) write( record );
-				if(!authors.isEmpty()) write( authors.get(i) );
-				if(!authocc.isEmpty()) write( authocc.get(i) );
-				output.write(NEWLINE);
-				first = true;
+				for(Record record : cache) 
+					writeCached( record );
+				if(!authors.isEmpty()) writeCached( authors.get(i) );
+				if(!authocc.isEmpty()) writeCached( authocc.get(i) );
+				stream.write(NEWLINE);
+				firstColumnOnThisLine = true;
 			}
 	}
 	
-	
+	/**
+	 * Cache the results.
+	 */
+	@Override
 	public void part(Record record) throws IOException {
 		if(record instanceof Author) authors.add( (Author) record );
 		else if(record instanceof AuthorOccurrence) authocc.add( (AuthorOccurrence) record );
 		else cache.add(record);
 	}
 	
-	
-	public void part(Record... records) throws IOException {
-		for(Record r : records) 
-			part( r );		
-	}
-	
-	
+		
 	/**
-	 * Send the <code>value</code> in the CSV format
-	 * to the output.
+	 * Convert the value to the CSV format.
+	 *  
+	 *  @return The converted value.
 	 */ 
-	protected void w(Object value) throws IOException {
-		if( value == null ) return; // no value means no output 
+	protected String convertToValidCSV(Object value) throws IOException {
+		if( value == null ) return null; // no value means no output 
 		
 		StringBuilder r = new StringBuilder( value.toString() );
 		boolean containsDoubleQuote = r.indexOf(DOUBLEQUOTE) >= 0, 
 			containsDelimiter = r.indexOf(DELIMITER) >= 0,
 			containsNewline = r.indexOf(NEWLINE) >= 0;
-		
 		// Convert doublequotes to double-doublequotes: " -> ""
 		if( containsDoubleQuote ) { 
 			int k = 0;
@@ -131,41 +113,31 @@
 				r.insert(k, DOUBLEQUOTE); k += 2;
 			}
 		}
-		
 		// Wrap problematic records.
 		if( containsDoubleQuote || containsDelimiter || containsNewline ) {
 			r.insert(0, DOUBLEQUOTE); r.append(DOUBLEQUOTE);
 		}
-		
-		output.write( r.toString() );
+		return r.toString() ;
 	}
 	
+	
 	/**
-	 * Construct the getter method name from the name of the <code>column</code>
+	 * Write the cached records - use the <code>part()</code> method now.
 	 * 
-	 * @param column	The name of the column whose value we need to obtain. 
-	 * @return	The getter's name.
+	 * @param record
+	 * @see net.sf.plantlore.client.export.AbstractBuilder#part(Record)
 	 */
-	private String methodName(String column) {
-		StringBuilder s = new StringBuilder("get" + column); // prepend `get` in front of  the name
-		s.setCharAt(3, Character.toUpperCase(s.charAt(3))); // convert the first letter of the name to uppercase
-		return s.toString();
+	protected void writeCached(Record record) throws IOException {
+		super.part(record);
 	}
-
 	
-	
-	protected void write(Record record) throws IOException {
-		Class table =  record.getClass();
-		ArrayList<Method> methods = properties.get( table );
-		for(Method getter : methods) 
-			try {
-				// Invoke the getter.
-				Object value = getter.invoke( record, NO_PARAMETERS );
-				if( !first ) output.write(DELIMITER); else first = false;
-				w( value );
-			} 
-			catch(IllegalAccessException e) { e.printStackTrace(); }
-			catch(InvocationTargetException e) { e.printStackTrace(); }
+	/**
+	 * Send the <code>value</code> to the output.
+	 */
+	protected void output(Class table, String column, Object value) throws IOException {
+		if( firstColumnOnThisLine ) firstColumnOnThisLine = false; 
+		else stream.write(DELIMITER);
+		stream.write( convertToValidCSV( value ) );
 	}
 	
 

Modified: trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java	2006-04-26 21:18:40 UTC (rev 189)
+++ trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java	2006-04-27 09:17:42 UTC (rev 190)
@@ -2,12 +2,34 @@
 
 import java.io.IOException;
 
-import net.sf.plantlore.client.export.Builder;
-import net.sf.plantlore.common.record.Record;
+import net.sf.plantlore.client.export.AbstractBuilder;
+import net.sf.plantlore.client.export.Template;
 
-public class TrainingBuilder implements Builder {
+/**
+ * A training extension of the AbstractBuilder.
+ * Convenient if you wish to see the results immediately
+ * on the default output.
+ * <br/>
+ * The output has the following form:<br/>
+ * <pre>
+ * &lt;157&gt;
+ *   Author.WholeName = Erik Kratochv?l
+ *   Author.Email = discontinuum at gmail.com
+ *   Plant.Taxon = Gagea pratensis (Pers.) Dumort. 
+ *   Plant.CzechName = ostru?in?k m?kk?
+ * &lt;/157&gt;
+ * </pre>
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-27
+ */
+public class TrainingBuilder extends AbstractBuilder {
 	
 	private int i = 0;
+	
+	public TrainingBuilder(Template template) {
+		super(template);
+	}
 
 	public void header() throws IOException {
 		System.out.println("Training Builder engaged.");		
@@ -18,20 +40,16 @@
 	}
 
 	public void startRecord() throws IOException {
-		System.out.println(" [" + i + "].starts ");
+		System.out.println(" <" + i + ">");
 	}
 
-	public void part(Record arg) throws IOException {
-		System.out.println("  ? " + arg.getClass().getSimpleName() );
-	}
-
-	public void part(Record... args) throws IOException {
-		for(Record r : args) part( r );
-	}
-
 	public void finishRecord() throws IOException {
-		System.out.println(" [" + i + "].ends ");
+		System.out.println(" </" + i + ">");
 		i++;
 	}
+	
+	protected void output(Class table, String column, Object value) throws IOException {
+		System.out.println("   " + table.getName() + "." + column + " = " + value.toString());
+	}
 
 }



From fraktalek at berlios.de  Wed Apr 26 23:18:42 2006
From: fraktalek at berlios.de (fraktalek at berlios.de)
Date: Wed, 26 Apr 2006 23:18:42 +0200
Subject: [Plantlore-dev] r189 - in trunk/src/net/sf/plantlore: client common
Message-ID: <200604262118.k3QLIg13023930@sheep.berlios.de>

Author: fraktalek
Date: 2006-04-26 23:18:40 +0200 (Wed, 26 Apr 2006)
New Revision: 189

Added:
   trunk/src/net/sf/plantlore/client/AuthorTableModel.java
   trunk/src/net/sf/plantlore/client/ButtonEditor.java
   trunk/src/net/sf/plantlore/common/DBLayerUtils.java
Modified:
   trunk/src/net/sf/plantlore/client/AddEdit.java
   trunk/src/net/sf/plantlore/client/AddEditCtrl.java
   trunk/src/net/sf/plantlore/client/AddEditView.form
   trunk/src/net/sf/plantlore/client/AddEditView.java
   trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
   trunk/src/net/sf/plantlore/client/OverviewTableModel.java
Log:
Multiple author AddEdit. Overview now fetches occurrences and displays only 
the first user it finds for it. Update doesn't work yet, so clicking on Ok in
AddEdit is likely to either throw exceptions or corrupt the database.



Modified: trunk/src/net/sf/plantlore/client/AddEdit.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEdit.java	2006-04-26 17:46:33 UTC (rev 188)
+++ trunk/src/net/sf/plantlore/client/AddEdit.java	2006-04-26 21:18:40 UTC (rev 189)
@@ -10,8 +10,12 @@
 package net.sf.plantlore.client;
 
 import java.rmi.RemoteException;
+import java.util.ArrayList;
+import java.util.Calendar;
 import java.util.Date;
+import java.util.HashMap;
 import java.util.Observable;
+import net.sf.plantlore.common.DBLayerUtils;
 import net.sf.plantlore.common.Pair;
 import net.sf.plantlore.common.PlantloreConstants;
 import net.sf.plantlore.common.record.Author;
@@ -42,8 +46,13 @@
     private DBLayer database;      
     
     private int coordinateSystem;
-    private AuthorOccurrence ao;
-    private Pair<String,Integer> author;
+    private Occurrence o;
+    
+    //list of authors user selects
+    private ArrayList<Pair<Pair<String,Integer>,String>> authorList;
+    
+    //list of AuthorOccurrence objects that correspond to our Occurrence object, we need it for update
+    private HashMap<Integer,AuthorOccurrence> authorOccurrences;
     private Pair<String,Integer> village;
     private String taxon;
     private String localityDescription;
@@ -68,6 +77,7 @@
     
     private Pair<String, Integer>[] plants = null;
     private Pair<String, Integer>[] authors = null;
+    private String[] authorRoles = null;
     private Pair<String, Integer>[] villages = null;
     private Pair<String, Integer>[] territories = null;
     private Pair<String, Integer>[] phytNames = null;
@@ -79,10 +89,12 @@
 
     //helper variable to avoid recursion potentially caused by phytCode and phytName updates
     private Boolean skipUpdate = false;
+    private Boolean editMode = false;
     
     /** Creates a new instance of AddEdit */
-    public AddEdit(DBLayer database) {
+    public AddEdit(DBLayer database, Boolean editMode) {
         this.database = database;
+        this.editMode = editMode;
         logger = Logger.getLogger(this.getClass().getPackage().getName());                
     }
  
@@ -90,42 +102,56 @@
      *
      * @param ao Assumes it is from database and therefore assumes WGS84 coordinate system.
      */
-    public void setRecord(AuthorOccurrence ao) {
-        this.ao = ao;
+    public void setRecord(Occurrence o) {
+        this.o = o;
         coordinateSystem = WGS84;
-        author = new Pair(ao.getAuthor().getWholeName(),ao.getAuthor().getId());
-        village = new Pair(ao.getOccurrence().getHabitat().getNearestVillage().getName(), ao.getOccurrence().getHabitat().getNearestVillage().getId());
-        taxon = ao.getOccurrence().getPlant().getTaxon();
-        localityDescription = ao.getOccurrence().getHabitat().getDescription();
-        year = ao.getOccurrence().getYearCollected();
+        authorList = getAuthorsOf(o);
+        village = new Pair(o.getHabitat().getNearestVillage().getName(), o.getHabitat().getNearestVillage().getId());
+        taxon = o.getPlant().getTaxon();
+        localityDescription = o.getHabitat().getDescription();
+        year = o.getYearCollected();
         
-        occurrenceNote = ao.getOccurrence().getNote();
-        habitatNote = ao.getOccurrence().getHabitat().getNote();
-        territoryName = new Pair(ao.getOccurrence().getHabitat().getTerritory().getName(),ao.getOccurrence().getHabitat().getTerritory().getId());
-        phytName = new Pair(ao.getOccurrence().getHabitat().getPhytochorion().getName(), ao.getOccurrence().getHabitat().getPhytochorion().getId());
-        phytCode = new Pair(ao.getOccurrence().getHabitat().getPhytochorion().getCode(), ao.getOccurrence().getHabitat().getPhytochorion().getId());
-        phytCountry = ao.getOccurrence().getHabitat().getCountry();
-        quadrant = ao.getOccurrence().getHabitat().getQuadrant();
-        altitude = ao.getOccurrence().getHabitat().getAltitude();
-        longitude = ao.getOccurrence().getHabitat().getLongitude();
-        latitude = ao.getOccurrence().getHabitat().getLatitude();
-        source = ao.getOccurrence().getDataSource();
-        publication = new Pair(ao.getOccurrence().getPublication().getReferenceCitation(), ao.getOccurrence().getPublication().getId());
-        herbarium = ao.getOccurrence().getHerbarium();
-        month = ao.getOccurrence().getMonthCollected();
-        day = ao.getOccurrence().getDayCollected();
-        time = ao.getOccurrence().getTimeCollected();
+        occurrenceNote = o.getNote();
+        habitatNote = o.getHabitat().getNote();
+        territoryName = new Pair(o.getHabitat().getTerritory().getName(),o.getHabitat().getTerritory().getId());
+        phytName = new Pair(o.getHabitat().getPhytochorion().getName(), o.getHabitat().getPhytochorion().getId());
+        phytCode = new Pair(o.getHabitat().getPhytochorion().getCode(), o.getHabitat().getPhytochorion().getId());
+        phytCountry = o.getHabitat().getCountry();
+        quadrant = o.getHabitat().getQuadrant();
+        altitude = o.getHabitat().getAltitude();
+        longitude = o.getHabitat().getLongitude();
+        latitude = o.getHabitat().getLatitude();
+        source = o.getDataSource();
+        publication = new Pair(o.getPublication().getReferenceCitation(), o.getPublication().getId());
+        herbarium = o.getHerbarium();
+        month = o.getMonthCollected();
+        day = o.getDayCollected();
+        time = o.getTimeCollected();
     }
 
-    public Pair<String, Integer> getAuthor() {
+    public Pair<String, Integer> getAuthor(int i) {
+        return ((Pair<Pair<String,Integer>,String>)authorList.get(i)).getFirst();
+    }
+    
+    public String getAuthorRole(int i) {
+        return ((Pair<Pair<String,Integer>,String>)authorList.get(i)).getSecond();
+    }
+    
+    public int getAuthorCount() {
+        return authorList.size();
+    }
+    
+    public void addAuthor(Pair<Pair<String, Integer>,String> author) {
+        authorList.add(author);
+        logger.debug("Added author "+author.getFirst()+" as "+author.getSecond());
+    }
+    
+    public Pair<Pair<String, Integer>,String> removeAuthor(int i) {
+        Pair<Pair<String, Integer>,String> author = authorList.remove(i);
+        logger.debug("Removed author "+author.getFirst()+" "+author.getSecond());
         return author;
     }
 
-    public void setAuthor(Pair<String, Integer> author) {
-        this.author = author;
-        logger.debug("Author set to "+author);
-    }
-
     public Pair<String, Integer> getVillage() {
         return village;
     }
@@ -210,7 +236,7 @@
         }
         logger.debug("PhytName set to "+phytName);
         setChanged();
-        notifyObservers("updateCode");
+        notifyObservers(new Pair<String,Integer>("updateCode",-1));
     }
 
     public Pair<String, Integer> getPhytCode() {
@@ -234,7 +260,7 @@
         }
         logger.debug("PhytCode set to "+phytCode);
         setChanged();
-        notifyObservers("updateName");
+        notifyObservers(new Pair<String,Integer>("updateName",-1));
     }
 
     public String getPhytCountry() {
@@ -368,6 +394,7 @@
         } else
             return plants;
     }
+    
     public Pair<String, Integer>[] getAuthors() {
         if (authors == null)
         {
@@ -399,6 +426,39 @@
             return authors;
     }
     
+    public String[] getAuthorRoles() {
+        if (authorRoles == null)
+        {
+            SelectQuery sq;
+            int resultid;
+            int resultsCount;
+            Object[] records;
+            AuthorOccurrence ao;
+            //FIXME:
+            try {
+                sq = database.createQuery(AuthorOccurrence.class);
+                sq.addProjection(PlantloreConstants.PROJ_DISTINCT,AuthorOccurrence.ROLE);
+                sq.addOrder(PlantloreConstants.DIRECT_ASC, AuthorOccurrence.ROLE);
+                resultid = database.executeQuery(sq);
+                resultsCount = database.getNumRows(resultid);
+                records = database.more(resultid, 1, resultsCount);
+                authorRoles = new String[resultsCount];
+                String r;
+                for (int i = 1; i <= resultsCount; i++)
+                {
+                    r = (String)((Object[])records[i-1])[0];
+                    authorRoles[i-1] = r;
+                }
+            } catch (RemoteException ex) {
+                ex.printStackTrace();
+            } catch (DBLayerException ex) {
+                ex.printStackTrace();
+            }            
+            return authorRoles;
+        } else
+            return authorRoles;
+    }
+
     public Pair<String, Integer>[] getVillages() {
         if (villages == null)
         {
@@ -598,7 +658,6 @@
                 {
                     o = (Occurrence)((Object[])records[i-1])[0];
                     sources[i-1] = o.getDataSource();
-                    System.out.println("Sources: \""+o.getDataSource()+"\"");
                 }
             } catch (RemoteException ex) {
                 ex.printStackTrace();
@@ -711,7 +770,15 @@
         }
     }
     
-    private AuthorOccurrence prepareAuthorOccurrence(boolean newRecord) {
+    /** Pre-processes data gathered from the user.
+     *
+     * @return AuthorOccurrence the object that will be created or updated
+     * @return true the object has to be updated
+     * @return false the object has to be created
+     */
+    private Pair<AuthorOccurrence,Boolean> prepareAuthorOccurrence(boolean newRecord, Pair<Pair<String,Integer>,String> author) {
+        Pair<AuthorOccurrence,Boolean> result;
+        DBLayerUtils dlu = new DBLayerUtils(database);
         Occurrence o;
         Author a;
         Habitat h;
@@ -725,14 +792,18 @@
         if (newRecord)
             o = new Occurrence();
         else 
-            o = ao.getOccurrence();
+            o = this.o;
         
-        assert author != null;
-        if (newRecord)
+        assert authorList.size() > 0;
+        if (newRecord) {
             a = new Author();
-        else
-            a = ao.getAuthor();
-        a.setId(author.getSecond());
+            a.setId(author.getFirst().getSecond());
+        } else {
+            if (authorOccurrences.containsKey(author.getFirst().getSecond()))
+                a = authorOccurrences.get(author.getFirst().getSecond()).getAuthor(); //we already have the author Object
+            else
+                a = (Author) dlu.getObjectFor(author.getFirst().getSecond(), Author.class); //have to retrieve the author object from database
+        }
         
         if (newRecord)
             h = new Habitat();
@@ -794,7 +865,18 @@
         o.setDayCollected(day);
         o.setHabitat(h);
         o.setHerbarium(herbarium);
-        //o.setIsoDateTimeBegin(); ???
+        
+        //cIsoDateTimeBegin construction
+        Calendar c = Calendar.getInstance();
+        c.set(Calendar.YEAR, year);
+        c.set(Calendar.MONTH, month);
+        c.set(Calendar.DAY_OF_MONTH,day);
+        Calendar temp = Calendar.getInstance();
+        temp.setTime(time);
+        c.set(Calendar.HOUR_OF_DAY,temp.get(Calendar.HOUR_OF_DAY));
+        c.set(Calendar.MINUTE,temp.get(Calendar.MINUTE));
+        o.setIsoDateTimeBegin(c.getTime());
+        
         o.setMetadata(m);
         o.setMonthCollected(month);
         o.setNote(occurrenceNote);
@@ -808,20 +890,43 @@
             AuthorOccurrence newAO = new AuthorOccurrence();
             newAO.setAuthor(a);
             newAO.setOccurrence(o);
-            return newAO;
+            return new Pair<AuthorOccurrence,Boolean>(newAO, false);
         } else {
+            AuthorOccurrence ao;
+            Boolean update;
+            if (authorOccurrences.containsKey(author.getFirst().getSecond())) {
+                ao = authorOccurrences.get(author.getFirst().getSecond());
+                update = true;
+            } else {
+                ao = new AuthorOccurrence();
+                update = false;
+            }
             ao.setAuthor(a);
             ao.setOccurrence(o);
-            return ao;
+            return new Pair<AuthorOccurrence, Boolean>(ao, update);
         }
         
     }//prepareAuthorOccurrence
     
-    public void createRecord() {
-        logger.debug("About to insert new occurrence record");
+    public void storeRecord() {
         //FIXME:
         try {     
-            database.executeInsert(prepareAuthorOccurrence(true));
+            Pair<AuthorOccurrence,Boolean> rec;
+            for (int i = 0; i < authorList.size(); i++) {
+                Pair<Pair<String,Integer>,String> author = authorList.get(i);
+                if (editMode)
+                    rec = prepareAuthorOccurrence(false,author);
+                else
+                    rec = prepareAuthorOccurrence(true,author);
+                rec.getFirst().setRole(author.getSecond());
+                if (rec.getSecond()) {
+                    logger.info("Updating AuthorOccurrence record id="+rec.getFirst().getId());
+                    database.executeUpdate(rec.getFirst());
+                } else {
+                    logger.info("Creating a new AuthorOccurrence record for author "+author.getFirst().getFirst()+" role "+author.getSecond());
+                    database.executeInsert(rec.getFirst());
+                }
+            }
         } catch (RemoteException ex) {
             ex.printStackTrace();
         } catch (DBLayerException ex) {
@@ -829,17 +934,61 @@
         }        
     }//createRecord()
     
-    public void updateRecord() {        
-        logger.debug("About to update existing occurrence record id="+ao.getId());
+    
+    private ArrayList<Pair<Pair<String,Integer>,String>> getAuthorsOf(Occurrence o) {
+        ArrayList<Pair<Pair<String,Integer>,String>> authorResults = new ArrayList<Pair<Pair<String,Integer>,String>>();
+        authorOccurrences = new HashMap<Integer,AuthorOccurrence>();
         //FIXME:
-        try {     
-            database.executeUpdate(prepareAuthorOccurrence(false));
+        try {
+            //Pair<Pair<String,Integer>,Pair<String,Integer>> p;
+            SelectQuery sq = database.createQuery(AuthorOccurrence.class);        
+            sq.addRestriction(PlantloreConstants.RESTR_EQ,AuthorOccurrence.OCCURRENCE,null,o,null);
+            int resultid = database.executeQuery(sq);
+            int resultCount = database.getNumRows(resultid);
+            Object[] results = database.more(resultid, 1, resultCount);
+            Object[] tmp;
+            AuthorOccurrence ao;
+            Author a;
+            for (int i = 0; i < resultCount; i++) {
+                tmp = (Object[]) results[i];
+                ao = (AuthorOccurrence)tmp[0];
+                a = ao.getAuthor();
+                authorResults.add(new Pair<Pair<String,Integer>,String>(
+                        new Pair<String,Integer>(a.getWholeName(),a.getId()),ao.getRole() ) );
+                authorOccurrences.put(a.getId(),ao);
+            }
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
         } catch (RemoteException ex) {
             ex.printStackTrace();
-        } catch (DBLayerException ex) {
-            ex.printStackTrace();
         }
-    }//updateRecord()
+        return authorResults;
+    }
+    
+    
+    public void addAuthorRow() {
+        authorList.add(new Pair<Pair<String,Integer>,String>(new Pair<String,Integer>("",0),""));
+        logger.info("Adding a new author row");
+        setChanged();
+        notifyObservers(new Pair<String,Integer>("addAuthorRow",-1));
+    }
+    
+    public void removeAuthorRow(int i) {
+        authorList.remove(i);
+        logger.info("AddEdit: Removing author row #"+i);
+        setChanged();
+        notifyObservers(new Pair<String,Integer>("removeAuthorRow",i));        
+    }
+    
+    public void setAuthor(int i, Pair<String,Integer> author) {
+        authorList.get(i).setFirst(author);
+        logger.debug("Author name in row "+i+" set to "+author);
+    }
+    
+    public void setAuthorRole(int i, String role) {
+        authorList.get(i).setSecond(role);
+        logger.debug("Author role in row "+i+" set to "+role);
+    }
 }
 
 

Modified: trunk/src/net/sf/plantlore/client/AddEditCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditCtrl.java	2006-04-26 17:46:33 UTC (rev 188)
+++ trunk/src/net/sf/plantlore/client/AddEditCtrl.java	2006-04-26 21:18:40 UTC (rev 189)
@@ -20,6 +20,8 @@
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 import java.util.Date;
+import javax.swing.DefaultCellEditor;
+import javax.swing.JButton;
 import javax.swing.JComboBox;
 import javax.swing.JFormattedTextField;
 import javax.swing.JSpinner;
@@ -27,6 +29,8 @@
 import javax.swing.JTextField;
 import javax.swing.event.ChangeEvent;
 import javax.swing.event.ChangeListener;
+import javax.swing.table.TableColumn;
+import net.sf.plantlore.common.AutoComboBox;
 import net.sf.plantlore.common.Pair;
 
 /**
@@ -47,7 +51,6 @@
         this.view = view;
         
         //------- ComboBoxes --------
-        view.authorComboBox.addActionListener(new CommonActionListener());
         view.townComboBox.addActionListener(new CommonActionListener());
         view.territoryNameCombo.addActionListener(new CommonActionListener());
         view.phytNameCombo.addActionListener(new CommonActionListener());
@@ -97,8 +100,8 @@
             String command = e.getActionCommand();
             
             //------- ComboBoxes --------            
-            if (command.equals("authorComboBox"))
-                model.setAuthor((Pair<String, Integer>) c.getSelectedItem());
+//            if (command.equals("authorComboBox"))
+//                model.setAuthor((Pair<String, Integer>) c.getSelectedItem());
                 
             if (command.equals("townComboBox"))
                 model.setVillage((Pair<String, Integer>) c.getSelectedItem());
@@ -254,10 +257,7 @@
     
     class OkButtonListener extends MouseAdapter {
         public void mouseClicked(MouseEvent e) {
-            if (inEditMode)
-                model.updateRecord();
-            else
-                model.createRecord();
+            model.storeRecord();
             view.setVisible(false);
         }
     }//OkButtonListener
@@ -274,5 +274,6 @@
             System.out.println("Help");
         }
     }//HelpButtonListener
+    
 }
 

Modified: trunk/src/net/sf/plantlore/client/AddEditView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditView.form	2006-04-26 17:46:33 UTC (rev 188)
+++ trunk/src/net/sf/plantlore/client/AddEditView.form	2006-04-26 21:18:40 UTC (rev 189)
@@ -17,7 +17,7 @@
     <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
     <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
     <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
-    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,2,-19,0,0,3,-88"/>
+    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,4,20,0,0,3,85"/>
   </AuxValues>
 
   <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout"/>
@@ -47,34 +47,36 @@
       <Layout>
         <DimensionLayout dim="0">
           <Group type="103" groupAlignment="0" attributes="0">
-              <Group type="102" alignment="1" attributes="0">
-                  <EmptySpace max="-2" attributes="0"/>
-                  <Group type="103" groupAlignment="1" attributes="0">
-                      <Component id="YearLabel" alignment="1" min="-2" max="-2" attributes="0"/>
-                      <Component id="AuthorLabel" alignment="1" min="-2" max="-2" attributes="0"/>
-                      <Component id="TaxonLabel" min="-2" max="-2" attributes="0"/>
-                  </Group>
-                  <EmptySpace max="-2" attributes="0"/>
+              <Group type="102" attributes="0">
                   <Group type="103" groupAlignment="0" attributes="0">
                       <Group type="102" attributes="0">
+                          <EmptySpace min="-2" pref="22" max="-2" attributes="0"/>
+                          <Component id="YearLabel" min="-2" max="-2" attributes="0"/>
+                          <EmptySpace max="-2" attributes="0"/>
                           <Component id="yearSpinner" min="-2" pref="73" max="-2" attributes="0"/>
-                          <EmptySpace pref="183" max="32767" attributes="0"/>
+                          <EmptySpace pref="102" max="32767" attributes="0"/>
                           <Component id="checklistButton" min="-2" max="-2" attributes="0"/>
+                      </Group>
+                      <Group type="102" alignment="0" attributes="0">
                           <EmptySpace max="-2" attributes="0"/>
+                          <Component id="TaxonLabel" min="-2" max="-2" attributes="0"/>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" attributes="0">
+                              <Component id="jScrollPane1" alignment="0" pref="266" max="32767" attributes="0"/>
+                              <Component id="jScrollPane3" alignment="0" pref="266" max="32767" attributes="1"/>
+                          </Group>
                       </Group>
-                      <Component id="authorComboBox" pref="348" max="32767" attributes="1"/>
-                      <Component id="jScrollPane3" linkSize="9" alignment="0" min="-2" pref="315" max="-2" attributes="1"/>
                   </Group>
-                  <EmptySpace max="-2" attributes="0"/>
+                  <EmptySpace min="-2" pref="110" max="-2" attributes="0"/>
                   <Group type="103" groupAlignment="1" attributes="0">
                       <Component id="jLabel2" min="-2" max="-2" attributes="0"/>
                       <Component id="TownLabel" min="-2" max="-2" attributes="0"/>
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
-                  <Group type="103" groupAlignment="0" max="-2" attributes="0">
-                      <Component id="jScrollPane2" linkSize="9" alignment="1" pref="348" max="32767" attributes="1"/>
+                  <Group type="103" groupAlignment="0" attributes="0">
+                      <Component id="jScrollPane2" alignment="0" pref="254" max="32767" attributes="1"/>
                       <Component id="extendedButton" min="-2" max="-2" attributes="0"/>
-                      <Component id="townComboBox" alignment="1" max="32767" attributes="1"/>
+                      <Component id="townComboBox" alignment="0" pref="254" max="32767" attributes="1"/>
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
               </Group>
@@ -82,63 +84,43 @@
         </DimensionLayout>
         <DimensionLayout dim="1">
           <Group type="103" groupAlignment="0" attributes="0">
-              <Group type="102" alignment="1" attributes="0">
-                  <Group type="103" groupAlignment="3" attributes="0">
-                      <Component id="AuthorLabel" alignment="3" min="-2" max="-2" attributes="0"/>
-                      <Component id="townComboBox" alignment="3" min="-2" pref="24" max="-2" attributes="0"/>
-                      <Component id="authorComboBox" alignment="3" min="-2" max="-2" attributes="0"/>
-                      <Component id="TownLabel" alignment="3" min="-2" pref="16" max="-2" attributes="0"/>
-                  </Group>
-                  <EmptySpace max="-2" attributes="0"/>
-                  <Group type="103" groupAlignment="0" attributes="0">
-                      <Group type="102" attributes="0">
-                          <Group type="103" groupAlignment="0" attributes="0">
-                              <Component id="jScrollPane3" max="32767" attributes="1"/>
-                              <Group type="103" alignment="0" groupAlignment="0" max="-2" attributes="0">
-                                  <Component id="jScrollPane2" max="32767" attributes="1"/>
+              <Group type="102" attributes="0">
+                  <Group type="103" groupAlignment="1" attributes="0">
+                      <Group type="102" alignment="1" attributes="0">
+                          <Group type="103" groupAlignment="3" attributes="0">
+                              <Component id="jLabel2" alignment="3" min="-2" max="-2" attributes="0"/>
+                              <Component id="townComboBox" alignment="3" min="-2" pref="24" max="-2" attributes="0"/>
+                          </Group>
+                          <EmptySpace min="-2" pref="26" max="-2" attributes="0"/>
+                          <Group type="103" groupAlignment="0" max="-2" attributes="0">
+                              <Group type="102" alignment="1" attributes="1">
+                                  <Component id="TownLabel" min="-2" pref="16" max="-2" attributes="0"/>
+                                  <EmptySpace max="32767" attributes="0"/>
                                   <Component id="TaxonLabel" min="-2" max="-2" attributes="0"/>
+                                  <EmptySpace min="-2" pref="38" max="-2" attributes="0"/>
                               </Group>
+                              <Component id="jScrollPane2" alignment="1" min="-2" max="-2" attributes="1"/>
                           </Group>
-                          <EmptySpace pref="30" max="32767" attributes="0"/>
-                          <Group type="103" groupAlignment="3" attributes="0">
-                              <Component id="checklistButton" alignment="3" max="32767" attributes="1"/>
-                              <Component id="YearLabel" alignment="3" min="-2" max="-2" attributes="0"/>
-                              <Component id="yearSpinner" alignment="3" min="-2" max="-2" attributes="0"/>
-                              <Component id="extendedButton" alignment="3" min="-2" max="-2" attributes="1"/>
-                          </Group>
                       </Group>
-                      <Component id="jLabel2" min="-2" max="-2" attributes="0"/>
+                      <Group type="102" alignment="1" attributes="0">
+                          <Component id="jScrollPane1" min="-2" pref="69" max="-2" attributes="0"/>
+                          <EmptySpace max="-2" attributes="0"/>
+                          <Component id="jScrollPane3" min="-2" pref="53" max="-2" attributes="1"/>
+                      </Group>
                   </Group>
                   <EmptySpace max="-2" attributes="0"/>
+                  <Group type="103" groupAlignment="3" attributes="0">
+                      <Component id="checklistButton" alignment="3" min="-2" max="-2" attributes="1"/>
+                      <Component id="yearSpinner" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="YearLabel" alignment="3" min="-2" max="-2" attributes="0"/>
+                      <Component id="extendedButton" alignment="3" min="-2" max="-2" attributes="1"/>
+                  </Group>
+                  <EmptySpace min="-2" pref="4" max="-2" attributes="0"/>
               </Group>
           </Group>
         </DimensionLayout>
       </Layout>
       <SubComponents>
-        <Component class="javax.swing.JLabel" name="AuthorLabel">
-          <Properties>
-            <Property name="text" type="java.lang.String" value="Author:"/>
-          </Properties>
-          <AuxValues>
-            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
-          </AuxValues>
-        </Component>
-        <Component class="javax.swing.JComboBox" name="authorComboBox">
-          <Properties>
-            <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.editors2.ComboBoxModelEditor">
-              <StringArray count="0"/>
-            </Property>
-          </Properties>
-          <Events>
-            <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="authorComboBoxActionPerformed"/>
-          </Events>
-          <AuxValues>
-            <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getAuthors());&#xa;"/>
-            <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="Object [] items;"/>
-            <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)authorComboBox).setStrict(true);&#xa;authorComboBox.setActionCommand(&quot;authorComboBox&quot;);"/>
-            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
-          </AuxValues>
-        </Component>
         <Component class="javax.swing.JLabel" name="TownLabel">
           <Properties>
             <Property name="text" type="java.lang.String" value="Nearest bigger seat:"/>
@@ -155,7 +137,7 @@
           </Properties>
           <AuxValues>
             <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new AutoComboBox(model.getVillages());"/>
-            <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="items = new Object[] {&quot;Praha&quot;, &quot;Brno&quot;, &quot;Turnov&quot;, &quot;Trebic&quot;};"/>
+            <AuxValue name="JavaCodeGenerator_CreateCodePre" type="java.lang.String" value="//items = new Object[] {&quot;Praha&quot;, &quot;Brno&quot;, &quot;Turnov&quot;, &quot;Trebic&quot;};"/>
             <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="((AutoComboBox)townComboBox).setStrict(true);&#xa;townComboBox.setActionCommand(&quot;townComboBox&quot;);"/>
             <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
           </AuxValues>
@@ -254,6 +236,30 @@
             <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
           </AuxValues>
         </Component>
+        <Container class="javax.swing.JScrollPane" name="jScrollPane1">
+          <AuxValues>
+            <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
+          </AuxValues>
+
+          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+          <SubComponents>
+            <Component class="javax.swing.JTable" name="authorTable">
+              <Properties>
+                <Property name="model" type="javax.swing.table.TableModel" editor="org.netbeans.modules.form.editors2.TableModelEditor">
+                  <Table columnCount="4" rowCount="4">
+                    <Column editable="true" title="Title 1" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 2" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 3" type="java.lang.Object"/>
+                    <Column editable="true" title="Title 4" type="java.lang.Object"/>
+                  </Table>
+                </Property>
+              </Properties>
+              <AuxValues>
+                <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+              </AuxValues>
+            </Component>
+          </SubComponents>
+        </Container>
       </SubComponents>
     </Container>
     <Container class="javax.swing.JPanel" name="jPanel3">
@@ -328,7 +334,7 @@
                       </Group>
                       <Component id="jPanel9" min="-2" max="-2" attributes="1"/>
                   </Group>
-                  <EmptySpace min="-2" pref="159" max="-2" attributes="0"/>
+                  <EmptySpace min="-2" pref="382" max="-2" attributes="0"/>
               </Group>
           </Group>
         </DimensionLayout>
@@ -364,7 +370,7 @@
                       <Component id="jLabel5" min="-2" max="-2" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                       <Component id="timeFormattedTextField" min="-2" pref="69" max="-2" attributes="0"/>
-                      <EmptySpace pref="127" max="32767" attributes="0"/>
+                      <EmptySpace pref="44" max="32767" attributes="0"/>
                   </Group>
               </Group>
             </DimensionLayout>
@@ -511,7 +517,7 @@
                           <Component id="jLabel9" alignment="3" min="-2" max="-2" attributes="0"/>
                           <Component id="quadrantTextField" alignment="3" min="-2" max="-2" attributes="0"/>
                       </Group>
-                      <EmptySpace pref="17" max="32767" attributes="0"/>
+                      <EmptySpace max="32767" attributes="0"/>
                   </Group>
               </Group>
             </DimensionLayout>
@@ -772,7 +778,7 @@
               <Group type="103" groupAlignment="0" attributes="0">
                   <Group type="102" alignment="0" attributes="0">
                       <EmptySpace max="-2" attributes="0"/>
-                      <Component id="jScrollPane4" pref="306" max="32767" attributes="0"/>
+                      <Component id="jScrollPane4" max="32767" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                   </Group>
               </Group>
@@ -780,7 +786,7 @@
             <DimensionLayout dim="1">
               <Group type="103" groupAlignment="0" attributes="0">
                   <Group type="102" alignment="0" attributes="0">
-                      <Component id="jScrollPane4" pref="101" max="32767" attributes="0"/>
+                      <Component id="jScrollPane4" pref="96" max="32767" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                   </Group>
               </Group>
@@ -1038,7 +1044,7 @@
               <Group type="103" groupAlignment="0" attributes="0">
                   <Group type="102" alignment="0" attributes="0">
                       <EmptySpace max="-2" attributes="0"/>
-                      <Component id="jScrollPane5" pref="306" max="32767" attributes="0"/>
+                      <Component id="jScrollPane5" max="32767" attributes="0"/>
                       <EmptySpace max="-2" attributes="0"/>
                   </Group>
               </Group>
@@ -1088,7 +1094,7 @@
               <Group type="102" alignment="1" attributes="0">
                   <EmptySpace max="-2" attributes="0"/>
                   <Component id="helpButton" linkSize="12" min="-2" max="-2" attributes="0"/>
-                  <EmptySpace pref="681" max="32767" attributes="0"/>
+                  <EmptySpace pref="598" max="32767" attributes="0"/>
                   <Component id="okButton" linkSize="12" min="-2" max="-2" attributes="0"/>
                   <EmptySpace max="-2" attributes="0"/>
                   <Component id="cancelButton" linkSize="12" min="-2" max="-2" attributes="0"/>

Modified: trunk/src/net/sf/plantlore/client/AddEditView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AddEditView.java	2006-04-26 17:46:33 UTC (rev 188)
+++ trunk/src/net/sf/plantlore/client/AddEditView.java	2006-04-26 21:18:40 UTC (rev 189)
@@ -15,11 +15,16 @@
 import java.util.Hashtable;
 import java.util.Observable;
 import java.util.Observer;
+import javax.swing.DefaultCellEditor;
+import javax.swing.JButton;
+import javax.swing.JComboBox;
 import javax.swing.JDialog;
 import javax.swing.JFormattedTextField;
 import javax.swing.JPanel;
 import javax.swing.SpinnerDateModel;
 import javax.swing.SpinnerNumberModel;
+import javax.swing.table.AbstractTableModel;
+import javax.swing.table.TableColumn;
 import net.sf.plantlore.common.AutoComboBox;
 import net.sf.plantlore.common.AutoTextArea;
 import net.sf.plantlore.common.Pair;
@@ -36,6 +41,7 @@
     private AddEdit model;
     private boolean inEditMode = false;
     private boolean inAddMode = true;
+    protected AuthorTableModel tableModel;
     
     /** Creates new form AddEdit2 */
     public AddEditView(java.awt.Frame parent, boolean modal, AddEdit model, boolean edit) {
@@ -63,12 +69,8 @@
     private void initComponents() {
         convertCoordinatesGroup = new javax.swing.ButtonGroup();
         jPanel2 = new javax.swing.JPanel();
-        AuthorLabel = new javax.swing.JLabel();
-        Object [] items;
-        authorComboBox = new AutoComboBox(model.getAuthors());
-
         TownLabel = new javax.swing.JLabel();
-        items = new Object[] {"Praha", "Brno", "Turnov", "Trebic"};
+        //items = new Object[] {"Praha", "Brno", "Turnov", "Trebic"};
         townComboBox = new AutoComboBox(model.getVillages());
         TaxonLabel = new javax.swing.JLabel();
         YearLabel = new javax.swing.JLabel();
@@ -85,6 +87,8 @@
         extendedButton = new javax.swing.JToggleButton();
         checklistButton = new javax.swing.JButton();
         yearSpinner = new javax.swing.JSpinner();
+        jScrollPane1 = new javax.swing.JScrollPane();
+        authorTable = new javax.swing.JTable();
         jPanel3 = new javax.swing.JPanel();
         jPanel4 = new javax.swing.JPanel();
         monthSpinner = new javax.swing.JSpinner();
@@ -141,16 +145,6 @@
         setResizable(false);
         jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Basic data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
         jPanel2.setPreferredSize(new java.awt.Dimension(700, 200));
-        AuthorLabel.setText("Author:");
-
-        ((AutoComboBox)authorComboBox).setStrict(true);
-        authorComboBox.setActionCommand("authorComboBox");
-        authorComboBox.addActionListener(new java.awt.event.ActionListener() {
-            public void actionPerformed(java.awt.event.ActionEvent evt) {
-                authorComboBoxActionPerformed(evt);
-            }
-        });
-
         TownLabel.setText("Nearest bigger seat:");
 
         ((AutoComboBox)townComboBox).setStrict(true);
@@ -188,63 +182,77 @@
         yearSpinner.setValue(2006);
         ((SpinnerNumberModel)yearSpinner.getModel()).setMinimum(1);
 
+        authorTable.setModel(new javax.swing.table.DefaultTableModel(
+            new Object [][] {
+                {null, null, null, null},
+                {null, null, null, null},
+                {null, null, null, null},
+                {null, null, null, null}
+            },
+            new String [] {
+                "Title 1", "Title 2", "Title 3", "Title 4"
+            }
+        ));
+        jScrollPane1.setViewportView(authorTable);
+
         org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
         jPanel2.setLayout(jPanel2Layout);
         jPanel2Layout.setHorizontalGroup(
             jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
-            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
-                .addContainerGap()
-                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
-                    .add(YearLabel)
-                    .add(AuthorLabel)
-                    .add(TaxonLabel))
-                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+            .add(jPanel2Layout.createSequentialGroup()
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jPanel2Layout.createSequentialGroup()
+                        .add(22, 22, 22)
+                        .add(YearLabel)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                         .add(yearSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 183, Short.MAX_VALUE)
-                        .add(checklistButton)
-                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
-                    .add(authorComboBox, 0, 348, Short.MAX_VALUE)
-                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 315, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
-                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 102, Short.MAX_VALUE)
+                        .add(checklistButton))
+                    .add(jPanel2Layout.createSequentialGroup()
+                        .addContainerGap()
+                        .add(TaxonLabel)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
+                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE))))
+                .add(110, 110, 110)
                 .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                     .add(jLabel2)
                     .add(TownLabel))
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
-                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                     .add(extendedButton)
-                    .add(org.jdesktop.layout.GroupLayout.TRAILING, townComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                    .add(townComboBox, 0, 254, Short.MAX_VALUE))
                 .addContainerGap())
         );
-
-        jPanel2Layout.linkSize(new java.awt.Component[] {jScrollPane2, jScrollPane3}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
-
         jPanel2Layout.setVerticalGroup(
             jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
-            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
-                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                    .add(AuthorLabel)
-                    .add(townComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                    .add(authorComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                    .add(TownLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
-                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
-                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(jPanel2Layout.createSequentialGroup()
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                     .add(jPanel2Layout.createSequentialGroup()
-                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
-                            .add(jScrollPane3)
-                            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
-                                .add(jScrollPane2)
-                                .add(TaxonLabel)))
-                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 30, Short.MAX_VALUE)
                         .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
-                            .add(checklistButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
-                            .add(YearLabel)
-                            .add(yearSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                            .add(extendedButton)))
-                    .add(jLabel2))
-                .addContainerGap())
+                            .add(jLabel2)
+                            .add(townComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
+                        .add(26, 26, 26)
+                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
+                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
+                                .add(TownLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                                .add(TaxonLabel)
+                                .add(38, 38, 38))
+                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
+                    .add(jPanel2Layout.createSequentialGroup()
+                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
+                    .add(checklistButton)
+                    .add(yearSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                    .add(YearLabel)
+                    .add(extendedButton))
+                .add(4, 4, 4))
         );
         getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);
 
@@ -283,7 +291,7 @@
                 .add(jLabel5)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(timeFormattedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                .addContainerGap(127, Short.MAX_VALUE))
+                .addContainerGap(44, Short.MAX_VALUE))
         );
 
         jPanel4Layout.linkSize(new java.awt.Component[] {daySpinner, monthSpinner}, org.jdesktop.layout.GroupLayout.HORIZONTAL);
@@ -382,7 +390,7 @@
                     .add(phytCountryCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(jLabel9)
                     .add(quadrantTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
-                .addContainerGap(17, Short.MAX_VALUE))
+                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         );
 
         jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Other", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12)));
@@ -456,13 +464,13 @@
             jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(jPanel7Layout.createSequentialGroup()
                 .addContainerGap()
-                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
+                .add(jScrollPane4)
                 .addContainerGap())
         );
         jPanel7Layout.setVerticalGroup(
             jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(jPanel7Layout.createSequentialGroup()
-                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
+                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                 .addContainerGap())
         );
 
@@ -568,7 +576,7 @@
             jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
             .add(jPanel9Layout.createSequentialGroup()
                 .addContainerGap()
-                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
+                .add(jScrollPane5)
                 .addContainerGap())
         );
         jPanel9Layout.setVerticalGroup(
@@ -617,7 +625,7 @@
                         .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                         .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                     .add(jPanel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
-                .add(159, 159, 159))
+                .add(382, 382, 382))
         );
         getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);
 
@@ -639,7 +647,7 @@
             .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8Layout.createSequentialGroup()
                 .addContainerGap()
                 .add(helpButton)
-                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 681, Short.MAX_VALUE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 598, Short.MAX_VALUE)
                 .add(okButton)
                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                 .add(cancelButton)
@@ -681,11 +689,31 @@
     private void extendedButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_extendedButtonMouseClicked
 // TODO add your handling code here:
     }//GEN-LAST:event_extendedButtonMouseClicked
+    
+    
+    //musn't delete contents of tableModel, because it's also called to update the table's user interface unfortunately...
+    protected void initAuthorTable() {
+        if (tableModel == null) 
+            tableModel = new AuthorTableModel(model);
+        authorTable.setModel(tableModel);
 
-    private void authorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorComboBoxActionPerformed
-// TODO add your handling code here:
-    }//GEN-LAST:event_authorComboBoxActionPerformed
+        authorTable.setDefaultEditor(JButton.class, new ButtonEditor());
+        authorTable.setDefaultRenderer(JButton.class, new ButtonEditor());
+
+        TableColumn tc1 = authorTable.getColumnModel().getColumn(0);
+        TableColumn tc2 = authorTable.getColumnModel().getColumn(1);
+
+        JComboBox cb = new AutoComboBox(model.getAuthors());
+        tc1.setCellEditor(new DefaultCellEditor(cb));  
+        cb = new AutoComboBox(model.getAuthorRoles());
+        tc2.setCellEditor(new DefaultCellEditor(cb));
+    }
     
+    private void resetAuthorModel() {
+        if (tableModel != null)
+            tableModel.reset();
+    }
+    
     public void loadComponentData()
     {
         switch (model.getCoordinateSystem()) {
@@ -701,7 +729,10 @@
             default:
                 WGS84Button.setSelected(true);
         }
-        authorComboBox.setSelectedItem(model.getAuthor());        
+        
+        resetAuthorModel();
+        initAuthorTable();
+        
         townComboBox.setSelectedItem(model.getVillage());
         taxonTextArea.insert(model.getTaxon(),0);
         descriptionArea.setText(model.getLocalityDescription());
@@ -728,7 +759,7 @@
     }
     
     public void clearComponentData() {
-        authorComboBox.setSelectedIndex(-1);        
+        //authorComboBox.setSelectedIndex(-1);        
         townComboBox.setSelectedIndex(-1);
         taxonTextArea.setText("");
         descriptionArea.setText("");
@@ -774,15 +805,29 @@
     }
 
     public void update(Observable o, Object arg) {
-        String s = (String) arg;
+        String s = ((Pair<String,Integer>)arg).getFirst();
+        int i = ((Pair<String,Integer>)arg).getSecond(); 
         if (s.equals("updateCode"))
             phytCodeCombo.setSelectedItem(model.getPhytCode());
         if (s.equals("updateName"))
             phytNameCombo.setSelectedItem(model.getPhytName());
+        if (s.equals("addAuthorRow")) {
+            tableModel.addRow();
+            /*
+            DefaultCellEditor dce = (DefaultCellEditor) authorTable.getCellEditor(0,0);
+            Object o = dce.getCellEditorValue();
+             */            
+        }             
+        if (s.equals("removeAuthorRow")) {
+            tableModel.removeRow(i);
+            //unfortunately have to set up the editors and renderers again because of the
+            //fireTableStructureChanged() in the tableModel.removeRow() ... :-/
+            initAuthorTable();            
+        }
     }
+        
     
     // Variables declaration - do not modify//GEN-BEGIN:variables
-    protected javax.swing.JLabel AuthorLabel;
     protected javax.swing.JRadioButton S42Button;
     protected javax.swing.JRadioButton SJTSKButton;
     protected javax.swing.JLabel TaxonLabel;
@@ -790,7 +835,7 @@
     protected javax.swing.JRadioButton WGS84Button;
     protected javax.swing.JLabel YearLabel;
     protected javax.swing.JFormattedTextField altitudeFormattedTextField;
-    protected javax.swing.JComboBox authorComboBox;
+    protected javax.swing.JTable authorTable;
     protected javax.swing.JButton cancelButton;
     protected javax.swing.JButton checklistButton;
     private javax.swing.ButtonGroup convertCoordinatesGroup;
@@ -821,6 +866,7 @@
     protected javax.swing.JPanel jPanel7;
     private javax.swing.JPanel jPanel8;
     protected javax.swing.JPanel jPanel9;
+    private javax.swing.JScrollPane jScrollPane1;
     private javax.swing.JScrollPane jScrollPane2;
     private javax.swing.JScrollPane jScrollPane3;
     private javax.swing.JScrollPane jScrollPane4;

Modified: trunk/src/net/sf/plantlore/client/AppCoreCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-26 17:46:33 UTC (rev 188)
+++ trunk/src/net/sf/plantlore/client/AppCoreCtrl.java	2006-04-26 21:18:40 UTC (rev 189)
@@ -287,7 +287,7 @@
 
         public void actionPerformed(ActionEvent actionEvent) {
             if (addView == null) {
-                addModel = new AddEdit(model.getDatabase());
+                addModel = new AddEdit(model.getDatabase(),false);
                 addView = new AddEditView(view, true, addModel, false);
                 addView.setTitle("Add a new occurrence");
             }
@@ -305,9 +305,9 @@
 
         public void actionPerformed(ActionEvent actionEvent) {
             if (editView == null) {
-                editModel = new AddEdit(model.getDatabase());
+                editModel = new AddEdit(model.getDatabase(),true);
                 Object[] row = model.getSelectedRow();
-                editModel.setRecord((AuthorOccurrence) row[row.length-1]);
+                editModel.setRecord((Occurrence) row[row.length-1]);
                 editView = new AddEditView(view, true, editModel, true);
                 editView.setTitle("Edit occurrence");
                 editCtrl = new AddEditCtrl(editModel, editView, true);
@@ -316,7 +316,7 @@
                 return;
             } else {
                 Object[] row = model.getSelectedRow();
-                editModel.setRecord((AuthorOccurrence) row[row.length-1]);
+                editModel.setRecord((Occurrence) row[row.length-1]);
                 editView.loadComponentData();
                 editView.setVisible(true);
             }

Added: trunk/src/net/sf/plantlore/client/AuthorTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/AuthorTableModel.java	2006-04-26 17:46:33 UTC (rev 188)
+++ trunk/src/net/sf/plantlore/client/AuthorTableModel.java	2006-04-26 21:18:40 UTC (rev 189)
@@ -0,0 +1,194 @@
+/*
+ * AuthorTableModel.java
+ *
+ * Created on 25. duben 2006, 17:42
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client;
+
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.util.ArrayList;
+import javax.swing.JButton;
+import javax.swing.event.TableModelEvent;
+import javax.swing.event.TableModelListener;
+import javax.swing.table.AbstractTableModel;
+import net.sf.plantlore.common.Pair;
+
+/** Listener for buttons in the table.
+ * Adds or removes rows calling the view according to the button's text.
+ */
+class AuthorButtonListener implements ActionListener {
+    AddEdit aemodel;
+    
+    public AuthorButtonListener(AddEdit aemodel) {
+        this.aemodel = aemodel;
+    }
+    
+    public void actionPerformed(ActionEvent actionEvent) {
+        JButton btn = (JButton) actionEvent.getSource();
+        if (btn.getText().equals("Add"))
+            aemodel.addAuthorRow();
+        else
+            aemodel.removeAuthorRow(Integer.parseInt(actionEvent.getActionCommand()));
+    }
+}
+
+
+/** Table model for the authors table in AddEditView.
+ *
+ */
+public class AuthorTableModel extends AbstractTableModel {
+    ArrayList<Object[]> data = new ArrayList<Object[]>();
+    Object[] row;
+    AddEdit aemodel;
+    
+    public AuthorTableModel(AddEdit aemodel) {
+        this.aemodel = aemodel;
+        row = new Object[3];
+        row[0] = new Pair("",0);
+        row[1] = "";
+        JButton b = new JButton("Add");
+        b.addActionListener(new AuthorButtonListener(aemodel));
+        b.setActionCommand("0");
+        row[2] = b;
+        data.add(row);
+        loadDataFromModel();
+        fireTableDataChanged();
+    }
+    
+    private void loadDataFromModel() {
+        for (int i = 0; i < aemodel.getAuthorCount(); i++)
+            addRow(aemodel.getAuthor(i), aemodel.getAuthorRole(i));        
+    }
+    
+    public void reset() {
+        data.clear();
+        row = new Object[3];
+        row[0] = new Pair("",0);
+        row[1] = "";
+        JButton b = new JButton("Add");
+        b.addActionListener(new AuthorButtonListener(aemodel));
+        b.setActionCommand("0");
+        row[2] = b;
+        data.add(row);
+        loadDataFromModel();
+        fireTableDataChanged();        
+    }
+    
+    public void addRow() {
+        //create a new row
+        row = new Object[3];
+        row[0] = new Pair("",0);
+        row[1] = "";
+        JButton b = new JButton("Add");
+        b.addActionListener(new AuthorButtonListener(aemodel));
+        b.setActionCommand(""+data.size());
+        row[2] = b;
+        
+        //get the last row and update it's text to Remove
+        Object[] rowTmp = data.get(data.size()-1);
+        ((JButton)rowTmp[2]).setText("Remove");
+        
+        data.add(row);
+
+        //we fire that in case someone would like to register a table model listener with us
+        //and get some reasonable data
+        fireTableRowsInserted(data.size()-1,data.size()-1);
+    }
+    
+    public void addRow(Pair<String, Integer> author, String role) {
+        addRow();
+        Object[] row = data.get(data.size()-2);
+        row[0] = author;
+        row[1] = role;
+        fireTableDataChanged();
+    }
+    
+    public void removeRow(int i) {
+        System.out.println("AuthorTableModel: removing row #"+i);
+        Object[] row = data.remove(i);
+        JButton b = (JButton)row[2];
+        for (int j=0; j < data.size(); j++){
+            b = (JButton)data.get(j)[2];
+            b.setActionCommand(""+j);
+        }
+
+        //we fire that in case someone would like to register a table model listener with us
+        //and get some reasonable data
+        fireTableRowsDeleted(i,i);
+
+        //unfortunately have to do this so that each cell regets it's updated renderer
+        //which is needed for the last row mainly
+        fireTableStructureChanged();
+    }
+    
+    public int getRowCount() {
+        return data.size();
+    }
+    
+    public int getColumnCount() {
+        return row.length;
+    }
+    
+    public Object getValueAt(int i, int i0) {
+        return data.get(i)[i0];
+    }
+    
+    /** Has to be overriden so that our data (and table) get updated after editing.
+     */
+    public void setValueAt(Object o, int r, int c) {
+        if (c == 2) //we don't want to lose our nice buttons with listeners, proper text, ...
+            return;
+        Object[] row = data.get(r);
+        row[c] = o;
+        if (c == 0)
+            aemodel.setAuthor(r, (Pair<String, Integer>) o);
+        if (c == 1)
+            aemodel.setAuthorRole(r, (String) o);
+    }
+    
+    public Class getColumnClass(int c) {
+        //can't do this:
+        //return getValueAt(0,c).getClass();
+        //otherwise it throws NullPointerException perhaps thanks to some multiple threads running simultaneously
+        //so that the table view exists earlier than this model fetched data :-(
+        switch (c) {
+            case 0:
+                return Pair.class;
+            case 1:
+                return String.class;
+            case 2:
+                return JButton.class;
+            default:
+                return null;
+        }                                
+    }
+    
+    public boolean isCellEditable(int row, int col) {
+        //we don't want the last row to be editable except it's last(=button) column
+        if (row == data.size()-1)
+            if (col == 2)
+                return true;
+            else
+                return false;
+        else
+            return true;
+    }
+    public String getColumnName(int col) {
+        switch (col) {
+            case 0:
+                return "Name";
+            case 1:
+                return "Role";
+            case 2:
+                return "";
+            default:
+                return "";
+        }
+    }
+}
+    
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/client/ButtonEditor.java
===================================================================
--- trunk/src/net/sf/plantlore/client/ButtonEditor.java	2006-04-26 17:46:33 UTC (rev 188)
+++ trunk/src/net/sf/plantlore/client/ButtonEditor.java	2006-04-26 21:18:40 UTC (rev 189)
@@ -0,0 +1,50 @@
+/*
+ * ButtonEditor.java
+ *
+ * Created on 24. duben 2006, 17:39
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.client;
+
+import java.awt.Component;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+import java.util.ArrayList;
+import javax.swing.AbstractCellEditor;
+import javax.swing.JButton;
+import javax.swing.JTable;
+import javax.swing.table.TableCellEditor;
+import javax.swing.table.TableCellRenderer;
+
+/** Button Editor and Renderer used by the author table in AddEdit dialog.
+ *
+ * Simply returns the buttons stored in the table model.
+ * @author reimei
+ */
+public class ButtonEditor extends AbstractCellEditor implements TableCellEditor, TableCellRenderer  {
+    JButton button;
+    
+    /** Creates a new instance of ButtonEditor */
+    public ButtonEditor() {
+        button = new JButton("Add");
+    }
+
+    public Object getCellEditorValue() {
+        return button;
+    }
+    public Component getTableCellEditorComponent(JTable table, Object value,
+                                                 boolean isSelected,
+                                                 int row,
+                                                 int column) {
+        return (Component)table.getModel().getValueAt(row,2);
+    }
+
+    public Component getTableCellRendererComponent(JTable table, Object object, boolean b, boolean b0, int row, int i0) {
+        return (Component)table.getModel().getValueAt(row,2);
+    }
+}

Modified: trunk/src/net/sf/plantlore/client/OverviewTableModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-26 17:46:33 UTC (rev 188)
+++ trunk/src/net/sf/plantlore/client/OverviewTableModel.java	2006-04-26 21:18:40 UTC (rev 189)
@@ -11,7 +11,9 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import javax.swing.table.AbstractTableModel;
+import net.sf.plantlore.common.Pair;
 import net.sf.plantlore.common.PlantloreConstants;
+import net.sf.plantlore.common.record.Author;
 import net.sf.plantlore.common.record.AuthorOccurrence;
 import net.sf.plantlore.common.record.Occurrence;
 import net.sf.plantlore.common.record.Plant;
@@ -79,7 +81,8 @@
         this.pageSize = pageSize;
         resultsCount = 0;
         this.db = db;
-        SelectQuery sq = db.createQuery(AuthorOccurrence.class);
+        SelectQuery sq = db.createQuery(Occurrence.class);
+        sq.addOrder(PlantloreConstants.DIRECT_ASC, Occurrence.YEARCOLLECTED); //setridit podle roku
         //FIXME:
         try {
             setResultid(db.executeQuery(sq));
@@ -142,13 +145,38 @@
         columnSizes[23] = 100;
     }
     
+    private Pair<String,Integer>[] getAuthorsOf(Occurrence o) {
+        Pair<String,Integer>[] authorResults = null;
+        //FIXME:
+        try {
+            SelectQuery sq = db.createQuery(AuthorOccurrence.class);        
+            sq.addRestriction(PlantloreConstants.RESTR_EQ,AuthorOccurrence.OCCURRENCE,null,o,null);
+            int resultid = db.executeQuery(sq);
+            int resultCount = db.getNumRows(resultid);
+            authorResults = new Pair[resultCount];
+            Object[] results = db.more(resultid, 1, resultCount);
+            Object[] tmp;
+            Author a;
+            for (int i = 0; i < resultCount; i++) {
+                tmp = (Object[]) results[i];
+                a = (Author)((AuthorOccurrence)tmp[0]).getAuthor();
+                authorResults[i] = new Pair<String,Integer>(a.getWholeName(), a.getId());
+            }
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        }
+        return authorResults;
+    }
+    
     /**
      * Expects from, pageSize, currentPage and resultid variables to be set appropriately.
      */
     private void loadData() throws DBLayerException, RemoteException
     {
         Object[] row;
-        AuthorOccurrence result;
+        Occurrence result;
         Plant plant;
         Object[] resultObj, records;
         resultsCount = db.getNumRows(getResultid());
@@ -162,7 +190,7 @@
 
         for (int i = 1; i <= to - from + 1 ; i++) {
             resultObj = (Object[])records[i-1];
-            result = (AuthorOccurrence)resultObj[0];
+            result = (Occurrence)resultObj[0];
             Record999 r = new Record999(result.getId(), false, from + i - 1);
             if (from + i - 1 > recordsArray.size()) //most probably much faster than to ask recordsArray.contains(r)
                 recordsArray.add(r);
@@ -172,33 +200,34 @@
             row = new Object[COLUMN_COUNT + 1]; //we'll store the record id in the last column
             row[0] = r.selected;
             row[1] = r.number;
-            row[2] = result.getOccurrence().getPlant().getTaxon();
-            row[3] = result.getAuthor().getWholeName();
-            row[4] = result.getOccurrence().getHabitat().getNearestVillage().getName();
-            row[5] = result.getOccurrence().getHabitat().getDescription();
-            row[6] = result.getOccurrence().getYearCollected();
-            row[7] = result.getOccurrence().getHabitat().getTerritory().getName();
-            row[8] = result.getOccurrence().getHabitat().getPhytochorion().getName();
-            row[9] = result.getOccurrence().getHabitat().getPhytochorion().getCode();
-            row[10] = result.getOccurrence().getHabitat().getCountry();
-            row[11] = result.getOccurrence().getHabitat().getQuadrant();
-            row[12] = result.getOccurrence().getNote();
-            row[13] = result.getOccurrence().getHabitat().getNote();
-            row[14] = result.getOccurrence().getHabitat().getAltitude();
-            row[15] = result.getOccurrence().getHabitat().getLongitude();
-            row[16] = result.getOccurrence().getHabitat().getLatitude();
-            row[17] = result.getOccurrence().getDataSource();
-            row[18] = result.getOccurrence().getPublication().getCollectionName();
-            row[19] = result.getOccurrence().getHerbarium();
-            row[20] = result.getOccurrence().getMetadata().getDataSetTitle();
-            row[21] = result.getOccurrence().getMonthCollected();
-            row[22] = result.getOccurrence().getDayCollected();
-            row[23] = result.getOccurrence().getTimeCollected();
+            row[2] = result.getPlant().getTaxon();
+            row[3] = ((Object[])getAuthorsOf(result))[0];//occurrence must have at least one author, we'll choose the first one
+            row[4] = result.getHabitat().getNearestVillage().getName();
+            row[5] = result.getHabitat().getDescription();
+            row[6] = result.getYearCollected();
+            row[7] = result.getHabitat().getTerritory().getName();
+            row[8] = result.getHabitat().getPhytochorion().getName();
+            row[9] = result.getHabitat().getPhytochorion().getCode();
+            row[10] = result.getHabitat().getCountry();
+            row[11] = result.getHabitat().getQuadrant();
+            row[12] = result.getNote();
+            row[13] = result.getHabitat().getNote();
+            row[14] = result.getHabitat().getAltitude();
+            row[15] = result.getHabitat().getLongitude();
+            row[16] = result.getHabitat().getLatitude();
+            row[17] = result.getDataSource();
+            row[18] = result.getPublication().getCollectionName();
+            row[19] = result.getHerbarium();
+            row[20] = result.getMetadata().getDataSetTitle();
+            row[21] = result.getMonthCollected();
+            row[22] = result.getDayCollected();
+            row[23] = result.getTimeCollected();
             row[24] = result; //won't  be displayed, because in getColumnCount we pretend not to have this column
             data[i-1] = row;
         }//i        
     }
     
+    //momentalne nepouzita metoda
     public AuthorOccurrence getRecord(int row) {
         AuthorOccurrence result = null;
         Object[] resultObj, records;

Added: trunk/src/net/sf/plantlore/common/DBLayerUtils.java
===================================================================
--- trunk/src/net/sf/plantlore/common/DBLayerUtils.java	2006-04-26 17:46:33 UTC (rev 188)
+++ trunk/src/net/sf/plantlore/common/DBLayerUtils.java	2006-04-26 21:18:40 UTC (rev 189)
@@ -0,0 +1,71 @@
+/*
+ * TempClass.java
+ *
+ * Created on 26. duben 2006, 10:20
+ *
+ * To change this template, choose Tools | Template Manager
+ * and open the template in the editor.
+ */
+
+package net.sf.plantlore.common;
+
+import java.rmi.RemoteException;
+import net.sf.plantlore.common.record.Author;
+import net.sf.plantlore.common.record.Occurrence;
+import net.sf.plantlore.common.record.Record;
+import net.sf.plantlore.middleware.DBLayer;
+import net.sf.plantlore.middleware.SelectQuery;
+import net.sf.plantlore.server.DBLayerException;
+import net.sf.plantlore.server.HibernateDBLayer;
+
+/** Class offering convenience methods for DBLayer.
+ *
+ * @author reimei
+ */
+public class DBLayerUtils {
+    DBLayer db;
+    
+    /** Creates a new instance of TempClass */
+    public DBLayerUtils(DBLayer db) {
+        this.db = db;
+    }
+    
+    /** Gets an object according to it's id.
+     *
+     * @param id id of the row
+     * @param c class of the object
+     * @return Record Object of type c with id id.
+     * @return null in case an exception is thrown or no row with that id exists
+     */
+    public Record getObjectFor(int id, Class c) {
+        //FIXME:
+        try {
+            SelectQuery sq = db.createQuery(c);
+            sq.addRestriction(PlantloreConstants.RESTR_EQ,"id",null,id,null);
+            int resultid = db.executeQuery(sq);
+            int resultCount = db.getNumRows(resultid);
+            if (resultCount == 0)
+                return null;
+            Object[] results = db.more(resultid, 1, 1);
+            Object[] tmp = (Object[]) results[0];
+            return (Record)tmp[0];
+            
+        } catch (RemoteException ex) {
+            ex.printStackTrace();
+        } catch (DBLayerException ex) {
+            ex.printStackTrace();
+        }
+        return null;
+    }
+    
+    public static void main(String[] args) throws DBLayerException, RemoteException {
+        DBLayer db = new HibernateDBLayer();
+        db.initialize("jdbc:firebirdsql:localhost/3050:/mnt/data/temp/plantloreHIBdataUTF.fdb","sysdba","masterkey");
+        DBLayerUtils dlu = new DBLayerUtils(db);
+        Author a = (Author)dlu.getObjectFor(1,Author.class);
+        System.out.println("class "+a.getWholeName());
+        Occurrence o = (Occurrence)dlu.getObjectFor(1,Occurrence.class);
+        System.out.println("nalez "+o.getPlant().getTaxon());
+    }
+    
+}



From lada at berlios.de  Thu Apr 27 12:54:14 2006
From: lada at berlios.de (lada at berlios.de)
Date: Thu, 27 Apr 2006 12:54:14 +0200
Subject: [Plantlore-dev] r191 - trunk/analysis/biocase
Message-ID: <200604271054.k3RAsEQk008027@sheep.berlios.de>

Author: lada
Date: 2006-04-27 12:54:13 +0200 (Thu, 27 Apr 2006)
New Revision: 191

Modified:
   trunk/analysis/biocase/installation.odt
Log:
Some new information about installation BioCASE on Linux - problemme whit case sensitive. 
BioCASE 2.3.1 is in urtax.

Modified: trunk/analysis/biocase/installation.odt
===================================================================
(Binary files differ)



From lada at berlios.de  Thu Apr 27 17:48:11 2006
From: lada at berlios.de (lada at berlios.de)
Date: Thu, 27 Apr 2006 17:48:11 +0200
Subject: [Plantlore-dev] r192 - trunk/src/biocase/DataproBioCASE/lib/biocase/querytool
Message-ID: <200604271548.k3RFmBjd012556@sheep.berlios.de>

Author: lada
Date: 2006-04-27 17:48:10 +0200 (Thu, 27 Apr 2006)
New Revision: 192

Modified:
   trunk/src/biocase/DataproBioCASE/lib/biocase/querytool/general.py
Log:
Repair read file with login.

Modified: trunk/src/biocase/DataproBioCASE/lib/biocase/querytool/general.py
===================================================================
--- trunk/src/biocase/DataproBioCASE/lib/biocase/querytool/general.py	2006-04-27 10:54:13 UTC (rev 191)
+++ trunk/src/biocase/DataproBioCASE/lib/biocase/querytool/general.py	2006-04-27 15:48:10 UTC (rev 192)
@@ -295,6 +295,7 @@
     #Reads first line from file ".userData"
     line = fUser.readline()
     while line != "":          
+      line = line.replace('\r\n','')
       line = line.replace('\n','')
       parseLine = re.findall(r'\b[^@]+', line)
       # test login and password



From lada at berlios.de  Thu Apr 27 21:26:06 2006
From: lada at berlios.de (lada at berlios.de)
Date: Thu, 27 Apr 2006 21:26:06 +0200
Subject: [Plantlore-dev] r193 - in trunk/src/net/sf/plantlore: client/export/builders client/publication l10n
Message-ID: <200604271926.k3RJQ6ZW000584@sheep.berlios.de>

Author: lada
Date: 2006-04-27 21:25:10 +0200 (Thu, 27 Apr 2006)
New Revision: 193

Modified:
   trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java
   trunk/src/net/sf/plantlore/client/publication/PublicationManager.java
   trunk/src/net/sf/plantlore/client/publication/PublicationManagerCtrl.java
   trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.form
   trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.java
   trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties
Log:
Implement search/sort for PublicationManager.

Modified: trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java	2006-04-27 15:48:10 UTC (rev 192)
+++ trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java	2006-04-27 19:25:10 UTC (rev 193)
@@ -30,15 +30,15 @@
 	public TrainingBuilder(Template template) {
 		super(template);
 	}
-
+  //vola se na zacatku
 	public void header() throws IOException {
 		System.out.println("Training Builder engaged.");		
 	}
-
+  //vola se na konci 
 	public void footer() throws IOException {
 		System.out.println("Training Builder disengaged.");
 	}
-
+  //pro jednotlive zaznamy
 	public void startRecord() throws IOException {
 		System.out.println(" <" + i + ">");
 	}

Modified: trunk/src/net/sf/plantlore/client/publication/PublicationManager.java
===================================================================
--- trunk/src/net/sf/plantlore/client/publication/PublicationManager.java	2006-04-27 15:48:10 UTC (rev 192)
+++ trunk/src/net/sf/plantlore/client/publication/PublicationManager.java	2006-04-27 19:25:10 UTC (rev 193)
@@ -11,6 +11,7 @@
 
 import java.rmi.RemoteException;
 import java.util.ArrayList;
+import net.sf.plantlore.common.PlantloreConstants;
 import net.sf.plantlore.common.record.Publication;
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.middleware.SelectQuery;
@@ -28,7 +29,7 @@
     /** Instance of a database management object */
     private DBLayer database;   
     /** Constant with default number of rows to display */
-    private static final int DEFAULT_DISPLAY_ROWS = 6;    
+    protected static final int DEFAULT_DISPLAY_ROWS = 6;    
     /** Actual number of rows to display */
     private int displayRows = DEFAULT_DISPLAY_ROWS;   
     /** Index of the first record shown in the table */
@@ -49,7 +50,22 @@
     //Vyvrany zaznam v tabulce s Petadaty
     private Publication selectedRecord;
     
+    //*********************Search - promenne podle,kterych se vyhledava************//
+    /** Field to be used for sorting search query results */
+    private int sortField = SORT_COLLECTIO_NNAME;
+    /** Direction of sorting. 0 = ASC, 1 = DESC. Default is ASC */
+    private int sortDirection = 0;
+    private String collectionName;
+    private Integer collectionYearPublication;
+    private String journalName;
+    private String journalAuthorName;
     
+    /** Constants used for identification of fields for sorting */
+    public static final int SORT_COLLECTIO_NNAME = 1;
+    public static final int SORT_COLLECTION_YEAR_PUBLICATION = 2;
+    public static final int SORT_JOURNAL_NAME = 3;
+    public static final int SORT_JOURNAL_AUTHOR_NAME = 4;
+  
     /**
      * Creates a new instance of PublicationManager
      */
@@ -74,7 +90,43 @@
 
     	//  Select data from tPublication table
         try {
-                query = database.createQuery(Publication.class);                                
+                query = database.createQuery(Publication.class);         
+                
+                if (collectionName != null && !collectionName.equals("")) {
+                    query.addRestriction(PlantloreConstants.RESTR_LIKE, Publication.COLLECTIONNAME, null, "%" + collectionName + "%", null);
+                }
+                if (collectionYearPublication != null && collectionYearPublication != 0) {
+                    query.addRestriction(PlantloreConstants.RESTR_LIKE, Publication.COLLECTIONYEARPUBLICATION, null, "%" + collectionYearPublication + "%", null);
+                }
+                if (journalName != null && !journalName.equals("")) {
+                    query.addRestriction(PlantloreConstants.RESTR_LIKE, Publication.JOURNALNAME, null, "%" + journalName + "%", null);
+                }
+                if (journalAuthorName != null && !journalAuthorName.equals("")) {
+                    query.addRestriction(PlantloreConstants.RESTR_LIKE, Publication.COLLECTIONNAME, null, "%" + journalAuthorName + "%", null);
+                }
+                String field;
+                switch (sortField) {
+                case 1:
+                        field = Publication.COLLECTIONNAME;
+                        break;
+                case 2:
+                        field = Publication.COLLECTIONYEARPUBLICATION;
+                        break;
+                case 3:
+                        field = Publication.JOURNALNAME;
+                        break;
+                case 4:
+                        field = Publication.JOURNALAUTHORNAME;
+                        break;                
+                default:
+                        field = Publication.COLLECTIONNAME;
+                }
+
+                if (sortDirection == 0) {
+                        query.addOrder(PlantloreConstants.DIRECT_ASC, field);
+                } else {
+                        query.addOrder(PlantloreConstants.DIRECT_DESC, field);
+                }
         } catch (RemoteException e) {
         System.err.println("RemoteException- searchPublicationData(), createQuery");
         }
@@ -105,14 +157,14 @@
             logger.debug("Max available rows: "+(fromTable+count-1));
            
             // Find out how many rows we can retrieve - it cannot be more than number of rows in the result
-            int to = Math.min(currentRow, fromTable+count-1);           
+            int to = Math.min(currentRow, fromTable+count-1);               
             if (to <= 0) {
-            	publicationList = new ArrayList<Publication>(); 
-            	setDisplayRows(0);
+            	publicationList = new ArrayList<Publication>();  
+                setDisplayRows(0);
             	setCurrentDisplayRows("0-0");
             } else {
                 logger.debug("Retrieving query results: 1 - "+to);
-                setCurrentDisplayRows(fromTable+ "-" + to);
+                setCurrentDisplayRows(fromTable+ "-" + to);                
                 try {                	 
                      // Retrieve selected row interval 
                 	Object[] objectPublication;
@@ -270,4 +322,93 @@
     public Publication getSelectedRecord() {
         return this.selectedRecord;
     }
+    
+        /**
+     *  Set field used for sorting results of the search query.
+     *  @param field numeric identificator of the field used for sorting
+     */
+    public void setSortField(int field) {
+        this.sortField = field;
+    }
+
+    /**
+     *  Set direction of sorting.
+     *  @param direction direction of sorting. 0 for ascending, 1 for descending
+     */
+    public void setSortDirection(int direction) {
+        this.sortDirection = direction;
+    }
+    
+        /**
+     *   Get name sort field
+     *   @return name sort field
+     *   @see setCollectionName
+     */
+    public String getCollectionName() {
+        return this.collectionName;
+    }
+    
+    /**
+     *   Set name sort field
+     *   @param collectionName sort field
+     *   @see getCollectionName
+     */
+    public void setCollectionName(String collectionName) {
+        this.collectionName = collectionName;        
+    }
+    
+    /**
+     *   Get year sort field
+     *   @return year sort field
+     *   @see setCollectionYearPublication
+     */
+    public Integer getCollectionYearPublication() {
+        return this.collectionYearPublication;
+    }
+    
+    /**
+     *   Set year sort field
+     *   @param collectionYearPublication sort field
+     *   @see getCollectionYearPublication
+     */
+    public void setCollectionYearPublication(int collectionYearPublication) {
+        this.collectionYearPublication = collectionYearPublication;
+    }
+    
+    /**
+     *   Get name sort field
+     *   @return name sort field
+     *   @see setJournalName
+     */
+    public String getJournalName() {
+        return this.journalName;
+    }
+    
+    /**
+     *   Set name sort field
+     *   @param journalName sort field
+     *   @see getJournalName
+     */
+    public void setJournalName(String journalName) {
+        this.journalName = journalName;
+    }
+    
+    /**
+     *   Get author sort field
+     *   @return author sort field
+     *   @see setJournalAuthorName
+     */
+    public String getJournalAuthorName() {
+        return this.journalAuthorName;
+    }
+    
+    /**
+     *   Set author sort field
+     *   @param journalAuthorName sort field
+     *   @see getJournalAuthorName
+     */
+    public void setJournalAuthorName(String journalAuthorName) {
+        this.journalAuthorName = journalAuthorName;
+    }
+        
 }

Modified: trunk/src/net/sf/plantlore/client/publication/PublicationManagerCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/publication/PublicationManagerCtrl.java	2006-04-27 15:48:10 UTC (rev 192)
+++ trunk/src/net/sf/plantlore/client/publication/PublicationManagerCtrl.java	2006-04-27 19:25:10 UTC (rev 193)
@@ -11,6 +11,8 @@
 
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import java.awt.event.FocusEvent;
+import java.awt.event.FocusListener;
 import net.sf.plantlore.common.record.Publication;
 import org.apache.log4j.Logger;
 
@@ -42,6 +44,10 @@
         view.addButtons.addActionListener(new addPublicationListener());
         view.editButtons.addActionListener(new editPublicationListener());
         view.deleteButton.addActionListener(new deletePublicationListener());
+        view.searchButton.addActionListener(new searchPublicationListener());
+        view.sortComboBox.addFocusListener(new SortComboFocusListener());
+        view.sortAscendingRadioButton.addFocusListener(new SortDirectionRadioFocusListener());
+        view.sortDescendingRadioButton.addFocusListener(new SortDirectionRadioFocusListener());
     }
     
        /**
@@ -276,4 +282,55 @@
            }          
        }
     }
+    
+    class searchPublicationListener implements ActionListener {
+       public void actionPerformed(ActionEvent actionEvent)
+       {
+           model.setCollectionName(view.collectionNameSearchText.getText());
+           //model.setCollectionYearPublication(view.collectionYearSearchText.getText());
+           model.setCollectionYearPublication(0);
+           model.setJournalName(view.journalNameSearchText.getText());
+           model.setJournalAuthorName(view.journalAuthorNameSearchText.getText());
+           //musi se nastavit podle ceho to mabyt setrizeno a zda vzestupne ci sestupne
+           //opet funkci pro vyzadani si dat postupne
+           model.searchPublication();
+           if (model.getDisplayRows() <= 0) {
+                    model.setDisplayRows(PublicationManager.DEFAULT_DISPLAY_ROWS);
+           }
+           model.processResult(1, model.getDisplayRows());
+           view.tablePublicationList.setModel(new PublicationManagerTableModel(model));                      
+           view.displayedValueLabel.setText(model.getCurrentDisplayRows());  
+           view.totalResultValueLabel.setText(((Integer)model.getResultRows()).toString());
+       }
+    }
+    
+     /**
+     *  Focus listener for the <strong>sort combobox</strong> at the search panel. After losing focus automaticaly 
+     *  stores value of the field to model.
+     */
+    class SortComboFocusListener implements FocusListener {
+        public void focusLost(FocusEvent e) {
+            model.setSortField(view.sortComboBox.getSelectedIndex());
+            logger.debug("Sort field: "+view.sortComboBox.getSelectedIndex());
+        }        
+
+        public void focusGained(FocusEvent e) {
+            // Empty
+        }
+    }    
+    
+    /**
+     *  Focus listener for the <strong>sort combobox</strong> at the search panel. After losing focus automaticaly 
+     *  stores value of the field to model.
+     */
+    class SortDirectionRadioFocusListener implements FocusListener {
+        public void focusLost(FocusEvent e) {
+            model.setSortDirection(view.getSortDirection());
+            logger.debug("Sort asc, dsc: "+ view.getSortDirection());
+        }        
+
+        public void focusGained(FocusEvent e) {
+            // Empty
+        }
+    }                
 }

Modified: trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.form	2006-04-27 15:48:10 UTC (rev 192)
+++ trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.form	2006-04-27 19:25:10 UTC (rev 193)
@@ -1,6 +1,13 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 
 <Form version="1.3" type="org.netbeans.modules.form.forminfo.JDialogFormInfo">
+  <NonVisualComponents>
+    <Component class="javax.swing.ButtonGroup" name="sortButtonGroup">
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+  </NonVisualComponents>
   <Properties>
     <Property name="defaultCloseOperation" type="int" value="2"/>
   </Properties>
@@ -24,7 +31,7 @@
                   <Component id="jPanel1" alignment="0" max="32767" attributes="0"/>
                   <Group type="102" alignment="1" attributes="0">
                       <Component id="helpButton" min="-2" max="-2" attributes="0"/>
-                      <EmptySpace pref="757" max="32767" attributes="0"/>
+                      <EmptySpace pref="775" max="32767" attributes="0"/>
                       <Component id="closeButton" min="-2" max="-2" attributes="0"/>
                   </Group>
               </Group>
@@ -64,12 +71,12 @@
               <Group type="102" alignment="1" attributes="0">
                   <EmptySpace max="-2" attributes="0"/>
                   <Group type="103" groupAlignment="1" attributes="0">
-                      <Component id="jScrollPane1" alignment="0" pref="919" max="32767" attributes="0"/>
+                      <Component id="jScrollPane1" alignment="0" pref="937" max="32767" attributes="0"/>
                       <Group type="102" alignment="1" attributes="0">
                           <Group type="103" groupAlignment="1" attributes="0">
                               <Group type="102" alignment="1" attributes="0">
                                   <Component id="previousButton" min="-2" pref="107" max="-2" attributes="0"/>
-                                  <EmptySpace pref="154" max="32767" attributes="0"/>
+                                  <EmptySpace pref="172" max="32767" attributes="0"/>
                                   <Component id="totalResultLabel" min="-2" max="-2" attributes="0"/>
                                   <EmptySpace max="-2" attributes="0"/>
                                   <Component id="totalResultValueLabel" min="-2" max="-2" attributes="0"/>

Modified: trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.java	2006-04-27 15:48:10 UTC (rev 192)
+++ trunk/src/net/sf/plantlore/client/publication/PublicationManagerView.java	2006-04-27 19:25:10 UTC (rev 193)
@@ -30,6 +30,9 @@
         super(parent, modal);
         this.model = model;
         initComponents();
+        sortButtonGroup.add(sortAscendingRadioButton);
+        sortButtonGroup.add(sortDescendingRadioButton);
+        sortButtonGroup.setSelected(sortAscendingRadioButton.getModel(), true);
         this.tablePublicationList.setRowSelectionAllowed(true);
         this.tablePublicationList.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
         this.tablePublicationList.setModel(new PublicationManagerTableModel(model));  
@@ -67,6 +70,14 @@
     	JOptionPane.showMessageDialog(this, "No row was selected.", "Information about selected row", JOptionPane.ERROR_MESSAGE);               
     } 
     
+     public int getSortDirection() {
+        if (this.sortButtonGroup.isSelected(this.sortAscendingRadioButton.getModel()) == true) {
+            return 0;
+        } else {
+            return 1;
+        }
+    }
+    
     /** This method is called from within the constructor to
      * initialize the form.
      * WARNING: Do NOT modify this code. The content of this method is
@@ -74,6 +85,7 @@
      */
     // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
     private void initComponents() {
+        sortButtonGroup = new javax.swing.ButtonGroup();
         jPanel1 = new javax.swing.JPanel();
         jScrollPane1 = new javax.swing.JScrollPane();
         tablePublicationList = new javax.swing.JTable();
@@ -153,12 +165,12 @@
             .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                 .addContainerGap()
                 .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
-                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 919, Short.MAX_VALUE)
+                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 937, Short.MAX_VALUE)
                     .add(jPanel1Layout.createSequentialGroup()
                         .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                             .add(jPanel1Layout.createSequentialGroup()
                                 .add(previousButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
-                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 154, Short.MAX_VALUE)
+                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 172, Short.MAX_VALUE)
                                 .add(totalResultLabel)
                                 .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                 .add(totalResultValueLabel)
@@ -324,7 +336,7 @@
                     .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                         .add(helpButton)
-                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 757, Short.MAX_VALUE)
+                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 775, Short.MAX_VALUE)
                         .add(closeButton)))
                 .addContainerGap())
         );
@@ -380,6 +392,7 @@
     protected javax.swing.JButton previousButton;
     protected javax.swing.JButton searchButton;
     protected javax.swing.JRadioButton sortAscendingRadioButton;
+    protected javax.swing.ButtonGroup sortButtonGroup;
     protected javax.swing.JComboBox sortComboBox;
     protected javax.swing.JRadioButton sortDescendingRadioButton;
     protected javax.swing.JTable tablePublicationList;

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties	2006-04-27 15:48:10 UTC (rev 192)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties	2006-04-27 19:25:10 UTC (rev 193)
@@ -36,7 +36,7 @@
 dataImportTooltip=Imports occurence records into the database
 dataExport=&Export
 dataExportTooltip=Exports selected records
-dataSearch=&Search
+dataSearch=&Search/Sort
 dataSearchTooltip=Invokes the search dialog
 dataSort= Sort by:
 sortAscending = Ascending



From tkovarik at gmail.com  Fri Apr 28 19:05:09 2006
From: tkovarik at gmail.com (Tomas Kovarik)
Date: Fri, 28 Apr 2006 19:05:09 +0200
Subject: [Plantlore-dev] Upravy v DBLayer
Message-ID: <ea88f1620604281005p3c9f42afs1421644ea6bb207e@mail.gmail.com>

Ahojte,

tu je zoznam uprav ktore som spravil v DBLayer (POPIS), ako ich pouzivat
(POUZITIE) a co potrebujete upravit v kode (UPRAVY) aby to fungovalo

* Prihlasovanie uzivatelov
POPIS: Pridal som kontrolu uzivatelskeho mena s tym co je v tabulke tUser
POUZITIE: Tak ako doteraz, to co sa posiela ako meno a heslo do initialize()
sa pouzije
UPRAVY: Pridat si do databaze do tabulky tUser zaznam kde bude login napr.
sysdba a heslo masterkey (to co pouzivate k DB)
TODO: Tahat data o pripojeni k DB z konfiguraku na serveri

* Historia
POPIS: Automaticky sa do tabuliek historie uklada INSERT a DELETE zaznamov
typu Occurrence, Author, Publication, Territory, Village, Phytochoria
POUZITIE: Nothing special. Lada moze pouzit metody executeInsertHistory(),
executeDeleteHistory() a executeUpdateHistory() ktore do historie nic
neukladaju
UPRAVY: Potreba upravit databazu. LADA, prosim zakomponuj tieto upravy do
aktualneho DBModelu.
- Tabulka tHistoryChange - zrusit NOT NULL obmedzenie na stlpec
COCCURRENCEID
- Tabulka tHistoryChange - pridat zaznamy, kde CTABLENAME je: author,
publication, occurrence, phytochorion, territory, village. CCOLUMNNAME je
vzdy NULL.
TODO: Este pracujem na ukladani UPDATE, bude coskoro

* Sessions
POPIS: Pouzitie sessions pre jednotlive operacie. Insert, delete v pohode,
co sa selectu tyka, nova session sa otvara ked volate createQuery(). Je
potreba ju explicitne zatvorit - Teraz to sice funguje ale sessions ostavaju
visiet.
POUZITIE: Jedina nova vec je ukoncenie select dotazu a prislusnej session -
je na to metoda closeQuery(). Volajte ju, ked uz session nepotrebujete
(zavretie dialogoveho okna, volanie nejakeho noveho dotazu atp.)
UPRAVY: Pridat zatvaranie dotazov. Metoda closeQuery() ma parameter typu
SelectQuery - Je teda potreba drzat si SelectQuery po dobu pouzivania toho
dotazu.
TODO: Dokoncit a otestovat UPDATE

* Rozne
- DISTINCT: Pridana metoda setDistinct() v SelectQuery. Funguje tak, ze
vyluci z vysledku riadky ktore sa rovnaju (musia byt _uplne_ rovnake)
Druha moznost je pouzit pprojekciu PROJ_DISTINCT v
SelectQuery::addProjection(), ale ta zase spravi DISTINCT len ak to je
jedina projekcia v dotaze, ktory robite.
- Prava - Pracujem na tom filtrovani, zatial je upravena metoda initialize()
v HibernateDBLayer tak, ze vracia objekt Right pre uzivatela, ktory sa
autentifikoval (cize na zaklade neho si mozete robit vyber stlpcov atp.)


Bude to chciet este nejake dalsie upravy, ktore by som rad dokocil
dnes/zajtra rano. Ak by bol nejaky problem, dajte mi vediet. Dufam, ze som
na nic nezabudol.

Majte sa

Kovo
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060428/e3db4466/attachment.html>

From kovo at berlios.de  Fri Apr 28 19:13:23 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Fri, 28 Apr 2006 19:13:23 +0200
Subject: [Plantlore-dev] r194 - in trunk/src/net/sf/plantlore: client/authors common middleware server
Message-ID: <200604281713.k3SHDNKq003133@sheep.berlios.de>

Author: kovo
Date: 2006-04-28 19:12:59 +0200 (Fri, 28 Apr 2006)
New Revision: 194

Modified:
   trunk/src/net/sf/plantlore/client/authors/AuthorManager.java
   trunk/src/net/sf/plantlore/common/PlantloreConstants.java
   trunk/src/net/sf/plantlore/middleware/DBLayer.java
   trunk/src/net/sf/plantlore/middleware/SelectQuery.java
   trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
   trunk/src/net/sf/plantlore/server/SelectQueryImplementation.java
Log:
Major DBLayer update. Added history, authentication, sessions and other minor changes.

Modified: trunk/src/net/sf/plantlore/client/authors/AuthorManager.java
===================================================================
--- trunk/src/net/sf/plantlore/client/authors/AuthorManager.java	2006-04-27 19:25:10 UTC (rev 193)
+++ trunk/src/net/sf/plantlore/client/authors/AuthorManager.java	2006-04-28 17:12:59 UTC (rev 194)
@@ -12,6 +12,8 @@
 import java.util.Observable;
 import net.sf.plantlore.common.PlantloreConstants;
 import net.sf.plantlore.common.record.Author;
+import net.sf.plantlore.common.record.AuthorOccurrence;
+import net.sf.plantlore.common.record.Occurrence;
 import net.sf.plantlore.middleware.DBLayer;
 import net.sf.plantlore.middleware.SelectQuery;
 import net.sf.plantlore.server.DBLayerException;
@@ -37,7 +39,7 @@
     /** Organization of the author */
     private String organization;
     /** Role of the author */
-    private String role;   
+    private String role;
     /** Address of the author */
     private String address;
     /** Phone number of the author */
@@ -55,13 +57,13 @@
     /** Role field used for searching */
     private String searchRole;
     /** Email field used for searching */
-    private String searchEmail;            
+    private String searchEmail;
     /** Flag telling whether a long running operation has already finished */
     private boolean done;
     /** Result of the search query */
     private int resultId = 0;
     /** Constant with default number of rows to display */
-    private static final int DEFAULT_DISPLAY_ROWS = 10;    
+    private static final int DEFAULT_DISPLAY_ROWS = 10;
     /** Actual number of rows to display */
     private int displayRows = DEFAULT_DISPLAY_ROWS;
     /** Data (results of a search query) displayed in the table */
@@ -80,22 +82,22 @@
     public static final int SORT_ORGANIZATION = 2;
     public static final int SORT_ROLE = 3;
     public static final int SORT_EMAIL = 4;
-    public static final int SORT_PHONE = 5;    
-    public static final int SORT_URL = 6;        
-    /** 
+    public static final int SORT_PHONE = 5;
+    public static final int SORT_URL = 6;
+    /**
      *  Creates a new instance of AuthorManager.
      *  @param database Instance of a database management object
      */
     public AuthorManager(DBLayer database) {
         logger = Logger.getLogger(this.getClass().getPackage().getName());
         this.database = database;
-    }    
+    }
     
     /**
      *  Save new author to the database. Information about the author are stored in data fields of this class.
      *  Operation is executed in a separate thread using <code>SwingWorker</code>. Error is set in case of an exception.
      */
-    public void saveAuthor() {     
+    public void saveAuthor() {
         final SwingWorker worker = new SwingWorker() {
             public Object construct() {
                 // The operation is not finished yet
@@ -122,10 +124,10 @@
                     done = true;
                     return null;
                 } catch(RemoteException e) {
-                	System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
+                    System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
                 }
                 logger.info("Author "+name+" saved successfuly.");
-                if (isResultAvailable()) {                
+                if (isResultAvailable()) {
                     searchAuthor();
                 }
                 done = true;
@@ -133,7 +135,7 @@
             }
         };
         worker.start();
-    }    
+    }
     
     /**
      *  Delete an author from the database. To-be-deleted author is identified by his ID and is
@@ -143,28 +145,28 @@
         final SwingWorker worker = new SwingWorker() {
             public Object construct() {
                 // Operation not finished yet
-                done = false;                
+                done = false;
                 try {
                     // Execute query
-                    database.executeDelete((Author)data.get(getAuthorIndex()));                            
+                    database.executeDelete((Author)data.get(getAuthorIndex()));
                 } catch (DBLayerException e) {
                     // Log and set an error
                     logger.error("Deleting author failed. Unable to execute delete query.");
                     setError(e);
-                    // Set operation state to finished                    
-                    done = true;       
+                    // Set operation state to finished
+                    done = true;
                     return null;
                 } catch(RemoteException e) {
-                	System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
+                    System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
                 }
                 // Execute author search - required in order to display up-to-date data in the table of authors
-                searchAuthor();                
+                searchAuthor();
                 // Set operation state to finished
-                done = true;       
+                done = true;
                 return null;
-            }        
+            }
         };
-        worker.start();            
+        worker.start();
     }
     
     public void editAuthor() {
@@ -178,115 +180,133 @@
     public void searchAuthor() {
         final SwingWorker worker = new SwingWorker() {
             public Object construct() {
+/*
+                SelectQuery query;
+                Integer qid;
+                Occurrence nalez;
+                try {
+                    query = database.createQuery(Occurrence.class);
+                    query.addRestriction(PlantloreConstants.RESTR_EQ, Occurrence.ID, null, 17, null);
+                    qid = database.executeQuery(query);
+                    Object[] vysledky = database.next(qid);
+                    nalez = (Occurrence)vysledky[0];
+                    System.out.println("dlzka vysledkov: "+vysledky.length);
+                    query = database.createQuery(AuthorOccurrence.class);
+                    query.addRestriction(PlantloreConstants.RESTR_EQ, AuthorOccurrence.OCCURRENCE, null, nalez, null);
+                    query.addRestriction(PlantloreConstants.RESTR_EQ, AuthorOccurrence.ROLE, null, "collect", null);
+                    qid = database.executeQuery(query);
+                    Object[] vysledky2 = database.next(qid);
+                    AuthorOccurrence autOcc = (AuthorOccurrence)vysledky2[0];
+                    System.out.println(autOcc.getAuthor().getWholeName());
+                } catch(RemoteException e) {
+                    System.err.println("RemoteException- searchInsertInfo(), createQuery");
+                } catch (DBLayerException e1) {
+                    System.out.println("DBLayer exception");
+                }
+ 
+                query = database.createQuery(Authors.class);
+                query.createAlias("authorsOccurrences", "ao");
+                query.addRestriction(PlantloreConstants.RESTR_EQ, ao.OCCURRENCE, null, occurrence, null);
+ */
                 // Operation not finished yet
-                done = false;                
+                done = false;
                 // Create new Select query
                 SelectQuery query;
                 try {
-					query = database.createQuery(Author.class);
-
-					if (searchName != null)
-						query.addRestriction(PlantloreConstants.RESTR_LIKE,
-								Author.WHOLENAME, null, "%" + searchName + "%",
-								null);
-					if (searchOrganization != null)
-						query.addRestriction(PlantloreConstants.RESTR_LIKE,
-								Author.ORGANIZATION, null, "%"
-										+ searchOrganization + "%", null);
-					if (searchRole != null)
-						query
-								.addRestriction(PlantloreConstants.RESTR_LIKE,
-										Author.ROLE, null, "%" + searchRole
-												+ "%", null);
-					if (searchEmail != null)
-						query.addRestriction(PlantloreConstants.RESTR_LIKE,
-								Author.EMAIL, null, "%" + searchEmail + "%",
-								null);
-					String field;
-					switch (sortField) {
-					case 1:
-						field = Author.WHOLENAME;
-						break;
-					case 2:
-						field = Author.ORGANIZATION;
-						break;
-					case 3:
-						field = Author.ROLE;
-						break;
-					case 4:
-						field = Author.EMAIL;
-						break;
-					case 5:
-						field = Author.PHONENUMBER;
-						break;
-					case 6:
-						field = Author.URL;
-						break;
-					default:
-						field = Author.WHOLENAME;
-					}
-
-					if (sortDirection == 0) {
-						query.addOrder(PlantloreConstants.DIRECT_ASC, field);
-					} else {
-						query.addOrder(PlantloreConstants.DIRECT_DESC, field);
-					}
-					int resultId = 0;
-					try {
-						// Execute query
-						resultId = database.executeQuery(query);
-					} catch (DBLayerException e) {
-						// Log and set an error
-						logger
-								.error("Searching authors failed. Unable to execute search query.");
-						setError(e);
-						// setError("Searching authors failed. Please contact
-						// your administrator.");
-					} finally {
-						// Set operation state to finished
-						done = true;
-						// Save the results
-						setResult(resultId);
-					}
-					return resultId;
-				} catch (RemoteException e) {
-					System.err
-							.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
-					return null;
-				}
+                    query = database.createQuery(Author.class);                    
+                    if (searchName != null)
+                        query.addRestriction(PlantloreConstants.RESTR_LIKE, Author.WHOLENAME, null, "%" + searchName + "%", null);
+                    if (searchOrganization != null)
+                        query.addRestriction(PlantloreConstants.RESTR_LIKE, Author.ORGANIZATION, null, "%" + searchOrganization + "%", null);
+                    if (searchRole != null)
+                        query.addRestriction(PlantloreConstants.RESTR_LIKE, Author.ROLE, null, "%" + searchRole + "%", null);
+                    if (searchEmail != null)
+                        query.addRestriction(PlantloreConstants.RESTR_LIKE, Author.EMAIL, null, "%" + searchEmail + "%", null);
+                    String field;
+                    switch (sortField) {
+                        case 1:
+                            field = Author.WHOLENAME;
+                            break;
+                        case 2:
+                            field = Author.ORGANIZATION;
+                            break;
+                        case 3:
+                            field = Author.ROLE;
+                            break;
+                        case 4:
+                            field = Author.EMAIL;
+                            break;
+                        case 5:
+                            field = Author.PHONENUMBER;
+                            break;
+                        case 6:
+                            field = Author.URL;
+                            break;
+                        default:
+                            field = Author.WHOLENAME;
+                    }
+                    
+                    if (sortDirection == 0) {
+                        query.addOrder(PlantloreConstants.DIRECT_ASC, field);
+                    } else {
+                        query.addOrder(PlantloreConstants.DIRECT_DESC, field);
+                    }
+                    int resultId = 0;
+                    try {
+                        // Execute query
+                        resultId = database.executeQuery(query);
+                    } catch (DBLayerException e) {
+                        // Log and set an error
+                        logger
+                                .error("Searching authors failed. Unable to execute search query.");
+                        setError(e);
+                        // setError("Searching authors failed. Please contact
+                        // your administrator.");
+                    } finally {
+                        // Set operation state to finished
+                        done = true;
+                        // Save the results
+                        setResult(resultId);
+                    }
+                    return resultId;
+                } catch (RemoteException e) {
+                    System.err
+                            .println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
+                    return null;
+                }
             }
         };
         worker.start();
     }
-
+    
     /**
-	 * Checks whether an error is set. If yes, notifies observers to display it.
-	 * Finally unsets the error flag.
-	 * 
-	 * @return <code>true</code> if an error was set (and observers were
-	 *         notified), <code>false</code> otherwise
-	 */
+     * Checks whether an error is set. If yes, notifies observers to display it.
+     * Finally unsets the error flag.
+     *
+     * @return <code>true</code> if an error was set (and observers were
+     *         notified), <code>false</code> otherwise
+     */
     public boolean processErrors() {
         if (this.error != null) {
             setChanged();
-            notifyObservers();        
+            notifyObservers();
             this.error = null;
             return true;
         }
         return false;
     }
-
+    
     /**
-	 * Process results of a search query. Retrieves results using the database
-	 * management object (DBLayer) and stores them in the data field of the
-	 * class. Notifies observers about the changes. Sets an error in case of an
-	 * exception.
-	 * 
-	 * @param from
-	 *            number of the first row to retrieve.
-	 * @param count
-	 *            number of rows to retrieve
-	 */
+     * Process results of a search query. Retrieves results using the database
+     * management object (DBLayer) and stores them in the data field of the
+     * class. Notifies observers about the changes. Sets an error in case of an
+     * exception.
+     *
+     * @param from
+     *            number of the first row to retrieve.
+     * @param count
+     *            number of rows to retrieve
+     */
     public void processResults(int from, int count) {
         if (this.resultId != 0) {
             logger.debug("Rows in the result: "+getResultRows());
@@ -294,19 +314,19 @@
             // Find out how many rows we can retrieve - it cannot be more than number of rows in the result
             int to = Math.min(getResultRows(), from+count-1);
             if (to == 0) {
-                this.data = new ArrayList();                
+                this.data = new ArrayList();
             } else {
-                logger.debug("Retrieving query results: "+from+" - "+to);                
+                logger.debug("Retrieving query results: "+from+" - "+to);
                 try {
                     // Retrieve selected row interval
-                	Object[] objArray;
-                	try {
-                            // FIXME: Should change all the usages of processResults to use 0 as the index of the forst row
-                            // from-1 and to-1 just temporary
-                            objArray = database.more(resultId, from-1, to-1);
-                	} catch(RemoteException e) {
-                    	System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
-                    	return;
+                    Object[] objArray;
+                    try {
+                        // FIXME: Should change all the usages of processResults to use 0 as the index of the forst row
+                        // from-1 and to-1 just temporary
+                        objArray = database.more(resultId, from-1, to-1);
+                    } catch(RemoteException e) {
+                        System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
+                        return;
                     }
                     logger.debug("Results retrieved. Count: "+objArray.length);
                     // Create storage for the results
@@ -321,10 +341,10 @@
                     logger.error("Processing search results failed: "+e.toString());
                     setError(e);
                 }
-                // Update current first displayed row (only if data retrieval was successful). 
+                // Update current first displayed row (only if data retrieval was successful).
                 if (!this.isError()) {
                     // Update current first displayed row
-                    setCurrentFirstRow(from);            
+                    setCurrentFirstRow(from);
                 }
             }
             // Tell observers to update
@@ -350,7 +370,7 @@
         this.setUrl(selectedAuth.getUrl());
         this.setNote(selectedAuth.getNote());
         setChanged();
-        notifyObservers();        
+        notifyObservers();
     }
     
     /**
@@ -368,13 +388,13 @@
     public int getResult() {
         return this.resultId;
     }
-       
+    
     public int getResultRows() {
-    	int result = 0;
+        int result = 0;
         if (resultId != 0) try {
-        	result = database.getNumRows(resultId);
+            result = database.getNumRows(resultId);
         } catch(RemoteException e) {
-        	System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
+            System.err.println("Kdykoliv se pracuje s DBLayer nebo SelectQuery, musite hendlovat RemoteException");
         }
         return result;
     }
@@ -426,7 +446,7 @@
     /**
      *  Set index of currently selected author. The index is used to locate author record in the data field.
      *  @param index index of currently selected author
-     */    
+     */
     protected void setAuthorIndex(int index) {
         this.authorIndex = index;
     }
@@ -462,7 +482,7 @@
     public void setCurrentFirstRow(int row) {
         this.currentFirstRow = row;
     }
-      
+    
     /**
      *  Indicates whether a long running operation executed in a separate thread has already finished.
      *  @return true if the operation is finished (no operation running), false otherwise
@@ -470,7 +490,7 @@
     public boolean isOperationDone() {
         return this.done;
     }
-            
+    
     /**
      *  Indicate whether result of a search query is available at the momoent
      *  @return true if search query result is available
@@ -489,7 +509,7 @@
     public void setSortField(int field) {
         this.sortField = field;
     }
-
+    
     /**
      *  Set direction of sorting.
      *  @param direction direction of sorting. 0 for ascending, 1 for descending
@@ -497,11 +517,11 @@
     public void setSortDirection(int direction) {
         this.sortDirection = direction;
     }
-
+    
     /**
      *  Set name search field.
      *  @param name name of author to search for
-     */    
+     */
     public void setSearchName(String name) {
         this.searchName = name;
     }
@@ -509,7 +529,7 @@
     /**
      *  Set organization search field.
      *  @param organization organization of author used for searching
-     */    
+     */
     public void setSearchOrganization(String organization) {
         this.searchOrganization = organization;
     }
@@ -517,7 +537,7 @@
     /**
      *  Set role search field.
      *  @param role role of author used for searching
-     */    
+     */
     public void setSearchRole(String role) {
         this.searchRole = role;
     }
@@ -525,7 +545,7 @@
     /**
      *  Set email search field.
      *  @param email email of author used for searching
-     */    
+     */
     public void setSearchEmail(String email) {
         this.searchEmail = email;
     }
@@ -537,7 +557,7 @@
     public String getName() {
         return name;
     }
-
+    
     /**
      *  Set name of the author.
      *  @param name name of the author
@@ -545,7 +565,7 @@
     public void setName(String name) {
         this.name = name;
     }
-
+    
     /**
      *  Get organization of the author.
      *  @return string with the organization of the author
@@ -553,7 +573,7 @@
     public String getOrganization() {
         return organization;
     }
-
+    
     /**
      *  Set organization of the author.
      *  @param organization organization of the author
@@ -561,7 +581,7 @@
     public void setOrganization(String organization) {
         this.organization = organization;
     }
-
+    
     /**
      *  Get role of the author.
      *  @return string with the role of the author
@@ -569,7 +589,7 @@
     public String getRole() {
         return role;
     }
-
+    
     /**
      *  Set role of the author.
      *  @param role role of the author
@@ -577,7 +597,7 @@
     public void setRole(String role) {
         this.role = role;
     }
-
+    
     /**
      *  Get address of the author.
      *  @return string with the address of the author
@@ -585,7 +605,7 @@
     public String getAddress() {
         return address;
     }
-
+    
     /**
      *  Set address of the author.
      *  @param address address of the author
@@ -593,7 +613,7 @@
     public void setAddress(String address) {
         this.address = address;
     }
-
+    
     /**
      *  Get phone number of the author.
      *  @return string with the phone number of the author
@@ -601,7 +621,7 @@
     public String getPhoneNumber() {
         return phoneNumber;
     }
-
+    
     /**
      *  Set phone number of the author.
      *  @param phoneNumber phone number of the author
@@ -609,7 +629,7 @@
     public void setPhoneNumber(String phoneNumber) {
         this.phoneNumber = phoneNumber;
     }
-
+    
     /**
      *  Get email of the author.
      *  @return string with the email of the author
@@ -617,7 +637,7 @@
     public String getEmail() {
         return email;
     }
-
+    
     /**
      *  Set email of the author.
      *  @param email email of the author
@@ -625,7 +645,7 @@
     public void setEmail(String email) {
         this.email = email;
     }
-
+    
     /**
      *  Get URL of the author.
      *  @return string with the URL of the author
@@ -633,7 +653,7 @@
     public String getUrl() {
         return url;
     }
-
+    
     /**
      *  Set URL of the author.
      *  @param url URL of the author
@@ -641,7 +661,7 @@
     public void setUrl(String url) {
         this.url = url;
     }
-
+    
     /**
      *  Get note of the author.
      *  @return string with the note of the author
@@ -649,12 +669,12 @@
     public String getNote() {
         return note;
     }
-
+    
     /**
      *  Set note of the author.
      *  @param note note of the author
      */
     public void setNote(String note) {
         this.note = note;
-    }    
+    }
 }
\ No newline at end of file

Modified: trunk/src/net/sf/plantlore/common/PlantloreConstants.java
===================================================================
--- trunk/src/net/sf/plantlore/common/PlantloreConstants.java	2006-04-27 19:25:10 UTC (rev 193)
+++ trunk/src/net/sf/plantlore/common/PlantloreConstants.java	2006-04-28 17:12:59 UTC (rev 194)
@@ -72,6 +72,10 @@
     public static final int DIRECT_ASC            = 60;
     public static final int DIRECT_DESC           = 61;    
             
+    public static final int INSERT                = 1;
+    public static final int UPDATE                = 2;
+    public static final int DELETE                = 3;
+    
     /** Creates a new instance of PlantloreConstants */
     public PlantloreConstants() {
     }

Modified: trunk/src/net/sf/plantlore/middleware/DBLayer.java
===================================================================
--- trunk/src/net/sf/plantlore/middleware/DBLayer.java	2006-04-27 19:25:10 UTC (rev 193)
+++ trunk/src/net/sf/plantlore/middleware/DBLayer.java	2006-04-28 17:12:59 UTC (rev 194)
@@ -10,6 +10,7 @@
 import java.io.Serializable;
 import java.rmi.Remote;
 import java.rmi.RemoteException;
+import net.sf.plantlore.common.record.Right;
 import net.sf.plantlore.server.DBLayerException;
 
 /**
@@ -22,7 +23,7 @@
 public interface DBLayer extends Remote, Serializable {
     
     /** Initialize database connection */
-    void initialize(String dbID, String user, String password) throws DBLayerException, RemoteException;
+    Right initialize(String dbID, String user, String password) throws DBLayerException, RemoteException;
     
     public int executeInsert(Object data) throws DBLayerException, RemoteException;
     
@@ -38,10 +39,13 @@
         
     public void close() throws DBLayerException, RemoteException;
     
+    // TODO: Pridat throws DBLayerException
     public SelectQuery createQuery(Class classname) throws RemoteException;
 
     public int executeQuery(SelectQuery query) throws DBLayerException, RemoteException;
     
+    public void closeQuery(SelectQuery query);
+    
     public void shutdown() throws RemoteException;
         
 }

Modified: trunk/src/net/sf/plantlore/middleware/SelectQuery.java
===================================================================
--- trunk/src/net/sf/plantlore/middleware/SelectQuery.java	2006-04-27 19:25:10 UTC (rev 193)
+++ trunk/src/net/sf/plantlore/middleware/SelectQuery.java	2006-04-28 17:12:59 UTC (rev 194)
@@ -31,6 +31,8 @@
      */    
     void createAlias(String propertyName, String aliasName)  throws RemoteException;
     
+    void setDistinct() throws RemoteException;
+    
     /**
      *  Add restriction to the constructed criteria. Restrictions are parts of the where condition.
      *

Modified: trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-27 19:25:10 UTC (rev 193)
+++ trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-28 17:12:59 UTC (rev 194)
@@ -1,7 +1,7 @@
 /*
  * HibernateDBLayer.java
  *
- * Created on 18. ?nor 2006, 22:31
+ * Created on April 18, 2006, 22:31
  *
  */
 
@@ -13,6 +13,18 @@
 import java.rmi.server.UnicastRemoteObject;
 import java.rmi.server.Unreferenced;
 import java.util.Hashtable;
+import net.sf.plantlore.common.PlantloreConstants;
+import net.sf.plantlore.common.record.Author;
+import net.sf.plantlore.common.record.HistoryChange;
+import net.sf.plantlore.common.record.HistoryColumn;
+import net.sf.plantlore.common.record.HistoryRecord;
+import net.sf.plantlore.common.record.Occurrence;
+import net.sf.plantlore.common.record.Phytochorion;
+import net.sf.plantlore.common.record.Publication;
+import net.sf.plantlore.common.record.Right;
+import net.sf.plantlore.common.record.Territory;
+import net.sf.plantlore.common.record.User;
+import net.sf.plantlore.common.record.Village;
 import org.apache.log4j.Logger;
 import org.hibernate.HibernateException;
 import org.hibernate.ScrollableResults;
@@ -30,26 +42,35 @@
  *  
  *  TODO: Nezapominat generovat stub! (rmic net.sf.plantlore.server.HibernateDBLayer)
  *
- *  @author Tom?? Kova??k (database parts), Erik Kratochv?l (rmi parts)
+ *  @author Tomas Kovarik (database parts), Erik Kratochvil (rmi parts)
  *  @version far from ready!
  */
 public class HibernateDBLayer implements DBLayer, Unreferenced {
     /** Instance of a logger */
     private Logger logger;
     /** Configuration file for Hibernate */
-    private File configFile;   
-    /** Hibernate session */
-    private Session session;
+    private File configFile;
     /** Pool of select queries */        
     private Hashtable<Integer, ScrollableResults> results;
     /** Maximum result ID used */
     private int maxResultId;
     
+    private int maxSessionId;
+    /** Session factory for creating Hibernate sessions */
+    private SessionFactory sessionFactory;    
+    /** List of select queries */
+    private Hashtable<SelectQuery, SelectQuery> queries;    
     
-    private Hashtable<SelectQuery, SelectQuery> queries;
+    private Hashtable<SelectQuery, Session> sessions;
+    /** Authenticated user */
+    private User plantloreUser;
+    /** Rights of the authenticated user */
+    private Right rights;    
     
+    private static final int INITIAL_POOL_SIZE = 8;
     
-    /** Creates a new instance of HibernateDBLayer.
+    /**
+     * Creates a new instance of HibernateDBLayer.
      * 
      *  @param undertaker The object that is responsible for cleanup if the client crashes. 
      */
@@ -61,31 +82,29 @@
     
     /** Creates a new instance of HibernateDBLayer */
     public HibernateDBLayer() {
-        logger = Logger.getLogger(this.getClass().getPackage().getName());
-        
-        
-        logger.debug("      Constructing a new HibernateDBLayer ...");
-        
-        // Initialize pool of result sets, initial capacity = 8
-        results = new Hashtable<Integer, ScrollableResults>(8); 
+        logger = Logger.getLogger(this.getClass().getPackage().getName());                
+        logger.debug("      Constructing a new HibernateDBLayer ...");        
+        // Initialize pool of result sets, initial capacity = INITIAL POOL SIZE
+        results = new Hashtable<Integer, ScrollableResults>(INITIAL_POOL_SIZE); 
         // Initialize maximum result id
-        maxResultId = 0;
-        
-        // Table of all living queries, initial capacity = 8
-        queries = new Hashtable<SelectQuery, SelectQuery>(8);
-        
+        maxResultId = 0;        
+        maxSessionId = 0;
+        // Table of all living queries, initial capacity = INITIAL_POOL_SIZE
+        queries = new Hashtable<SelectQuery, SelectQuery>(INITIAL_POOL_SIZE);        
+        sessions = new Hashtable<SelectQuery, Session>(INITIAL_POOL_SIZE);
         logger.debug("      completed.");
     }    
     
     /**
      *  Initialize database connection. Fire up Hibernate and open a session.
+     *  Authenticate user and Load rights of this user
      *  
-     *  FIXME prepracovat initialize tak, aby pouzival zaslane informace & nacitala prava!
-     *  
      *  @throws DBLayerException when the hibernate or database connection cannot be initialized
      */
-    public void initialize(String dbID, String user, String password) throws DBLayerException {
+    public Right initialize(String dbID, String user, String password) throws DBLayerException {
         Configuration cfg;
+        int result = 0;
+        
         // File containing Hibernate configuration
         configFile = new File("hibernate.cfg.xml");        
         // Load Hibernate configuration
@@ -95,23 +114,39 @@
             logger.fatal("Cannot load Hibernate configuration. Details: "+e.getMessage());
             throw new DBLayerException("Cannot load Hibernate configuration. Details: "+e.getMessage());            
         }
-
-        //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Temp/plantloreHIBdata.fdb");
-        //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:c:/Kovo/DatabaseTest/database/plantlore.fdb");
-        //cfg.setProperty("hibernate.connection.url", "jdbc:firebirdsql:localhost/3050:/mnt/data/temp/plantloreHIBdata.fdb");
+        // TODO: this should be loaded from a configuration file on the server
+        // We are temporarily using this for DB authetication and user athentication as well
         cfg.setProperty("hibernate.connection.url", dbID);
-        //cfg.setProperty("hibernate.connection.url", "jdbc:postgresql://localhost:5432/plantlore");
         cfg.setProperty("hibernate.connection.username", user);
         cfg.setProperty("hibernate.connection.password", password);        
         try {
             // Build session factory
-            SessionFactory sessionFactory = cfg.buildSessionFactory();
-            // Open Session
-            this.session = sessionFactory.openSession();                
+            sessionFactory = cfg.buildSessionFactory();
         } catch (HibernateException e) {
-            logger.fatal("Cannot create Hibernate session. Details: "+e.getMessage());
-            throw new DBLayerException("Cannot create Hibernate session. Details: "+e.getMessage());                        
+            logger.fatal("Cannot build Hibernate session factory. Details: "+e.getMessage());
+            throw new DBLayerException("Cannot build Hibernate session factory. Details: "+e.getMessage());
         }        
+        // Authenticate user
+        try {
+            SelectQuery sq = this.createQuery(User.class);            
+            sq.addRestriction(PlantloreConstants.RESTR_EQ, User.LOGIN, null, user, null);
+            result = this.executeQuery(sq);
+        } catch (RemoteException e) {
+            logger.fatal("Cannot load user information. Details: "+e.getMessage());
+        }
+        Object[] userinfo = next(result);
+        if (userinfo == null) {
+            // Authentication failed, close DB connection
+            sessionFactory.close();
+            sessionFactory = null;
+            logger.warn("Authentication of user "+user+" failed!");
+            return null;
+        } else {
+            User clientUser = (User)userinfo[0];
+            this.rights = clientUser.getRight();           
+            this.plantloreUser = clientUser;
+        }
+        return rights;
     }    
     
     /**
@@ -122,7 +157,105 @@
      *  @throws DBLayerException when saving data into the database fails
      */
     public int executeInsert(Object data) throws DBLayerException {
+        int recordId, id, result = 0;        
+        String table;
+        HistoryColumn column;
+        
+        if (sessionFactory == null) {
+            logger.warn("SessionFactory not avilable");
+            throw new DBLayerException("SessionFactory not available");
+        }        
+        Session session = sessionFactory.openSession();
+        Transaction tx = null;                
+        try {
+            // Begin transaction
+            tx = session.beginTransaction();            
+            // Save item into the database
+            recordId = (Integer)session.save(data);            
+            // Save data to history tables - only for selected tables
+            if ((data instanceof Publication) || (data instanceof Territory) ||
+                (data instanceof Village) || (data instanceof Phytochorion) ||
+                (data instanceof Author) || (data instanceof Occurrence)) {
+                HistoryChange historyChange = new HistoryChange();
+                if (data instanceof Occurrence) {
+                    historyChange.setOccurrence((Occurrence)data);
+                    historyChange.setRecordId(0);
+                    table = PlantloreConstants.ENTITY_OCCURRENCE;
+                } else {
+                    historyChange.setOccurrence(null);
+                    if (data instanceof Publication) {
+                        table = PlantloreConstants.ENTITY_PUBLICATION;
+                    } else if (data instanceof Territory) {
+                        table = PlantloreConstants.ENTITY_TERRITORY;                        
+                    } else if (data instanceof Village) {
+                        table = PlantloreConstants.ENTITY_VILLAGE;                        
+                    } else if (data instanceof Phytochorion) {
+                        table = PlantloreConstants.ENTITY_PHYTOCHORION;                        
+                    } else if (data instanceof Author) {
+                        table = PlantloreConstants.ENTITY_AUTHOR;                        
+                    } else {
+                        table = "";
+                    }
+                    historyChange.setRecordId(recordId);
+                }
+                historyChange.setOldRecordId(0);
+                historyChange.setOperation(PlantloreConstants.INSERT);
+                historyChange.setWho(this.plantloreUser);
+                historyChange.setWhen(new java.util.Date());
+                
+                // Load record from THistoryColumn table
+                try {
+                    SelectQuery sq = this.createQuery(HistoryColumn.class);
+                    sq.addRestriction(PlantloreConstants.RESTR_EQ, HistoryColumn.TABLENAME, null, table, null);
+                    sq.addRestriction(PlantloreConstants.RESTR_IS_NULL, HistoryColumn.COLUMNNAME, null, null, null);
+                    result = this.executeQuery(sq);
+                } catch (RemoteException e) {
+                    logger.fatal("Cannot load HistoryChange information. Details: "+e.getMessage());
+                }
+                Object[] objCol = next(result);
+                if (objCol == null) {                
+                    logger.error("tHistoryColumn doesn't contain required data");
+                    throw new DBLayerException("tHistoryColumn doesn't contain required data");                    
+                } else {
+                    column = (HistoryColumn)objCol[0];
+                }                
+                HistoryRecord history = new HistoryRecord();
+                history.setHistoryColumn(column);
+                history.setNewValue(null);
+                history.setOldValue(null);
+                // Save into the database
+                recordId = (Integer)session.save(historyChange);
+                history.setHistoryChange(historyChange);                
+                recordId = (Integer)session.save(history);                
+            }
+            // Commit transaction
+            tx.commit();                                      
+        } catch (HibernateException e) {
+            if (tx != null) {
+                tx.rollback();
+            }
+            logger.fatal("Saving record into the database failed. Details: "+e.getMessage());
+            throw new DBLayerException("Saving record into the database failed. Details: "+e.getMessage());
+        } finally {
+            session.close();
+        }
+        return recordId;
+    }
+
+    /**
+     *  Insert data into the database without modifying history tables
+     *
+     *  @param data data to insert (one of the data holder objects)
+     *  @return identifier (primary key) of the inserted row
+     *  @throws DBLayerException when saving data into the database fails
+     */
+    public int executeInsertHistory(Object data) throws DBLayerException {
         int recordId;        
+        if (sessionFactory == null) {
+            logger.warn("SessionFactory not avilable");
+            throw new DBLayerException("SessionFactory not available");
+        }        
+        Session session = sessionFactory.openSession();
         Transaction tx = null;        
         try {
             // Begin transaction
@@ -137,6 +270,8 @@
             }
             logger.fatal("Saving record into the database failed. Details: "+e.getMessage());
             throw new DBLayerException("Saving record into the database failed. Details: "+e.getMessage());
+        } finally {
+            session.close();
         }
         return recordId;
     }
@@ -148,7 +283,98 @@
      *  @throws DBLayerException when deleting data fails
      */
     public void executeDelete(Object data) throws DBLayerException {
+        String table;
+        int id, result = 0;
+        HistoryColumn column;
+        
+        if (sessionFactory == null) {
+            logger.warn("SessionFactory not avilable");
+            throw new DBLayerException("SessionFactory not available");
+        }        
+        Session session = sessionFactory.openSession();        
         Transaction tx = null;
+        // Save records to history if required
+        try {        
+            if ((data instanceof Publication) || (data instanceof Author) || (data instanceof Occurrence)) {
+                HistoryChange historyChange = new HistoryChange();
+                if (data instanceof Occurrence) {
+                    historyChange.setOccurrence((Occurrence)data);
+                    historyChange.setRecordId(0);
+                    table = PlantloreConstants.ENTITY_OCCURRENCE;
+                } else {
+                    historyChange.setOccurrence(null);
+                    if (data instanceof Publication) {
+                        id = ((Publication)data).getId();
+                        table = PlantloreConstants.ENTITY_PUBLICATION;
+                    } else if (data instanceof Author) {
+                        id = ((Author)data).getId();
+                        table = PlantloreConstants.ENTITY_AUTHOR;                        
+                    } else {
+                        id = 0;
+                        table = "";
+                    }
+                    historyChange.setRecordId(id);
+                }
+                historyChange.setOldRecordId(0);
+                historyChange.setOperation(PlantloreConstants.DELETE);
+                historyChange.setWho(this.plantloreUser);
+                historyChange.setWhen(new java.util.Date());
+                
+                // Load record from THistoryColumn table
+                try {
+                    SelectQuery sq = this.createQuery(HistoryColumn.class);
+                    sq.addRestriction(PlantloreConstants.RESTR_EQ, HistoryColumn.TABLENAME, null, table, null);
+                    sq.addRestriction(PlantloreConstants.RESTR_IS_NULL, HistoryColumn.COLUMNNAME, null, null, null);
+                    result = this.executeQuery(sq);
+                } catch (RemoteException e) {
+                    logger.fatal("Cannot load HistoryChange information. Details: "+e.getMessage());
+                }
+                Object[] objCol = next(result);
+                if (objCol == null) {                
+                    logger.error("tHistoryColumn doesn't contain required data");
+                    throw new DBLayerException("tHistoryColumn doesn't contain required data");                    
+                } else {
+                    column = (HistoryColumn)objCol[0];
+                }                
+                HistoryRecord history = new HistoryRecord();
+                history.setHistoryChange(historyChange);
+                history.setHistoryColumn(column);
+                history.setNewValue(null);
+                history.setOldValue(null);
+                // Save into the database
+                session.save(historyChange);
+                session.save(history);                
+            }        
+            // Save the data itself
+            tx = session.beginTransaction();
+            // Save item into the database
+            session.delete(data);
+            // Commit transaction
+            tx.commit();                                      
+        } catch (HibernateException e) {
+            if (tx != null) {
+                tx.rollback();
+            }
+            logger.fatal("Deleting record from the database failed. Details: "+e.getMessage());
+            throw new DBLayerException("Deleting record from the database failed. Details: "+e.getMessage());
+        } finally {
+            session.close();
+        }
+    }
+
+    /**
+     *  Delete data from the database without modifying history tables
+     *
+     *  @param data data we want to delete (must be one of the holder objects)
+     *  @throws DBLayerException when deleting data fails
+     */
+    public void executeDeleteHistory(Object data) throws DBLayerException {
+        if (sessionFactory == null) {
+            logger.warn("SessionFactory not avilable");
+            throw new DBLayerException("SessionFactory not available");
+        }
+        Session session = sessionFactory.openSession();        
+        Transaction tx = null;
         try {
             tx = session.beginTransaction();
             // Save item into the database
@@ -161,6 +387,8 @@
             }
             logger.fatal("Deleting record from the database failed. Details: "+e.getMessage());
             throw new DBLayerException("Deleting record from the database failed. Details: "+e.getMessage());
+        } finally {
+            session.close();
         }
     }
     
@@ -171,8 +399,15 @@
      *  @throws DBLayerException when updating data fails
      */
     public void executeUpdate(Object data) throws DBLayerException {
+        if (sessionFactory == null) {
+            logger.warn("SessionFactory not avilable");
+            throw new DBLayerException("SessionFactory not available");
+        }
+        Session session = sessionFactory.openSession();
         Transaction tx = null;
         try {
+            // Save data into history tables if required
+            // TODO
             tx = session.beginTransaction();
             // Save item into the database
             session.update(data);
@@ -184,8 +419,40 @@
             }
             logger.fatal("Updating record in the database failed. Details: "+e.getMessage());
             throw new DBLayerException("Updating record in the database failed. Details: "+e.getMessage());
-        }                
+        } finally {
+            session.close();
+        }
     }
+
+    /**
+     *  Update data in the database without modifying history tables.
+     *
+     *  @param data to update (must be one of the holder objects)
+     *  @throws DBLayerException when updating data fails
+     */
+    public void executeUpdateHistory(Object data) throws DBLayerException {
+        if (sessionFactory == null) {
+            logger.warn("SessionFactory not avilable");
+            throw new DBLayerException("SessionFactory not available");
+        }
+        Session session = sessionFactory.openSession();
+        Transaction tx = null;
+        try {
+            tx = session.beginTransaction();
+            // Save item into the database
+            session.update(data);
+            // Commit transaction
+            tx.commit();                                      
+        } catch (HibernateException e) {
+            if (tx != null) {
+                tx.rollback();
+            }
+            logger.fatal("Updating record in the database failed. Details: "+e.getMessage());
+            throw new DBLayerException("Updating record in the database failed. Details: "+e.getMessage());
+        } finally {
+            session.close();
+        }
+    }
     
     /**
      *  Get more rows from the current result set.
@@ -285,11 +552,15 @@
      *  @throws DBLayerException when closing session fails
      */
     public void close() throws DBLayerException {    
+        if (sessionFactory == null) {
+            logger.warn("SessionFactory not avilable");
+            throw new DBLayerException("SessionFactory not available");
+        }        
         try {
-            session.close();
+            sessionFactory.close();
         } catch (HibernateException e) {
-            logger.fatal("Cannot close session");
-            throw new DBLayerException("Cannot close session");            
+            logger.fatal("Cannot close session factory");
+            throw new DBLayerException("Cannot close session factory");            
         }
     }
     
@@ -300,7 +571,13 @@
      *  @return an instance of <code>SelectQuery</code> used for building a query by client
      *
      */
+    // TODO: Pridat throws DBLayerException
     public SelectQuery createQuery(Class classname) throws RemoteException {
+        if (sessionFactory == null) {
+            logger.warn("SessionFactory not avilable");
+            // throw new DBLayerException("SessionFactory not available");
+        }
+        Session session = sessionFactory.openSession();
         SelectQuery query = new SelectQueryImplementation(session.createCriteria(classname)), 
         	stub = query;
         
@@ -308,7 +585,7 @@
         	stub = (SelectQuery) UnicastRemoteObject.exportObject(query); 
         
         queries.put(stub, query);
-        
+        sessions.put(stub, session);
         return stub;
     }    
     
@@ -319,7 +596,7 @@
      *  @throws DBLayerException when selecting records from the database fails
      */
     public int executeQuery(SelectQuery query) throws DBLayerException {
-    	
+
     	SelectQuery selectQuery = queries.remove(query);
     	if(selectQuery == null) throw new DBLayerException("You can only pass queries created by this DBLayer!");
     	
@@ -333,9 +610,8 @@
     	if(sq == null) logger.fatal("Class cast failed. Why the fuck?!");
     	
         Transaction tx = null;        
-        ScrollableResults res;
-        
-        
+        ScrollableResults res;        
+        Session session = sessions.get(query);
         try {
             tx = session.beginTransaction();
             // Execute detached criteria query
@@ -351,17 +627,16 @@
         }
         // Update current maximum result id and save the results
         maxResultId++; 
-        /* FIXME: NIKDE NENI maxResultId-- nebo tak neco, to je ficura nebo BUG?
-         * Si predstav, ze hypoteticky by nekdo drzel resultid = 0 dlouho, a mezitim 
-         * by se nekomu povedlo vykonat ty 4miliardy dotazu (nemusi to bejt uplne
-         * za vlasy pritazeny, kdyz budou v db statisice zaznamu) a dostal by se  s tim
-         * resultid zase na nulu. ale resultid = 0 uz v hashtable je, takze by to vratilo
-         * spatne...
-         */
         results.put(maxResultId, res);
         return maxResultId;
     }
     
+    public void closeQuery(SelectQuery query) {
+        Session session = sessions.get(query);
+        session.close();
+        sessions.remove(query);
+    }
+    
     /**
      * This method is intended for final cleanup. <b>Do not call this method yourself!
      * The proper way for you to get rid of a DBLayer is to call DBLayer.destroy() method!</b>

Modified: trunk/src/net/sf/plantlore/server/SelectQueryImplementation.java
===================================================================
--- trunk/src/net/sf/plantlore/server/SelectQueryImplementation.java	2006-04-27 19:25:10 UTC (rev 193)
+++ trunk/src/net/sf/plantlore/server/SelectQueryImplementation.java	2006-04-28 17:12:59 UTC (rev 194)
@@ -14,6 +14,7 @@
 
 import org.hibernate.Criteria;
 import org.hibernate.FetchMode;
+import org.hibernate.criterion.CriteriaSpecification;
 import org.hibernate.criterion.Order;
 import org.hibernate.criterion.Projections;
 import org.hibernate.criterion.Restrictions;
@@ -60,6 +61,10 @@
         criteria.createAlias(propertyName, aliasName);
     }
     
+    public void setDistinct() {
+        criteria.setResultTransformer(CriteriaSpecification.DISTINCT_ROOT_ENTITY);
+    }
+    
     /**
      *  Add restriction to the constructed criteria. Restrictions are parts of the where condition.
      *  



From kovo at berlios.de  Sun Apr 30 03:27:12 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Sun, 30 Apr 2006 03:27:12 +0200
Subject: [Plantlore-dev] r195 - trunk/src/net/sf/plantlore/config
Message-ID: <200604300127.k3U1RCrB025648@sheep.berlios.de>

Author: kovo
Date: 2006-04-30 03:27:04 +0200 (Sun, 30 Apr 2006)
New Revision: 195

Removed:
   trunk/src/net/sf/plantlore/config/help/
Log:
Delete old help configuration



From kovo at berlios.de  Sun Apr 30 03:28:20 2006
From: kovo at berlios.de (kovo at berlios.de)
Date: Sun, 30 Apr 2006 03:28:20 +0200
Subject: [Plantlore-dev] r196 - in trunk/src/net/sf/plantlore: . common help
Message-ID: <200604300128.k3U1SKL9026016@sheep.berlios.de>

Author: kovo
Date: 2006-04-30 03:28:13 +0200 (Sun, 30 Apr 2006)
New Revision: 196

Added:
   trunk/src/net/sf/plantlore/help/
   trunk/src/net/sf/plantlore/help/addoccurrence.html
   trunk/src/net/sf/plantlore/help/author.html
   trunk/src/net/sf/plantlore/help/export.html
   trunk/src/net/sf/plantlore/help/history.html
   trunk/src/net/sf/plantlore/help/import.html
   trunk/src/net/sf/plantlore/help/index.html
   trunk/src/net/sf/plantlore/help/jhelpidx.xml
   trunk/src/net/sf/plantlore/help/jhelpmap.jhm
   trunk/src/net/sf/plantlore/help/jhelpset.hs
   trunk/src/net/sf/plantlore/help/jhelptoc.xml
   trunk/src/net/sf/plantlore/help/licence.html
   trunk/src/net/sf/plantlore/help/login.html
   trunk/src/net/sf/plantlore/help/metadata.html
   trunk/src/net/sf/plantlore/help/occurr_history.html
   trunk/src/net/sf/plantlore/help/overview.html
   trunk/src/net/sf/plantlore/help/publication.html
   trunk/src/net/sf/plantlore/help/resources.html
   trunk/src/net/sf/plantlore/help/search.html
   trunk/src/net/sf/plantlore/help/settings.html
   trunk/src/net/sf/plantlore/help/user.html
Modified:
   trunk/src/net/sf/plantlore/common/PlantloreHelp.java
Log:
Add help configuration (moved from net/sf/plantlore/config/help to net/sf/plantlore/help) and class for opening help viewer.

Modified: trunk/src/net/sf/plantlore/common/PlantloreHelp.java
===================================================================
--- trunk/src/net/sf/plantlore/common/PlantloreHelp.java	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/common/PlantloreHelp.java	2006-04-30 01:28:13 UTC (rev 196)
@@ -11,6 +11,7 @@
 import javax.help.HelpSet;
 import javax.help.HelpSetException;
 import javax.help.JHelp;
+import javax.swing.JDialog;
 import javax.swing.JFrame;
 
 /**
@@ -24,10 +25,59 @@
     // File containing Java Help settings
     private static final String HELPFILE = "jhelpset.hs";
     
-    // Constants with help for author manager section
-    public static final String AUTHOR_MANAGER_GENERAL = "";
-    public static final String AUTHOR_MANAGER_ADD = "";
-    
+    // Basic information about Plantlore
+    public static final String PLANTLORE_OVERVIEW       = "plantlore.overview";
+    // Resources available for Plantlore users
+    public static final String PLANTLORE_RESOURCES      = "plantlore.resources";
+    // Text of licence used
+    public static final String PLANTLORE_LICENCE        = "plantlore.licence";
+    // Login description
+    public static final String LOGIN                    = "login";
+    // Description of selecting the database
+    public static final String SELECT_DB                = "login.selectdb";    
+    // Authentication description
+    public static final String AUTHENTICATION           = "login.authentication";    
+    // Description of settings dialog
+    public static final String SETTINGS                 = "settings";
+    // Main Plantlore window with occurrence overview    
+    public static final String PLANT_OVERVIEW           = "overview";    
+    // Adding and editing occurrense records
+    public static final String ADD_OCCURRENCE           = "overview.addoccurrence";
+    // Description of "basic data" section
+    public static final String ADD_BASIC                = "overview.addoccurrence.basic";    
+    // Description of "extended data" section
+    public static final String ADD_EXTENDED             = "overview.addoccurrence.extended";
+    // Description of checklist
+    public static final String ADD_CHECKLIST            = "overview.addoccurrence.checklist";        
+    // Searching the occurrence records
+    public static final String SEARCH_OCCURRENCE        = "overview.search";
+    // History for the selected occurrence record
+    public static final String OCCURRENCE_HISTORY       = "overview.history";    
+    // Description of author manager
+    public static final String AUTHOR_MANAGER           = "author";
+    // Add /edit author dialog
+    public static final String ADD_AUTHOR               = "author.add";        
+    // Description of publication manager
+    public static final String PUBLICATION_MANAGER      = "publication";    
+    // Add/edit publication dialog
+    public static final String PUBLICATION_ADD          = "publication.add";        
+    // Description of metadata manager
+    public static final String METDATA_MANAGER          = "metdata";    
+    // Add/edit metadata dialog
+    public static final String METDATA_ADD              = "metdata.add";        
+    // Description of history manager
+    public static final String HISTORY_MANAGER          = "history";
+    // Desctripton of user manager
+    public static final String USER_MANAGER             = "user";    
+    // Add/edit user dialog
+    public static final String USER_ADD                 = "user.add";    
+    // Modification of rights description
+    public static final String USER_RIGHTS              = "user.rights";    
+    // Import feature description
+    public static final String IMPORT                   = "import";
+    // Export feature description
+    public static final String EXPORT                   = "export";   
+            
     /** Creates a new instance of PlantloreHelp */
     public PlantloreHelp() {
         
@@ -38,7 +88,6 @@
      *
      * @param section Section of help which will be shown. Sections are defined in 
      *                <code>jHelpMap.jhm</code> and <code>jHelpToc.xml</code>
-     * @throws ???
      */
     public static void showHelp(String section) {
         JHelp helpViewer;
@@ -52,7 +101,8 @@
             // Set the initial entry point in the table of contents.
             helpViewer.setCurrentID(section);
         } catch (HelpSetException e) {
-            // TODO: Throw new exception, we should define new exception
+            System.out.println("EXCEPTION: "+e.getMessage());
+            e.printStackTrace();
             return;
         }
         // Create a new frame.
@@ -62,6 +112,5 @@
         frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
         // Make the frame visible.
         frame.setVisible(true);        
-    }
-    
+    }    
 }

Added: trunk/src/net/sf/plantlore/help/addoccurrence.html
===================================================================
--- trunk/src/net/sf/plantlore/help/addoccurrence.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/addoccurrence.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Add/edit occurrence</title>
+</head>
+<body>
+<h1>Add/edit occurrence</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/author.html
===================================================================
--- trunk/src/net/sf/plantlore/help/author.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/author.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Author manager</title>
+</head>
+<body>
+<h1>Author manager</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/export.html
===================================================================
--- trunk/src/net/sf/plantlore/help/export.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/export.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Export</title>
+</head>
+<body>
+Export
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/history.html
===================================================================
--- trunk/src/net/sf/plantlore/help/history.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/history.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>History</title>
+</head>
+<body>
+<h1>History</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/import.html
===================================================================
--- trunk/src/net/sf/plantlore/help/import.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/import.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Import</title>
+</head>
+<body>
+<h1>Import</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/index.html
===================================================================
--- trunk/src/net/sf/plantlore/help/index.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/index.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Plantlore</title>
+</head>
+<body>
+<h1>Plantlore</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/jhelpidx.xml
===================================================================
--- trunk/src/net/sf/plantlore/help/jhelpidx.xml	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/jhelpidx.xml	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,5 @@
+  <?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
+  <!DOCTYPE index PUBLIC "-//Sun Microsystems Inc.//DTD JavaHelp Index Version 1.0//EN" "http://java.sun.com/products/javahelp/index_1_0.dtd">
+  <index version="1.0">
+    <indexitem text="cheater" target="id328078"/>
+  </index>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/jhelpmap.jhm
===================================================================
--- trunk/src/net/sf/plantlore/help/jhelpmap.jhm	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/jhelpmap.jhm	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,31 @@
+ <?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
+  <!DOCTYPE map PUBLIC "-//Sun Microsystems Inc.//DTD JavaHelp Map Version 1.0//EN" "http://java.sun.com/products/javahelp/map_1_0.dtd">
+  <map version="1.0">
+    <mapID target="plantlore.overview" url="index.html"/>
+    <mapID target="plantlore.resources" url="resources.html"/>
+    <mapID target="plantlore.licence" url="licence.html"/>
+    <mapID target="login" url="login.html"/>
+    <mapID target="login.selectdb" url="login.html#selectdb"/>
+    <mapID target="login.authentication" url="login.html#authentication"/>
+    <mapID target="settings" url="settings.html"/>
+    <mapID target="overview" url="overview.html"/>
+    <mapID target="overview.addoccurrence" url="addoccurrence.html"/>
+    <mapID target="overview.addoccurrence.basic" url="addoccurrence.html#basic"/>
+    <mapID target="overview.addoccurrence.extended" url="addoccurrence.html#extended"/>
+    <mapID target="overview.addoccurrence.checklist" url="addoccurrence.html#checklist"/>
+    <mapID target="overview.search" url="search.html"/>
+    <mapID target="overview.history" url="occurr_history.html"/>
+    <mapID target="author" url="author.html"/>
+    <mapID target="author.add" url="author.html#add"/>
+    <mapID target="publication" url="publication.html"/>
+    <mapID target="publication.add" url="publication.html#add"/>
+    <mapID target="metadata" url="metadata.html"/>
+    <mapID target="metadata.add" url="metadata.html#add"/>
+    <mapID target="history" url="history.html"/>
+    <mapID target="user" url="user.html"/>
+    <mapID target="user.add" url="user.html#add"/>
+    <mapID target="user.rights" url="user.html#rights"/>
+    <mapID target="import" url="import.html"/>
+    <mapID target="export" url="export.html"/>
+    <mapID target="id328078" url="cheat.html"/>
+  </map>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/jhelpset.hs
===================================================================
--- trunk/src/net/sf/plantlore/help/jhelpset.hs	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/jhelpset.hs	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
+  <!DOCTYPE helpset PUBLIC "-//Sun Microsystems Inc.//DTD JavaHelp HelpSet Version 1.0//EN" "http://java.sun.com/products/javahelp/helpset_1_0.dtd">
+  <helpset version="1.0">
+    <title>Title</title>
+    <maps>
+      <homeID>top</homeID>
+      <mapref location="jhelpmap.jhm"/>
+    </maps>
+    <view>
+      <name>TOC</name>
+      <label>Table Of Contents</label>
+      <type>javax.help.TOCView</type>
+      <data>jhelptoc.xml</data>
+    </view>
+    <view>
+      <name>Index</name>
+      <label>Index</label>
+      <type>javax.help.IndexView</type>
+      <data>jhelpidx.xml</data>
+    </view>
+    <view>
+      <name>Search</name>
+      <label>Search</label>
+      <type>javax.help.SearchView</type>
+      <data engine="com.sun.java.help.search.DefaultSearchEngine">JavaHelpSearch</data>
+    </view>
+  </helpset>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/jhelptoc.xml
===================================================================
--- trunk/src/net/sf/plantlore/help/jhelptoc.xml	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/jhelptoc.xml	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,39 @@
+  <?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
+  <!DOCTYPE toc PUBLIC "-//Sun Microsystems Inc.//DTD JavaHelp TOC Version 1.0//EN" "http://java.sun.com/products/javahelp/toc_1_0.dtd">
+  <toc version="1.0">
+    <tocitem target="plantlore" text="Plantlore">
+        <tocitem target="plantlore.overview" text="Overview"/>
+        <tocitem target="plantlore.resources" text="Resources"/>        
+        <tocitem target="plantlore.licence" text="Licence"/>
+    </tocitem>
+    <tocitem target="login" text="Login">
+        <tocitem target="login.selectdb" text="Select Database"/>
+        <tocitem target="login.authentication" text="Authentication"/>        
+    </tocitem>
+    <tocitem target="settings" text="Settings"/>
+    <tocitem target="overview" text="Overview">
+        <tocitem target="overview.addoccurrence" text="Add/Edit Occurrence">        
+            <tocitem target="overview.addoccurrence.basic" text="Basic data"/>
+            <tocitem target="overview.addoccurrence.extended" text="Extended data"/>            
+            <tocitem target="overview.addoccurrence.checklist" text="Checklist"/>                        
+        </tocitem>
+        <tocitem target="overview.search" text="Search"/>
+        <tocitem target="overview.history" text="Record history"/>        
+    </tocitem>
+    <tocitem target="author" text="Author">
+        <tocitem target="author.add" text="Add/edit Author"/>
+    </tocitem>
+    <tocitem target="publication" text="Publication">
+        <tocitem target="publication.add" text="Add/edit Publication"/>        
+    </tocitem>
+    <tocitem target="metadata" text="Metadata">
+        <tocitem target="metadata.add" text="Add/Edit metadata"/>                
+    </tocitem>
+    <tocitem target="history" text="History"/>    
+    <tocitem target="user" text="Users">
+        <tocitem target="user.add" text="Add/edit user"/>
+        <tocitem target="user.rights" text="User rights"/>        
+    </tocitem>
+    <tocitem target="import" text="Import"/>
+    <tocitem target="export" text="Export"/>
+  </toc>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/licence.html
===================================================================
--- trunk/src/net/sf/plantlore/help/licence.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/licence.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Licence</title>
+</head>
+<body>
+<h1>Licence</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/login.html
===================================================================
--- trunk/src/net/sf/plantlore/help/login.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/login.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Login</title>
+</head>
+<body>
+<h1>Login</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/metadata.html
===================================================================
--- trunk/src/net/sf/plantlore/help/metadata.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/metadata.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Metadata manager</title>
+</head>
+<body>
+<h1>Metadata manager</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/occurr_history.html
===================================================================
--- trunk/src/net/sf/plantlore/help/occurr_history.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/occurr_history.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Occurrence records history</title>
+</head>
+<body>
+<h1>Occurrence records history</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/overview.html
===================================================================
--- trunk/src/net/sf/plantlore/help/overview.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/overview.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Plant overview</title>
+</head>
+<body>
+<h1>Plant overview</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/publication.html
===================================================================
--- trunk/src/net/sf/plantlore/help/publication.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/publication.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Publication manager</title>
+</head>
+<body>
+<h1>Publication manager</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/resources.html
===================================================================
--- trunk/src/net/sf/plantlore/help/resources.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/resources.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Plantlore resources</title>
+</head>
+<body>
+<h1>Plantlore resources</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/search.html
===================================================================
--- trunk/src/net/sf/plantlore/help/search.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/search.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Search occurrences</title>
+</head>
+<body>
+<h1>Search occurrences</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/settings.html
===================================================================
--- trunk/src/net/sf/plantlore/help/settings.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/settings.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>Settings</title>
+</head>
+<body>
+<h1>Settings</h1>
+</body>
+</html>
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/help/user.html
===================================================================
--- trunk/src/net/sf/plantlore/help/user.html	2006-04-30 01:27:04 UTC (rev 195)
+++ trunk/src/net/sf/plantlore/help/user.html	2006-04-30 01:28:13 UTC (rev 196)
@@ -0,0 +1,8 @@
+<html>
+<head>
+<title>User manager</title>
+</head>
+<body>
+<h1>User manager</h1>
+</body>
+</html>
\ No newline at end of file



From tkovarik at gmail.com  Sun Apr 30 03:43:19 2006
From: tkovarik at gmail.com (Tomas Kovarik)
Date: Sun, 30 Apr 2006 03:43:19 +0200
Subject: [Plantlore-dev] Ako pouzivat help
Message-ID: <ea88f1620604291843q44c77b67vf6cfea1b8df9c4cc@mail.gmail.com>

Ahojte,

upravil som trosku konfiguraciu helpu a vytvoril predbeznu strukturu. Ak
chcete otvorit help, je potreba zavolat metodu showHelp() triedy
PlantloreHelp (najdete ju v package common). Ta vam otvori help viewer na
sekcii, ktoru zadate ako parameter metody showHelp(). Aby sa dala
jednoduchsie upravovat struktura helpu, su v triede PlantloreHelp definovane
konstanty pre jednotlive sekcie, staci teda zavolat showHelp() s prislusnou
konstanou.

Co sa tyka struktury helpu, je to taky nastrel. Ak by ste to chceli upravit,
je potreba zaeditovat tieto subory:
* PlantloreHelp.java - pridat konstantu pre novu sekciu. Hodnota konstanty
je retazec ktory urcuje danu sekciu (pomocou . sa prechadza do podsekcii)
* jhelpmap.jhm - pridat element mapID ktory namapuje sekciu na html subor
* jhelptoc.xml - pridat element tocitem pre danu sekciu s textovym popisom
(ide o obsah - Table Of Contents)

Aby to cele fungovalo, musite si pridat adresar net/sf/plantlore/help do
CLASSPATH

Ukazka ako to pouzit je v AutorMangerCtrl.java a AddAuthorCtrl.java -
hladajte HelpButtonListener (nebude to teraz ale fungovat lebo som pomenil
konstanty, ked dorobim dalsie upravy autor managera tak tam bude aj pouzitie
novych konstant)

Majte sa

Kovo

PS.: Prikladam pdfko s tou navrhnutou predbeznou strukturou (tie ciselka tam
su poradie v ktorom budu v TOC, bohuzial FreeMind ich ma len do sedmicky :)
PPS.: Je tam este jeden bug pri otvarani toho help viewer z modalneho
dialogu (ten viewer nejde ovladat ked je zobrazeny modalny dialog), bude to
treba doriesit
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060430/fa78e6cb/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: help.pdf
Type: application/pdf
Size: 23230 bytes
Desc: not available
URL: <https://lists.berlios.de/pipermail/plantlore-dev/attachments/20060430/fa78e6cb/attachment.pdf>

From krater at berlios.de  Sun Apr 30 14:28:16 2006
From: krater at berlios.de (krater at berlios.de)
Date: Sun, 30 Apr 2006 14:28:16 +0200
Subject: [Plantlore-dev] r197 - in trunk/src/net/sf/plantlore: client/export client/export/builders client/export/component common common/exception l10n
Message-ID: <200604301228.k3UCSGua019699@sheep.berlios.de>

Author: krater
Date: 2006-04-30 14:28:09 +0200 (Sun, 30 Apr 2006)
New Revision: 197

Added:
   trunk/src/net/sf/plantlore/client/export/DefaultDirector.java
   trunk/src/net/sf/plantlore/client/export/ExportMng.java
   trunk/src/net/sf/plantlore/client/export/ExportMngCtrlA.java
   trunk/src/net/sf/plantlore/client/export/ExportMngCtrlB.java
   trunk/src/net/sf/plantlore/client/export/ExportMngViewA.java
   trunk/src/net/sf/plantlore/client/export/ExportMngViewB.form
   trunk/src/net/sf/plantlore/client/export/ExportMngViewB.java
   trunk/src/net/sf/plantlore/client/export/ExportProgressCtrl.java
   trunk/src/net/sf/plantlore/client/export/ExportProgressView.form
   trunk/src/net/sf/plantlore/client/export/ExportProgressView.java
   trunk/src/net/sf/plantlore/client/export/component/
   trunk/src/net/sf/plantlore/client/export/component/TemplateSelectionModel.java
   trunk/src/net/sf/plantlore/client/export/component/XFilter.java
   trunk/src/net/sf/plantlore/client/export/component/XNode.java
   trunk/src/net/sf/plantlore/client/export/component/XTree.java
   trunk/src/net/sf/plantlore/common/exception/
   trunk/src/net/sf/plantlore/common/exception/DBLayerException.java
   trunk/src/net/sf/plantlore/common/exception/ExportException.java
   trunk/src/net/sf/plantlore/common/exception/PlantloreException.java
Removed:
   trunk/src/net/sf/plantlore/client/export/Director.java
Modified:
   trunk/src/net/sf/plantlore/client/export/Builder.java
   trunk/src/net/sf/plantlore/client/export/Template.java
   trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
   trunk/src/net/sf/plantlore/common/AutoComboBox.java
   trunk/src/net/sf/plantlore/common/Selection.java
   trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties
Log:
The Export framwork + GUI.

New basic set of Exceptions created.

Modified: trunk/src/net/sf/plantlore/client/export/Builder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/Builder.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -13,7 +13,7 @@
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-04-21
  * @version 1.0
- * @see net.sf.plantlore.client.export.Director
+ * @see net.sf.plantlore.client.export.DefaultDirector
  */
 public interface Builder {
 		

Added: trunk/src/net/sf/plantlore/client/export/DefaultDirector.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/DefaultDirector.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/DefaultDirector.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,171 @@
+package net.sf.plantlore.client.export;
+
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.rmi.RemoteException;
+import java.util.Observable;
+
+import net.sf.plantlore.common.Selection;
+import net.sf.plantlore.common.record.*;
+import net.sf.plantlore.middleware.DBLayer;
+import net.sf.plantlore.server.DBLayerException;
+
+import org.apache.log4j.Logger;
+
+/**
+ * The Director class (for export).
+ * Purpose: The Director continualy fetches results of the resultset
+ * identified by the <code>result</code>.
+ * The selected results (records whose ID is in the <code>selection</code>)
+ * are passed to the <code>builder</code> - the builder is responsible for
+ * creating a corresponing output.
+ * <br/>
+ * The Director is supposed to run in a separate thread which is why
+ * all exceptions are handled in the <code>run()</code> method
+ * in a following manner:
+ * <pre>
+ * catch(AnException e) { setChanged(); notifyObservers( e ); }
+ * </pre> 
+ *
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-21
+ * @version 0.9 might still slightly change
+ *
+ * @see net.sf.plantlore.client.common.Selection
+ * @see net.sf.plantlore.client.export.Builder
+ * @see net.sf.plantlore.middleware.DBLayer
+ */
+public class DefaultDirector extends Observable implements Runnable {
+	
+	private Logger logger = Logger.getLogger(this.getClass().getPackage().getName());
+	
+	private Builder build;
+	private Selection selection;
+	private DBLayer database;
+	private int result;
+	
+	private boolean aborted = false;
+	
+	private int count = 0;
+
+	/**
+	 * Create a new export Director. The Director iterates over the results 
+	 * of the <code>query</code> (<code>database.executeQuery(query)</code>)
+	 * and selected records (i.e. records in the <code>selection</code>)
+	 * passes to the <code>builder</code>.
+	 * 
+	 * @param builder	The particular builder used to construct the final output.
+	 * @param result	The result describing the resultset that will be iterated over.
+	 * @param database	The database layer that will quench the Director's thirst for more results.
+	 * @param selection	The set of selected records.
+	 */
+	public DefaultDirector(Builder builder, int result, DBLayer database, Selection selection) {
+		assert(database != null);
+		assert(builder != null);
+		assert(selection != null);
+		
+		this.build = builder; this.result = result; this.database = database;
+		this.selection = selection.clone(); 
+	}
+	
+	
+	/** 
+	 * How many records have been exported.
+	 * 
+	 * @return The exact number of exported records.
+	 */
+	public int exportedRecords() { 
+		return count;
+	}
+	
+	
+	private static Object[] NO_PARAM = new Object[0];
+	
+	/**
+	 * The whole record is returned in a tree structure.
+	 * We must traverse this structure.
+	 * The children are denoted as <i>foreign keys</i> 
+	 * - they contain other parts of the whole record.
+	 * 
+	 * @param record The "node" in the tree hierarchy representing the
+	 * whole record.
+	 */
+	private void buildPart(Record record) throws IOException {
+		// Build this part of the record.
+		build.part(record);
+		// Now look at all children of this record.
+		for(String key : record.getForeignKeys()) {
+			Method getter = Template.getMethod(record.getClass(), key);
+			try {
+				// And build'em too.
+				buildPart( (Record) getter.invoke( record, NO_PARAM ) );
+			}
+			catch(IllegalAccessException e) { e.printStackTrace(); }
+			catch(InvocationTargetException e) { e.printStackTrace(); }
+		}
+	}
+	
+	
+	/** 
+	 * Execute the exporting procedure -
+	 * fetch all results from the resultset and those that are selected
+	 * send to the builder to process them.
+	 */
+	public void run() {
+		try {
+			logger.info("Export begins...");
+			build.header();
+			
+			// Iterate over the result of the query.
+			int rows = database.getNumRows( result );
+			for(int i = 0; i < rows && !aborted; i++) {
+				Object[] records = database.next( result );
+				Record record = (Record) records[0];
+				if( !selection.contains( record ) ) continue; // Is the record selected?
+			
+				count++;
+				build.startRecord();
+				
+				// Parse the record.
+				buildPart( record );
+				
+				// ONE-TO-MANY HACK:
+				// Occurrence -> AuthorOccurrences & Authors
+				// FIXME: Jak se to ma Director dozvedet, ze ma delat tuhle iteraci :\
+				
+				
+				
+				
+				build.finishRecord();
+				
+				setChanged(); notifyObservers( count );
+			}
+
+			build.footer();
+			logger.info("Export completed. " + count + " records sent to output.");
+		}
+		catch(DBLayerException e) {
+			logger.error("Export ended prematurely " + e);
+			setChanged(); notifyObservers( e ); 
+		}
+		catch(RemoteException e) {
+			logger.error("Export ended prematurely " + e);
+			setChanged(); notifyObservers( e );
+		}
+		catch(IOException e) {
+			logger.error("Export ended prematurely " + e); 
+			setChanged(); notifyObservers( e );
+		}
+		if(aborted) logger.info("Export aborted. " + count + " records sent to output.");
+	}
+	
+	/**
+	 * Abort the export immediately.
+	 */
+	public void abort() {
+		aborted = true;
+	}
+
+}

Deleted: trunk/src/net/sf/plantlore/client/export/Director.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Director.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/Director.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -1,144 +0,0 @@
-package net.sf.plantlore.client.export;
-
-import java.io.IOException;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.rmi.RemoteException;
-
-import net.sf.plantlore.common.Selection;
-import net.sf.plantlore.common.record.*;
-import net.sf.plantlore.middleware.DBLayer;
-import net.sf.plantlore.server.DBLayerException;
-
-import org.apache.log4j.Logger;
-
-/**
- * The Director class (for export).
- * Purpose: The Director continualy fetches results of the resultset
- * identified by the <code>result</code>.
- * The selected results (records whose ID is in the <code>selection</code>)
- * are passed to the <code>builder</code> - the builder is responsible for
- * creating a corresponing output.
- * 
- * @author Erik Kratochv?l (discontinuum at gmail.com)
- * @since 2006-04-21
- * @version 0.9 might still slightly change
- *
- * @see net.sf.plantlore.client.common.Selection
- * @see net.sf.plantlore.client.export.Builder
- * @see net.sf.plantlore.middleware.DBLayer
- */
-public class Director implements Runnable {
-	
-	private Logger logger = Logger.getLogger(this.getClass().getPackage().getName());
-	
-	private Builder build;
-	private Selection selection;
-	private DBLayer database;
-	private int result;
-	
-	private int count = 0;
-
-	/**
-	 * Create a new export Director. The Director iterates over the results 
-	 * of the <code>query</code> (<code>database.executeQuery(query)</code>)
-	 * and selected records (i.e. records in the <code>selection</code>)
-	 * passes to the <code>builder</code>.
-	 * 
-	 * @param builder	The particular builder used to construct the final output.
-	 * @param result	The result describing the resultset that will be iterated over.
-	 * @param database	The database layer that will quench the Director's thirst for more results.
-	 * @param selection	The set of selected records.
-	 */
-	public Director(Builder builder, int result, DBLayer database, Selection selection) {
-		this.build = builder; this.result = result; this.database = database;
-		this.selection = selection;
-	}
-	
-	
-	/** 
-	 * How many records has been exported.
-	 * 
-	 * @return The exact number of exported records.
-	 */
-	public int exportedRecords() { 
-		return count;
-	}
-	
-	
-	private static Object[] NO_PARAM = new Object[0];
-	
-	/**
-	 * The whole record is returned in a tree structure.
-	 * We must traverse this structure.
-	 * The children are denoted as <i>foreign keys</i> 
-	 * - they contain other parts of the whole record.
-	 * 
-	 * @param record The "node" in the tree hierarchy representing the
-	 * whole record.
-	 */
-	private void buildPart(Record record) throws IOException {
-		// Build this part of the record.
-		build.part(record);
-		// Now look at all children of this record.
-		for(String key : record.getForeignKeys()) {
-			Method getter = Template.getMethod(record.getClass(), key);
-			try {
-				// And build'em too.
-				buildPart( (Record) getter.invoke( record, NO_PARAM ) );
-			}
-			catch(IllegalAccessException e) { e.printStackTrace(); }
-			catch(InvocationTargetException e) { e.printStackTrace(); }
-		}
-	}
-	
-	
-	/** 
-	 * Execute the exporting procedure -
-	 * fetch all results from the resultset and those that are selected
-	 * send to the builder to process them.
-	 */
-	public void run() {
-		try {
-			logger.info("Export begins...");
-			build.header();
-			
-			// Iterate over the result of the query.
-			int rows = database.getNumRows( result );
-			for(int i = 0; i < rows; i++) {
-				Object[] records = database.next( result );
-				Record record = (Record) records[0];
-				if( !selection.contains( record ) ) continue; // Is the record selected?
-			
-				count++;
-				build.startRecord();
-				
-				// Parse the record.
-				buildPart( record );
-				
-				// ONE-TO-MANY HACK:
-				// Occurrence -> AuthorOccurrences & Authors
-				// TODO: Iterace pres vsechny AuthorOccurence
-				
-				
-				
-				build.finishRecord();
-			}
-
-			build.footer();
-			logger.info("Export completed. " + count + " records sent to output.");
-		}
-		// FIXME: Since the run() method comes from the Runnable interface, it cannot throw
-		// any exceptions :( This is yet to be solved!
-		catch(DBLayerException e) {
-			logger.error(e); e.printStackTrace();
-		}
-		catch(RemoteException e) {
-			logger.error(e); e.printStackTrace();
-		}
-		catch(IOException e) {
-			logger.error(e); e.printStackTrace();
-		}
-	}
-
-}

Added: trunk/src/net/sf/plantlore/client/export/ExportMng.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportMng.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/ExportMng.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,326 @@
+?package net.sf.plantlore.client.export;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.Writer;
+import java.util.Observable;
+import java.util.Observer;
+
+import net.sf.plantlore.client.export.builders.*;
+import net.sf.plantlore.client.export.component.XFilter;
+import net.sf.plantlore.common.Selection;
+import net.sf.plantlore.common.exception.ExportException;
+import net.sf.plantlore.l10n.L10n;
+import net.sf.plantlore.middleware.DBLayer;
+
+import org.apache.log4j.Logger;
+
+/**
+ * The Export Manager. This class controls the whole process of export -
+ * starting with creation of all necessary participants
+ * and ending with the final cleanup. 
+ * <br/>
+ * There are several entities involved in the export:
+ * <ul>
+ * <li><b>Director</b> iterates over the <i>result set</i> 
+ * 					and <i>selected records</i> passes to the <i>builder</i>,</li>
+ * <li><b>Builder</b> writes the records to the <i>output</i>.</li>
+ * <li><b>Selection</b> stores the list of all selected records 
+ * 					(<i>restriction</i> in the database terminology).</li>
+ * <li><b>ResultID</b> identifies the result set.</li>
+ * <li><b>Template</b> stores the list of all selected columns that should be 
+ * 					exported (<i>projection</i> in the database terminology).</li>
+ * <li><b>File</b> stores the name of file as the user has suggested it.</li>
+ * <li><b>XFilter</b> suggests the final name of the <i>file</i>
+ * 					and is used to determine which <i>builder</i> will be used
+ * 					to produce the output.</li>
+ * </ul>
+ *  
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-29 
+ * @see net.sf.plantlore.client.export.DefaultDirector
+ * @see net.sf.plantlore.client.export.Builder
+ */
+public class ExportMng extends Observable implements Observer {
+	
+	/**
+	 * List of all filters the Export Manager is capable to handle.
+	 */
+	private XFilter[] filters = new XFilter[] {
+		new XFilter(L10n.getString("FilterDC"), ".xml"),
+		new XFilter(L10n.getString("FilterABCD"), ".xml"),
+		new XFilter(L10n.getString("FilterCSV"), ".txt", ".csv"),
+		new XFilter(L10n.getString("FilterXML"), ".xml"),
+		new XFilter(L10n.getString("FilterPlantloreNative"), ".xml", ".pln")
+	};
+	
+	
+	private Logger logger = Logger.getLogger(this.getClass().getPackage().getName());
+	private DBLayer db ;
+	private Template template;
+	private Selection select;
+	private XFilter filter;
+	private File file;
+	private Integer resultId;
+	private DefaultDirector director;
+	private Builder builder;
+	private boolean aborted = false, exportInProgress = false;
+	private int results, selectedResults;
+	
+	private Writer writer;
+	private Thread current;
+		
+	
+	/**
+	 * Create a new Export Manager.
+	 * 
+	 * @param dblayer The database layer mediating the access to the database.
+	 * @param result	The result set identificator which is to be iterated over.
+	 * @param selection	The list of selected records. Shouldn't be empty.
+	 * @param template	The list of selected columns.
+	 */
+	public ExportMng(DBLayer dblayer, int result, Selection selection, Template template) {
+		setDBLayer(dblayer);
+		setResultId(result);
+		setSelection(selection);
+		setTemplate(template); 
+	}
+
+	/**
+	 * Create a new Export manager and <b>mark all records as selected</b>.
+	 * 
+	 * @param dblayer	The database layer mediating the access to the database.
+	 * @param result	The result set identificator which is to be iterated over.
+	 */
+	public ExportMng(DBLayer dblayer, int result) {
+		setDBLayer(dblayer);
+		setResultId(result);
+		setTemplate(null);
+		
+		Selection select = new Selection(); select.all();
+		setSelection(select);
+	}
+	
+	/**
+	 * Create a new Export manager.
+	 * 
+	 * @param dblayer	The database layer mediating the access to the database. Shouldn't be empty.
+	 * @param result	The result set identificator which is to be iterated over. Shouldn't be empty.
+	 * @param selection	The list of selected records. Shouldn't be empty.
+	 */
+	public ExportMng(DBLayer dblayer, int result, Selection selection) {
+		this(dblayer, result, selection, null);
+	}
+	
+	/**
+	 * Create a new Export manager.
+	 * 
+	 * @param dblayer	The database layer mediating the access to the database. Shouldn't be empty.
+	 * @param result	The result set identificator which is to be iterated over. Shouldn't be empty.
+	 * @param selection	The list of selected records. Shouldn't be empty.
+	 * @param template	The list of selected columns.
+	 * @param filter	The filter which will be used to determine the appropriate builder of the output.
+	 * @param file	The file where the output will be written.
+	 */
+	public ExportMng(DBLayer dblayer, int result, Selection selection, Template template, XFilter filter, File file) {
+		this(dblayer, result, selection, template);
+		setSelectedFile(file);
+		setActiveFileFilter(filter);
+	}
+	
+	/**
+	 * Set a new DBLayer.
+	 * <b>Forget the current result set identificator</b> (if there is any) - that identificator
+	 * most probably refered to a result set of the previous dblayer! 
+	 */
+	synchronized public void setDBLayer(DBLayer dblayer) {
+		if(dblayer == null) 
+			logger.warn("The database layer is null!");
+		db = dblayer;
+		results = selectedResults = resultId = -1;
+	}
+	
+	/**
+	 * Store a copy of the <code>template</code>.
+	 */
+	synchronized public void setTemplate(Template template) {
+		if(template == null) this.template = null;
+		else this.template = template.clone();
+	}
+	
+	/**
+	 * Store a copy of the <code>selection</code>.
+	 */
+	synchronized public void setSelection(Selection selection) {
+		if(selection == null || selection.isEmpty())
+			logger.warn("The list of selected records is empty!");
+
+		if(selection == null) select = new Selection();
+		else select = selection.clone();
+
+		selectedResults = -1;
+		if(resultId >= 0 && results >= 0)
+			selectedResults = selection.size(results);
+	}
+	
+	/**
+	 * Set the active filter. The type of the filter will be used 
+	 * to determine the appropriate extension of the file
+	 * and to create a correct Builder (for the format this
+	 * filter represents). 
+	 */
+	synchronized public void setActiveFileFilter(XFilter filter) {
+		if(filter == null)
+			logger.warn("The active filter is null!");
+		this.filter = filter; 
+	}
+	
+	/**
+	 * Set the selected file. Into this file the builder will 
+	 * spit its output. 
+	 */
+	synchronized public void setSelectedFile(File file) { 
+		if(file == null)
+			logger.warn("The selected file is null!");
+		this.file = file; 
+	}
+	
+	/**
+	 * Set another result identificator of a Result Set. 
+	 */
+	synchronized public void setResultId(Integer result) { 
+		if(result < 0) 
+			logger.warn("The result set identificator is null!");
+
+		this.resultId = result;
+		results = -1;
+		if(resultId >= 0)
+			try {	results = db.getNumRows(resultId); } catch(Exception e) {}
+	}
+	
+	/**
+	 * Start the export procedure. The export procedure
+	 * will run in its own thread.
+	 * 
+	 * @param append	True if the Builder shall append its output to an already existing file.
+	 * @throws ExportException	If the information provided is not complete.
+	 * @throws IOException	If anything with the file goes wrong (insufficient disk space, insufficient permissions).
+	 */
+	synchronized public void start(boolean append) throws ExportException, IOException {
+		// Check if we have all necessary components ready.
+		if( db == null )
+			throw new ExportException("There is no point in starting an export - the DBLayer is not set!");
+		if( filter == null ) 
+			throw new ExportException("The Filter is not set!");
+		if( file == null ) 
+			throw new ExportException("The File is not set!");
+		if( select.isEmpty() )
+			throw new ExportException("There is no point in starting an export - the list of selected records is empty!");
+			
+		
+		logger.debug("Initializing the export environment.");
+		aborted = false;
+		
+		// Create a new writer.
+		writer = new FileWriter( filter.suggestName(file), append );
+		if(writer == null) {
+			logger.fatal("Unable to create a new Writer.");
+			throw new ExportException("Unable to create a new Writer.");
+		}
+		
+		// Create a new builder according to the selected format.
+		if(filter.getDescription().equals(L10n.getString("FilterCSV")))
+			builder = new CSVBuilder(writer, template);
+		else if(filter.getDescription().equals(L10n.getString("FilterXML")))
+			builder = new TrainingBuilder(template);
+		else 
+			builder = new TrainingBuilder(template);
+
+		// Create a new Director and run it in a separate thread.
+		director = new DefaultDirector(builder, resultId, db, select);
+		director.addObserver(this);
+		current = new Thread( director, "Export" );
+		if(current == null) {
+			logger.fatal("Unable to create a new thread.");
+			throw new ExportException("Unable to create a new thread.");
+		}
+		current.start();
+		
+		exportInProgress = true;
+		
+		// Register a cleanup procedure
+		Thread monitor = new Thread(new Runnable() {
+			public void run() {
+				try {
+					// Sleep until the thread is really dead.
+					current.join();
+					// Dispose of the writer.
+					writer.close();
+					exportInProgress = false;
+					logger.debug("Environment cleaned up.");
+				}catch(Exception e) {}
+			}
+		}, "ExportMonitor");
+		monitor.start();
+	}
+	
+
+	/**
+	 * Abort the current export. You <b>must call</b> <code>finish()</code> 
+	 * after calling <code>abort()</code>. 
+	 */
+	synchronized public void abort() {
+		if(!exportInProgress) return;
+		aborted = true; exportInProgress = false;
+		if(director != null) director.abort();
+		setChanged(); notifyObservers();
+	}
+	
+	/**
+	 * @return True if the export was aborted.
+	 */
+	public boolean isAborted() {
+		return aborted;
+	}
+	
+	/**
+	 * @return True if an export procedure already runs.
+	 */
+	public boolean isExportInProgress() {
+		return exportInProgress;
+	}
+	
+	/**
+	 * @return The total number of results to be exported.
+	 */
+	public int getNumberOfResults() {
+		return selectedResults;
+	}
+	
+	/**
+	 * @return The number of results that have already been exported.
+	 */
+	public int getNumberOfExported() {
+		return director.exportedRecords();
+	}
+	
+	/**
+	 * @return The list of filters describing formats this Export Manager can handle.
+	 */
+	public XFilter[] getFilters() {
+		return filters.clone();
+	}
+
+	
+	/**
+	 * Notify the observers - some of our components has changed its state.
+	 * The parameter can carry either information about progress
+	 * or an exception that has to be dealt with.
+	 */
+	public void update(Observable source, Object parameter) {
+		setChanged(); notifyObservers( parameter );
+	}
+
+}

Added: trunk/src/net/sf/plantlore/client/export/ExportMngCtrlA.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportMngCtrlA.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/ExportMngCtrlA.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,40 @@
+package net.sf.plantlore.client.export;
+
+import javax.swing.JFileChooser;
+
+import net.sf.plantlore.client.export.component.XFilter;
+
+public class ExportMngCtrlA {
+	
+	
+	private ExportMng model;
+	private ExportMngViewA view;
+	
+	private ExportMngViewB viewB;
+	//private ExportMngCtrlB ctrlB;
+
+	private ExportProgressView  progressView;
+	
+	public ExportMngCtrlA(ExportMng model, ExportMngViewA view, ExportProgressView progressView) {
+		this.model = model; this.view = view; this.progressView = progressView;
+		viewB = new ExportMngViewB();
+		/*ctrlB = */new ExportMngCtrlB(model, viewB, progressView);
+	}
+	
+	public void setVisible(boolean visible) {
+		if(visible) {
+			int result = view.choice.showDialog(null, "Export");
+			if( result == JFileChooser.APPROVE_OPTION ) {
+				model.setSelectedFile( view.choice.getSelectedFile() );
+				XFilter filter = (XFilter) view.choice.getFileFilter();
+				model.setActiveFileFilter( filter );
+				
+				if( filter.isColumnSelectionEnabled() )
+					viewB.setVisible(true);
+				else
+					progressView.setVisible(true);
+			}
+		}
+	}
+
+}

Added: trunk/src/net/sf/plantlore/client/export/ExportMngCtrlB.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportMngCtrlB.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/ExportMngCtrlB.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,48 @@
+package net.sf.plantlore.client.export;
+
+import java.awt.event.ActionEvent;
+
+import javax.swing.AbstractAction;
+import javax.swing.JOptionPane;
+
+
+//import net.sf.plantlore.l10n.L10n;
+
+public class ExportMngCtrlB {
+	
+	private ExportMng model;
+	private ExportMngViewB view;
+	private ExportProgressView progressView;
+	
+	public ExportMngCtrlB(ExportMng model, ExportMngViewB view, ExportProgressView progressView) {
+		this.model = model; this.view = view; this.progressView = progressView;
+		view.next.addActionListener( new Next() );
+	}
+	
+	
+	class Next extends AbstractAction {
+		public void actionPerformed(ActionEvent arg0) {
+			Template t = view.tsm.getTemplate();
+			if( t.isEmpty() )
+				JOptionPane.showMessageDialog(view,
+					"You must select some columns!\nThere would be no point in running the export procedure otherwise.",
+				    "Template empty",
+				    JOptionPane.WARNING_MESSAGE);
+			else {
+				view.setVisible(false);
+				model.setTemplate( t ); // Set the new template.
+				try {
+					model.start(true);
+					progressView.setVisible(true);
+				}
+				catch(Exception e) {
+					JOptionPane.showMessageDialog(view,
+							"Unable to start the export procedure!\n" + e,
+						    "Export failed...",
+						    JOptionPane.WARNING_MESSAGE);
+				}
+			}
+		}
+	}
+
+}

Added: trunk/src/net/sf/plantlore/client/export/ExportMngViewA.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportMngViewA.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/ExportMngViewA.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,29 @@
+package net.sf.plantlore.client.export;
+
+
+import javax.swing.JFileChooser;
+import javax.swing.filechooser.FileFilter;
+
+
+public class ExportMngViewA {
+	
+	private ExportMng model;
+	protected JFileChooser choice;
+	
+	
+	
+	public ExportMngViewA(ExportMng model) {
+		this.model = model;
+		initComponents();
+	}
+
+	
+	private void initComponents() {
+		JFileChooser chooser = new JFileChooser();
+		chooser.setAcceptAllFileFilterUsed(false);
+		for( FileFilter filter: model.getFilters() )
+			chooser.addChoosableFileFilter(filter);
+	}
+	
+	
+}

Added: trunk/src/net/sf/plantlore/client/export/ExportMngViewB.form
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportMngViewB.form	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/ExportMngViewB.form	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="3"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Component id="jScrollPane1" alignment="0" pref="380" max="32767" attributes="0"/>
+                  <Component id="next" alignment="1" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+              <Component id="jScrollPane1" pref="229" max="32767" attributes="0"/>
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+              <Component id="next" min="-2" max="-2" attributes="0"/>
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Container class="javax.swing.JScrollPane" name="jScrollPane1">
+
+      <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
+      <SubComponents>
+        <Component class="javax.swing.JTree" name="tree">
+          <AuxValues>
+            <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+          </AuxValues>
+        </Component>
+      </SubComponents>
+    </Container>
+    <Component class="javax.swing.JButton" name="next">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="Export"/>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+  </SubComponents>
+</Form>

Added: trunk/src/net/sf/plantlore/client/export/ExportMngViewB.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportMngViewB.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/ExportMngViewB.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,79 @@
+/*
+ * ExportMngView.java
+ *
+ * Created on 29. duben 2006, 21:00
+ */
+
+package net.sf.plantlore.client.export;
+
+import net.sf.plantlore.client.export.component.TemplateSelectionModel;
+import net.sf.plantlore.client.export.component.XTree;
+
+/**
+ *
+ * @author  yaa
+ */
+public class ExportMngViewB extends javax.swing.JDialog {
+	
+	protected TemplateSelectionModel tsm;
+    
+    /** Creates new form ExportMngView */
+    public ExportMngViewB() {
+    	tsm = new TemplateSelectionModel();
+    	
+        initComponents();
+        
+        setLocationRelativeTo(null); // center of the screen
+        setModal(true);
+    }
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        jScrollPane1 = new javax.swing.JScrollPane();
+        tree = new XTree();
+        next = new javax.swing.JButton();
+
+        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
+        jScrollPane1.setViewportView(tree);
+
+        next.setText("Export");
+        
+        tree.setSelectionModel( tsm );
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, next))
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(next)
+                .addContainerGap())
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    private javax.swing.JScrollPane jScrollPane1;
+    protected javax.swing.JButton next;
+    protected XTree tree;
+    // End of variables declaration//GEN-END:variables
+    
+}

Added: trunk/src/net/sf/plantlore/client/export/ExportProgressCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportProgressCtrl.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/ExportProgressCtrl.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,37 @@
+package net.sf.plantlore.client.export;
+
+import java.awt.event.ActionEvent;
+
+import javax.swing.AbstractAction;
+import javax.swing.JOptionPane;
+
+//import net.sf.plantlore.l10n.L10n;
+
+public class ExportProgressCtrl {
+	
+	private ExportMng model;
+	private ExportProgressView view;
+	
+	public ExportProgressCtrl(ExportMng model, ExportProgressView view) {
+		this.model = model; this.view = view;
+		view.abort.addActionListener( new Abort() );
+	}
+	
+	class Abort extends AbstractAction {
+		public void actionPerformed(ActionEvent arg0) {
+			int response =
+				JOptionPane.showOptionDialog(view,
+					    "The export procedure will be aborted.",
+					    "Abort export",
+					    JOptionPane.OK_CANCEL_OPTION,
+					    JOptionPane.WARNING_MESSAGE,
+					    null,
+					    null,
+					    null);
+				if(response == JOptionPane.OK_OPTION) {
+					model.abort();
+				}
+		}
+	}
+
+}

Added: trunk/src/net/sf/plantlore/client/export/ExportProgressView.form
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportProgressView.form	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/ExportProgressView.form	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,69 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.3" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
+  <Properties>
+    <Property name="defaultCloseOperation" type="int" value="3"/>
+  </Properties>
+  <SyntheticProperties>
+    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
+  </SyntheticProperties>
+  <AuxValues>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Component id="progress" alignment="0" pref="380" max="32767" attributes="0"/>
+                  <Component id="status" alignment="0" pref="380" max="32767" attributes="0"/>
+                  <Component id="abort" alignment="1" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="status" min="-2" pref="84" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="progress" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="32767" attributes="0"/>
+              <Component id="abort" min="-2" max="-2" attributes="0"/>
+              <EmptySpace min="-2" max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Component class="javax.swing.JLabel" name="status">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="asdf"/>
+        <Property name="verticalAlignment" type="int" value="1"/>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Component class="javax.swing.JProgressBar" name="progress">
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+    <Component class="javax.swing.JButton" name="abort">
+      <Properties>
+        <Property name="text" type="java.lang.String" value="Abort"/>
+      </Properties>
+      <AuxValues>
+        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="4"/>
+      </AuxValues>
+    </Component>
+  </SubComponents>
+</Form>

Added: trunk/src/net/sf/plantlore/client/export/ExportProgressView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportProgressView.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/ExportProgressView.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,120 @@
+/*
+ * ExportProgressView.java
+ *
+ * Created on 29. duben 2006, 22:01
+ */
+
+package net.sf.plantlore.client.export;
+
+import java.util.Observable;
+import java.util.Observer;
+
+/**
+ *
+ * @author  Erik Kratochv?l
+ */
+public class ExportProgressView extends javax.swing.JFrame implements Observer {
+	
+	private ExportMng model;
+	private int total;
+    
+    /** Creates new form ExportProgressView */
+    public ExportProgressView(ExportMng model) {
+    	this.model = model;
+        initComponents();
+        setLocationRelativeTo(null); // center of the screen
+    }
+    
+    /** This method is called from within the constructor to
+     * initialize the form.
+     * WARNING: Do NOT modify this code. The content of this method is
+     * always regenerated by the Form Editor.
+     */
+    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
+    private void initComponents() {
+        status = new javax.swing.JLabel();
+        progress = new javax.swing.JProgressBar();
+        abort = new javax.swing.JButton();
+
+        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
+        status.setText("Erised stra ehru oyt ube cafru oyt on wohsi");
+        status.setVerticalAlignment(javax.swing.SwingConstants.TOP);
+
+        abort.setText("Abort");
+        
+        progress.setMinimum(0);
+
+        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
+        getContentPane().setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+                    .add(progress, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
+                    .add(status, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
+                    .add(org.jdesktop.layout.GroupLayout.TRAILING, abort))
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
+            .add(layout.createSequentialGroup()
+                .addContainerGap()
+                .add(status, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
+                .add(progress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                .add(abort)
+                .addContainerGap())
+        );
+        pack();
+    }// </editor-fold>//GEN-END:initComponents
+    
+    
+    
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    protected javax.swing.JButton abort;
+    protected javax.swing.JProgressBar progress;
+    protected javax.swing.JLabel status;
+    // End of variables declaration//GEN-END:variables
+    
+    
+    @Override
+    public void setVisible(boolean visible) {
+    	status.setText("Initializing...");
+    	total = model.getNumberOfResults();
+    	if(total > 0) {
+    		progress.setIndeterminate(false);
+    		progress.setMaximum( total );
+    		progress.setStringPainted(true);
+    	}
+    	else {
+    		progress.setIndeterminate(true);
+    		progress.setStringPainted(false);
+    	}
+    	
+    	super.setVisible(visible);
+    	
+    	update(null, null);
+    }
+    
+    
+    
+	public void update(Observable source, Object parameter) {
+		if(model.isAborted()) 
+			status.setText("Aborting...");
+		else if( this.isVisible() ) {
+			int count = model.getNumberOfExported();
+			if(count >= 0) {
+				progress.setValue( count );
+				if(total > 0) { 
+					progress.setString( Integer.toString(100*count / total) );
+					status.setText("Exporting " + count + ". of " + total);
+				}
+				else
+					status.setText("Exporting " + count + ".");
+			}
+		}
+	}
+    
+}

Modified: trunk/src/net/sf/plantlore/client/export/Template.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -26,7 +26,7 @@
 public class Template {
 	
 	/** The list of all pairs Table.Column that are set. */
-	private Collection<String> columns = new HashSet<String>(20);
+	private Collection<String> columns = new HashSet<String>(100);
 	
 	/** 
 	 * The list of "basic tables" i.e. tables related directly to the Occurence data.
@@ -104,17 +104,19 @@
 			
 	/** Select the <code>table.column</code>. */
 	public void set(Class table, String column) { 
-		columns.add(table.getSimpleName()+"."+column);
+		columns.add(table.getSimpleName()+ (column == null ? "" : "."+column));
+		System.out.println(" + " + table.getSimpleName() + (column == null ? "" : "." + column));
 	}
 	
 	/** Unselect the <code>table.column</code>. */
 	public void unset(Class table, String column) { 
-		columns.remove(table.getSimpleName()+"."+column); 
+		columns.remove(table.getSimpleName()+ (column == null ? "" : "."+column));
+		System.out.println(" - " + table.getSimpleName() + (column == null ? "" : "." + column));
 	}
 	
 	/** @return true if the <code>table.column</code> is set.*/
-	public boolean isSet(Class table, String column) { 
-		return columns.contains(table.getSimpleName()+"."+column); 
+	public boolean isSet(Class table, String column) {
+		return columns.contains(table.getSimpleName()+ (column == null ? "" : "."+column));
 	}
 	
 	/** Unselect all columns of all tables. */
@@ -122,6 +124,13 @@
 		columns.clear(); 
 	}
 	
+	/**
+	 * @return true if nothing is selected.
+	 */
+	public boolean isEmpty() {
+		return columns.isEmpty();
+	}
+	
 		
 	/**
 	 * Match this template against another one.

Modified: trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -14,7 +14,7 @@
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-04-23
- * @version 1.0 final
+ * @version 1.0 header is missing
  */
 public class CSVBuilder extends AbstractBuilder{
 	
@@ -50,6 +50,12 @@
 	}
 	
 	/**
+	 * Make a note that the header is yet to be created.
+	 */
+	public void header() throws IOException {
+	}
+	
+	/**
 	 * Insert a line breaker.
 	 */
 	public void footer() throws IOException {

Added: trunk/src/net/sf/plantlore/client/export/component/TemplateSelectionModel.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/component/TemplateSelectionModel.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/component/TemplateSelectionModel.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,63 @@
+package net.sf.plantlore.client.export.component;
+
+import javax.swing.tree.DefaultMutableTreeNode;
+import javax.swing.tree.DefaultTreeSelectionModel;
+import javax.swing.tree.TreePath;
+
+import net.sf.plantlore.client.export.Template;
+
+/**
+ * A TreeSelectionModel modified to update its Template. 
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 29.4.2006
+ * @see net.sf.plantlore.client.export.component.XTree
+ * @see net.sf.plantlore.client.export.component.XNode
+ */
+public class TemplateSelectionModel extends DefaultTreeSelectionModel {
+	
+	private Template xtemplate = new Template();
+	
+	@Override 
+	public void setSelectionPath(TreePath path) {
+		if( isPathSelected(path) )
+			removeSelectionPath(path);
+		else
+			addSelectionPath(path);
+	}
+	
+	@Override 
+	public void removeSelectionPaths(TreePath[] paths) {
+		for(TreePath path : paths) {
+			if(path == null) continue;
+			Object node = path.getLastPathComponent();
+			if(node instanceof DefaultMutableTreeNode) {
+				XNode x  = (XNode) ((DefaultMutableTreeNode)node).getUserObject();
+				xtemplate.unset(x.table, x.column);  
+			}
+		}
+		super.removeSelectionPaths( paths );
+	}
+	
+	@Override 
+	public void addSelectionPaths(TreePath[] paths) {
+		for(TreePath path : paths) {
+			Object node = path.getLastPathComponent();
+			if(node instanceof DefaultMutableTreeNode) {
+				XNode x  = (XNode) ((DefaultMutableTreeNode)node).getUserObject();
+				// Select table.column records (not the table only). 
+				if(x.column != null) xtemplate.set(x.table, x.column);
+			}
+		}
+		super.addSelectionPaths( paths );
+	}
+			
+	/**
+	 * 
+	 * @return A copy of the inner template that stores the list of selected columns.
+	 */
+	public Template getTemplate() {
+		return xtemplate.clone();
+	}
+	
+}

Added: trunk/src/net/sf/plantlore/client/export/component/XFilter.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/component/XFilter.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/component/XFilter.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,111 @@
+package net.sf.plantlore.client.export.component;
+
+import java.io.File;
+import java.util.ArrayList;
+
+import javax.swing.filechooser.FileFilter;
+
+/**
+ * An implementation of a FileFilter.
+ * The XFilter stores a list of extensions
+ * that are related to a particular format.
+ * <br/>
+ * For example: 
+ * <code>Comma Separated Values (*.txt, *.csv)</code>
+ * will store <code>".txt", ".csv"</code>.
+ *  
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-29
+ * @version 1.0
+ */
+public class XFilter extends FileFilter {
+	
+	private String description;
+	private ArrayList<String> extensions;
+	private boolean columnSelection = false;
+	
+	/**
+	 * Create a new XFilter.
+	 * 
+	 * @param description The description of the filter.
+	 * @param extensions	The list of extensions that are related to this filter.
+	 */
+	public XFilter(String description, String... extensions) {
+		this.description = description;
+		this.extensions = new ArrayList<String>( extensions.length );
+		for(String ext : extensions) this.extensions.add(ext);
+	}
+	
+	/**
+	 * Create a new XFilter.
+	 * 
+	 * @param description	The description of the filter.
+	 * @param columnSelectionEnabled	The format allows further modifications.
+	 * @param extensions	The list of extensions that are related to this filter.
+	 */
+	public XFilter(String description, boolean columnSelectionEnabled, String... extensions) {
+		this(description, extensions);
+		this.columnSelection = columnSelectionEnabled;
+	}
+
+	/**
+	 * @return True if the column selection is available for this format.
+	 */
+	public boolean isColumnSelectionEnabled() {
+		return this.columnSelection;
+	}
+
+	/**
+	 * Decide whether the file meets the requierements - has the correct extension
+	 * or it is in fact a directory.
+	 */
+	@Override
+	public boolean accept(File file) {
+		if( file != null) {
+			if(file.isDirectory()) return true;
+			String name = file.getName() ;
+			int dot = name.lastIndexOf(".");
+			if(dot < 0) return false;
+			if(extensions.contains( name.substring(dot) )) return true;
+		}
+		return false;
+	}
+
+	/**
+	 * @return The description of the format.
+	 */
+	@Override
+	public String getDescription() {
+		return description;
+	}
+	
+	/**
+	 * Decide whether the file already has a valid extension.
+	 * A valid extension is an extension that belongs to
+	 * the list of extensions of this format.
+	 * 
+	 * @param file	The file to be tested.
+	 * @return	True if the file has a valid extension of this format.
+	 */
+	public boolean hasExtension(File file) {
+		int dot = file.getName().lastIndexOf(".");
+		if(dot < 0) return false;
+		if(extensions.contains( file.getName().substring(dot) )) return true;
+		return false;
+	}
+	
+	/**
+	 * Suggest the name for a file based on the list of extensions.
+	 * If the file already has an extension, the name is not changed.
+	 * An extension is added, if the file has not a valid extension. 
+	 * 
+	 * @param file	The file the name will be derived from.
+	 * @return The suggested name for this file.
+	 * @see net.sf.plantlore.client.export.component.XFilter#hasExtension(File)
+	 */
+	public String suggestName(File file) {
+		if(hasExtension(file)) return file.getName();
+		else return file.getName() + extensions.get(0);
+	}
+	
+}
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/client/export/component/XNode.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/component/XNode.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/component/XNode.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,43 @@
+package net.sf.plantlore.client.export.component;
+
+/**
+ * A representation of a node in an XTree.
+ * Every node corresponds to a <code>column</code> of a <code>table</code>.
+ *  
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-29
+ * @see net.sf.plantlore.client.export.component.XTree
+ */
+public class XNode {
+	/** The table whose columns this node represents. */
+	public Class table;
+	/** The column of the table this node represents. */
+	public String column;
+	/** Is it a not-null property in the database? */
+	public boolean nn;
+	
+	/**
+	 * Create a new XNode. The node represents 
+	 * a (possibly mandatory) column of a table.
+	 */
+	public XNode(Class table, String column, boolean notNullProperty) {
+		this.table = table; nn = notNullProperty; this.column = column;
+	}
+	
+	/**
+	 * Create a new XNode. The node represents a column of a table.
+	 */
+	public XNode(Class table, String column) {
+		this(table, column, false);
+	}
+	
+	/**
+	 * Get the name of the column.
+	 * TODO: L10n may be useful here!
+	 */
+	@Override
+	public String toString() {
+		return column == null ? table.getSimpleName() :  column;
+	}
+}
\ No newline at end of file

Added: trunk/src/net/sf/plantlore/client/export/component/XTree.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/component/XTree.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/client/export/component/XTree.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,386 @@
+package net.sf.plantlore.client.export.component;
+
+import java.awt.Color;
+import java.awt.Component;
+
+
+import javax.swing.JLabel;
+import javax.swing.tree.*;
+
+import net.sf.plantlore.common.record.*;
+
+/**
+ * The extension of a JTree that allows the User to see the database model
+ * in a compact form. The tree expects the database hierarchy when it's created.
+ * Two default hierarchies are already present - the <code>DefaultHierarchy</code>
+ * which is loaded when no other hierarchy is specified and displays the database
+ * model in the hierarchy, 
+ * and the <code>SimpleHierarchy</code> which is a simplified version with
+ * all tables as sub-root nodes.
+ * Both hierarchies are hard-wired and must be updated if the database
+ * model changes!
+ * <br/>
+ * The selected nodes are visualized to the User in another colour.
+ * Collapsing a node <b>will cause</b> deselection of all of its selected
+ * sub-nodes. This is a feature that will prevent the User from selecting
+ * a group of columns and forgeting about them. 
+ * <br/>
+ * The XTree uses instances of XNode class - that is, the label of the
+ * node is derived from the XNode.toString(). Should you have a desire
+ * to implement the L10N, modify that method appropriatelly.
+ * <br/>
+ * The XTree cannot produce a Template - in order to create and update 
+ * the Template "automatically" create your own TreeSelectionModel
+ * that is capable of such an action. 
+ * <pre>
+ * XTree tree = new XTree( );
+ * tree.setSelectionModel( new YSelectionModel() );
+ * </pre>
+ * where
+ * <pre>
+ * class TemplateSelectionModel extends DefaultTreeSelectionModel {
+ * 		private Template template;
+ * 
+ *		// Use this to achieve compatibility with the default XTree selection model.
+ *		@Override 
+ *		public void setSelectionPath(TreePath path) {
+ *			if( isPathSelected(path) )
+ *				removeSelectionPath(path);
+ *			else
+ *				addSelectionPath(path);
+ *		}
+ *		@Override 
+ *		public void removeSelectionPaths(TreePath[] paths) {
+ *			for(TreePath path : paths) {
+ *				XNode x  = (XNode) 
+ *					((DefaultMutableTreeNode)path.getLastPathComponent())
+ *					.getUserObject();
+ *				template.unset(x.table, x.column);    // update the Template 
+ *			} 
+ *			super.removeSelectionPaths( paths ); 
+ *		}
+ *		@Override 
+ *		public void addSelectionPaths(TreePath[] paths) {
+ *			// ...similar...
+ *		}
+ * }
+ * </pre>
+ *   
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-29
+ * @version 1.0
+ * @see net.sf.plantlore.client.export.Template
+ * @see net.sf.plantlore.client.export.ExportMng.XSelectionModel
+ */
+public class XTree extends javax.swing.JTree {
+	
+	private static Color NotNullColor = new Color(220, 50, 20);
+	private static Color SelectedColor = new Color(20, 150, 20);
+	private static Color DefaultColor = Color.BLACK;
+	
+	
+	/**
+	 * The Default Hierarchy Model of the Database Model.
+	 */
+	public static Object[] DefaultHierarchy = {
+		new XNode(XTree.class, "Plantlore DB"),
+		new Object[] { // OCCURENCE
+			new XNode(Occurrence.class, null),
+			new XNode(Occurrence.class, Occurrence.UNITIDDB, true),
+			new XNode(Occurrence.class, Occurrence.UNITVALUE, true),
+			new Object[] { // HABITAT
+				new XNode(Habitat.class, null),
+				new Object[] { // TERRITORY
+					new XNode(Territory.class, null),
+					new XNode(Territory.class, Territory.NAME, true)
+				},
+				new Object[] { // PHYTOCHORION
+					new XNode(Phytochorion.class, null),
+					new XNode(Phytochorion.class, Phytochorion.CODE, true),
+					new XNode(Phytochorion.class, Phytochorion.NAME, true),
+				},
+				new XNode(Habitat.class, Habitat.QUADRANT),
+				new XNode(Habitat.class, Habitat.DESCRIPTION),
+				new Object[] { // NEAREST VILLAGE
+					new XNode(Village.class, null),
+					new XNode(Village.class, Village.NAME, true)
+				},
+				new XNode(Habitat.class, Habitat.COUNTRY),
+				new XNode(Habitat.class, Habitat.ALTITUDE),
+				new XNode(Habitat.class, Habitat.LATITUDE),
+				new XNode(Habitat.class, Habitat.LONGITUDE),
+				new XNode(Habitat.class, Habitat.NOTE),
+			},
+			new Object[] { // PLANT
+				new XNode(Plant.class, null),
+				new XNode(Plant.class, Plant.SURVEYTAXID, true),
+				new XNode(Plant.class, Plant.TAXON, true),
+				new XNode(Plant.class, Plant.GENUS),
+				new XNode(Plant.class, Plant.SPECIES),
+				new XNode(Plant.class, Plant.SCIENTIFICNAMEAUTHOR, true),
+				new XNode(Plant.class, Plant.CZECHNAME),
+				new XNode(Plant.class, Plant.SYNONYMS),
+				new XNode(Plant.class, Plant.NOTE)
+			},
+			new XNode(Occurrence.class, Occurrence.YEARCOLLECTED, true),
+			new XNode(Occurrence.class, Occurrence.MONTHCOLLECTED),
+			new XNode(Occurrence.class, Occurrence.DAYCOLLECTED),
+			new XNode(Occurrence.class, Occurrence.TIMECOLLECTED),
+			new XNode(Occurrence.class, Occurrence.DATASOURCE),
+			new Object[] { // PUBLICATION
+				new XNode(Publication.class, null),
+				new XNode(Publication.class, Publication.COLLECTIONNAME),
+				new XNode(Publication.class, Publication.COLLECTIONYEARPUBLICATION),
+				new XNode(Publication.class, Publication.JOURNALNAME),
+				new XNode(Publication.class, Publication.JOURNALAUTHORNAME),
+				new XNode(Publication.class, Publication.REFERENCECITATION, true),
+				new XNode(Publication.class, Publication.REFERENCEDETAIL),
+				new XNode(Publication.class, Publication.URL),
+				new XNode(Publication.class, Publication.NOTE)
+			},
+			new XNode(Occurrence.class, Occurrence.HERBARIUM),
+			new XNode(Occurrence.class, Occurrence.CREATEDWHEN, true),
+			new XNode(Occurrence.class, Occurrence.UPDATEDWHO, true),
+			new XNode(Occurrence.class, Occurrence.NOTE),
+			new Object[] { // METADATA
+				new XNode(Metadata.class, null),
+				new XNode(Metadata.class, Metadata.TECHNICALCONTACTNAME, true),
+				new XNode(Metadata.class, Metadata.TECHNICALCONTACTEMAIL),
+				new XNode(Metadata.class, Metadata.TECHNICALCONTACTADDRESS),
+				new XNode(Metadata.class, Metadata.CONTENTCONTACTNAME, true),
+				new XNode(Metadata.class, Metadata.CONTENTCONTACTEMAIL),
+				new XNode(Metadata.class, Metadata.CONTENTCONTACTADDRESS),
+				new XNode(Metadata.class, Metadata.DATASETTITLE, true),
+				new XNode(Metadata.class, Metadata.DATASETDETAILS),
+				new XNode(Metadata.class, Metadata.SOURCEINSTITUTIONID, true),
+				new XNode(Metadata.class, Metadata.SOURCEID, true),
+				new XNode(Metadata.class, Metadata.OWNERORGANIZATIONABBREV),
+				new XNode(Metadata.class, Metadata.DATECREATE, true),
+				new XNode(Metadata.class, Metadata.DATEMODIFIED, true),
+				new XNode(Metadata.class, Metadata.RECORDBASIS),
+				new XNode(Metadata.class, Metadata.BIOTOPETEXT),
+				new XNode(Metadata.class, Metadata.VERSIONPLANTSFILE)
+			}
+		},
+		new Object[] { // AUTHOR
+			new XNode(Author.class, null),
+			new XNode(Author.class, Author.WHOLENAME),
+			new XNode(Author.class, Author.ORGANIZATION),
+			new XNode(Author.class, Author.PHONENUMBER),
+			new XNode(Author.class, Author.ROLE),
+			new XNode(Author.class, Author.ADDRESS),
+			new XNode(Author.class, Author.EMAIL),
+			new XNode(Author.class, Author.URL),
+			new XNode(Author.class, Author.NOTE)
+		},
+		new Object[] { // AUTHOR-OCCURENCE
+			new XNode(AuthorOccurrence.class, null),
+			new XNode(AuthorOccurrence.class, AuthorOccurrence.ROLE),
+			new XNode(AuthorOccurrence.class, AuthorOccurrence.RESULTREVISION)
+		}
+	};
+	
+	/**
+	 * A simplified Hierarchy Model of the Database Model. 
+	 */
+	public static Object[] SimpleHierarchy = new Object[] {
+		new XNode(XTree.class, "Plantlore DB"),
+		new Object[] { // OCCURENCE
+			new XNode(Occurrence.class, null),
+			new XNode(Occurrence.class, Occurrence.UNITIDDB, true),
+			new XNode(Occurrence.class, Occurrence.UNITVALUE, true),
+			new XNode(Occurrence.class, Occurrence.YEARCOLLECTED, true),
+			new XNode(Occurrence.class, Occurrence.MONTHCOLLECTED),
+			new XNode(Occurrence.class, Occurrence.DAYCOLLECTED),
+			new XNode(Occurrence.class, Occurrence.TIMECOLLECTED),
+			new XNode(Occurrence.class, Occurrence.DATASOURCE),
+			new XNode(Occurrence.class, Occurrence.HERBARIUM),
+			new XNode(Occurrence.class, Occurrence.CREATEDWHEN, true),
+			new XNode(Occurrence.class, Occurrence.UPDATEDWHO, true),
+			new XNode(Occurrence.class, Occurrence.NOTE)
+		},
+		new Object[] { // TERRITORY
+			new XNode(Territory.class, null),
+			new XNode(Territory.class, Territory.NAME, true)
+		},
+		new Object[] { // PHYTOCHORION
+			new XNode(Phytochorion.class, null),
+			new XNode(Phytochorion.class, Phytochorion.CODE, true),
+			new XNode(Phytochorion.class, Phytochorion.NAME, true),
+		},
+		new Object[] { // NEAREST VILLAGE
+			new XNode(Village.class, null),
+			new XNode(Village.class, Village.NAME, true)
+		},
+		new Object[] { // HABITAT
+			new XNode(Habitat.class, null),
+			new XNode(Habitat.class, Habitat.QUADRANT),
+			new XNode(Habitat.class, Habitat.DESCRIPTION),
+			new XNode(Habitat.class, Habitat.COUNTRY),
+			new XNode(Habitat.class, Habitat.ALTITUDE),
+			new XNode(Habitat.class, Habitat.LATITUDE),
+			new XNode(Habitat.class, Habitat.LONGITUDE),
+			new XNode(Habitat.class, Habitat.NOTE)
+		},
+		new Object[] { // PLANT
+			new XNode(Plant.class, null),
+			new XNode(Plant.class, Plant.SURVEYTAXID, true),
+			new XNode(Plant.class, Plant.TAXON, true),
+			new XNode(Plant.class, Plant.GENUS),
+			new XNode(Plant.class, Plant.SPECIES),
+			new XNode(Plant.class, Plant.SCIENTIFICNAMEAUTHOR, true),
+			new XNode(Plant.class, Plant.CZECHNAME),
+			new XNode(Plant.class, Plant.SYNONYMS),
+			new XNode(Plant.class, Plant.NOTE)
+		},
+		new Object[] { // PUBLICATION
+			new XNode(Publication.class, null),
+			new XNode(Publication.class, Publication.COLLECTIONNAME),
+			new XNode(Publication.class, Publication.COLLECTIONYEARPUBLICATION),
+			new XNode(Publication.class, Publication.JOURNALNAME),
+			new XNode(Publication.class, Publication.JOURNALAUTHORNAME),
+			new XNode(Publication.class, Publication.REFERENCECITATION, true),
+			new XNode(Publication.class, Publication.REFERENCEDETAIL),
+			new XNode(Publication.class, Publication.URL),
+			new XNode(Publication.class, Publication.NOTE)
+		},
+		new Object[] { // METADATA
+			new XNode(Metadata.class, null),
+			new XNode(Metadata.class, Metadata.TECHNICALCONTACTNAME, true),
+			new XNode(Metadata.class, Metadata.TECHNICALCONTACTEMAIL),
+			new XNode(Metadata.class, Metadata.TECHNICALCONTACTADDRESS),
+			new XNode(Metadata.class, Metadata.CONTENTCONTACTNAME, true),
+			new XNode(Metadata.class, Metadata.CONTENTCONTACTEMAIL),
+			new XNode(Metadata.class, Metadata.CONTENTCONTACTADDRESS),
+			new XNode(Metadata.class, Metadata.DATASETTITLE, true),
+			new XNode(Metadata.class, Metadata.DATASETDETAILS),
+			new XNode(Metadata.class, Metadata.SOURCEINSTITUTIONID, true),
+			new XNode(Metadata.class, Metadata.SOURCEID, true),
+			new XNode(Metadata.class, Metadata.OWNERORGANIZATIONABBREV),
+			new XNode(Metadata.class, Metadata.DATECREATE, true),
+			new XNode(Metadata.class, Metadata.DATEMODIFIED, true),
+			new XNode(Metadata.class, Metadata.RECORDBASIS),
+			new XNode(Metadata.class, Metadata.BIOTOPETEXT),
+			new XNode(Metadata.class, Metadata.VERSIONPLANTSFILE)
+		},
+		new Object[] { // AUTHOR
+			new XNode(Author.class, null),
+			new XNode(Author.class, Author.WHOLENAME),
+			new XNode(Author.class, Author.ORGANIZATION),
+			new XNode(Author.class, Author.PHONENUMBER),
+			new XNode(Author.class, Author.ROLE),
+			new XNode(Author.class, Author.ADDRESS),
+			new XNode(Author.class, Author.EMAIL),
+			new XNode(Author.class, Author.URL),
+			new XNode(Author.class, Author.NOTE)
+		},
+		new Object[] { // AUTHOR-OCCURENCE
+			new XNode(AuthorOccurrence.class, null),
+			new XNode(AuthorOccurrence.class, AuthorOccurrence.ROLE),
+			new XNode(AuthorOccurrence.class, AuthorOccurrence.RESULTREVISION)
+		}
+	};
+	
+	/**
+	 * Create a new XTree with the Default Hierarchy Model.
+	 */
+	public XTree( ) {
+		this( DefaultHierarchy );
+	}
+	
+	
+	/**
+	 * Create a new XTree with a specified Hierarchy Model.
+	 * @param hierarchy The hierarchy to be processed.
+	 */
+	public XTree( Object[] hierarchy ) {
+		super( processHierarchy(hierarchy) );
+		
+	    setCellRenderer( new XCellRenderer() );
+	    setToggleClickCount(1);
+	    setSelectionModel( new XSelectionModel() );
+	}
+	
+	
+	/**
+	 * A modified selection model. A single click will 
+	 * add a leaf to the current selection.
+	 * 
+	 * @author Erik Kratochv?l (discontinuum at gmail.com)
+	 * @since 2006-04-29
+	 */	
+	public class XSelectionModel extends DefaultTreeSelectionModel {
+		
+		@Override 
+		public void setSelectionPath(TreePath path) {
+			if( isPathSelected(path) )
+				removeSelectionPath(path);
+			else
+				addSelectionPath(path);
+		}
+	}
+	
+	
+	/**
+	 * SPecialized Cell Renderer that shows no icons and
+	 * displayes mandatory columns with a different coulour.
+	 * 
+	 * @author Erik Kratochv?l (discontinuum at gmail.com)
+	 * @since 2006-04-29
+	 */
+	protected class XCellRenderer extends DefaultTreeCellRenderer {
+		
+		public XCellRenderer() {
+			setOpenIcon(null); 
+		    setClosedIcon(null); 
+		    setLeafIcon(null);
+		}
+		
+		@Override
+		public Component getTreeCellRendererComponent(
+				javax.swing.JTree tree, 
+				Object value, 
+				boolean selected, 
+				boolean expanded, 
+				boolean leaf, 
+				int row, 
+				boolean hasFocus) {
+			// Let the default implementation handle the drawing.
+			JLabel label =  (JLabel) 
+				super.getTreeCellRendererComponent(tree, value, false, expanded, leaf, row, false);
+			// Modify the result of the predecessor.
+			if( selected && leaf ) 
+				label.setForeground( SelectedColor );
+			else
+				if( ((XNode)((DefaultMutableTreeNode)value).getUserObject()).nn )
+					label.setForeground( NotNullColor );
+				else 
+					label.setForeground( DefaultColor );
+			return label;
+		}
+	}
+	
+	
+	
+	/**
+	 * Transform the simple Object[] hierarchy into an internal representation 
+	 * of the JTree.
+	 * @param hierarchy The hierarchy to be converted.
+	 * @return The root of the transformed hierarchy.
+	 */
+	private static DefaultMutableTreeNode processHierarchy(Object[] hierarchy) {
+		DefaultMutableTreeNode node = new DefaultMutableTreeNode(hierarchy[0]);
+		DefaultMutableTreeNode child;
+		for (int i = 1; i < hierarchy.length; i++) {
+			Object nodeSpecifier = hierarchy[i];
+			if (nodeSpecifier instanceof Object[]) // Ie node with children
+				child = processHierarchy((Object[]) nodeSpecifier);
+			else
+				child = new DefaultMutableTreeNode(nodeSpecifier); // Ie Leaf
+			node.add(child);
+		}
+		return (node);
+	}
+	
+
+}

Modified: trunk/src/net/sf/plantlore/common/AutoComboBox.java
===================================================================
--- trunk/src/net/sf/plantlore/common/AutoComboBox.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/common/AutoComboBox.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -1,16 +1,12 @@
 package net.sf.plantlore.common;
 
-import java.awt.BorderLayout;
 import java.awt.event.FocusEvent;
 import java.awt.event.FocusListener;
 import java.awt.event.KeyEvent;
 import java.awt.event.KeyListener;
 
-import javax.swing.JButton;
 import javax.swing.JComboBox;
-import javax.swing.JFrame;
 import javax.swing.JTextField;
-import javax.swing.UIManager;
 import javax.swing.text.AttributeSet;
 import javax.swing.text.BadLocationException;
 import javax.swing.text.PlainDocument;
@@ -37,7 +33,7 @@
  * record "------" or "not specified" instead.
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
- * @version 1.1
+ * @version 1.1 jlist doesn't get updated when the user types
  * @since The beginning of time.
  */
 public class AutoComboBox extends JComboBox {
@@ -45,10 +41,8 @@
 	protected boolean allowNew = false;
 	protected int capacity = 32;
 	
-	private Object last;
+
 	
-	
-	
 
 	/**
 	 * Create the AutoComboBox with given array of choices.
@@ -113,7 +107,6 @@
 							super.remove(0, getLength());
 							super.insertString(0, item.substring(0, prefix.length()), null); // rewrite the text
 							noMatch = false;
-							last = getItemAt(i);
 							break;
 						}
 					}
@@ -151,22 +144,4 @@
 	}
 
 	
-/* ================================================================================== */
-	public static void main(String[] args) {
-		String lookAndFeel = UIManager.getSystemLookAndFeelClassName();
-        try { UIManager.setLookAndFeel(lookAndFeel); }
-        catch (Exception e) { JFrame.setDefaultLookAndFeelDecorated(true); }
-		
-		JFrame f = new JFrame();
-		//String[] ch = { "Daniel Jackson", "Etrachlorethylen", "Jack O'Neill", "Samantha Carter", "Tetrachlorethylen", "Tetraethylen", "Thor", "Ty'alc" };
-		String[] ch = new String[1000];
-		for(int i = 0; i < 1000; i++) ch[i] = Integer.toBinaryString(i);
-		
-		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-		f.getContentPane().add(new AutoComboBox(ch), BorderLayout.NORTH);
-		f.getContentPane().add(new JButton("Done"), BorderLayout.SOUTH);
-		f.pack();
-		f.setVisible(true);
-	}
-
 }

Modified: trunk/src/net/sf/plantlore/common/Selection.java
===================================================================
--- trunk/src/net/sf/plantlore/common/Selection.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/common/Selection.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -20,16 +20,37 @@
 	private boolean inverted = false;
 	
 	/**
-	 * Add another record to the selection.
+	 * Create a new empty selection.
+	 */
+	public Selection() {}
+	
+	/**
+	 * Create a new selection containing the same records 
+	 * as the other <code>selection</code>
+	 * @param selection The selection to duplicate.
+	 */
+	public Selection(Selection selection) {
+		selected = new HashSet<Integer>( selection.selected );
+		inverted = selection.inverted;
+	}
+	
+	/**
+	 * Add another record to the selection. 
 	 * @param id	The primary key of the record.
 	 */
-	public void add(Integer id) { selected.add(id); }
+	public void add(Integer id) {
+		if( !inverted ) selected.add(id);
+		else selected.remove(id);
+	}
 		
 	/**
 	 * Remove a selected record from the selection (deselect).
 	 * @param id Of the record that is deselected.
 	 */
-	public void remove(Integer id) { selected.remove(id); }
+	public void remove(Integer id) {
+		if( !inverted ) selected.remove(id);
+		else selected.add(id);
+	}
 	
 	/**
 	 * Invert the current selection.
@@ -57,5 +78,25 @@
 	 * @return true if the record is selected.
 	 */
 	public boolean contains(Record r) { return selected.contains(r.getId()) ^ inverted; }
+	
+	/**
+	 * @param total The number of all records (from which the selection is made).
+	 * @return The number of selected records.
+	 */
+	public int size(int total) {
+		return inverted ? total - selected.size() : selected.size();
+	}
+	
+	/**
+	 * @return true if nothing is selected;
+	 */
+	public boolean isEmpty() {
+		return selected.isEmpty() ^ inverted;
+	}
+	
+	@Override
+	public Selection clone() {
+		return new Selection( this );
+	}
 
 }

Added: trunk/src/net/sf/plantlore/common/exception/DBLayerException.java
===================================================================
--- trunk/src/net/sf/plantlore/common/exception/DBLayerException.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/common/exception/DBLayerException.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,13 @@
+package net.sf.plantlore.common.exception;
+
+/**
+ * An exception thrown every time something in the database layer
+ * (DBLayer) went wrong.
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-29
+ *
+ */
+public class DBLayerException extends PlantloreException {
+
+}

Added: trunk/src/net/sf/plantlore/common/exception/ExportException.java
===================================================================
--- trunk/src/net/sf/plantlore/common/exception/ExportException.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/common/exception/ExportException.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,22 @@
+package net.sf.plantlore.common.exception;
+
+/**
+ * An exception thrown every time something during the export
+ * went wrong - typically when some variables are not initialized
+ * properly and the export cannot start the execution.
+ * <br/>
+ * This exception is <b>not</b> thrown if anything goes wrong with the
+ * output (not enough disk space, insufficient permissions). 
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-29
+ *
+ */
+public class ExportException extends PlantloreException {
+	
+	public ExportException() { super(); }
+	
+	public ExportException(String message) { super(message); }
+	
+
+}

Added: trunk/src/net/sf/plantlore/common/exception/PlantloreException.java
===================================================================
--- trunk/src/net/sf/plantlore/common/exception/PlantloreException.java	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/common/exception/PlantloreException.java	2006-04-30 12:28:09 UTC (rev 197)
@@ -0,0 +1,19 @@
+package net.sf.plantlore.common.exception;
+
+import java.io.Serializable;
+
+/**
+ * A common ancestor of all exceptions thrown by Plantlore.
+ * The ancestor is Serializable so as to be able to travel
+ * through the RMI framework.
+ * 
+ * @author Erik Kratochv?l (discontinuum at gmail.com)
+ * @since 2006-04-29
+ *
+ */
+public class PlantloreException extends Exception implements Serializable {
+
+	public PlantloreException() { super(); }
+
+	public PlantloreException(String message) { super(message); }
+}

Modified: trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties
===================================================================
--- trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties	2006-04-30 01:28:13 UTC (rev 196)
+++ trunk/src/net/sf/plantlore/l10n/Plantlore_en.properties	2006-04-30 12:28:09 UTC (rev 197)
@@ -207,6 +207,19 @@
 Database = Database
 Change = Change
 
+# EXPORT | IMPORT
+FilterPlantloreNative = Plantlore native (for future import)
+FilterXML = Extensible Markup Language (XML)
+FilterCSV = Comma Separated Value (CSV)
+FilterABCD = ABCD Schema native
+FilterDC = DarwinCore native
+FilterConsole = Console output
+
+Export = Export
+
+ExportColumns = Select columns you want to export
+
+
 Next = &Next
 Refresh = &Refresh
 RefreshTT = Reload the list of the connected clients.



From krater at berlios.de  Sun Apr 30 19:07:13 2006
From: krater at berlios.de (krater at berlios.de)
Date: Sun, 30 Apr 2006 19:07:13 +0200
Subject: [Plantlore-dev] r198 - trunk/src/net/sf/plantlore/l10n
Message-ID: <200604301707.k3UH7DXM025411@sheep.berlios.de>

Author: krater
Date: 2006-04-30 19:06:44 +0200 (Sun, 30 Apr 2006)
New Revision: 198

Modified:
   trunk/src/net/sf/plantlore/l10n/L10n.java
Log:
A minor improvement to the L10n.java - if the getString(key) method cannot find the specified key, it no longer throws a MissingResourceException (but generates a log warning instead). In case the correct string for the key is not found, the key itself is returned.

Modified: trunk/src/net/sf/plantlore/l10n/L10n.java
===================================================================
--- trunk/src/net/sf/plantlore/l10n/L10n.java	2006-04-30 12:28:09 UTC (rev 197)
+++ trunk/src/net/sf/plantlore/l10n/L10n.java	2006-04-30 17:06:44 UTC (rev 198)
@@ -9,6 +9,7 @@
 
 import java.io.IOException;
 import java.util.Locale;
+import java.util.MissingResourceException;
 import java.util.ResourceBundle;
 import java.util.prefs.Preferences;
 import org.apache.log4j.Logger;
@@ -79,14 +80,20 @@
      * Removes the first ampersand sign (&) because it is assumed that it is an indiaction of a mnemonic.
      *
      * @param key Key of the required value
-     * @trhows NullPointerException in case that <code>load()</code> wasn't called first or it failed.
+     * @throws NullPointerException in case that <code>load()</code> wasn't called first or it failed.
+     * @throws MissingResourceException in case the <code>key</code> is not defined!
      */
     public static String getString(String key) {
-        StringBuffer sb = new StringBuffer(resource.getString(key));
-        int i = sb.indexOf("&");
-        if (i>=0)
-            sb.deleteCharAt(i);
-        return sb.toString();
+    	try {
+    		StringBuffer sb = new StringBuffer(resource.getString(key));
+    		int i = sb.indexOf("&");
+    		if (i>=0)
+    			sb.deleteCharAt(i);
+    		return sb.toString();
+    	} catch( MissingResourceException e ) {
+    		logger.warn("The key \"" + key + "\" is not defined in the property file!");
+    		return key; // nothing else we can do...
+    	}
     }
     
     /** Returns mnemonic for the given key.



From krater at berlios.de  Sun Apr 30 22:06:30 2006
From: krater at berlios.de (krater at berlios.de)
Date: Sun, 30 Apr 2006 22:06:30 +0200
Subject: [Plantlore-dev] r199 - in trunk/src/net/sf/plantlore: client/export client/export/builders client/export/component common/record server
Message-ID: <200604302006.k3UK6UJg030130@sheep.berlios.de>

Author: krater
Date: 2006-04-30 22:06:28 +0200 (Sun, 30 Apr 2006)
New Revision: 199

Modified:
   trunk/src/net/sf/plantlore/client/export/AbstractBuilder.java
   trunk/src/net/sf/plantlore/client/export/DefaultDirector.java
   trunk/src/net/sf/plantlore/client/export/ExportMng.java
   trunk/src/net/sf/plantlore/client/export/ExportMngCtrlA.java
   trunk/src/net/sf/plantlore/client/export/ExportMngCtrlB.java
   trunk/src/net/sf/plantlore/client/export/ExportMngViewA.java
   trunk/src/net/sf/plantlore/client/export/ExportProgressCtrl.java
   trunk/src/net/sf/plantlore/client/export/ExportProgressView.java
   trunk/src/net/sf/plantlore/client/export/Template.java
   trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
   trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java
   trunk/src/net/sf/plantlore/client/export/component/XFilter.java
   trunk/src/net/sf/plantlore/common/record/Record.java
   trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
Log:
The whole Export (framework + GUI).
Features:
* the export runs in a separate thread (hell of a feature!)
* the procedure can be aborted
* the selection of columns is available for some formats

Things to create: XMLBuilder, DCBuilder, ABCDBuilder.
Things to finish: CSVBuilder must export a header as well.


The HibernateDBLayer.java's BUG FIXED:
 the more() method returned the same records for (from, to) = (1,1) and (0,0). Now it works properly.

Modified: trunk/src/net/sf/plantlore/client/export/AbstractBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/AbstractBuilder.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/client/export/AbstractBuilder.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -48,7 +48,6 @@
 	 * @param template The new template. <b>Mustn't be <i>null</i></b>.
 	 */
 	public void setTemplate(Template template) {
-		assert(template != null);
 		this.template = template.clone();
 		
 		// Store all getters of all selected columns.

Modified: trunk/src/net/sf/plantlore/client/export/DefaultDirector.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/DefaultDirector.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/client/export/DefaultDirector.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -31,7 +31,7 @@
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-04-21
- * @version 0.9 might still slightly change
+ * @version 1.0 BETA - might still slightly change
  *
  * @see net.sf.plantlore.client.common.Selection
  * @see net.sf.plantlore.client.export.Builder
@@ -62,10 +62,6 @@
 	 * @param selection	The set of selected records.
 	 */
 	public DefaultDirector(Builder builder, int result, DBLayer database, Selection selection) {
-		assert(database != null);
-		assert(builder != null);
-		assert(selection != null);
-		
 		this.build = builder; this.result = result; this.database = database;
 		this.selection = selection.clone(); 
 	}
@@ -121,8 +117,11 @@
 			// Iterate over the result of the query.
 			int rows = database.getNumRows( result );
 			for(int i = 0; i < rows && !aborted; i++) {
-				Object[] records = database.next( result );
-				Record record = (Record) records[0];
+				
+				// Abandon the database.nect() Object[] records = database.next( result );
+				Object[] records = database.more( result, i, i );
+				
+				Record record = (Record) ((Object[])records[0])[0]; // [0][0] since we use `more`
 				if( !selection.contains( record ) ) continue; // Is the record selected?
 			
 				count++;

Modified: trunk/src/net/sf/plantlore/client/export/ExportMng.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportMng.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/client/export/ExportMng.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -49,11 +49,11 @@
 	 * List of all filters the Export Manager is capable to handle.
 	 */
 	private XFilter[] filters = new XFilter[] {
-		new XFilter(L10n.getString("FilterDC"), ".xml"),
-		new XFilter(L10n.getString("FilterABCD"), ".xml"),
-		new XFilter(L10n.getString("FilterCSV"), ".txt", ".csv"),
-		new XFilter(L10n.getString("FilterXML"), ".xml"),
-		new XFilter(L10n.getString("FilterPlantloreNative"), ".xml", ".pln")
+			new XFilter(L10n.getString("FilterPlantloreNative"), ".xml", ".pln"),
+			new XFilter(L10n.getString("FilterXML"), true, ".xml"),
+			new XFilter(L10n.getString("FilterCSV"), true, ".txt", ".csv"),	
+			new XFilter(L10n.getString("FilterABCD"), ".xml"),	
+			new XFilter(L10n.getString("FilterDC"), ".xml")
 	};
 	
 	
@@ -62,7 +62,7 @@
 	private Template template;
 	private Selection select;
 	private XFilter filter;
-	private File file;
+	private String filename;
 	private Integer resultId;
 	private DefaultDirector director;
 	private Builder builder;
@@ -78,8 +78,8 @@
 	 * 
 	 * @param dblayer The database layer mediating the access to the database.
 	 * @param result	The result set identificator which is to be iterated over.
-	 * @param selection	The list of selected records. Shouldn't be empty.
-	 * @param template	The list of selected columns.
+	 * @param selection	The list of selected records. 
+	 * @param template	The list of selected columns. <b>Null means everything is selected.</b>
 	 */
 	public ExportMng(DBLayer dblayer, int result, Selection selection, Template template) {
 		setDBLayer(dblayer);
@@ -89,7 +89,7 @@
 	}
 
 	/**
-	 * Create a new Export manager and <b>mark all records as selected</b>.
+	 * Create a new Export manager and <b>mark all records AND columns as selected</b>.
 	 * 
 	 * @param dblayer	The database layer mediating the access to the database.
 	 * @param result	The result set identificator which is to be iterated over.
@@ -104,10 +104,10 @@
 	}
 	
 	/**
-	 * Create a new Export manager.
+	 * Create a new Export manager and <b>mark all columns as selected</b>.
 	 * 
-	 * @param dblayer	The database layer mediating the access to the database. Shouldn't be empty.
-	 * @param result	The result set identificator which is to be iterated over. Shouldn't be empty.
+	 * @param dblayer	The database layer mediating the access to the database. 
+	 * @param result	The result set identificator which is to be iterated over.
 	 * @param selection	The list of selected records. Shouldn't be empty.
 	 */
 	public ExportMng(DBLayer dblayer, int result, Selection selection) {
@@ -120,13 +120,13 @@
 	 * @param dblayer	The database layer mediating the access to the database. Shouldn't be empty.
 	 * @param result	The result set identificator which is to be iterated over. Shouldn't be empty.
 	 * @param selection	The list of selected records. Shouldn't be empty.
-	 * @param template	The list of selected columns.
+	 * @param template	The list of selected columns. <b>Null means everything is selected.</b>
 	 * @param filter	The filter which will be used to determine the appropriate builder of the output.
-	 * @param file	The file where the output will be written.
+	 * @param file	The name of the file where the output will be written.
 	 */
-	public ExportMng(DBLayer dblayer, int result, Selection selection, Template template, XFilter filter, File file) {
+	public ExportMng(DBLayer dblayer, int result, Selection selection, Template template, XFilter filter, String filename) {
 		this(dblayer, result, selection, template);
-		setSelectedFile(file);
+		setSelectedFile(filename);
 		setActiveFileFilter(filter);
 	}
 	
@@ -144,9 +144,13 @@
 	
 	/**
 	 * Store a copy of the <code>template</code>.
+	 * <b>Null means everything is selected!</b>
 	 */
 	synchronized public void setTemplate(Template template) {
-		if(template == null) this.template = null;
+		if(template == null) {
+			this.template = new Template();
+			this.template.setEverything();
+		}
 		else this.template = template.clone();
 	}
 	
@@ -181,10 +185,10 @@
 	 * Set the selected file. Into this file the builder will 
 	 * spit its output. 
 	 */
-	synchronized public void setSelectedFile(File file) { 
-		if(file == null)
+	synchronized public void setSelectedFile(String filename) { 
+		if(filename == null)
 			logger.warn("The selected file is null!");
-		this.file = file; 
+		this.filename = filename; 
 	}
 	
 	/**
@@ -208,14 +212,14 @@
 	 * @throws ExportException	If the information provided is not complete.
 	 * @throws IOException	If anything with the file goes wrong (insufficient disk space, insufficient permissions).
 	 */
-	synchronized public void start(boolean append) throws ExportException, IOException {
+	synchronized public void start() throws ExportException, IOException {
 		// Check if we have all necessary components ready.
 		if( db == null )
 			throw new ExportException("There is no point in starting an export - the DBLayer is not set!");
 		if( filter == null ) 
 			throw new ExportException("The Filter is not set!");
-		if( file == null ) 
-			throw new ExportException("The File is not set!");
+		if( filename == null ) 
+			throw new ExportException("The Filename is not set!");
 		if( select.isEmpty() )
 			throw new ExportException("There is no point in starting an export - the list of selected records is empty!");
 			
@@ -223,8 +227,13 @@
 		logger.debug("Initializing the export environment.");
 		aborted = false;
 		
+		// Create a new file.
+		File file = new File( filter.suggestName(filename) );
+		System.out.println( ">>> " + file );
+		boolean append = ! file.createNewFile();
+		
 		// Create a new writer.
-		writer = new FileWriter( filter.suggestName(file), append );
+		writer = new FileWriter( file, append );
 		if(writer == null) {
 			logger.fatal("Unable to create a new Writer.");
 			throw new ExportException("Unable to create a new Writer.");
@@ -241,6 +250,7 @@
 		// Create a new Director and run it in a separate thread.
 		director = new DefaultDirector(builder, resultId, db, select);
 		director.addObserver(this);
+		
 		current = new Thread( director, "Export" );
 		if(current == null) {
 			logger.fatal("Unable to create a new thread.");
@@ -260,6 +270,8 @@
 					writer.close();
 					exportInProgress = false;
 					logger.debug("Environment cleaned up.");
+					// Notify observers the export has ended.
+					update(null, null);
 				}catch(Exception e) {}
 			}
 		}, "ExportMonitor");
@@ -303,6 +315,7 @@
 	 * @return The number of results that have already been exported.
 	 */
 	public int getNumberOfExported() {
+		if(director == null) return 0;
 		return director.exportedRecords();
 	}
 	

Modified: trunk/src/net/sf/plantlore/client/export/ExportMngCtrlA.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportMngCtrlA.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/client/export/ExportMngCtrlA.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -1,6 +1,7 @@
 package net.sf.plantlore.client.export;
 
 import javax.swing.JFileChooser;
+import javax.swing.JOptionPane;
 
 import net.sf.plantlore.client.export.component.XFilter;
 
@@ -25,14 +26,30 @@
 		if(visible) {
 			int result = view.choice.showDialog(null, "Export");
 			if( result == JFileChooser.APPROVE_OPTION ) {
-				model.setSelectedFile( view.choice.getSelectedFile() );
+				
+				if(view.choice.getSelectedFile() == null) {
+					JOptionPane.showMessageDialog(null,
+							"You must insert a name!",
+						    "Nothing selected...",
+						    JOptionPane.WARNING_MESSAGE);
+					return;
+				}
+				
+				model.setSelectedFile( view.choice.getSelectedFile().getAbsolutePath() );
 				XFilter filter = (XFilter) view.choice.getFileFilter();
 				model.setActiveFileFilter( filter );
 				
 				if( filter.isColumnSelectionEnabled() )
 					viewB.setVisible(true);
-				else
+				else try {
+					model.start();
 					progressView.setVisible(true);
+				} catch(Exception e) {
+					JOptionPane.showMessageDialog(null,
+							"Unable to start the export procedure!\n" + e,
+						    "Export failed...",
+						    JOptionPane.WARNING_MESSAGE);
+				}
 			}
 		}
 	}

Modified: trunk/src/net/sf/plantlore/client/export/ExportMngCtrlB.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportMngCtrlB.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/client/export/ExportMngCtrlB.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -32,7 +32,7 @@
 				view.setVisible(false);
 				model.setTemplate( t ); // Set the new template.
 				try {
-					model.start(true);
+					model.start();
 					progressView.setVisible(true);
 				}
 				catch(Exception e) {

Modified: trunk/src/net/sf/plantlore/client/export/ExportMngViewA.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportMngViewA.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/client/export/ExportMngViewA.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -19,10 +19,10 @@
 
 	
 	private void initComponents() {
-		JFileChooser chooser = new JFileChooser();
-		chooser.setAcceptAllFileFilterUsed(false);
+		choice = new JFileChooser();
+		choice.setAcceptAllFileFilterUsed(false);
 		for( FileFilter filter: model.getFilters() )
-			chooser.addChoosableFileFilter(filter);
+			choice.addChoosableFileFilter(filter);
 	}
 	
 	

Modified: trunk/src/net/sf/plantlore/client/export/ExportProgressCtrl.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportProgressCtrl.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/client/export/ExportProgressCtrl.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -1,20 +1,28 @@
 package net.sf.plantlore.client.export;
 
 import java.awt.event.ActionEvent;
+import java.util.Observable;
+import java.util.Observer;
 
 import javax.swing.AbstractAction;
+import javax.swing.Action;
 import javax.swing.JOptionPane;
 
 //import net.sf.plantlore.l10n.L10n;
 
-public class ExportProgressCtrl {
+public class ExportProgressCtrl implements Observer {
 	
 	private ExportMng model;
 	private ExportProgressView view;
 	
+	private Action abort = new Abort(), close = new Close(), current = close;
+	
+	
+	
 	public ExportProgressCtrl(ExportMng model, ExportProgressView view) {
 		this.model = model; this.view = view;
-		view.abort.addActionListener( new Abort() );
+		view.abort.addActionListener( current );
+		model.addObserver(this);
 	}
 	
 	class Abort extends AbstractAction {
@@ -33,5 +41,31 @@
 				}
 		}
 	}
+	
+	class Close extends AbstractAction {
+		public void actionPerformed(ActionEvent arg0) {
+			view.setVisible(false);		
+		}
+	}
 
+	/**
+	 * Switch the behaviour of the abort button appropriatelly.
+	 */
+	public void update(Observable source, Object parameter) {
+		boolean runs = model.isExportInProgress();
+		if(runs && current == close) {
+			view.abort.removeActionListener(current);
+			current = abort;
+			view.abort.addActionListener(current);
+			view.abort.setText("Abort");
+		} else if(!runs && current == abort) {
+			view.abort.removeActionListener(current);
+			current = close;
+			view.abort.addActionListener(current);
+			view.abort.setText("Close");
+		}
+		
+		
+	}
+
 }

Modified: trunk/src/net/sf/plantlore/client/export/ExportProgressView.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/ExportProgressView.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/client/export/ExportProgressView.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -23,6 +23,8 @@
     	this.model = model;
         initComponents();
         setLocationRelativeTo(null); // center of the screen
+        
+        model.addObserver(this);
     }
     
     /** This method is called from within the constructor to
@@ -101,18 +103,32 @@
     
     
 	public void update(Observable source, Object parameter) {
-		if(model.isAborted()) 
+		if(model.isAborted()) {
 			status.setText("Aborting...");
+		}
+		if(!model.isExportInProgress()) {
+			setTitle("Export completed");
+			status.setText("Completed...");
+			progress.setMaximum(100);
+			progress.setValue(100);
+			progress.setString("100%");
+			
+		}
 		else if( this.isVisible() ) {
 			int count = model.getNumberOfExported();
 			if(count >= 0) {
 				progress.setValue( count );
-				if(total > 0) { 
-					progress.setString( Integer.toString(100*count / total) );
+				if(total > 0) {
+					String percent = Integer.toString(100*count / total) + "%";
+					progress.setString( percent );
 					status.setText("Exporting " + count + ". of " + total);
+					setTitle("Exported " + percent);
 				}
-				else
+				else {
 					status.setText("Exporting " + count + ".");
+					setTitle("Exported " + count);
+				}
+				
 			}
 		}
 	}

Modified: trunk/src/net/sf/plantlore/client/export/Template.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/client/export/Template.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -17,11 +17,18 @@
  * <br/>
  * Note: The template doesn't know anything about the structure
  * (mapping) of the database.  
- *  
+ * <br/>
+ * A little dictionary:
+ * <ul>
+ * <li><i>foreign key</i> a column of a table that refers to another table,</li>
+ * <li><i>property</i> a column of a table that contains a (possibly null) value,
+ * but doesn't refer to another table</li>
+ * <li><i>nn</i> a property that cannot be null (defined in the db model)</li>
+ * </ul>
  * 
  * @author Erik Kratochv?l (discontinuum at gmail.com)
  * @since 2006-04-22
- * @version 1.0
+ * @version 1.1
  */
 public class Template {
 	
@@ -53,7 +60,7 @@
 		return new Template(this);
 	}
 	
-	
+		
 	/** The list of all getters (of all properties of all tables). */
 	private static Hashtable<String,Method> getters = new Hashtable<String, Method>(100);
 	
@@ -105,13 +112,13 @@
 	/** Select the <code>table.column</code>. */
 	public void set(Class table, String column) { 
 		columns.add(table.getSimpleName()+ (column == null ? "" : "."+column));
-		System.out.println(" + " + table.getSimpleName() + (column == null ? "" : "." + column));
+		//System.out.println(" + " + table.getSimpleName() + (column == null ? "" : "." + column));
 	}
 	
 	/** Unselect the <code>table.column</code>. */
 	public void unset(Class table, String column) { 
 		columns.remove(table.getSimpleName()+ (column == null ? "" : "."+column));
-		System.out.println(" - " + table.getSimpleName() + (column == null ? "" : "." + column));
+		//System.out.println(" - " + table.getSimpleName() + (column == null ? "" : "." + column));
 	}
 	
 	/** @return true if the <code>table.column</code> is set.*/
@@ -124,6 +131,38 @@
 		columns.clear(); 
 	}
 	
+	/** Select all columns (properties) of all tables. */
+	public void setEverything() {
+		for(Class table : BASIC_TABLES)
+			setAllProperties(table);
+	}
+	
+	/** Select all not null columns (properties). */
+	public void setEverythingNN() {
+		
+	}
+	
+	/** Select all properties of this <code>table</code>. */
+	public void setAllProperties(Class table) {
+		try {
+			for( String column : ((Record)table.newInstance()).getProperties() )
+				set(table, column);
+		} catch(IllegalAccessException e) {}
+		catch(InstantiationException e) {}
+	}
+	
+	/** Select all not-null properties of the specified <code>table</code>. */
+	public void setAllNN(Class table) {
+		try {
+			Record record = ((Record)table.newInstance());
+			ArrayList<String> nnProperties = record.getNN();
+			nnProperties.removeAll(record.getForeignKeys());
+			for( String column :  nnProperties )
+				set(table, column);
+		} catch(IllegalAccessException e) {}
+		catch(InstantiationException e) {}
+	}
+	
 	/**
 	 * @return true if nothing is selected.
 	 */
@@ -141,5 +180,6 @@
 	public boolean match(Template t) { 
 		return columns.containsAll(t.columns); 
 	}
-
+	
+	
 }

Modified: trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/client/export/builders/CSVBuilder.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -106,7 +106,7 @@
 	 *  @return The converted value.
 	 */ 
 	protected String convertToValidCSV(Object value) throws IOException {
-		if( value == null ) return null; // no value means no output 
+		if( value == null ) return ""; // no value means no output 
 		
 		StringBuilder r = new StringBuilder( value.toString() );
 		boolean containsDoubleQuote = r.indexOf(DOUBLEQUOTE) >= 0, 

Modified: trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/client/export/builders/TrainingBuilder.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -49,7 +49,7 @@
 	}
 	
 	protected void output(Class table, String column, Object value) throws IOException {
-		System.out.println("   " + table.getName() + "." + column + " = " + value.toString());
+		System.out.println("   " + table.getSimpleName() + "." + column + " = " + value);
 	}
 
 }

Modified: trunk/src/net/sf/plantlore/client/export/component/XFilter.java
===================================================================
--- trunk/src/net/sf/plantlore/client/export/component/XFilter.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/client/export/component/XFilter.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -84,13 +84,13 @@
 	 * A valid extension is an extension that belongs to
 	 * the list of extensions of this format.
 	 * 
-	 * @param file	The file to be tested.
+	 * @param filename	The file to be tested.
 	 * @return	True if the file has a valid extension of this format.
 	 */
-	public boolean hasExtension(File file) {
-		int dot = file.getName().lastIndexOf(".");
+	public boolean hasExtension(String filename) {
+		int dot = filename.lastIndexOf(".");
 		if(dot < 0) return false;
-		if(extensions.contains( file.getName().substring(dot) )) return true;
+		if(extensions.contains( filename.substring(dot) )) return true;
 		return false;
 	}
 	
@@ -99,13 +99,13 @@
 	 * If the file already has an extension, the name is not changed.
 	 * An extension is added, if the file has not a valid extension. 
 	 * 
-	 * @param file	The file the name will be derived from.
+	 * @param filename	The name of the file.
 	 * @return The suggested name for this file.
-	 * @see net.sf.plantlore.client.export.component.XFilter#hasExtension(File)
+	 * @see net.sf.plantlore.client.export.component.XFilter#hasExtension(String)
 	 */
-	public String suggestName(File file) {
-		if(hasExtension(file)) return file.getName();
-		else return file.getName() + extensions.get(0);
+	public String suggestName(String filename) {
+		if(hasExtension(filename)) return filename;
+		else return filename + extensions.get(0);
 	}
 	
 }
\ No newline at end of file

Modified: trunk/src/net/sf/plantlore/common/record/Record.java
===================================================================
--- trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/common/record/Record.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -38,7 +38,10 @@
 		return properties;
 	}
 	
-	
+	/**
+	 * 
+	 * @return All not-null columns (including foreign keys).
+	 */
 	public ArrayList<String> getNN() {
 		ArrayList<String> nn = getForeignKeys();
 		return nn;

Modified: trunk/src/net/sf/plantlore/server/HibernateDBLayer.java
===================================================================
--- trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-30 17:06:44 UTC (rev 198)
+++ trunk/src/net/sf/plantlore/server/HibernateDBLayer.java	2006-04-30 20:06:28 UTC (rev 199)
@@ -125,7 +125,9 @@
         } catch (HibernateException e) {
             logger.fatal("Cannot build Hibernate session factory. Details: "+e.getMessage());
             throw new DBLayerException("Cannot build Hibernate session factory. Details: "+e.getMessage());
-        }        
+        }   
+        
+/* ===== SWITCH OFF THE SILLY AUTHENTICATION ===========================================        
         // Authenticate user
         try {
             SelectQuery sq = this.createQuery(User.class);            
@@ -146,6 +148,7 @@
             this.rights = clientUser.getRight();           
             this.plantloreUser = clientUser;
         }
+*/
         return rights;
     }    
     
@@ -478,7 +481,7 @@
         // Move ResultSet to the first row we want to read. In case we want to read the first row,
         // move the pointer before the first row, else move it to the given position
         try {
-            if (from > 1) {
+            if (from >= 1) {
                 res.setRowNumber(from-1);
             } else {
                 res.beforeFirst();



